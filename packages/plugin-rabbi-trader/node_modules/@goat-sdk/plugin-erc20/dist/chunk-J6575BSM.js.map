{"version":3,"sources":["/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/plugins/erc20/dist/chunk-J6575BSM.js","../src/methods.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACA;ACHA,4BAAwC;AASxC,MAAA,SAAsB,SAAA,CACrB,YAAA,EACA,KAAA,EACA,UAAA,EACkB;AAClB,EAAA,IAAI;AACH,IAAA,MAAM,sBAAA,EAAwB,MAAM,YAAA,CAAa,cAAA;AAAA,MAChD,UAAA,CAAW;AAAA,IACZ,CAAA;AAEA,IAAA,MAAM,WAAA,EAAa,MAAM,YAAA,CAAa,IAAA,CAAK;AAAA,MAC1C,OAAA,EAAS,KAAA,CAAM,eAAA;AAAA,MACf,GAAA,EAAK,0BAAA;AAAA,MACL,YAAA,EAAc,WAAA;AAAA,MACd,IAAA,EAAM,CAAC,qBAAqB;AAAA,IAC7B,CAAC,CAAA;AAED,IAAA,OAAO,+BAAA,UAAY,CAAW,KAAA,EAAiB,KAAA,CAAM,QAAQ,CAAA;AAAA,EAC9D,EAAA,MAAA,CAAS,KAAA,EAAO;AACf,IAAA,MAAM,KAAA,CAAM,CAAA,yBAAA,EAA4B,KAAK,CAAA,CAAA;AAC9C,EAAA;AACD;AAKC;AAEI,EAAA;AACkC,IAAA;AAEE,IAAA;AAC3B,MAAA;AACZ,IAAA;AAEgC,IAAA;AACrB,MAAA;AACL,MAAA;AACS,MAAA;AACmB,MAAA;AACjC,IAAA;AAEW,IAAA;AACG,EAAA;AAC2B,IAAA;AAC3C,EAAA;AACD;ADjBkD;AACA;AACA;AACA;AACA","file":"/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/plugins/erc20/dist/chunk-J6575BSM.js","sourcesContent":[null,"import type { EVMWalletClient } from \"@goat-sdk/core\";\nimport { formatUnits, parseUnits } from \"viem\";\nimport type { z } from \"zod\";\nimport { ERC20_ABI } from \"./abi\";\nimport type {\n\tgetBalanceParametersSchema,\n\ttransferParametersSchema,\n} from \"./parameters\";\nimport type { ChainSpecificToken } from \"./token\";\n\nexport async function balanceOf(\n\twalletClient: EVMWalletClient,\n\ttoken: ChainSpecificToken,\n\tparameters: z.infer<typeof getBalanceParametersSchema>,\n): Promise<string> {\n\ttry {\n\t\tconst resolvedWalletAddress = await walletClient.resolveAddress(\n\t\t\tparameters.wallet,\n\t\t);\n\n\t\tconst rawBalance = await walletClient.read({\n\t\t\taddress: token.contractAddress,\n\t\t\tabi: ERC20_ABI,\n\t\t\tfunctionName: \"balanceOf\",\n\t\t\targs: [resolvedWalletAddress],\n\t\t});\n\n\t\treturn formatUnits(rawBalance.value as bigint, token.decimals);\n\t} catch (error) {\n\t\tthrow Error(`Failed to fetch balance: ${error}`);\n\t}\n}\n\nexport async function transfer(\n\twalletClient: EVMWalletClient,\n\ttoken: ChainSpecificToken,\n\tparameters: z.infer<typeof transferParametersSchema>,\n): Promise<string> {\n\ttry {\n\t\tconst amountInBaseUnits = parseUnits(parameters.amount, token.decimals);\n\n\t\tconst resolvedRecipientAddress = await walletClient.resolveAddress(\n\t\t\tparameters.to,\n\t\t);\n\n\t\tconst hash = await walletClient.sendTransaction({\n\t\t\tto: token.contractAddress,\n\t\t\tabi: ERC20_ABI,\n\t\t\tfunctionName: \"transfer\",\n\t\t\targs: [resolvedRecipientAddress, amountInBaseUnits],\n\t\t});\n\n\t\treturn hash.hash;\n\t} catch (error) {\n\t\tthrow Error(`Failed to transfer: ${error}`);\n\t}\n}\n"]}