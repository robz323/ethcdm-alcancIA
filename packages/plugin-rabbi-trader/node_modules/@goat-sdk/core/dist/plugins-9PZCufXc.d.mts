import { z } from 'zod';
import { WalletClient, Chain } from './wallets/core.mjs';
import { ChainForWalletClient, AnyEVMWalletClient } from './wallets/utils.mjs';

type Tool = {
    name: string;
    description: string;
    parameters: z.ZodSchema;
    method: (parameters: z.infer<z.ZodSchema>) => string | Promise<string>;
};
type GetToolsParams<TWalletClient extends WalletClient> = {
    wallet: TWalletClient;
    plugins?: (Plugin<TWalletClient> | Plugin<WalletClient>)[];
    wordForTool?: string;
};
declare function getTools<TWalletClient extends WalletClient>({ wallet, plugins, wordForTool, }: GetToolsParams<TWalletClient>): Promise<Tool[]>;
/**
 * Deferred tools defer which wallet client to be passed to the method until the tool is called.
 */
type DeferredTool<TWalletClient extends WalletClient> = {
    name: string;
    description: string;
    parameters: z.ZodSchema;
    method: (walletClient: TWalletClient, parameters: z.infer<z.ZodSchema>) => string | Promise<string>;
};
type GetDeferredToolsParams<TWalletClient extends WalletClient> = {
    chain: ChainForWalletClient<TWalletClient>;
    plugins?: (Plugin<TWalletClient> | Plugin<WalletClient>)[];
    supportsSmartWallets?: boolean;
    wordForTool?: string;
};
declare function getDeferredTools<TWalletClient extends AnyEVMWalletClient | WalletClient>({ chain, supportsSmartWallets, wordForTool, plugins, }: GetDeferredToolsParams<TWalletClient>): Promise<DeferredTool<TWalletClient>[]>;

/**
 * Plugin interface that can be chain-specific or chain-agnostic.
 * Defaults to WalletClient for chain-agnostic plugins.
 *
 * @param TWalletClient - The type of wallet client to support. Defaults to WalletClient for chain-agnostic plugins.
 * @param name - The name of the plugin.
 * @param supportsChain - A function that returns true if the plugin supports the given chain.
 * @param supportsSmartWallets - A function that returns true if the plugin supports smart wallets.
 * @param getTools - A function that returns the tools provided by the plugin.
 */
interface Plugin<TWalletClient extends WalletClient = WalletClient> {
    name: string;
    supportsChain: (chain: Chain) => boolean;
    supportsSmartWallets: () => boolean;
    getTools: (chain: ChainForWalletClient<TWalletClient>) => Promise<DeferredTool<TWalletClient>[]>;
}

export { type DeferredTool as D, type GetToolsParams as G, type Plugin as P, type Tool as T, getDeferredTools as a, type GetDeferredToolsParams as b, getTools as g };
