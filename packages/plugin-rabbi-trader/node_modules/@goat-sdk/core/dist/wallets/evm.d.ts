import { Abi, TypedDataDomain as TypedDataDomain$1 } from 'abitype';
import { WalletClient, Signature } from './core.js';

declare function isEVMWalletClient(wallet: WalletClient): wallet is EVMWalletClient;
type EVMTransaction = {
    to: string;
    functionName?: string;
    args?: unknown[];
    value?: bigint;
    abi?: Abi;
};
type EVMReadRequest = {
    address: string;
    functionName: string;
    args?: unknown[];
    abi: Abi;
};
type EVMTransactionResult = {
    hash: string;
    status: string;
};
type EVMReadResult = {
    value: unknown;
};
type EVMTypedData = {
    domain: TypedDataDomain;
    types: Record<string, unknown>;
    primaryType: string;
    message: Record<string, unknown>;
};
type TypedDataDomain = TypedDataDomain$1;
interface EVMWalletClient extends WalletClient {
    sendTransaction: (transaction: EVMTransaction) => Promise<EVMTransactionResult>;
    read: (request: EVMReadRequest) => Promise<EVMReadResult>;
    resolveAddress: (address: string) => Promise<`0x${string}`>;
    signTypedData: (data: EVMTypedData) => Promise<Signature>;
}

export { type EVMReadRequest, type EVMReadResult, type EVMTransaction, type EVMTransactionResult, type EVMTypedData, type EVMWalletClient, type TypedDataDomain, isEVMWalletClient };
