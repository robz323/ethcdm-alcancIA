// src/utils.ts
import { z } from "zod";
function addParametersToDescription(description, schema) {
  let paramLines = [];
  if (schema instanceof z.ZodObject) {
    const shape = schema.shape;
    paramLines = Object.entries(shape).map(([key, value]) => {
      const isOptional = value.isOptional();
      const paramDescription = value.description || "";
      const typeStr = getTypeString(value);
      return `- ${key}${isOptional ? " (optional)" : ""} (${typeStr}): ${paramDescription}`;
    });
  } else {
    const isOptional = schema.isOptional();
    const paramDescription = schema.description || "";
    const typeStr = getTypeString(schema);
    paramLines.push(
      `- ${isOptional ? "(optional) " : ""}(${typeStr}): ${paramDescription}`
    );
  }
  return `${description}
${paramLines.join("\n")}`;
}
function getTypeString(schema) {
  if (schema instanceof z.ZodString) {
    return "string";
  }
  if (schema instanceof z.ZodNumber) {
    return "number";
  }
  if (schema instanceof z.ZodBoolean) {
    return "boolean";
  }
  if (schema instanceof z.ZodArray) {
    return "array";
  }
  if (schema instanceof z.ZodObject) {
    return "object";
  }
  return "unknown";
}
function replaceToolPlaceholder(template, wordForTool = "tool") {
  const placeholderRegex = /\{\{\s*tool\s*\}\}/g;
  return template.replace(placeholderRegex, wordForTool);
}
function parametersToJsonExample(parameters) {
  const exampleObject = generateExample(parameters);
  return JSON.stringify(exampleObject, null, 2);
  function generateExample(schema) {
    if (schema instanceof z.ZodString) {
      return "string";
    }
    if (schema instanceof z.ZodNumber) {
      return 0;
    }
    if (schema instanceof z.ZodBoolean) {
      return false;
    }
    if (schema instanceof z.ZodArray) {
      const elementSchema = schema._def.type;
      return [generateExample(elementSchema)];
    }
    if (schema instanceof z.ZodObject) {
      const shape = schema._def.shape();
      const obj = {};
      for (const [key, valueSchema] of Object.entries(shape)) {
        obj[key] = generateExample(valueSchema);
      }
      return obj;
    }
    if (schema instanceof z.ZodOptional || schema instanceof z.ZodNullable) {
      const innerSchema = schema.unwrap();
      return generateExample(innerSchema);
    }
    if (schema instanceof z.ZodUnion) {
      const options = schema._def.options;
      return generateExample(options[0]);
    }
    if (schema instanceof z.ZodLiteral) {
      return schema._def.value;
    }
    if (schema instanceof z.ZodEnum) {
      return schema._def.values[0];
    }
    if (schema instanceof z.ZodDefault) {
      return generateExample(schema._def.innerType);
    }
    return null;
  }
}

export {
  addParametersToDescription,
  replaceToolPlaceholder,
  parametersToJsonExample
};
//# sourceMappingURL=chunk-4OE63QHV.mjs.map