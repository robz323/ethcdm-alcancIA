{"version":3,"sources":["/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/core/dist/chunk-VX7PVRBV.js","../src/utils.ts"],"names":[],"mappings":"AAAA;ACCA,0BAAkB;AAEX,SAAS,0BAAA,CACZ,WAAA,EACA,MAAA,EACM;AACN,EAAA,IAAI,WAAA,EAAuB,CAAC,CAAA;AAE5B,EAAA,GAAA,CAAI,OAAA,WAAkB,MAAA,CAAE,SAAA,EAAW;AAC/B,IAAA,MAAM,MAAA,EAAQ,MAAA,CAAO,KAAA;AACrB,IAAA,WAAA,EAAa,MAAA,CAAO,OAAA,CAAoB,KAAK,CAAA,CAAE,GAAA,CAAI,CAAC,CAAC,GAAA,EAAK,KAAK,CAAA,EAAA,GAAM;AACjE,MAAA,MAAM,WAAA,EAAa,KAAA,CAAM,UAAA,CAAW,CAAA;AACpC,MAAA,MAAM,iBAAA,EAAmB,KAAA,CAAM,YAAA,GAAe,EAAA;AAC9C,MAAA,MAAM,QAAA,EAAU,aAAA,CAAc,KAAK,CAAA;AAEnC,MAAA,OAAO,CAAA,EAAA,EAAK,GAAG,CAAA,EAAA;AAGlB,IAAA;AACE,EAAA;AACG,IAAA;AACA,IAAA;AACU,IAAA;AAEL,IAAA;AAEH,MAAA;AAER,IAAA;AACJ,EAAA;AAEU,EAAA;AAAoC;AAClD;AAES;AACD,EAAA;AACO,IAAA;AACX,EAAA;AACI,EAAA;AACO,IAAA;AACX,EAAA;AACI,EAAA;AACO,IAAA;AACX,EAAA;AACI,EAAA;AACO,IAAA;AACX,EAAA;AACI,EAAA;AACO,IAAA;AACX,EAAA;AACO,EAAA;AACX;AAEgB;AAIN,EAAA;AACU,EAAA;AACpB;AAEgB;AACN,EAAA;AACM,EAAA;AAEH,EAAA;AACD,IAAA;AACO,MAAA;AACX,IAAA;AACI,IAAA;AACO,MAAA;AACX,IAAA;AACI,IAAA;AACO,MAAA;AACX,IAAA;AACI,IAAA;AACM,MAAA;AACE,MAAA;AACZ,IAAA;AACI,IAAA;AACc,MAAA;AACwB,MAAA;AAC1B,MAAA;AACG,QAAA;AACf,MAAA;AACO,MAAA;AACX,IAAA;AAEI,IAAA;AAGM,MAAA;AACC,MAAA;AACX,IAAA;AACI,IAAA;AACgB,MAAA;AACT,MAAA;AACX,IAAA;AACI,IAAA;AACc,MAAA;AAClB,IAAA;AACI,IAAA;AACc,MAAA;AAClB,IAAA;AACI,IAAA;AACO,MAAA;AACX,IAAA;AACO,IAAA;AACX,EAAA;AACJ;ADpBsB;AACA;AACA;AACA;AACA;AACA","file":"/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/core/dist/chunk-VX7PVRBV.js","sourcesContent":[null,"import type { ZodTypeAny } from \"zod\";\nimport { z } from \"zod\";\n\nexport function addParametersToDescription(\n    description: string,\n    schema: z.ZodTypeAny\n): string {\n    let paramLines: string[] = [];\n\n    if (schema instanceof z.ZodObject) {\n        const shape = schema.shape;\n        paramLines = Object.entries<ZodTypeAny>(shape).map(([key, value]) => {\n            const isOptional = value.isOptional();\n            const paramDescription = value.description || \"\";\n            const typeStr = getTypeString(value);\n\n            return `- ${key}${\n                isOptional ? \" (optional)\" : \"\"\n            } (${typeStr}): ${paramDescription}`;\n        });\n    } else {\n        const isOptional = schema.isOptional();\n        const paramDescription = schema.description || \"\";\n        const typeStr = getTypeString(schema);\n\n        paramLines.push(\n            `- ${\n                isOptional ? \"(optional) \" : \"\"\n            }(${typeStr}): ${paramDescription}`\n        );\n    }\n\n    return `${description}\\n${paramLines.join(\"\\n\")}`;\n}\n\nfunction getTypeString(schema: z.ZodTypeAny): string {\n    if (schema instanceof z.ZodString) {\n        return \"string\";\n    }\n    if (schema instanceof z.ZodNumber) {\n        return \"number\";\n    }\n    if (schema instanceof z.ZodBoolean) {\n        return \"boolean\";\n    }\n    if (schema instanceof z.ZodArray) {\n        return \"array\";\n    }\n    if (schema instanceof z.ZodObject) {\n        return \"object\";\n    }\n    return \"unknown\";\n}\n\nexport function replaceToolPlaceholder(\n    template: string,\n    wordForTool = \"tool\"\n): string {\n    const placeholderRegex = /\\{\\{\\s*tool\\s*\\}\\}/g;\n    return template.replace(placeholderRegex, wordForTool);\n}\n\nexport function parametersToJsonExample(parameters: z.ZodTypeAny): string {\n    const exampleObject = generateExample(parameters);\n    return JSON.stringify(exampleObject, null, 2);\n\n    function generateExample(schema: z.ZodTypeAny): unknown {\n        if (schema instanceof z.ZodString) {\n            return \"string\";\n        }\n        if (schema instanceof z.ZodNumber) {\n            return 0;\n        }\n        if (schema instanceof z.ZodBoolean) {\n            return false;\n        }\n        if (schema instanceof z.ZodArray) {\n            const elementSchema = schema._def.type;\n            return [generateExample(elementSchema)];\n        }\n        if (schema instanceof z.ZodObject) {\n            const shape = schema._def.shape();\n            const obj: Record<string, unknown> = {};\n            for (const [key, valueSchema] of Object.entries(shape)) {\n                obj[key] = generateExample(valueSchema as ZodTypeAny);\n            }\n            return obj;\n        }\n        if (\n            schema instanceof z.ZodOptional ||\n            schema instanceof z.ZodNullable\n        ) {\n            const innerSchema = schema.unwrap();\n            return generateExample(innerSchema);\n        }\n        if (schema instanceof z.ZodUnion) {\n            const options = schema._def.options;\n            return generateExample(options[0]); // Use the first option as an example\n        }\n        if (schema instanceof z.ZodLiteral) {\n            return schema._def.value;\n        }\n        if (schema instanceof z.ZodEnum) {\n            return schema._def.values[0]; // Use the first enum value as an example\n        }\n        if (schema instanceof z.ZodDefault) {\n            return generateExample(schema._def.innerType);\n        }\n        return null; // Default value if type is unrecognized\n    }\n}\n"]}