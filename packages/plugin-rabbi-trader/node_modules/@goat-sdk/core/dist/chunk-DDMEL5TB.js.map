{"version":3,"sources":["/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/core/dist/chunk-DDMEL5TB.js","../src/plugins/send-sol.ts"],"names":[],"mappings":"AAAA;ACAA,yCAA0B;AAC1B,4BAA2B;AAG3B,0BAAkB;AAClB;AAEO,SAAS,OAAA,CAAA,EAAsC;AAClD,EAAA,OAAO;AAAA,IACH,IAAA,EAAM,UAAA;AAAA,IACN,oBAAA,EAAsB,CAAA,EAAA,GAAM,IAAA;AAAA,IAC5B,aAAA,EAAe,CAAC,KAAA,EAAA,GAAU,KAAA,CAAM,KAAA,IAAS,QAAA;AAAA,IACzC,QAAA,EAAU,MAAA,CAAA,EAAA,GAAY;AAClB,MAAA,OAAO;AAAA,QACH;AAAA,UACI,IAAA,EAAM,UAAA;AAAA,UACN,WAAA,EACI,0DAAA;AAAA,UACJ,UAAA,EAAY,uBAAA;AAAA,UACZ,MAAA,EAAQ;AAAA,QACZ;AAAA,MACJ,CAAA;AAAA,IACJ;AAAA,EACJ,CAAA;AACJ;AAEA,IAAM,wBAAA,EAA0B,MAAA,CAAE,MAAA,CAAO;AAAA,EACrC,EAAA,EAAI,MAAA,CAAE,MAAA,CAAO,CAAA,CAAE,QAAA,CAAS,4BAA4B,CAAA;AAAA,EACpD,MAAA,EAAQ,MAAA,CAAE,MAAA,CAAO,CAAA,CAAE,QAAA,CAAS,2BAA2B;AAC3D,CAAC,CAAA;AAED,MAAA,SAAe,aAAA,CACX,YAAA,EACA,UAAA,EACe;AACf,EAAA,IAAI;AACA,IAAA,MAAM,EAAE,EAAA,EAAI,OAAO,EAAA,EAAI,UAAA;AAEvB,IAAA,MAAM,cAAA,EAAgB,YAAA,CAAa,UAAA,CAAW,CAAA;AAC9C,IAAA,MAAM,SAAA,EAAW,8BAAA,MAAW,EAAQ,CAAC,CAAA;AAErC,IAAA,MAAM,oBAAA,EAAsB,qBAAA,CAAc,QAAA,CAAS;AAAA,MAC/C,UAAA,EAAY,IAAI,sBAAA,CAAU,aAAa,CAAA;AAAA,MACvC,QAAA,EAAU,IAAI,sBAAA,CAAU,EAAE,CAAA;AAAA,MAC1B;AAAA,IACJ,CAAC,CAAA;AAED,IAAA,MAAM,SAAA,EAAW,MAAM,YAAA,CAAa,eAAA,CAAgB;AAAA,MAChD,YAAA,EAAc,CAAC,mBAAmB;AAAA,IACtC,CAAC,CAAA;AAED,IAAA,OAAO,QAAA,CAAS,IAAA;AAAA,EACpB,EAAA,MAAA,CAAS,KAAA,EAAO;AACZ,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,oBAAA,EAAuB,KAAK,CAAA,CAAA;AAChD,EAAA;AACJ;ADXiD;AACA;AACA;AACA","file":"/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/core/dist/chunk-DDMEL5TB.js","sourcesContent":[null,"import { PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"viem\";\nimport type { SolanaWalletClient } from \"../wallets\";\nimport type { Plugin } from \"./plugins\";\nimport { z } from \"zod\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nexport function sendSOL(): Plugin<SolanaWalletClient> {\n    return {\n        name: \"send_sol\",\n        supportsSmartWallets: () => true,\n        supportsChain: (chain) => chain.type === \"solana\",\n        getTools: async () => {\n            return [\n                {\n                    name: \"send_sol\",\n                    description:\n                        \"This {{tool}} sends SOL to an address on a Solana chain.\",\n                    parameters: sendSOLParametersSchema,\n                    method: sendSOLMethod,\n                },\n            ];\n        },\n    };\n}\n\nconst sendSOLParametersSchema = z.object({\n    to: z.string().describe(\"The address to send SOL to\"),\n    amount: z.string().describe(\"The amount of SOL to send\"),\n});\n\nasync function sendSOLMethod(\n    walletClient: SolanaWalletClient,\n    parameters: z.infer<typeof sendSOLParametersSchema>\n): Promise<string> {\n    try {\n        const { to, amount } = parameters;\n\n        const senderAddress = walletClient.getAddress();\n        const lamports = parseUnits(amount, 9);\n\n        const transferInstruction = SystemProgram.transfer({\n            fromPubkey: new PublicKey(senderAddress),\n            toPubkey: new PublicKey(to),\n            lamports,\n        });\n\n        const txResult = await walletClient.sendTransaction({\n            instructions: [transferInstruction],\n        });\n\n        return txResult.hash;\n    } catch (error) {\n        throw new Error(`Failed to send SOL: ${error}`);\n    }\n}\n"]}