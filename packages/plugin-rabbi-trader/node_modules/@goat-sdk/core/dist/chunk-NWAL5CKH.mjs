import {
  deferredSolanaTools
} from "./chunk-ACIH3V7B.mjs";
import {
  isEVMChain,
  isSolanaChain
} from "./chunk-6AF6BBEB.mjs";
import {
  isEVMSmartWalletClient
} from "./chunk-E2ICHVCA.mjs";
import {
  replaceToolPlaceholder
} from "./chunk-4OE63QHV.mjs";
import {
  deferredEVMCoreTools
} from "./chunk-OUZOPNJS.mjs";

// src/tools.ts
async function getTools({
  wallet,
  plugins = [],
  wordForTool
}) {
  const chain = wallet.getChain();
  const tools = await getDeferredTools({
    chain,
    plugins,
    supportsSmartWallets: isEVMSmartWalletClient(wallet),
    wordForTool
  });
  return tools.map((tool) => ({
    ...tool,
    method: (parameters) => tool.method(wallet, parameters)
  }));
}
async function getDeferredTools({
  chain,
  supportsSmartWallets = false,
  wordForTool = "tool",
  plugins = []
}) {
  const tools = [];
  if (isEVMChain(chain)) {
    tools.push(
      ...deferredEVMCoreTools
    );
  } else if (isSolanaChain(chain)) {
    tools.push(
      ...deferredSolanaTools
    );
  } else {
    throw new Error(`Unsupported chain type: ${chain.type}`);
  }
  for (const plugin of plugins) {
    if (!plugin.supportsChain(chain)) {
      console.warn(
        `Plugin ${plugin.name} does not support chain ${chain.type}. Skipping.`
      );
      continue;
    }
    if (!plugin.supportsSmartWallets() && supportsSmartWallets) {
      console.warn(
        `Plugin ${plugin.name} does not support smart wallets. Skipping.`
      );
      continue;
    }
    const pluginTools = await plugin.getTools(chain);
    if (pluginTools.length === 0) {
      console.warn(`Plugin ${plugin.name} returned no tools. Skipping.`);
      continue;
    }
    tools.push(...pluginTools);
  }
  return tools.map((tool) => ({
    ...tool,
    description: replaceToolPlaceholder(tool.description, wordForTool)
  }));
}

export {
  getTools,
  getDeferredTools
};
//# sourceMappingURL=chunk-NWAL5CKH.mjs.map