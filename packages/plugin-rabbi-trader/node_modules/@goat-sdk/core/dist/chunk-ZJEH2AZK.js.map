{"version":3,"sources":["/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/core/dist/chunk-ZJEH2AZK.js","../src/tools.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;ACIA,MAAA,SAAsB,QAAA,CAA6C;AAAA,EAC/D,MAAA;AAAA,EACA,QAAA,EAAU,CAAC,CAAA;AAAA,EACX;AACJ,CAAA,EAAmD;AAC/C,EAAA,MAAM,MAAA,EAAQ,MAAA,CAAO,QAAA,CAAS,CAAA;AAE9B,EAAA,MAAM,MAAA,EACF,MAAM,gBAAA,CAAgC;AAAA,IAClC,KAAA;AAAA,IACA,OAAA;AAAA,IACA,oBAAA,EAAsB,qDAAA,MAA6B,CAAA;AAAA,IACnD;AAAA,EACJ,CAAC,CAAA;AAEL,EAAA,OAAO,KAAA,CAAM,GAAA,CAAI,CAAC,IAAA,EAAA,GAAA,CAAU;AAAA,IACxB,GAAG,IAAA;AAAA,IACH,MAAA,EAAQ,CAAC,UAAA,EAAA,GAAe,IAAA,CAAK,MAAA,CAAO,MAAA,EAAQ,UAAU;AAAA,EAC1D,CAAA,CAAE,CAAA;AACN;AAsBA,MAAA,SAAsB,gBAAA,CAEpB;AAAA,EACE,KAAA;AAAA,EACA,qBAAA,EAAuB,KAAA;AAAA,EACvB,YAAA,EAAc,MAAA;AAAA,EACd,QAAA,EAAU,CAAC;AACf,CAAA,EAEE;AACE,EAAA,MAAM,MAAA,EAAuC,CAAC,CAAA;AAE9C,EAAA,GAAA,CAAI,yCAAA,KAAgB,CAAA,EAAG;AAEnB,IAAA,KAAA,CAAM,IAAA;AAAA,MACF,GAAI;AAAA,IACR,CAAA;AAAA,EACJ,EAAA,KAAA,GAAA,CAAW,4CAAA,KAAmB,CAAA,EAAG;AAE7B,IAAA,KAAA,CAAM,IAAA;AAAA,MACF,GAAI;AAAA,IACR,CAAA;AAAA,EACJ,EAAA,KAAO;AACH,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,wBAAA,EAA2B,KAAA,CAAM,IAAI,CAAA,CAAA;AACzD,EAAA;AAE8B,EAAA;AACQ,IAAA;AACtB,MAAA;AAC4C,QAAA;AACpD,MAAA;AACA,MAAA;AACJ,IAAA;AAEsC,IAAA;AAC1B,MAAA;AACiB,QAAA;AACzB,MAAA;AACA,MAAA;AACJ,IAAA;AAE+C,IAAA;AAEjB,IAAA;AACQ,MAAA;AAClC,MAAA;AACJ,IAAA;AAEyB,IAAA;AAC7B,EAAA;AAE4B,EAAA;AACrB,IAAA;AACmD,IAAA;AACxD,EAAA;AACN;ADvC0D;AACA;AACA;AACA;AACA","file":"/Users/0xaguspunk/github.com/crossmint/goat/typescript/packages/core/dist/chunk-ZJEH2AZK.js","sourcesContent":[null,"import type { z } from \"zod\";\nimport { deferredEVMCoreTools } from \"./evm/tools\";\nimport type { Plugin } from \"./plugins/plugins\";\nimport { deferredSolanaTools } from \"./solana/tools\";\nimport type { WalletClient, ChainForWalletClient, AnyEVMWalletClient } from \"./wallets\";\nimport { replaceToolPlaceholder } from \"./utils\";\nimport { isEVMChain, isEVMSmartWalletClient, isSolanaChain } from \"./wallets\";\n\nexport type Tool = {\n    name: string;\n    description: string;\n    parameters: z.ZodSchema;\n    method: (parameters: z.infer<z.ZodSchema>) => string | Promise<string>;\n};\n\nexport type GetToolsParams<TWalletClient extends WalletClient> = {\n    wallet: TWalletClient;\n    plugins?: (Plugin<TWalletClient> | Plugin<WalletClient>)[];\n    wordForTool?: string;\n};\n\nexport async function getTools<TWalletClient extends WalletClient>({\n    wallet,\n    plugins = [],\n    wordForTool,\n}: GetToolsParams<TWalletClient>): Promise<Tool[]> {\n    const chain = wallet.getChain() as ChainForWalletClient<TWalletClient>;\n\n    const tools: DeferredTool<TWalletClient>[] =\n        await getDeferredTools<TWalletClient>({\n            chain,\n            plugins,\n            supportsSmartWallets: isEVMSmartWalletClient(wallet),\n            wordForTool,\n        });\n\n    return tools.map((tool) => ({\n        ...tool,\n        method: (parameters) => tool.method(wallet, parameters),\n    }));\n}\n\n/**\n * Deferred tools defer which wallet client to be passed to the method until the tool is called.\n */\nexport type DeferredTool<TWalletClient extends WalletClient> = {\n    name: string;\n    description: string;\n    parameters: z.ZodSchema;\n    method: (\n        walletClient: TWalletClient,\n        parameters: z.infer<z.ZodSchema>\n    ) => string | Promise<string>;\n};\n\nexport type GetDeferredToolsParams<TWalletClient extends WalletClient> = {\n    chain: ChainForWalletClient<TWalletClient>;\n    plugins?: (Plugin<TWalletClient> | Plugin<WalletClient>)[];\n    supportsSmartWallets?: boolean;\n    wordForTool?: string;\n};\n\nexport async function getDeferredTools<\n    TWalletClient extends AnyEVMWalletClient | WalletClient\n>({\n    chain,\n    supportsSmartWallets = false,\n    wordForTool = \"tool\",\n    plugins = [],\n}: GetDeferredToolsParams<TWalletClient>): Promise<\n    DeferredTool<TWalletClient>[]\n> {\n    const tools: DeferredTool<TWalletClient>[] = [];\n\n    if (isEVMChain(chain)) {\n        // We know that TWalletClient is compatible with EVMWalletClient here\n        tools.push(\n            ...(deferredEVMCoreTools as unknown as DeferredTool<TWalletClient>[])\n        );\n    } else if (isSolanaChain(chain)) {\n        // We know that TWalletClient is compatible with SolanaWalletClient here\n        tools.push(\n            ...(deferredSolanaTools as unknown as DeferredTool<TWalletClient>[])\n        );\n    } else {\n        throw new Error(`Unsupported chain type: ${chain.type}`);\n    }\n\n    for (const plugin of plugins) {\n        if (!plugin.supportsChain(chain)) {\n            console.warn(\n                `Plugin ${plugin.name} does not support chain ${chain.type}. Skipping.`\n            );\n            continue;\n        }\n\n        if (!plugin.supportsSmartWallets() && supportsSmartWallets) {\n            console.warn(\n                `Plugin ${plugin.name} does not support smart wallets. Skipping.`\n            );\n            continue;\n        }\n\n        const pluginTools = await plugin.getTools(chain);\n\n        if (pluginTools.length === 0) {\n            console.warn(`Plugin ${plugin.name} returned no tools. Skipping.`);\n            continue;\n        }\n\n        tools.push(...pluginTools);\n    }\n\n    return tools.map((tool) => ({\n        ...tool,\n        description: replaceToolPlaceholder(tool.description, wordForTool),\n    }));\n}\n"]}