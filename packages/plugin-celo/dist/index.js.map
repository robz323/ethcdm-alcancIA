{"version":3,"sources":["../src/actions/createCeloWallet.ts","../src/enviroment.ts","../src/examples.ts","../src/services.ts","../src/actions/getBalance.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateTatumConfig } from \"../enviroment\";\nimport { createWalletCelo } from \"../examples\";\nimport { createTATUMService } from \"../services\";\n\n\nexport const createWalletCeloAction: Action = {\n    name: \"CREATE_WALLET_CELO\",\n    similes: [\n        \"CREAR WALLET\",\n        \"GENERAR WALLET\",\n        \"DAME UNA WALLET\",\n        \"CREA UNA CUENTA\",\n        \"NECESITO UNA CUENTA\",\n        \"NECESITO UNA WALLET\"\n    ],\n    description: \"Create a Wallet Celo\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateTatumConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n\n        const config = await validateTatumConfig(runtime);\n        const tatumService = createTATUMService(\n            config.TATUM_API_KEY\n        );\n\n        try {\n            const CWData = await tatumService.createCeloWallet();\n            elizaLogger.success(\n                `Successfully fetched CWData`\n            );\n            if (callback) {\n                callback({\n                    text: `‚úç Esta es tu frase semilla: [${CWData.mnemonic}]\nüí≥ Aqu√≠ tienes tu llave publica: ${CWData.address}\nüö® Esta es tu llave privada: ${CWData.key} `\n                });\n                return true;\n            }\n        } catch (error:any) {\n            elizaLogger.error(\"Error in TATUM plugin handler:\", error);\n            callback({\n                text: `Error fetching TATUM Create Wallet: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: createWalletCelo as ActionExample[][],\n} as Action;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const tatumEnvSchema = z.object({\n    TATUM_API_KEY: z.string().min(1, \"Tatum API key is required\"),\n});\n\nexport type tatumConfig = z.infer<typeof tatumEnvSchema>;\n\nexport async function validateTatumConfig(\n    runtime: IAgentRuntime\n): Promise<tatumConfig> {\n    try {\n        const config = {\n            TATUM_API_KEY: runtime.getSetting(\"TATUM_API_KEY\"),\n        };\n        console.log('config Tatumss: ', config)\n        return tatumEnvSchema.parse(config);\n    } catch (error) {\n        console.log(\"error::::\", error)\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Tatum API configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}","import { ActionExample } from \"@elizaos/core\";\n\nexport const createWalletCelo: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"¬øPodr√≠as ayudarme a crear una wallet?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Por su puesto¬° Recuerda que al crear tu wallet te dare informaci√≥n que no debes de compartir.\",\n                action: \"CREATE_WALLET_CELO\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"¬øMe podrias dar una wallet de Celo?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Por su puesto¬° Recuerda que al crear tu wallet te dare informaci√≥n que no debes de compartir.\",\n                action: \"CREATE_WALLET_CELO\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Quisiera crear una cuenta, ¬øpodr√≠as ayudarme?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Por su puesto¬° Recuerda que al crear tu wallet te dare informaci√≥n que no debes de compartir.\",\n                action: \"CREATE_WALLET_CELO\",\n            },\n        }\n    ],\n]\n\nexport const getBalance: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Cual es el balance de mi wallet {{address}}\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"üí≤ Tu balance es de : 7.7\",\n                action: \"GET_WALLET_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Cual es el balance de esta wallet {{address}}\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"üí≤ Tu balance es de : 7.7\",\n                action: \"GET_WALLET_BALANCE\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Cuanto tengo en mi Wallet?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Me podr√≠as decir cual es tu wallet?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"{{address}}\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"üí≤ Tu balance es de :7.7\",\n                action: \"GET_WALLET_BALANCE\",\n            },\n        }\n    ],\n];","import {\n    CrateCeloWallet,\n    GetBalanceWallet\n} from \"./types\";\n\nconst BASE_URL = \"https://api.tatum.io/v3/arb/\";\n\nexport const createTATUMService = (apiKey: string) => {\n\n    const createCeloWallet = async (): Promise<CrateCeloWallet> => {\n        if (!apiKey) {\n            throw new Error(\"Invalid parameters no Tatum API\");\n        }\n\n        try {\n            const url = BASE_URL+\"wallet\"\n            /*Crea la wallet */\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'x-api-key': apiKey\n                }\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error?.message || response.statusText);\n            }\n\n            const data = await response.json();\n            console.log(data.mnemonic);\n\n            /*Siguientes llamados*/\n            let xpub = data.xpub;\n            let index= 0 ;// Reemplaza con el √≠ndice que necesites\n\n            /*Se crea la wallet*/\n            const urlCreateWllet = BASE_URL+\"address/\"+xpub+\"/\"+index\n            const response2 = await fetch(urlCreateWllet, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'x-api-key': apiKey\n                }\n            });\n            if (!response2.ok) {\n                const error = await response2.json();\n                throw new Error(error?.message || response.statusText);\n            }\n\n            const data2 = await response2.json();\n            console.log(data2.address);\n\n            /*Se crea la llave privada */\n\n            const urlPrivateKey = BASE_URL+\"wallet/priv\"\n            const parameters = {\n                index: 0, // Reemplaza con el √≠ndice que necesites\n                mnemonic: data.mnemonic\n            };\n            const response3 = await fetch(urlPrivateKey, {\n                method: 'POST',\n                headers: {\n                    'accept': 'application/json',\n                    'content-type': 'application/json',\n                    'x-api-key': apiKey\n                },\n                body: JSON.stringify(parameters)\n            });\n            if (!response3.ok) {\n                const error = await response3.json();\n                throw new Error(error?.message || response3.statusText);\n            }\n\n            const data3 = await response3.json();\n            console.log(data3.key);\n\n\n            return {\n                mnemonic: data.mnemonic,\n                address: data2.address,\n                key: data3.key\n            };\n\n        } catch (error: any) {\n            console.error(\"TATUM API Error:\", error.message);\n            throw error;\n        }\n    };\n\n    // M√©todo para verificar el balance de una wallet de Celo\n    const getCeloWalletBalance = async (address: string): Promise<GetBalanceWallet> => {\n        console.log(`Esta es la wallet de entrada ${address}`);\n        if (!apiKey) {\n            throw new Error(\"Invalid parameters no Tatum API\");\n        }\n\n        try {\n            const url = `${BASE_URL}account/balance/${address}`;\n            console.log(`Esta es la URL : ${url}`);\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'accept': 'application/json',\n                    'x-api-key': apiKey\n                }\n            });\n            console.log(`Respuesta--> : ${response}`);\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || response.statusText);\n            }\n\n            const data = await response.json();\n            console.log(`Respuesta2--> : ${data.celo}`);\n            return {\n                celo: data.celo,\n                cUsd: data.cUsd,\n                cEur: data.cEur\n            }; // Devuelve el balance como n√∫mero\n        } catch (error: any) {\n            throw new Error(`Error fetching balance: ${error.message}`);\n        }\n    };\n\n    return { createCeloWallet, getCeloWalletBalance };\n};\n\n\n","import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateTatumConfig } from \"../enviroment\";\nimport { getBalance } from \"../examples\";\nimport { createTATUMService } from \"../services\";\n\n\nexport const getBalaceWalletCeloAction: Action = {\n    name: \"GET_WALLET_BALANCE\",\n    similes: [\n        \"BALANCE WALLET\",\n        \"CUANTO TIENE\",\n        \"DAME EL BALANCE\",\n        \"CUANTO TENGO\",\n        \"GET WALLET BALANCE\",\n        \"CUANTO DINERO TENGO\"\n    ],\n    description: \"Obtiene el balance de una Wallet Celo\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateTatumConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n\n        const config = await validateTatumConfig(runtime);\n        const tatumService = createTATUMService(\n            config.TATUM_API_KEY\n        );\n\n        try {\n            // Aqu√≠ deber√≠as obtener la direcci√≥n de la wallet (ej. del estado o memoria)\n            const walletAddress = message.content as { text:string } // Asumiendo que tienes la direcci√≥n guardada en la memoria\n            const addressMatch = walletAddress.text.match(/0x[a-fA-F0-9]{40}/);\n            if (!addressMatch) {\n                throw new Error(\"Valid celo address not found in message\");\n            }\n            const address = addressMatch[0];\n            console.log(`Addres que esta entrando : ${address}`);\n\n            if (!walletAddress) {\n                 throw new Error(\"No wallet address provided.\");\n            }\n            const CWData = await tatumService.getCeloWalletBalance(address);\n            console.log(`CWData :${CWData.celo}`);\n            elizaLogger.success(\n                `Successfully fetched Consultar Balances`\n            );\n            if (callback) {\n                callback({\n                    text: `üí≤ Tu balance es de : ${CWData.celo} CELO`\n                });\n                return true;\n            }\n        } catch (error:any) {\n            elizaLogger.error(\"Error in TATUM plugin handler:\", error);\n            callback({\n                text: `Error fetching TATUM Create Wallet: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: getBalance as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\";\nimport { createWalletCeloAction } from \"./actions/createCeloWallet\";\nimport { getBalaceWalletCeloAction } from \"./actions/getBalance\";\n/*import { getBalance } from \"./actions/getBalance\";\n\nimport { sendCelo } from \"./actions/sendCelo\";\nimport { sendTokenErc20 } from \"./actions/sendTokenErc20\";*/\n\nexport const celoPlugin: Plugin = {\n    name: \"Celo Network\",\n    description: \"Plugin para la red de Celo\",\n    //actions: [createCeloWallet, getBalance, sendCelo, sendTokenErc20],\n    actions: [createWalletCeloAction,getBalaceWalletCeloAction],\n    // evaluators analyze the situations and actions taken by the agent. they run after each agent action\n    // allowing the agent to reflect on what happened and potentially trigger additional actions or modifications\n    evaluators: [],\n    // providers supply information and state to the agent's context, help agent access necessary data\n    providers: [],\n};\nexport default celoPlugin;"],"mappings":"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","names":["elizaLogger","elizaLogger"]}