{"version":3,"sources":["../src/actions/createToken.ts","../src/index.ts"],"sourcesContent":["import {\n    ActionExample,\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\n\nimport { SolanaAgentKit } from \"solana-agent-kit\";\n\nexport interface CreateTokenContent extends Content {\n    name: string;\n    uri: string;\n    symbol: string;\n    decimals: number;\n    initialSupply: number;\n}\n\nfunction isCreateTokenContent(content: any): content is CreateTokenContent {\n    elizaLogger.log(\"Content for createToken\", content);\n    return (\n        typeof content.name === \"string\" &&\n        typeof content.uri === \"string\" &&\n        typeof content.symbol === \"string\" &&\n        typeof content.decimals === \"number\" &&\n        typeof content.initialSupply === \"number\"\n    );\n}\n\nconst createTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"Example Token\",\n    \"symbol\": \"EXMPL\",\n    \"uri\": \"https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png\",\n    \"decimals\": 18,\n    \"initialSupply\": 1000000,\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token name\n- Token symbol\n- Token uri\n- Token decimals\n- Token initialSupply\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"CREATE_TOKEN\",\n    similes: [\"DEPLOY_TOKEN\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => true,\n    description: \"Create tokens\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CREATE_TOKEN handler...\");\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: createTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate transfer content\n        if (!isCreateTokenContent(content)) {\n            elizaLogger.error(\"Invalid content for CREATE_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process create token request. Invalid content provided.\",\n                    content: { error: \"Invalid creat token content\" },\n                });\n            }\n            return false;\n        }\n\n        elizaLogger.log(\"Init solana agent kit...\");\n        const solanaPrivatekey = runtime.getSetting(\"SOLANA_PRIVATE_KEY\");\n        const rpc = runtime.getSetting(\"SOLANA_RPC_URL\");\n        const openAIKey = runtime.getSetting(\"OPENAI_API_KEY\");\n        const solanaAgentKit = new SolanaAgentKit(\n            solanaPrivatekey,\n            rpc,\n            openAIKey\n        );\n        try {\n            const deployedAddress = await solanaAgentKit.deployToken(\n                content.name,\n                content.uri,\n                content.symbol,\n                content.decimals\n                // content.initialSupply comment out this cause the sdk has some issue with this parameter\n            );\n            elizaLogger.log(\"Create successful: \", deployedAddress);\n            elizaLogger.log(deployedAddress);\n            if (callback) {\n                callback({\n                    text: `Successfully create token ${content.name}`,\n                    content: {\n                        success: true,\n                        deployedAddress,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            if (callback) {\n                elizaLogger.error(\"Error during create token: \", error);\n                callback({\n                    text: `Error creating token: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create token, name is Example Token, symbol is EXMPL, uri is https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png, decimals is 9, initialSupply is 100000000000\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll create token now...\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully create token 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\";\nimport createToken from \"./actions/createToken.ts\";\n\nexport const solanaAgentkitPlguin: Plugin = {\n    name: \"solana\",\n    description: \"Solana Plugin with solana agent kit for Eliza\",\n    actions: [createToken],\n    evaluators: [],\n    providers: [],\n};\n\nexport default solanaAgentkitPlguin;\n"],"mappings":"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","names":[]}