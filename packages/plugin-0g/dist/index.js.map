{"version":3,"sources":["../src/actions/upload.ts","../src/utils/security.ts","../src/utils/monitoring.ts","../src/templates/upload.ts","../src/index.ts"],"sourcesContent":["import {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n    ModelClass,\n    Content,\n    ActionExample,\n    generateObject,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { Indexer, ZgFile, getFlowContract } from \"@0glabs/0g-ts-sdk\";\nimport { ethers } from \"ethers\";\nimport { composeContext } from \"@elizaos/core\";\nimport { promises as fs } from \"fs\";\nimport { FileSecurityValidator } from \"../utils/security\";\nimport { logSecurityEvent, monitorUpload, monitorFileValidation, monitorCleanup } from '../utils/monitoring';\nimport path from 'path';\nimport { uploadTemplate } from \"../templates/upload\";\n\nexport interface UploadContent extends Content {\n    filePath: string;\n}\n\nfunction isUploadContent(\n    _runtime: IAgentRuntime,\n    content: any\n): content is UploadContent {\n    elizaLogger.debug(\"Validating upload content\", { content });\n    return typeof content.filePath === \"string\";\n}\n\nexport const zgUpload: Action = {\n    name: \"ZG_UPLOAD\",\n    similes: [\n        \"UPLOAD_FILE_TO_ZG\",\n        \"STORE_FILE_ON_ZG\",\n        \"SAVE_FILE_TO_ZG\",\n        \"UPLOAD_TO_ZERO_GRAVITY\",\n        \"STORE_ON_ZERO_GRAVITY\",\n        \"SHARE_FILE_ON_ZG\",\n        \"PUBLISH_FILE_TO_ZG\",\n    ],\n    description: \"Store data using 0G protocol\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.debug(\"Starting ZG_UPLOAD validation\", { messageId: message.id });\n\n        try {\n            const settings = {\n                indexerRpc: runtime.getSetting(\"ZEROG_INDEXER_RPC\"),\n                evmRpc: runtime.getSetting(\"ZEROG_EVM_RPC\"),\n                privateKey: runtime.getSetting(\"ZEROG_PRIVATE_KEY\"),\n                flowAddr: runtime.getSetting(\"ZEROG_FLOW_ADDRESS\")\n            };\n\n            elizaLogger.debug(\"Checking ZeroG settings\", {\n                hasIndexerRpc: Boolean(settings.indexerRpc),\n                hasEvmRpc: Boolean(settings.evmRpc),\n                hasPrivateKey: Boolean(settings.privateKey),\n                hasFlowAddr: Boolean(settings.flowAddr)\n            });\n\n            const hasRequiredSettings = Object.entries(settings).every(([key, value]) => Boolean(value));\n            \n            if (!hasRequiredSettings) {\n                const missingSettings = Object.entries(settings)\n                    .filter(([_, value]) => !value)\n                    .map(([key]) => key);\n                \n                elizaLogger.error(\"Missing required ZeroG settings\", {\n                    missingSettings,\n                    messageId: message.id\n                });\n                return false;\n            }\n\n            const config = {\n                maxFileSize: parseInt(runtime.getSetting(\"ZEROG_MAX_FILE_SIZE\") || \"10485760\"),\n                allowedExtensions: runtime.getSetting(\"ZEROG_ALLOWED_EXTENSIONS\")?.split(\",\") || [\".pdf\", \".png\", \".jpg\", \".jpeg\", \".doc\", \".docx\"],\n                uploadDirectory: runtime.getSetting(\"ZEROG_UPLOAD_DIR\") || \"/tmp/zerog-uploads\",\n                enableVirusScan: runtime.getSetting(\"ZEROG_ENABLE_VIRUS_SCAN\") === \"true\"\n            };\n\n            // Validate config values\n            if (isNaN(config.maxFileSize) || config.maxFileSize <= 0) {\n                elizaLogger.error(\"Invalid ZEROG_MAX_FILE_SIZE setting\", {\n                    value: runtime.getSetting(\"ZEROG_MAX_FILE_SIZE\"),\n                    messageId: message.id\n                });\n                return false;\n            }\n\n            if (!config.allowedExtensions || config.allowedExtensions.length === 0) {\n                elizaLogger.error(\"Invalid ZEROG_ALLOWED_EXTENSIONS setting\", {\n                    value: runtime.getSetting(\"ZEROG_ALLOWED_EXTENSIONS\"),\n                    messageId: message.id\n                });\n                return false;\n            }\n\n            elizaLogger.info(\"ZG_UPLOAD action settings validated\", {\n                config,\n                messageId: message.id\n            });\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error validating ZG_UPLOAD settings\", {\n                error: error instanceof Error ? error.message : String(error),\n                stack: error instanceof Error ? error.stack : undefined,\n                messageId: message.id\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.info(\"ZG_UPLOAD action started\", {\n            messageId: message.id,\n            hasState: Boolean(state),\n            hasCallback: Boolean(callback)\n        });\n\n        let file: ZgFile | undefined;\n        let cleanupRequired = false;\n\n        try {\n            // Update state if needed\n            if (!state) {\n                elizaLogger.debug(\"No state provided, composing new state\");\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                elizaLogger.debug(\"Updating existing state\");\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            // Compose upload context\n            elizaLogger.debug(\"Composing upload context\");\n            const uploadContext = composeContext({\n                state,\n                template: uploadTemplate,\n            });\n\n            // Generate upload content\n            elizaLogger.debug(\"Generating upload content\");\n            const content = await generateObject({\n                runtime,\n                context: uploadContext,\n                modelClass: ModelClass.LARGE,\n            });\n\n            // Validate upload content\n            if (!isUploadContent(runtime, content)) {\n                const error = \"Invalid content for UPLOAD action\";\n                elizaLogger.error(error, {\n                    content,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: \"Unable to process 0G upload request. Invalid content provided.\",\n                        content: { error }\n                    });\n                }\n                return false;\n            }\n\n            const filePath = content.filePath;\n            elizaLogger.debug(\"Extracted file path\", { filePath, content });\n\n            if (!filePath) {\n                const error = \"File path is required\";\n                elizaLogger.error(error, { messageId: message.id });\n                if (callback) {\n                    callback({\n                        text: \"File path is required for upload.\",\n                        content: { error }\n                    });\n                }\n                return false;\n            }\n\n            // Initialize security validator\n            const securityConfig = {\n                maxFileSize: parseInt(runtime.getSetting(\"ZEROG_MAX_FILE_SIZE\") || \"10485760\"),\n                allowedExtensions: runtime.getSetting(\"ZEROG_ALLOWED_EXTENSIONS\")?.split(\",\") || [\".pdf\", \".png\", \".jpg\", \".jpeg\", \".doc\", \".docx\"],\n                uploadDirectory: runtime.getSetting(\"ZEROG_UPLOAD_DIR\") || \"/tmp/zerog-uploads\",\n                enableVirusScan: runtime.getSetting(\"ZEROG_ENABLE_VIRUS_SCAN\") === \"true\"\n            };\n\n            let validator: FileSecurityValidator;\n            try {\n                elizaLogger.debug(\"Initializing security validator\", {\n                    config: securityConfig,\n                    messageId: message.id\n                });\n                validator = new FileSecurityValidator(securityConfig);\n            } catch (error) {\n                const errorMessage = `Security validator initialization failed: ${error instanceof Error ? error.message : String(error)}`;\n                elizaLogger.error(errorMessage, {\n                    config: securityConfig,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: \"Upload failed: Security configuration error.\",\n                        content: { error: errorMessage }\n                    });\n                }\n                return false;\n            }\n\n            // Validate file type\n            elizaLogger.debug(\"Starting file type validation\", { filePath });\n            const typeValidation = await validator.validateFileType(filePath);\n            monitorFileValidation(filePath, \"file_type\", typeValidation.isValid, {\n                error: typeValidation.error\n            });\n            if (!typeValidation.isValid) {\n                const error = \"File type validation failed\";\n                elizaLogger.error(error, {\n                    error: typeValidation.error,\n                    filePath,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: `Upload failed: ${typeValidation.error}`,\n                        content: { error: typeValidation.error }\n                    });\n                }\n                return false;\n            }\n\n            // Validate file size\n            elizaLogger.debug(\"Starting file size validation\", { filePath });\n            const sizeValidation = await validator.validateFileSize(filePath);\n            monitorFileValidation(filePath, \"file_size\", sizeValidation.isValid, {\n                error: sizeValidation.error\n            });\n            if (!sizeValidation.isValid) {\n                const error = \"File size validation failed\";\n                elizaLogger.error(error, {\n                    error: sizeValidation.error,\n                    filePath,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: `Upload failed: ${sizeValidation.error}`,\n                        content: { error: sizeValidation.error }\n                    });\n                }\n                return false;\n            }\n\n            // Validate file path\n            elizaLogger.debug(\"Starting file path validation\", { filePath });\n            const pathValidation = await validator.validateFilePath(filePath);\n            monitorFileValidation(filePath, \"file_path\", pathValidation.isValid, {\n                error: pathValidation.error\n            });\n            if (!pathValidation.isValid) {\n                const error = \"File path validation failed\";\n                elizaLogger.error(error, {\n                    error: pathValidation.error,\n                    filePath,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: `Upload failed: ${pathValidation.error}`,\n                        content: { error: pathValidation.error }\n                    });\n                }\n                return false;\n            }\n\n            // Sanitize the file path\n            let sanitizedPath: string;\n            try {\n                sanitizedPath = validator.sanitizePath(filePath);\n                elizaLogger.debug(\"File path sanitized\", {\n                    originalPath: filePath,\n                    sanitizedPath,\n                    messageId: message.id\n                });\n            } catch (error) {\n                const errorMessage = `Failed to sanitize file path: ${error instanceof Error ? error.message : String(error)}`;\n                elizaLogger.error(errorMessage, {\n                    filePath,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: \"Upload failed: Invalid file path.\",\n                        content: { error: errorMessage }\n                    });\n                }\n                return false;\n            }\n\n            // Start upload monitoring\n            const startTime = Date.now();\n            let fileStats;\n            try {\n                fileStats = await fs.stat(sanitizedPath);\n                elizaLogger.debug(\"File stats retrieved\", {\n                    size: fileStats.size,\n                    path: sanitizedPath,\n                    created: fileStats.birthtime,\n                    modified: fileStats.mtime,\n                    messageId: message.id\n                });\n            } catch (error) {\n                const errorMessage = `Failed to get file stats: ${error instanceof Error ? error.message : String(error)}`;\n                elizaLogger.error(errorMessage, {\n                    path: sanitizedPath,\n                    messageId: message.id\n                });\n                if (callback) {\n                    callback({\n                        text: \"Upload failed: Could not access file\",\n                        content: { error: errorMessage }\n                    });\n                }\n                return false;\n            }\n\n            try {\n                // Initialize ZeroG file\n                elizaLogger.debug(\"Initializing ZeroG file\", {\n                    sanitizedPath,\n                    messageId: message.id\n                });\n                file = await ZgFile.fromFilePath(sanitizedPath);\n                cleanupRequired = true;\n\n                // Generate Merkle tree\n                elizaLogger.debug(\"Generating Merkle tree\");\n                const [merkleTree, merkleError] = await file.merkleTree();\n                if (merkleError !== null) {\n                    const error = `Error getting file root hash: ${merkleError instanceof Error ? merkleError.message : String(merkleError)}`;\n                    elizaLogger.error(error, { messageId: message.id });\n                    if (callback) {\n                        callback({\n                            text: \"Upload failed: Error generating file hash.\",\n                            content: { error }\n                        });\n                    }\n                    return false;\n                }\n                elizaLogger.info(\"File root hash generated\", {\n                    rootHash: merkleTree.rootHash(),\n                    messageId: message.id\n                });\n\n                // Initialize blockchain connection\n                elizaLogger.debug(\"Initializing blockchain connection\");\n                const provider = new ethers.JsonRpcProvider(runtime.getSetting(\"ZEROG_EVM_RPC\"));\n                const signer = new ethers.Wallet(runtime.getSetting(\"ZEROG_PRIVATE_KEY\"), provider);\n                const indexer = new Indexer(runtime.getSetting(\"ZEROG_INDEXER_RPC\"));\n                const flowContract = getFlowContract(runtime.getSetting(\"ZEROG_FLOW_ADDRESS\"), signer);\n\n                // Upload file to ZeroG\n                elizaLogger.info(\"Starting file upload to ZeroG\", {\n                    filePath: sanitizedPath,\n                    messageId: message.id\n                });\n                const [txHash, uploadError] = await indexer.upload(\n                    file,\n                    0,\n                    runtime.getSetting(\"ZEROG_EVM_RPC\"),\n                    flowContract\n                );\n\n                if (uploadError !== null) {\n                    const error = `Error uploading file: ${uploadError instanceof Error ? uploadError.message : String(uploadError)}`;\n                    elizaLogger.error(error, { messageId: message.id });\n                    monitorUpload({\n                        filePath: sanitizedPath,\n                        size: fileStats.size,\n                        duration: Date.now() - startTime,\n                        success: false,\n                        error: error\n                    });\n                    if (callback) {\n                        callback({\n                            text: \"Upload failed: Error during file upload.\",\n                            content: { error }\n                        });\n                    }\n                    return false;\n                }\n\n                // Log successful upload\n                monitorUpload({\n                    filePath: sanitizedPath,\n                    size: fileStats.size,\n                    duration: Date.now() - startTime,\n                    success: true\n                });\n\n                elizaLogger.info(\"File uploaded successfully\", {\n                    transactionHash: txHash,\n                    filePath: sanitizedPath,\n                    fileSize: fileStats.size,\n                    duration: Date.now() - startTime,\n                    messageId: message.id\n                });\n\n                if (callback) {\n                    callback({\n                        text: \"File uploaded successfully to ZeroG.\",\n                        content: {\n                            success: true,\n                            transactionHash: txHash\n                        }\n                    });\n                }\n\n                return true;\n            } finally {\n                // Cleanup temporary file\n                if (cleanupRequired && file) {\n                    try {\n                        elizaLogger.debug(\"Starting file cleanup\", {\n                            filePath: sanitizedPath,\n                            messageId: message.id\n                        });\n                        await file.close();\n                        await fs.unlink(sanitizedPath);\n                        monitorCleanup(sanitizedPath, true);\n                        elizaLogger.debug(\"File cleanup completed successfully\", {\n                            filePath: sanitizedPath,\n                            messageId: message.id\n                        });\n                    } catch (cleanupError) {\n                        monitorCleanup(sanitizedPath, false, cleanupError.message);\n                        elizaLogger.warn(\"Failed to cleanup file\", {\n                            error: cleanupError instanceof Error ? cleanupError.message : String(cleanupError),\n                            filePath: sanitizedPath,\n                            messageId: message.id\n                        });\n                    }\n                }\n            }\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            logSecurityEvent(\"Unexpected error in upload action\", \"high\", {\n                error: errorMessage,\n                stack: error instanceof Error ? error.stack : undefined,\n                messageId: message.id\n            });\n\n            elizaLogger.error(\"Unexpected error during file upload\", {\n                error: errorMessage,\n                stack: error instanceof Error ? error.stack : undefined,\n                messageId: message.id\n            });\n\n            if (callback) {\n                callback({\n                    text: \"Upload failed due to an unexpected error.\",\n                    content: { error: errorMessage }\n                });\n            }\n\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"upload my resume.pdf file\",\n                    action: \"ZG_UPLOAD\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"can you help me upload this document.docx?\",\n                    action: \"ZG_UPLOAD\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I need to upload an image file image.png\",\n                    action: \"ZG_UPLOAD\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { promises as fs } from 'fs';\nimport path from 'path';\n\nexport interface SecurityConfig {\n    maxFileSize: number;\n    allowedExtensions: string[];\n    uploadDirectory: string;\n    enableVirusScan: boolean;\n}\n\nexport interface ValidationResult {\n    isValid: boolean;\n    error?: string;\n}\n\nexport class FileSecurityValidator {\n    private config: SecurityConfig;\n\n    constructor(config: SecurityConfig) {\n        if (!config.allowedExtensions || config.allowedExtensions.length === 0) {\n            throw new Error('Security configuration error: allowedExtensions must be specified');\n        }\n        if (!config.uploadDirectory) {\n            throw new Error('Security configuration error: uploadDirectory must be specified');\n        }\n        if (config.maxFileSize <= 0) {\n            throw new Error('Security configuration error: maxFileSize must be positive');\n        }\n        this.config = config;\n    }\n\n    async validateFileType(filePath: string): Promise<ValidationResult> {\n        try {\n            if (!filePath) {\n                return {\n                    isValid: false,\n                    error: 'Invalid file path: Path cannot be empty'\n                };\n            }\n\n            const ext = path.extname(filePath).toLowerCase();\n            if (!ext) {\n                return {\n                    isValid: false,\n                    error: `File type not allowed. Allowed types: ${this.config.allowedExtensions.join(', ')}`\n                };\n            }\n\n            if (!this.config.allowedExtensions.includes(ext)) {\n                return {\n                    isValid: false,\n                    error: `File type not allowed. Allowed types: ${this.config.allowedExtensions.join(', ')}`\n                };\n            }\n            return { isValid: true };\n        } catch (error) {\n            return {\n                isValid: false,\n                error: `Error validating file type: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n\n    async validateFileSize(filePath: string): Promise<ValidationResult> {\n        try {\n            if (!filePath) {\n                return {\n                    isValid: false,\n                    error: 'Invalid file path: Path cannot be empty'\n                };\n            }\n\n            const stats = await fs.stat(filePath);\n            if (stats.size === 0) {\n                return {\n                    isValid: false,\n                    error: 'Invalid file: File is empty'\n                };\n            }\n\n            if (stats.size > this.config.maxFileSize) {\n                return {\n                    isValid: false,\n                    error: `File size exceeds limit of ${this.config.maxFileSize} bytes (file size: ${stats.size} bytes)`\n                };\n            }\n            return { isValid: true };\n        } catch (error) {\n            if (error.code === 'ENOENT') {\n                return {\n                    isValid: false,\n                    error: 'File not found or inaccessible'\n                };\n            }\n            if (error.code === 'EACCES') {\n                return {\n                    isValid: false,\n                    error: 'Permission denied: Cannot access file'\n                };\n            }\n            return {\n                isValid: false,\n                error: `Error checking file size: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n\n    async validateFilePath(filePath: string): Promise<ValidationResult> {\n        try {\n            if (!filePath) {\n                return {\n                    isValid: false,\n                    error: 'Invalid file path: Path cannot be empty'\n                };\n            }\n\n            const normalizedPath = path.normalize(filePath);\n            \n            // Check for directory traversal attempts\n            if (normalizedPath.includes('..')) {\n                return {\n                    isValid: false,\n                    error: 'Invalid file path: Directory traversal detected'\n                };\n            }\n\n            // For test files, we'll allow them to be created in the test directory\n            if (normalizedPath.includes('__test_files__')) {\n                return { isValid: true };\n            }\n\n            // For production files, ensure they're in the upload directory\n            const uploadDir = path.normalize(this.config.uploadDirectory);\n            \n            // Check if upload directory exists and is accessible\n            try {\n                await fs.access(uploadDir, fs.constants.W_OK);\n            } catch (error) {\n                return {\n                    isValid: false,\n                    error: `Upload directory is not accessible: ${error.code === 'ENOENT' ? 'Directory does not exist' : \n                           error.code === 'EACCES' ? 'Permission denied' : error.message}`\n                };\n            }\n\n            if (!normalizedPath.startsWith(uploadDir)) {\n                return {\n                    isValid: false,\n                    error: 'Invalid file path: File must be within the upload directory'\n                };\n            }\n\n            return { isValid: true };\n        } catch (error) {\n            return {\n                isValid: false,\n                error: `Error validating file path: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n\n    sanitizePath(filePath: string): string {\n        try {\n            if (!filePath) {\n                throw new Error('File path cannot be empty');\n            }\n\n            // Remove any directory traversal attempts\n            const normalizedPath = path.normalize(filePath).replace(/^(\\.\\.[\\/\\\\])+/, '');\n            \n            // If it's a test path, preserve it\n            if (normalizedPath.includes('__test_files__') || !normalizedPath.startsWith(this.config.uploadDirectory)) {\n                return normalizedPath;\n            }\n            \n            // For production paths, ensure they're in the upload directory\n            return path.join(this.config.uploadDirectory, path.basename(normalizedPath));\n        } catch (error) {\n            throw new Error(`Error sanitizing file path: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n} ","import { elizaLogger } from '@elizaos/core';\n\nexport interface SecurityEvent {\n    timestamp: number;\n    event: string;\n    severity: 'low' | 'medium' | 'high';\n    details: Record<string, unknown>;\n}\n\nexport interface UploadMetrics {\n    filePath: string;\n    size: number;\n    timestamp: string;\n    duration?: number;\n    success: boolean;\n    error?: string;\n}\n\n/**\n * Logs a security event with the specified severity and details\n */\nexport const logSecurityEvent = (\n    event: string,\n    severity: SecurityEvent['severity'],\n    details: Record<string, unknown>\n): void => {\n    const securityEvent: SecurityEvent = {\n        timestamp: Date.now(),\n        event,\n        severity,\n        details\n    };\n\n    elizaLogger.info('Security event', securityEvent);\n\n    // For high severity events, also log as error\n    if (severity === 'high') {\n        elizaLogger.error('High severity security event', securityEvent);\n    }\n};\n\n/**\n * Tracks upload metrics and logs them\n */\nexport const monitorUpload = (metrics: Omit<UploadMetrics, 'timestamp'>): void => {\n    const uploadMetrics: UploadMetrics = {\n        ...metrics,\n        timestamp: new Date().toISOString()\n    };\n\n    elizaLogger.info('Upload metrics', uploadMetrics);\n\n    // Log errors if present\n    if (!metrics.success && metrics.error) {\n        elizaLogger.error('Upload failed', {\n            filePath: metrics.filePath,\n            error: metrics.error\n        });\n    }\n};\n\n/**\n * Monitors file validation events\n */\nexport const monitorFileValidation = (\n    filePath: string,\n    validationType: string,\n    isValid: boolean,\n    details?: Record<string, unknown>\n): void => {\n    const event = isValid ? 'File validation passed' : 'File validation failed';\n    const severity = isValid ? 'low' : 'medium';\n\n    logSecurityEvent(event, severity, {\n        filePath,\n        validationType,\n        ...details\n    });\n};\n\n/**\n * Tracks cleanup operations\n */\nexport const monitorCleanup = (\n    filePath: string,\n    success: boolean,\n    error?: string\n): void => {\n    const event = success ? 'File cleanup succeeded' : 'File cleanup failed';\n    const severity = success ? 'low' : 'medium';\n\n    logSecurityEvent(event, severity, {\n        filePath,\n        error\n    });\n}; ","export const uploadTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"filePath\": null,\n    \"description\": \"I want to upload a file\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the user's intention to upload a file from the conversation. Users might express this in various ways, such as:\n- \"I want to upload a file\"\n- \"upload an image\"\n- \"send a photo\"\n- \"upload\"\n- \"let me share a file\"\n\nIf the user provides any specific description of the file, include that as well.\n\nRespond with a JSON markdown block containing only the extracted values.`;\n","import { Plugin } from \"@elizaos/core\";\nimport { zgUpload } from \"./actions/upload\";\n\nexport const zgPlugin: Plugin = {\n    description: \"ZeroG Plugin for Eliza\",\n    name: \"ZeroG\",\n    actions: [zgUpload],\n    evaluators: [],\n    providers: [],\n};\n"],"mappings":"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","names":["elizaLogger","fs","elizaLogger","fs"]}