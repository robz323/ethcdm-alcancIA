{"version":3,"sources":["../src/actions/getAPOD.ts","../src/environment.ts","../src/examples.ts","../src/services.ts","../src/actions/getMarsRoverPhoto.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateNasaConfig } from \"../environment\";\nimport { getAPODExamples } from \"../examples\";\nimport { createNASAService } from \"../services\";\n\nexport const getAPODAction: Action = {\n    name: \"NASA_GET_APOD\",\n    similes: [\n        \"ASTRONOMY\",\n        \"SPACE\",\n        \"NASA\",\n        \"PLANETS\"\n    ],\n    description: \"Get the Nasa Astronomy Picture of the Day.\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateNasaConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n\n        const config = await validateNasaConfig(runtime);\n        const nasaService = createNASAService(\n            config.NASA_API_KEY\n        );\n\n        try {\n            const APODData = await nasaService.getAPOD();\n            elizaLogger.success(\n                `Successfully fetched APOD`\n            );\n            if (callback) {\n                callback({\n                    text: `Here is the NASA Astronomy Picture of the Day: ${APODData.url}`\n                });\n                return true;\n            }\n        } catch (error:any) {\n            elizaLogger.error(\"Error in NASA plugin handler:\", error);\n            callback({\n                text: `Error fetching APOD: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: getAPODExamples as ActionExample[][],\n} as Action;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const nasaEnvSchema = z.object({\n    NASA_API_KEY: z.string().min(1, \"Nasa API key is required\"),\n});\n\nexport type nasaConfig = z.infer<typeof nasaEnvSchema>;\n\nexport async function validateNasaConfig(\n    runtime: IAgentRuntime\n): Promise<nasaConfig> {\n    try {\n        const config = {\n            NASA_API_KEY: runtime.getSetting(\"NASA_API_KEY\"),\n        };\n        console.log('config: ', config)\n        return nasaEnvSchema.parse(config);\n    } catch (error) {\n        console.log(\"error::::\", error)\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Nasa API configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}","import { ActionExample } from \"@elizaos/core\";\n\nexport const getMarsRoverExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I wonder what mars looks like today?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me fetch a picture from a mars rover.\",\n                action: \"NASA_GET_MARS_ROVER_PHOTO\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you fetch a random picture of Mars?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me fetch a picture from a mars rover.\",\n                action: \"NASA_GET_MARS_ROVER_PHOTO\",\n            },\n        }\n    ],\n]\n\nexport const getAPODExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the nasa Astronomy picture of the day?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me get the nasa image of the day.\",\n                action: \"NASA_GET_APOD\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I love space.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Oh really, then let me get the nasa image of the day to make your day even better.\",\n                action: \"NASA_GET_APOD\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I am in love with space and space travel.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Space is beautiful, dark, scary, and vast. Would you like to see a current photo of space from NASA?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"yes\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Here is the NASA Astronomy Picture of the Day.\",\n                action: \"NASA_GET_APOD\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Space is beautiful, dark, scary, and unfathomably vast.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Indeed! Would you like to see a current photo from the NASA astronomy database?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"yes\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Here is the NASA Astronomy Picture of the Day.\",\n                action: \"NASA_GET_APOD\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I'm a big fan of space and astronomy.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Would you like to see the Nasa Astronomy Picture of the Day?\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"yes\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Here is the NASA Astronomy Picture of the Day.\",\n                action: \"NASA_GET_APOD\",\n            },\n        }\n    ]\n];","import {\n    APODResponse,\n    MarsRoverDataResponse\n} from \"./types\";\n\nconst BASE_URL = \"https://api.nasa.gov/planetary/apod\\?api_key\\=\";\n\nexport const createNASAService = (apiKey: string) => {\n    const getAPOD = async (): Promise<APODResponse> => {\n        if (!apiKey) {\n            throw new Error(\"Invalid parameters\");\n        }\n\n        try {\n            const url = BASE_URL + apiKey\n            const response = await fetch(url);\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error?.message || response.statusText);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error: any) {\n            console.error(\"NASA API Error:\", error.message);\n            throw error;\n        }\n    };\n\n    const getMarsRoverPhoto = async (): Promise<MarsRoverDataResponse> => {\n        try {\n            const data = await fetchMarsPhotos(apiKey)\n            return data\n        } catch (error: any) {\n            console.error(\"NASA Mars Rover API Error:\", error.message);\n            throw error;\n        }\n    }\n\n    return { getAPOD, getMarsRoverPhoto };\n};\n\nasync function fetchMarsPhotos(apiKey, attempts = 0, maxAttempts = 10) {\n    try {\n        const curiosityCameras = [\n            'FHAZ',\n            'RHAZ',\n            'MAST',\n            'CHEMCAM',\n            'MAHLI',\n            'MARDI',\n            'NAVCAM'\n        ]\n        const opportunityCameras = [\n            'FHAZ',\n            'RHAZ',\n            'PANCAM',\n            'MINITES'\n        ]\n\n        const CURIOUSITY_MAX_SOL = 3400\n        const OPPORTUNITY_MAX_SOL = 4500\n\n        const rovers = {\n          curiosity: {\n            cameras: curiosityCameras,\n            maxSol: CURIOUSITY_MAX_SOL\n          },\n        //   opportunity: {\n        //     cameras: opportunityCameras,\n        //     maxSol: OPPORTUNITY_MAX_SOL\n        //   },\n        }\n\n         // Select a random rover\n         const roverNames = Object.keys(rovers);\n         const randomRover = roverNames[Math.floor(Math.random() * roverNames.length)];\n         const selectedRover = rovers[randomRover as keyof typeof rovers];\n\n         // Get random camera for selected rover\n         const randomCamera = selectedRover.cameras[Math.floor(Math.random() * selectedRover.cameras.length)];\n\n         // Get random sol (Martian day) within rover's max\n         const randomSol = Math.floor(Math.random() * selectedRover.maxSol) + 1;\n\n         const requestURL = `https://api.nasa.gov/mars-photos/api/v1/rovers/${randomRover}/photos?sol=${randomSol}&camera=${randomCamera}&api_key=${apiKey}`\n         console.log('requestURL::::::: ', requestURL)\n         const response = await fetch(requestURL);\n         const data = await response.json();\n\n         if (data.photos.length) {\n            const returnObj = {\n                photo: data.photos[0].img_src,\n                sol: randomSol,\n                camera: randomCamera,\n                rover: randomRover\n            }\n            return returnObj\n        } else if (attempts < maxAttempts) {\n            return fetchMarsPhotos(apiKey, attempts + 1, maxAttempts)\n        } else {\n            throw new Error('No photos found after maximum attempts')\n        }\n    } catch (err) {\n        console.log(\"error fetch mar rover photos ...\", err)\n    }\n}","import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateNasaConfig } from \"../environment\";\nimport { getMarsRoverExamples } from \"../examples\";\nimport { createNASAService } from \"../services\";\n\nexport const getMarsRoverAction: Action = {\n    name: \"NASA_GET_MARS_ROVER_PHOTO\",\n    similes: [\n        \"MARS\",\n        \"MARTIAN\",\n        \"MARS PHOTO\"\n    ],\n    description: \"Get a random Nasa Mars Rover Photo.\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateNasaConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n\n        const config = await validateNasaConfig(runtime);\n        const nasaService = createNASAService(\n            config.NASA_API_KEY\n        );\n\n        try {\n            const MarsRoverData = await nasaService.getMarsRoverPhoto();\n            elizaLogger.success(\n                `Successfully fetched Mars Rover Photo`\n            );\n            if (callback) {\n                callback({\n                    text: `\n                    Here is a photo from the ${MarsRoverData.rover} on day ${MarsRoverData.sol} from the ${MarsRoverData.camera} camera.\n\n                    ${MarsRoverData.photo}\n                    `\n                });\n                return true;\n            }\n        } catch (error:any) {\n            elizaLogger.error(\"Error in NASA plugin handler:\", error);\n            callback({\n                text: `Error fetching Mars Rover Photo: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: getMarsRoverExamples as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\";\nimport { getAPODAction } from \"./actions/getAPOD\";\nimport { getMarsRoverAction } from \"./actions/getMarsRoverPhoto\";\n\nexport const nasaPlugin: Plugin = {\n    name: \"nasa\",\n    description: \"NASA plugin for Eliza\",\n    actions: [getAPODAction, getMarsRoverAction],\n    // evaluators analyze the situations and actions taken by the agent. they run after each agent action\n    // allowing the agent to reflect on what happened and potentially trigger additional actions or modifications\n    evaluators: [],\n    // providers supply information and state to the agent's context, help agent access necessary data\n    providers: [],\n};\nexport default nasaPlugin;"],"mappings":"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","names":["elizaLogger","elizaLogger"]}