{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\nimport {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    Plugin,\n    State,\n} from \"@elizaos/core\";\nimport { fal } from \"@fal-ai/client\";\nimport { FAL_CONSTANTS, VOICE_MAP, getRandomVoice } from \"./constants\";\n\nimport * as fs from \"fs\";\nimport { Buffer } from \"buffer\";\nimport * as path from \"path\";\nimport * as process from \"process\";\nimport { detect } from 'langdetect'; \n\nconst generateTTS = async (prompt: string, voice: string, runtime: IAgentRuntime) => {\n    process.env[\"FAL_KEY\"] =\n        FAL_CONSTANTS.API_KEY_SETTING || runtime.getSetting(\"FAL_API_KEY\");\n\n    try {\n        elizaLogger.log(\"Starting TTS generation with prompt:\", prompt);\n\n        const response = await fal.subscribe(FAL_CONSTANTS.API_TTS_ENDPOINT, {\n            input: {\n                input: prompt,\n                voice: voice\n              },\n            logs: true,\n            onQueueUpdate: (update) => {\n                if (update.status === \"IN_PROGRESS\") {\n                    update.logs\n                        .map((log) => log.message)\n                        .forEach(elizaLogger.log);\n                }\n            },\n        });\n\n        elizaLogger.log(\n            \"Generation request successful, received response:\",\n            response\n        );\n\n        return {success: true, \n                data: response.data};\n    } \n    catch (error) {\n        elizaLogger.error(\"TTS generation error:\", error);\n        return {\n            success: false,\n            error: error.message || \"Unknown error occurred\",\n        };\n    }\n};\n\nconst TTSGeneration: Action = {\n    name: \"GENERATE_TTS\",\n    similes: [\n        \"TTS_GENERATION\",\n        \"CREATE_TTS\",\n        \"TEXT2SPEECH\",\n        \"T2S\",\n        \"TEXT_TO_SPEECH\",\n        \"AUDIO_CREATE\",\n    ],\n    description: \"Generate a tts audio based on a text prompt\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.log(\"Validating TTS action\");\n        const FalApiKey = runtime.getSetting(\"FAL_API_KEY\");\n        elizaLogger.log(\"FAL_API_KEY present:\", !!FalApiKey);\n        return !!FalApiKey;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.log(\"TTS request:\", message);\n\n        // Clean up the prompt by removing mentions and commands\n        const TTSPrompt = message.content.text\n            .replace(/<@\\d+>/g, \"\") // Remove mentions\n            .replace(/generate TTS|create TTS|make TTS|render TTS/gi, \"\") // Remove commands\n            .trim();\n\n        if (!TTSPrompt || TTSPrompt.length < 3) {\n            callback({\n                text: \"Please input a word at least of length 3\",\n            });\n            return;\n        }\n\n        elizaLogger.log(\"TTS prompt:\", TTSPrompt);\n\n        callback({\n            text: `I'll generate a audio based on your prompt: \"${TTSPrompt}\". This might take a few seconds...`,\n        });\n\n        const language = detect(TTSPrompt);\n        const voice_subject = VOICE_MAP[language[0].lang];\n        const target_voice = getRandomVoice(voice_subject).fullName;\n\n        elizaLogger.log(\"Starting TTS generation with prompt:\", prompt, \"and voice:\", target_voice);\n\n        try {\n            const result = await generateTTS(TTSPrompt, target_voice, runtime);\n\n            if (result.success && result.data.audio.url) {\n                // Download the Audio file\n                const response = await fetch(result.data.audio.url);\n                const arrayBuffer = await response.arrayBuffer();\n                const TTSFileName = `content_cache/tts_${result.data.audio.file_name}`;\n\n                // ensure the directory is existed\n                const directoryPath = path.dirname(TTSFileName);\n                if (!fs.existsSync(directoryPath)) {\n                    fs.mkdirSync(directoryPath, { recursive: true });\n                }\n\n                // Save Audio file\n                fs.writeFileSync(TTSFileName, Buffer.from(arrayBuffer));\n\n                elizaLogger.log(\"Audio Duration:\", result.data.audio.duration);\n                callback(\n                    {\n                        text: \"TTS Success! Here's your generated audio!\",\n                        attachments: [\n                            {\n                                id: crypto.randomUUID(),\n                                url: result.data.audio.url,\n                                title: \"TTS Generation\",\n                                source: \"TTSGeneration\",\n                                description: TTSPrompt,\n                                text: TTSPrompt,\n                            },\n                        ],\n                    },\n                    [TTSFileName]\n                ); // Add the audio file to the attachments\n            } else {\n                callback({\n                    text: `TTS generation failed: ${result.error}`,\n                    error: true,\n                });\n            }\n        } catch (error) {\n            elizaLogger.error(`Failed to generate TTS. Error: ${error}`);\n            callback({\n                text: `TTS generation failed: ${error.message}`,\n                error: true,\n            });\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Generate a TTS of prompt: Hello world!\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll call a TTS to generate an audio based on your input prompt\",\n                    action: \"CREATE_TTS\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please do TTS to a prompt: Sam is busy now\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Ok, please wait for the tts generation~\",\n                    action: \"AUDIO_CREATE\",\n                },\n            },\n        ],\n    ],\n} as Action;\n\nexport const TTSGenerationPlugin: Plugin = {\n    name: \"TTSGeneration\",\n    description: \"Generate TTS using PlayAI tts (v3)\",\n    actions: [TTSGeneration],\n    evaluators: [],\n    providers: [],\n};\n","export const FAL_CONSTANTS = {\n    API_TTS_ENDPOINT: \"fal-ai/playai/tts/v3\",\n    API_KEY_SETTING: \"FAL_API_KEY\", // The setting name to fetch from runtime\n};\n\nexport interface VoiceOption {\n    name: string;\n    style: \"Conversational\" | \"Narrative\" | \"Advertising\" | \"Meditation\";\n    region?: string;\n    fullName: string; \n  }\n\nexport const VOICE_MAP: Record<string, VoiceOption[]> = {\n    'en': [\n    { \n    name: \"Jennifer\", \n    style: \"Conversational\", \n    region: \"US/American\",\n    fullName: \"Jennifer (English (US)/American)\"\n    },\n    { \n    name: \"Dexter\", \n    style: \"Conversational\", \n    region: \"US/American\",\n    fullName: \"Dexter (English (US)/American)\"\n    },\n    { \n    name: \"Ava\", \n    style: \"Conversational\", \n    region: \"AU/Australian\",\n    fullName: \"Ava (English (AU)/Australian)\"\n    },\n    { \n    name: \"Tilly\", \n    style: \"Conversational\", \n    region: \"AU/Australian\",\n    fullName: \"Tilly (English (AU)/Australian)\"\n    },\n    { \n    name: \"Charlotte\", \n    style: \"Advertising\", \n    region: \"CA/Canadian\",\n    fullName: \"Charlotte (Advertising) (English (CA)/Canadian)\"\n    },\n    { \n    name: \"Charlotte\", \n    style: \"Meditation\", \n    region: \"CA/Canadian\",\n    fullName: \"Charlotte (Meditation) (English (CA)/Canadian)\"\n    },\n    { \n    name: \"Cecil\", \n    style: \"Conversational\", \n    region: \"GB/British\",\n    fullName: \"Cecil (English (GB)/British)\"\n    },\n    { \n    name: \"Sterling\", \n    style: \"Conversational\", \n    region: \"GB/British\",\n    fullName: \"Sterling (English (GB)/British)\"\n    },\n    { \n    name: \"Cillian\", \n    style: \"Conversational\", \n    region: \"IE/Irish\",\n    fullName: \"Cillian (English (IE)/Irish)\"\n    },\n    { \n    name: \"Madison\", \n    style: \"Conversational\", \n    region: \"IE/Irish\",\n    fullName: \"Madison (English (IE)/Irish)\"\n    },\n    { \n    name: \"Ada\", \n    style: \"Conversational\", \n    region: \"ZA/South african\",\n    fullName: \"Ada (English (ZA)/South african)\"\n    },\n    { \n    name: \"Sumita\", \n    style: \"Conversational\", \n    region: \"IN/Indian\",\n    fullName: \"Sumita (English (IN)/Indian)\"\n    },\n    { \n    name: \"Navya\", \n    style: \"Conversational\", \n    region: \"IN/Indian\",\n    fullName: \"Navya (English (IN)/Indian)\"\n    }\n        ],\n    'ja': [\n    { \n    name: \"Kiriko\", \n    style: \"Conversational\", \n    region: \"Japanese\",\n    fullName: \"Kiriko Conversational (Japanese/Japanese)\"\n    },\n    { \n    name: \"Kiriko\", \n    style: \"Narrative\", \n    region: \"Japanese\",\n    fullName: \"Kiriko Narrative (Japanese/Japanese)\"\n    }\n        ],\n    'af': [\n    { \n    name: \"Ronel\", \n    style: \"Conversational\", \n    region: \"South african\",\n    fullName: \"Ronel Conversational (Afrikaans/South african)\"\n    },\n    { \n    name: \"Ronel\", \n    style: \"Narrative\", \n    region: \"South african\",\n    fullName: \"Ronel Narrative (Afrikaans/South african)\"\n    }\n        ],\n    'ar': [\n    { \n    name: \"Abdo\", \n    style: \"Conversational\", \n    region: \"Arabic\",\n    fullName: \"Abdo Conversational (Arabic/Arabic)\"\n    },\n    { \n    name: \"Abdo\", \n    style: \"Narrative\", \n    region: \"Arabic\",\n    fullName: \"Abdo Narrative (Arabic/Arabic)\"\n    }\n        ],\n    'bn': [\n    { \n    name: \"Mousmi\", \n    style: \"Conversational\", \n    region: \"Bengali\",\n    fullName: \"Mousmi Conversational (Bengali/Bengali)\"\n    },\n    { \n    name: \"Mousmi\", \n    style: \"Narrative\", \n    region: \"Bengali\",\n    fullName: \"Mousmi Narrative (Bengali/Bengali)\"\n    }\n        ],\n    'pt': [\n    { \n    name: \"Caroline\", \n    style: \"Conversational\", \n    region: \"Brazilian\",\n    fullName: \"Caroline Conversational (Portuguese (BR)/Brazilian)\"\n    },\n    { \n    name: \"Caroline\", \n    style: \"Narrative\", \n    region: \"Brazilian\", \n    fullName: \"Caroline Narrative (Portuguese (BR)/Brazilian)\"\n    }\n        ],\n    'fr': [\n    { \n    name: \"Ange\", \n    style: \"Conversational\", \n    region: \"French\",\n    fullName: \"Ange Conversational (French/French)\"\n    },\n    { \n    name: \"Ange\", \n    style: \"Narrative\", \n    region: \"French\",\n    fullName: \"Ange Narrative (French/French)\"\n    },\n    { \n    name: \"Baptiste\", \n    style: \"Conversational\", \n    region: \"French\",\n    fullName: \"Baptiste (English (FR)/French)\"\n    }\n        ],\n    'de': [\n        { \n            name: \"Anke\", \n            style: \"Conversational\", \n            region: \"German\",\n            fullName: \"Anke Conversational (German/German)\"\n        },\n        { \n            name: \"Anke\", \n            style: \"Narrative\", \n            region: \"German\",\n            fullName: \"Anke Narrative (German/German)\"\n        }\n        ],\n    'es': [\n        { \n            name: \"Carmen\", \n            style: \"Conversational\", \n            region: \"Spanish\",\n            fullName: \"Carmen Conversational (Spanish/Spanish)\"\n        },\n        { \n            name: \"Patricia\", \n            style: \"Conversational\", \n            region: \"Spanish\",\n            fullName: \"Patricia Conversational (Spanish/Spanish)\"\n        }\n        ],\n    'ko': [\n        { \n            name: \"Dohee\", \n            style: \"Conversational\", \n            region: \"Korean\",\n            fullName: \"Dohee Conversational (Korean/Korean)\"\n        },\n        { \n            name: \"Dohee\", \n            style: \"Narrative\", \n            region: \"Korean\",\n            fullName: \"Dohee Narrative (Korean/Korean)\"\n        }\n        ],\n    'he': [\n    { \n      name: \"Mary\", \n      style: \"Conversational\", \n      region: \"Israeli\",\n      fullName: \"Mary Conversational (Hebrew/Israeli)\"\n    },\n    { \n      name: \"Mary\", \n      style: \"Narrative\", \n      region: \"Israeli\",\n      fullName: \"Mary Narrative (Hebrew/Israeli)\"\n    }\n    ],\n    'ru': [\n        { \n          name: \"Andrei\", \n          style: \"Conversational\", \n          region: \"Russian\",\n          fullName: \"Andrei Conversational (Russian/Russian)\"\n        },\n        { \n          name: \"Andrei\", \n          style: \"Narrative\", \n          region: \"Russian\",\n          fullName: \"Andrei Narrative (Russian/Russian)\"\n        }\n      ],\n    'ne': [\n    { \n        name: \"Anuj\", \n        style: \"Conversational\", \n        region: \"Indian\",\n        fullName: \"Anuj Conversational (Hindi/Indian)\"\n    },\n    { \n        name: \"Anuj\", \n        style: \"Narrative\", \n        region: \"Indian\",\n        fullName: \"Anuj Narrative (Hindi/Indian)\"\n    }\n    ],\n    'th': [\n        { \n          name: \"Katbundit\", \n          style: \"Conversational\", \n          region: \"Thai\",\n          fullName: \"Katbundit Conversational (Thai/Thai)\"\n        },\n        { \n          name: \"Katbundit\", \n          style: \"Narrative\", \n          region: \"Thai\",\n          fullName: \"Katbundit Narrative (Thai/Thai)\"\n        }\n      ],\n    'tr': [\n    { \n        name: \"Ali\", \n        style: \"Conversational\", \n        region: \"Turkish\",\n        fullName: \"Ali Conversational (Turkish/Turkish)\"\n    },\n    { \n        name: \"Ali\", \n        style: \"Narrative\", \n        region: \"Turkish\",\n        fullName: \"Ali Narrative (Turkish/Turkish)\"\n    }\n    ],\n};\n\nexport const getRandomVoice = (voiceOptions: VoiceOption[]): VoiceOption => {\n    const randomIndex = Math.floor(Math.random() * voiceOptions.length);\n    return voiceOptions[randomIndex];\n  };\n"],"mappings":"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","names":["prompt"]}