{"version":3,"sources":["../src/providers/sgxAttestationProvider.ts","../src/plugins/sgxPlugin.ts","../src/index.ts"],"sourcesContent":["import type { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\nimport type { SgxAttestation } from \"../types/attestation\";\nimport { promises as fs } from 'node:fs'; // Fix: Use node: protocol\nimport { createHash } from 'node:crypto'; // Fix: Use node: protocol\n\n// Function to calculate SHA-256 and return a Buffer (32 bytes)\nfunction calculateSHA256(input: string): Buffer {\n    const hash = createHash('sha256');\n    hash.update(input);\n    return hash.digest();\n}\n\nclass SgxAttestationProvider {\n    private readonly SGX_QUOTE_MAX_SIZE: number = 8192 * 4;\n    private readonly SGX_TARGET_INFO_SIZE: number = 512;\n\n    private readonly MY_TARGET_INFO_PATH: string = \"/dev/attestation/my_target_info\";\n    private readonly TARGET_INFO_PATH: string = \"/dev/attestation/target_info\";\n    private readonly USER_REPORT_DATA_PATH: string = \"/dev/attestation/user_report_data\";\n    private readonly QUOTE_PATH: string = \"/dev/attestation/quote\";\n\n    // Remove unnecessary constructor\n    // constructor() {}\n\n    async generateAttestation(\n        reportData: string\n    ): Promise<SgxAttestation> {\n        // Hash the report data to generate the raw user report.\n        // The resulting hash value is 32 bytes long.\n        // Ensure that the length of the raw user report does not exceed 64 bytes.\n        const rawUserReport = calculateSHA256(reportData);\n\n        try {\n            // Check if the gramine attestation device file exists\n            await fs.access(this.MY_TARGET_INFO_PATH);\n\n            const quote = await this.generateQuoteByGramine(rawUserReport);\n            const attestation: SgxAttestation = {\n                quote: quote,\n                timestamp: Date.now(),\n            };\n            // console.log(\"SGX remote attestation: \", attestation);\n            return attestation;\n        } catch (error) {\n            console.error(\"Error generating SGX remote attestation:\", error);\n            throw new Error(\n                `Failed to generate SGX Quote: ${\n                    error instanceof Error ? error.message : \"Unknown error\"\n                }`\n            );\n        }\n    }\n\n    async generateQuoteByGramine(\n        rawUserReport: Buffer\n    ): Promise<string> {\n        if (rawUserReport.length > 64) {\n            throw new Error(\"the length of rawUserReport exceeds 64 bytes\");\n        }\n\n        const myTargetInfo = await fs.readFile(this.MY_TARGET_INFO_PATH);\n        if (myTargetInfo.length !== this.SGX_TARGET_INFO_SIZE) {\n            throw new Error(\"Invalid my_target_info length\");\n        }\n\n        await fs.writeFile(this.TARGET_INFO_PATH, myTargetInfo);\n        await fs.writeFile(this.USER_REPORT_DATA_PATH, rawUserReport);\n\n        // Read quote\n        const quoteData = await fs.readFile(this.QUOTE_PATH);\n        if (quoteData.length > this.SGX_QUOTE_MAX_SIZE) {\n            throw new Error(\"Invalid quote length\");\n        }\n\n        const realLen = quoteData.lastIndexOf(0);\n        if (realLen === -1) {\n            throw new Error(\"quote without EOF\");\n        }\n\n        //return '0x' + quoteData.subarray(0, realLen + 1).toString('hex');\n        return `0x${quoteData.subarray(0, realLen + 1).toString('hex')}`; // Fix: Use template literal\n    }\n}\n\nconst sgxAttestationProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory, _state?: State) => {\n        const provider = new SgxAttestationProvider();\n        const agentId = runtime.agentId;\n\n        try {\n            // console.log(\"Generating attestation for agent: \", agentId);\n            const attestation = await provider.generateAttestation(agentId);\n            return `Your Agent's remote attestation is: ${JSON.stringify(attestation)}`;\n        } catch (error) {\n            console.error(\"Error in remote attestation provider:\", error);\n            throw new Error(\n                `Failed to generate SGX Quote: ${\n                    error instanceof Error ? error.message : \"Unknown error\"\n                }`\n            );\n        }\n    },\n};\n\nexport { sgxAttestationProvider, SgxAttestationProvider };\n","import type { Plugin } from \"@elizaos/core\";\nimport { sgxAttestationProvider } from \"../providers/sgxAttestationProvider\";\n\nexport const sgxPlugin: Plugin = {\n    name: \"sgx\",\n    description: \"Intel SGX plugin for Eliza, providing SGX attestation\",\n    actions: [],\n    providers: [sgxAttestationProvider],\n    evaluators: [],\n    services: [],\n    clients: [],\n};\n","import { sgxPlugin } from './plugins/sgxPlugin';\n\n\n\nexport * from './plugins/sgxPlugin';\nexport * from './providers/sgxAttestationProvider';\nexport * from './types/attestation';\n\n\nexport default sgxPlugin;\n"],"mappings":";AAEA,SAAS,YAAY,UAAU;AAC/B,SAAS,kBAAkB;AAG3B,SAAS,gBAAgB,OAAuB;AAC5C,QAAM,OAAO,WAAW,QAAQ;AAChC,OAAK,OAAO,KAAK;AACjB,SAAO,KAAK,OAAO;AACvB;AAEA,IAAM,yBAAN,MAA6B;AAAA,EACR,qBAA6B,OAAO;AAAA,EACpC,uBAA+B;AAAA,EAE/B,sBAA8B;AAAA,EAC9B,mBAA2B;AAAA,EAC3B,wBAAgC;AAAA,EAChC,aAAqB;AAAA;AAAA;AAAA,EAKtC,MAAM,oBACF,YACuB;AAIvB,UAAM,gBAAgB,gBAAgB,UAAU;AAEhD,QAAI;AAEA,YAAM,GAAG,OAAO,KAAK,mBAAmB;AAExC,YAAM,QAAQ,MAAM,KAAK,uBAAuB,aAAa;AAC7D,YAAM,cAA8B;AAAA,QAChC;AAAA,QACA,WAAW,KAAK,IAAI;AAAA,MACxB;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,cAAQ,MAAM,4CAA4C,KAAK;AAC/D,YAAM,IAAI;AAAA,QACN,iCACI,iBAAiB,QAAQ,MAAM,UAAU,eAC7C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,uBACF,eACe;AACf,QAAI,cAAc,SAAS,IAAI;AAC3B,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AAEA,UAAM,eAAe,MAAM,GAAG,SAAS,KAAK,mBAAmB;AAC/D,QAAI,aAAa,WAAW,KAAK,sBAAsB;AACnD,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACnD;AAEA,UAAM,GAAG,UAAU,KAAK,kBAAkB,YAAY;AACtD,UAAM,GAAG,UAAU,KAAK,uBAAuB,aAAa;AAG5D,UAAM,YAAY,MAAM,GAAG,SAAS,KAAK,UAAU;AACnD,QAAI,UAAU,SAAS,KAAK,oBAAoB;AAC5C,YAAM,IAAI,MAAM,sBAAsB;AAAA,IAC1C;AAEA,UAAM,UAAU,UAAU,YAAY,CAAC;AACvC,QAAI,YAAY,IAAI;AAChB,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACvC;AAGA,WAAO,KAAK,UAAU,SAAS,GAAG,UAAU,CAAC,EAAE,SAAS,KAAK,CAAC;AAAA,EAClE;AACJ;AAEA,IAAM,yBAAmC;AAAA,EACrC,KAAK,OAAO,SAAwB,UAAkB,WAAmB;AACrE,UAAM,WAAW,IAAI,uBAAuB;AAC5C,UAAM,UAAU,QAAQ;AAExB,QAAI;AAEA,YAAM,cAAc,MAAM,SAAS,oBAAoB,OAAO;AAC9D,aAAO,uCAAuC,KAAK,UAAU,WAAW,CAAC;AAAA,IAC7E,SAAS,OAAO;AACZ,cAAQ,MAAM,yCAAyC,KAAK;AAC5D,YAAM,IAAI;AAAA,QACN,iCACI,iBAAiB,QAAQ,MAAM,UAAU,eAC7C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACnGO,IAAM,YAAoB;AAAA,EAC7B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC;AAAA,EACV,WAAW,CAAC,sBAAsB;AAAA,EAClC,YAAY,CAAC;AAAA,EACb,UAAU,CAAC;AAAA,EACX,SAAS,CAAC;AACd;;;ACFA,IAAO,gBAAQ;","names":[]}