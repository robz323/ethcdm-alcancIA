{"version":3,"file":"jsonRpcProvider.js","sourceRoot":"","sources":["../../../../src/provider/jsonRpcProvider/jsonRpcProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CallSCParams,\n  DeploySCParams,\n  ExecuteScParams,\n  Provider,\n  ReadSCData,\n  ReadSCParams,\n  SignedData,\n} from '..'\nimport {\n  Account,\n  Address,\n  MAX_GAS_CALL,\n  MIN_GAS_CALL,\n  populateDatastore,\n  PublicAPI,\n  PublicApiUrl,\n  SmartContract,\n  StorageCost,\n} from '../..'\nimport { DEPLOYER_BYTECODE } from '../../generated'\nimport { Mas } from '../../basicElements/mas'\nimport {\n  Operation,\n  OperationType,\n  OperationOptions,\n  RollOperation,\n  TransferOperation,\n  CallOperation,\n} from '../../operation'\nimport {\n  getAbsoluteExpirePeriod,\n  OperationManager,\n} from '../../operation/operationManager'\nimport { execute } from '../../basicElements/bytecode'\nimport { ErrorMaxGas, ErrorInsufficientBalance } from '../../errors'\nimport { JsonRpcPublicProvider } from './jsonRpcPublicProvider'\nimport { U64_t } from '../../basicElements/serializers/number/u64'\n\nexport class JsonRpcProvider extends JsonRpcPublicProvider implements Provider {\n  constructor(\n    public client: PublicAPI,\n    public account: Account\n  ) {\n    super(client)\n  }\n\n  static fromRPCUrl(url: string, account: Account): JsonRpcProvider\n  static fromRPCUrl(url: string): JsonRpcPublicProvider\n  static fromRPCUrl(\n    url: string,\n    account?: Account\n  ): JsonRpcProvider | JsonRpcPublicProvider {\n    const client = new PublicAPI(url)\n    if (account) {\n      return new JsonRpcProvider(client, account)\n    }\n    return new JsonRpcPublicProvider(client)\n  }\n\n  static mainnet(account: Account): JsonRpcProvider\n  static mainnet(): JsonRpcPublicProvider\n  static mainnet(account?: Account): JsonRpcProvider | JsonRpcPublicProvider {\n    return account\n      ? JsonRpcProvider.fromRPCUrl(PublicApiUrl.Mainnet, account)\n      : JsonRpcProvider.fromRPCUrl(PublicApiUrl.Mainnet)\n  }\n\n  static buildnet(account: Account): JsonRpcProvider\n  static buildnet(): JsonRpcPublicProvider\n  static buildnet(account?: Account): JsonRpcProvider | JsonRpcPublicProvider {\n    return account\n      ? JsonRpcProvider.fromRPCUrl(PublicApiUrl.Buildnet, account)\n      : JsonRpcProvider.fromRPCUrl(PublicApiUrl.Buildnet)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private readonly _providerName: string = 'Massa Json Rpc provider'\n\n  get accountName(): string {\n    return this.account.address.toString()\n  }\n\n  get providerName(): string {\n    return this._providerName\n  }\n\n  get address(): string {\n    return this.account.address.toString()\n  }\n\n  async balance(final = true): Promise<bigint> {\n    return this.client.getBalance(this.address.toString(), final)\n  }\n\n  private async rollOperation(\n    type: OperationType,\n    amount: Mas,\n    opts?: OperationOptions\n  ): Promise<Operation> {\n    if (type !== OperationType.RollBuy && type !== OperationType.RollSell) {\n      throw new Error('Invalid roll operation type.')\n    }\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (amount <= 0) {\n      throw new Error('amount of rolls must be a positive non-zero value.')\n    }\n\n    const operation = new OperationManager(this.account.privateKey, this.client)\n    const details: RollOperation = {\n      fee: opts?.fee ?? (await this.client.getMinimalFee()),\n      expirePeriod: await getAbsoluteExpirePeriod(\n        this.client,\n        opts?.periodToLive\n      ),\n      type,\n      amount,\n    }\n    const operationId = await operation.send(details)\n    return new Operation(this, operationId)\n  }\n\n  /**\n   * Buys rolls.\n   *\n   * @param amount - The number of rolls to buy.\n   * @param opts - Optional operation details.\n   *\n   * @returns The ID of the operation.\n   * @throws If the amount of rolls is not a positive non-zero value.\n   */\n  async buyRolls(amount: Mas, opts?: OperationOptions): Promise<Operation> {\n    return this.rollOperation(OperationType.RollBuy, amount, opts)\n  }\n\n  /**\n   * Sells rolls.\n   *\n   * @param amount - The number of rolls to sell.\n   * @param opts - Optional operation details.\n   *\n   * @returns The ID of the operation.\n   * @throws If the amount of rolls is not a positive non-zero value.\n   */\n  async sellRolls(amount: Mas, opts?: OperationOptions): Promise<Operation> {\n    return this.rollOperation(OperationType.RollSell, amount, opts)\n  }\n\n  /**\n   * Transfers tokens.\n   *\n   * @param to - The address of the recipient.\n   * @param amount - The amount of tokens to transfer.\n   * @param opts - Optional operation details.\n   *\n   * @returns The ID of the operation.\n   * @throws If the amount of tokens is not a positive non-zero value.\n   */\n  async transfer(\n    to: Address | string,\n    amount: Mas,\n    opts?: OperationOptions\n  ): Promise<Operation> {\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (amount <= 0) {\n      throw new Error('amount to transfer must be a positive non-zero value.')\n    }\n\n    if (typeof to === 'string') {\n      to = Address.fromString(to)\n    }\n\n    const operation = new OperationManager(this.account.privateKey, this.client)\n    const details: TransferOperation = {\n      fee: opts?.fee ?? (await this.client.getMinimalFee()),\n      expirePeriod: await getAbsoluteExpirePeriod(\n        this.client,\n        opts?.periodToLive\n      ),\n      type: OperationType.Transaction,\n      amount,\n      recipientAddress: to,\n    }\n    const operationId = await operation.send(details)\n    return new Operation(this, operationId)\n  }\n\n  public async sign(data: Uint8Array | string): Promise<SignedData> {\n    const bytes =\n      typeof data === 'string' ? new TextEncoder().encode(data) : data\n    const sig = await this.account.sign(bytes)\n    return {\n      publicKey: this.account.publicKey.toString(),\n      signature: sig.toString(),\n    }\n  }\n\n  public async callSC(params: CallSCParams): Promise<Operation> {\n    const operationId = await this.call(params)\n    return new Operation(this, operationId)\n  }\n\n  /**\n   * Executes Binary Smart Contract Code Onchain\n   *\n   * Executes a binary code (smart contract) directly on the blockchain without deploying or storing it.\n   * This function is particularly useful for one-off actions or tasks that require blockchain execution\n   * but do not need the persistence or state of a deployed smart contract.\n   *\n   * @remarks\n   * If the execution involves storing data or spending coins, the sender's address (i.e., the user's address\n   * initiating the contract execution) will be used.\n   *\n   * @see {@link https://docs.massa.net/docs/learn/operation-format-execution#executesc-operation-payload} for more details\n   * on the setup and usage of the datastore during execution.\n   */\n  public async executeSC(params: ExecuteScParams): Promise<Operation> {\n    return new Operation(this, await this.executeSc(params))\n  }\n\n  public async deploySC(params: DeploySCParams): Promise<SmartContract> {\n    const operationId = await this.deploy(params)\n\n    const operation = new Operation(this, operationId)\n    const deployedAddress = await operation.getDeployedAddress(\n      params.waitFinalExecution\n    )\n    return new SmartContract(this, deployedAddress)\n  }\n\n  /**\n   * Executes Binary Smart Contract Code Onchain.\n   * @see {@link https://docs.massa.net/docs/learn/operation-format-execution#executesc-operation-payload} for more information on how to setup datastore.\n   */\n  async executeSc(params: ExecuteScParams): Promise<string> {\n    return execute(this.client, this.account.privateKey, params.byteCode, {\n      fee: params.fee,\n      periodToLive: params.periodToLive,\n      maxCoins: params.maxCoins,\n      maxGas: params.maxGas,\n      datastore: params.datastore,\n    })\n  }\n\n  /**\n   * Executes a smart contract call operation\n   * @param params - callSCParams.\n   * @returns A promise that resolves to an Operation object representing the transaction.\n   */\n  protected async call(params: CallSCParams): Promise<string> {\n    const coins = params.coins ?? 0n\n    await this.checkAccountBalance(coins)\n\n    const args = params.parameter ?? new Uint8Array()\n    const parameter = args instanceof Uint8Array ? args : args.serialize()\n\n    const fee = params.fee ?? (await this.client.getMinimalFee())\n\n    let maxGas = params.maxGas\n    if (!maxGas) {\n      maxGas = await this.getGasEstimation(params)\n    } else {\n      if (maxGas > MAX_GAS_CALL) {\n        throw new ErrorMaxGas({ isHigher: true, amount: MAX_GAS_CALL })\n      } else if (maxGas < MIN_GAS_CALL) {\n        throw new ErrorMaxGas({ isHigher: false, amount: MIN_GAS_CALL })\n      }\n    }\n\n    const details: CallOperation = {\n      fee,\n      expirePeriod: await getAbsoluteExpirePeriod(\n        this.client,\n        params.periodToLive\n      ),\n      type: OperationType.CallSmartContractFunction,\n      coins,\n      maxGas,\n      address: params.target,\n      func: params.func,\n      parameter,\n    }\n\n    const manager = new OperationManager(this.account.privateKey, this.client)\n    return manager.send(details)\n  }\n\n  protected async checkAccountBalance(coins: Mas): Promise<void> {\n    if (coins > 0n) {\n      const balance = await this.client.getBalance(\n        this.account.address.toString()\n      )\n      if (balance < coins) {\n        throw new ErrorInsufficientBalance({\n          userBalance: balance,\n          neededBalance: coins,\n        })\n      }\n    }\n  }\n\n  /**\n   * Deploys a smart contract on the blockchain.\n   *\n   * @param params - Optional deployment details with defaults as follows:\n   * @param params.fee - Execution fee, auto-estimated if absent.\n   * @param params.maxCoins - Maximum number of coins to use, auto-estimated if absent.\n   * @param params.maxGas - Maximum execution gas, auto-estimated if absent.\n   * @param params.periodToLive - Duration in blocks before the transaction expires, defaults to 10.\n   *\n   * @returns The deployed smart contract.\n   *\n   * @throws If the account has insufficient balance to deploy the smart contract.\n   */\n  protected async deploy(params: DeploySCParams): Promise<string> {\n    const coins = params.coins ?? 0n\n    const totalCost =\n      StorageCost.smartContractDeploy(params.byteCode.length) + coins\n\n    await this.checkAccountBalance(totalCost)\n\n    const args = params.parameter ?? new Uint8Array()\n    const parameter = args instanceof Uint8Array ? args : args.serialize()\n\n    const datastore = populateDatastore([\n      {\n        data: params.byteCode,\n        args: parameter,\n        coins,\n      },\n    ])\n\n    const fee = params.fee ?? (await this.client.getMinimalFee())\n\n    return execute(this.client, this.account.privateKey, DEPLOYER_BYTECODE, {\n      fee,\n      periodToLive: params.periodToLive,\n      maxCoins: params?.maxCoins ?? totalCost,\n      maxGas: params.maxGas,\n      datastore,\n    })\n  }\n\n  /**\n   * Reads smart contract function.\n   * @param params - readSCParams.\n   * @returns A promise that resolves to a ReadSCData.\n   */\n  async readSC(params: ReadSCParams): Promise<ReadSCData> {\n    const args = params.parameter ?? new Uint8Array()\n    const caller = params.caller ?? this.account.address.toString()\n    const readOnlyParams = {\n      ...params,\n      caller,\n      parameter: args instanceof Uint8Array ? args : args.serialize(),\n    }\n    return this.client.executeReadOnlyCall(readOnlyParams)\n  }\n\n  public async getGasEstimation(params: ReadSCParams): Promise<U64_t> {\n    const caller = params.caller ?? this.account.address.toString()\n    return super.getGasEstimation({ ...params, caller })\n  }\n}\n\n// This line ensure retro compatibility with the previous version of massa-web3\nexport { JsonRpcProvider as Web3Provider }\n"]}