{"version":3,"file":"jsonRpcPublicProvider.js","sourceRoot":"","sources":["../../../../src/provider/jsonRpcProvider/jsonRpcPublicProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GAS_ESTIMATION_TOLERANCE,\n  NodeStatusInfo,\n  PublicProvider,\n  ReadSCData,\n  ReadSCParams,\n} from '..'\nimport {\n  Account,\n  CHAIN_ID,\n  DatastoreEntry,\n  EventFilter,\n  Mas,\n  MAX_GAS_CALL,\n  minBigInt,\n  Network,\n  NetworkName,\n  PublicAPI,\n  PublicApiUrl,\n  strToBytes,\n} from '../..'\nimport { rpcTypes as t } from '../../generated'\nimport { OperationStatus } from '../../operation'\nimport { formatNodeStatusObject } from '../../client/formatObjects'\nimport { U64_t } from '../../basicElements/serializers/number/u64'\n\nexport class JsonRpcPublicProvider implements PublicProvider {\n  constructor(public client: PublicAPI) {}\n\n  static fromRPCUrl(url: string): PublicProvider {\n    return new JsonRpcPublicProvider(new PublicAPI(url))\n  }\n\n  static mainnet(): PublicProvider {\n    return JsonRpcPublicProvider.fromRPCUrl(PublicApiUrl.Mainnet)\n  }\n\n  static buildnet(): PublicProvider {\n    return JsonRpcPublicProvider.fromRPCUrl(PublicApiUrl.Buildnet)\n  }\n\n  async balanceOf(\n    addresses: string[],\n    final = true\n  ): Promise<{ address: string; balance: bigint }[]> {\n    const addressesInfo = await this.client.getMultipleAddressInfo(addresses)\n\n    const balances = addressesInfo.map((addressInfo) => ({\n      address: addressInfo.address,\n      balance: final\n        ? Mas.fromString(addressInfo.final_balance)\n        : Mas.fromString(addressInfo.candidate_balance),\n    }))\n\n    return balances\n  }\n\n  async networkInfos(): Promise<Network> {\n    const chainId = await this.client.getChainId()\n    let name = 'Unknown'\n    if (chainId === CHAIN_ID.Mainnet) {\n      name = NetworkName.Mainnet\n    } else if (chainId === CHAIN_ID.Buildnet) {\n      name = NetworkName.Buildnet\n    }\n\n    return {\n      name,\n      chainId,\n      url: this.client.url,\n      minimalFee: await this.client.getMinimalFee(),\n    }\n  }\n\n  public async getOperationStatus(opId: string): Promise<OperationStatus> {\n    return this.client.getOperationStatus(opId)\n  }\n\n  public async getEvents(filter: EventFilter): Promise<t.OutputEvents> {\n    return this.client.getEvents(filter)\n  }\n\n  public async getNodeStatus(): Promise<NodeStatusInfo> {\n    const status = await this.client.status()\n    return formatNodeStatusObject(status)\n  }\n\n  /**\n   * Reads smart contract function.\n   * @param params - readSCParams.\n   * @returns A promise that resolves to a ReadSCData.\n   *\n   * @remarks Be a aware that if you don't provide a caller address, it will generate a random one.\n   */\n  async readSC(params: ReadSCParams): Promise<ReadSCData> {\n    const args = params.parameter ?? new Uint8Array()\n    const caller =\n      params.caller ?? (await Account.generate()).address.toString()\n    const readOnlyParams = {\n      ...params,\n      caller,\n      parameter: args instanceof Uint8Array ? args : args.serialize(),\n    }\n    return this.client.executeReadOnlyCall(readOnlyParams)\n  }\n\n  public async getStorageKeys(\n    address: string,\n    filter: Uint8Array | string = new Uint8Array(),\n    final = true\n  ): Promise<Uint8Array[]> {\n    const filterBytes: Uint8Array =\n      typeof filter === 'string' ? strToBytes(filter) : filter\n    return this.client.getDataStoreKeys(address, filterBytes, final)\n  }\n\n  public async readStorage(\n    address: string,\n    keys: Uint8Array[] | string[],\n    final = true\n  ): Promise<(Uint8Array | null)[]> {\n    const entries: DatastoreEntry[] = keys.map((key) => ({ address, key }))\n    return this.client.getDatastoreEntries(entries, final)\n  }\n\n  /**\n   * Returns the gas estimation for a given function.\n   *\n   * @remarks To avoid running out of gas, the gas estimation is increased by 20%.\n   *\n   * @param params - ReadSCParams. caller must be provided\n   * @throws If the read operation returns an error.\n   * @returns The gas estimation for the operation execution.\n   */\n  public async getGasEstimation(params: ReadSCParams): Promise<U64_t> {\n    if (!params.caller) {\n      throw new Error('Caller must be provided for gas estimation')\n    }\n\n    const result = await this.readSC(params)\n\n    if (result.info.error) {\n      throw new Error(result.info.error)\n    }\n\n    const gasCost = BigInt(result.info.gasCost)\n    return minBigInt(\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n      gasCost + (gasCost * GAS_ESTIMATION_TOLERANCE) / 100n,\n      MAX_GAS_CALL\n    )\n  }\n}\n"]}