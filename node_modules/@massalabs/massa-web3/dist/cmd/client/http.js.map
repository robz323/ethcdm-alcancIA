{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/client/http.ts"],"names":[],"mappings":";AAAA,mGAAmG;;;AAEnG,mCAAuD;AAUvD,MAAM,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;CACnC,CAAA;AAED,SAAS,aAAa;IACpB,OAAO;QACL,OAAO,EAAE,CAAC;QACV,IAAI;YACF,OAAO,IAAI,CAAC,OAAO,EAAE,CAAA;QACvB,CAAC;QACD,KAAK;YACH,IAAI,CAAC,OAAO,GAAG,CAAC,CAAA;QAClB,CAAC;KACF,CAAA;AACH,CAAC;AAED,MAAM,OAAO,GAAG,aAAa,EAAE,CAAA;AAE/B,SAAgB,gBAAgB,CAC9B,GAAW,EACX,OAA+B,EAAE;IAEjC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,0BAAkB,CAAA;IACjC,CAAC;IACD,OAAO;QACL,KAAK,CAAC,OAAO,CACX,QAAgB,EAChB,MAA6B;YAE7B,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAS,EAAC,GAAG,EAAE;gBACpC,MAAM,IAAI,GAAgB;oBACxB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,MAAM,EAAE,QAAQ;wBAChB,MAAM,EAAE,CAAC,MAAM,CAAC;wBAChB,EAAE,EAAE,OAAO,CAAC,IAAI,EAAE;qBACnB,CAAC;oBACF,OAAO;oBACP,MAAM,EAAE,MAAM;iBACf,CAAA;gBACD,OAAO,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;YACzB,CAAC,EAAE,IAAI,CAAC,KAAM,CAAC,CAAA;YAEf,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YAElC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;YACtC,CAAC;YACD,OAAO,IAAI,CAAC,MAAM,CAAA;QACpB,CAAC;KACF,CAAA;AACH,CAAC;AAlCD,4CAkCC","sourcesContent":["/* eslint-disable  @typescript-eslint/naming-convention, @typescript-eslint/no-non-null-assertion*/\n\nimport { DEFAULT_RETRY_OPTS, withRetry } from './retry'\nimport { ClientOptions } from './types'\n\nexport type HttpRpcClient = {\n  request<HttpRequestParameters, HttpRequestResult>(\n    endpoint: string,\n    params: HttpRequestParameters\n  ): Promise<HttpRequestResult>\n}\n\nconst headers = {\n  'Content-Type': 'application/json',\n}\n\nfunction createIdStore(): { current: number; take(): number; reset(): void } {\n  return {\n    current: 0,\n    take(): number {\n      return this.current++\n    },\n    reset(): void {\n      this.current = 0\n    },\n  }\n}\n\nconst idCache = createIdStore()\n\nexport function getHttpRpcClient(\n  url: string,\n  opts: Partial<ClientOptions> = {}\n): HttpRpcClient {\n  if (!opts.retry) {\n    opts.retry = DEFAULT_RETRY_OPTS\n  }\n  return {\n    async request<HttpRequestParameters, HttpRequestResult>(\n      endpoint: string,\n      params: HttpRequestParameters\n    ): Promise<HttpRequestResult> {\n      const response = await withRetry(() => {\n        const init: RequestInit = {\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            method: endpoint,\n            params: [params],\n            id: idCache.take(),\n          }),\n          headers,\n          method: 'POST',\n        }\n        return fetch(url, init)\n      }, opts.retry!)\n\n      const data = await response.json()\n\n      if (!response.ok || !!data.error) {\n        throw new Error(data.error?.message)\n      }\n      return data.result\n    },\n  }\n}\n"]}