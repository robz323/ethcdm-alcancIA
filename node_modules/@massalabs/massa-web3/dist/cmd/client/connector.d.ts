import { rpcTypes as t } from 'src/generated';
import { ClientOptions } from './types';
export declare class Connector {
    private client;
    constructor(url: string, opts?: Partial<ClientOptions>);
    /**
     * Execute a smart contract in a read only context
     */
    execute_read_only_bytecode: t.ExecuteReadOnlyBytecode;
    /**
     * Call a function of a contract in a read only context
     */
    execute_read_only_call: t.ExecuteReadOnlyCall;
    /**
     * To check when your address is selected to stake.
     */
    get_addresses: t.GetAddresses;
    /**
     * Returns the bytecode of the given addresses.
     */
    get_addresses_bytecode: t.GetAddressesBytecode;
    /**
     * Get blocks
     */
    get_blocks: t.GetBlocks;
    /**
     * Get a block in the blockclique
     */
    get_blockclique_block_by_slot: t.GetBlockcliqueBlockBySlot;
    /**
     * Get cliques
     */
    get_cliques: t.GetCliques;
    /**
     * Get a data entry both at the latest final and active executed slots for the given addresses.
     */
    get_datastore_entries: t.GetDatastoreEntries;
    /**
     * Get transfers for specified slots
     */
    get_slots_transfers: t.GetSlotsTransfers;
    /**
     * Get endorsements
     */
    get_endorsements: t.GetEndorsements;
    /**
     * Returns events optionally filtered
     */
    get_filtered_sc_output_event: t.GetFilteredScOutputEvent;
    /**
     * Get graph interval
     */
    get_graph_interval: t.GetGraphInterval;
    /**
     * Get operations
     */
    get_operations: t.GetOperations;
    /**
     * Get stakers
     */
    get_stakers: t.GetStakers;
    /**
     * Summary of the current state
     */
    get_status: t.GetStatus;
    /**
     * Add a vec of new secret(private) keys for the node to use to stake
     */
    add_staking_secret_keys: t.AddStakingSecretKeys;
    /**
     * Return hashset of staking addresses
     */
    get_staking_addresses: t.GetStakingAddresses;
    /**
     * Returns if slot is available and the price to book the requested gas
     */
    get_deferred_call_quote: t.GetDeferredCallQuote;
    /**
     * Returns information about deferred calls.
     */
    get_deferred_call_info: t.GetDeferredCallInfo;
    /**
     * Returns ids of deferred calls for provided slots.
     */
    get_deferred_call_ids_by_slot: t.GetDeferredCallIdsBySlot;
    /**
     * Add to bootstrap blacklist given IP addresses
     */
    node_add_to_bootstrap_blacklist: t.NodeAddToBootstrapBlacklist;
    /**
     * Add to bootstrap whitelist given IP addresses
     */
    node_add_to_bootstrap_whitelist: t.NodeAddToBootstrapWhitelist;
    /**
     * Add to peers whitelist given IP addresses
     */
    node_add_to_peers_whitelist: t.NodeAddToPeersWhitelist;
    /**
     * Ban given ids
     */
    node_ban_by_id: t.NodeBanById;
    /**
     * Ban given IP addresses
     */
    node_ban_by_ip: t.NodeBanByIp;
    /**
     * Returns bootstrap blacklist IP addresses
     */
    node_bootstrap_blacklist: t.NodeBootstrapBlacklist;
    /**
     * Returns bootstrap whitelist IP addresses
     */
    node_bootstrap_whitelist: t.NodeBootstrapWhitelist;
    /**
     * Allow everyone to bootstrap from the node
     */
    node_bootstrap_whitelist_allow_all: t.NodeBootstrapWhitelistAllowAll;
    /**
     * Returns peers whitelist IP addresses
     */
    node_peers_whitelist: t.NodePeersWhitelist;
    /**
     * Remove from bootstrap blacklist given IP addresses
     */
    node_remove_from_bootstrap_blacklist: t.NodeRemoveFromBootstrapBlacklist;
    /**
     * Remove from bootstrap whitelist given IP addresses
     */
    node_remove_from_bootstrap_whitelist: t.NodeRemoveFromBootstrapWhitelist;
    /**
     * Remove from peers whitelist given IP addresses
     */
    node_remove_from_peers_whitelist: t.NodeRemoveFromPeersWhitelist;
    /**
     * Remove from whitelist given IP addresses
     */
    node_remove_from_whitelist: t.NodeRemoveFromWhitelist;
    /**
     * Remove a vec of addresses used to stake
     */
    remove_staking_addresses: t.RemoveStakingAddresses;
    /**
     * Sign message with nodeâ€™s key
     */
    node_sign_message: t.NodeSignMessage;
    /**
     * Gracefully stop the node
     */
    stop_node: t.StopNode;
    /**
     * Unban given ids
     */
    node_unban_by_id: t.NodeUnbanById;
    /**
     * Unban given IP addresses
     */
    node_unban_by_ip: t.NodeUnbanByIp;
    /**
     * Whitelist given IP addresses
     */
    node_whitelist: t.NodeWhitelist;
    /**
     * Adds operations to pool
     */
    send_operations: t.SendOperations;
    /**
     * Get largest stakers
     */
    get_largest_stakers: t.GetLargestStakers;
    /**
     * Get next block best parents
     */
    get_next_block_best_parents: t.GetNextBlockBestParents;
    /**
     * Get Massa node version
     */
    get_version: t.GetVersion;
    /**
     * New produced blocks
     */
    subscribe_new_blocks: t.SubscribeNewBlocks;
    /**
     * New produced blocks headers
     */
    subscribe_new_blocks_headers: t.SubscribeNewBlocksHeaders;
    /**
     * New produced blocks with operations content
     */
    subscribe_new_filled_blocks: t.SubscribeNewFilledBlocks;
    /**
     * Subscribe to new operations
     */
    subscribe_new_operations: t.SubscribeNewOperations;
    /**
     * Unsubscribe from new produced blocks
     */
    unsubscribe_new_blocks: t.UnsubscribeNewBlocks;
    /**
     * Unsubscribe from new produced blocks headers
     */
    unsubscribe_new_blocks_headers: t.UnsubscribeNewBlocksHeaders;
    /**
     * Unsubscribe from new produced filled blocks
     */
    unsubscribe_new_filled_blocks: t.UnsubscribeNewFilledBlocks;
    /**
     * Unsubscribe from new received operations
     */
    unsubscribe_new_operations: t.UnsubscribeNewOperations;
}
