{"version":3,"file":"dataEntryNotFound.js","sourceRoot":"","sources":["../../../src/errors/dataEntryNotFound.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAA;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAQ1C;;GAEG;AACH,MAAM,OAAO,sBAAuB,SAAQ,SAAS;IACnD;;OAEG;IACM,IAAI,GAAG,wBAAwB,CAAA;IAExC;;;;;OAKG;IACH,YAAY,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAoC;QACrE,KAAK,CACH,2BAA2B,GAAG,8DAA8D,OAAO,GAAG,EACtG;YACE,IAAI,EAAE,UAAU,CAAC,iBAAiB;YAClC,OAAO;SACR,CACF,CAAA;IACH,CAAC;CACF","sourcesContent":["import { ErrorBase } from './base'\nimport { ErrorCodes } from './utils/codes'\n\ntype ErrorDataEntryNotFoundParameters = {\n  key: Uint8Array | string\n  address: string\n  details?: string\n}\n\n/**\n * Error class for handling the situation when a data entry has not been found in a smart contract datastore.\n */\nexport class ErrorDataEntryNotFound extends ErrorBase {\n  /**\n   * Override the name to clearly identify this as a ErrorDataEntryNotFound.\n   */\n  override name = 'ErrorDataEntryNotFound'\n\n  /**\n   * Constructs a ErrorDataEntryNotFound with a message indicating the missing data entry.\n   * @param key - The key of the data entry that was not found.\n   * @param address - The address of the smart contract datastore where the entry was expected.\n   * @param details - Optional details to provide more context about the error.\n   */\n  constructor({ key, address, details }: ErrorDataEntryNotFoundParameters) {\n    super(\n      `The data entry with key ${key} was not found in the datastore of the contract at address ${address}.`,\n      {\n        code: ErrorCodes.DataEntryNotFound,\n        details,\n      }\n    )\n  }\n}\n"]}