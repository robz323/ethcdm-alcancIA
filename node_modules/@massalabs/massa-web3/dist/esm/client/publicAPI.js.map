{"version":3,"file":"publicAPI.js","sourceRoot":"","sources":["../../../src/client/publicAPI.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Mas, strToBytes } from '../basicElements'\nimport {\n  SendOperationInput,\n  EventFilter as EvtFilter,\n  ReadOnlyCallResult,\n  ClientOptions,\n  DatastoreEntry,\n  formatReadOnlyCallResponse,\n} from '.'\nimport { MAX_GAS_CALL } from '../smartContracts'\nimport { OperationStatus, ReadOnlyParams } from '../operation'\nimport isEqual from 'lodash.isequal'\nimport { Connector } from './connector'\nimport { rpcTypes as t } from 'src/generated/'\n\nexport class PublicAPI {\n  connector: Connector\n  lastStatus: t.NodeStatus\n\n  // eslint-disable-next-line max-params\n  constructor(\n    public url: string,\n    public options: Partial<ClientOptions> = {}\n  ) {\n    this.connector = new Connector(url, this.options)\n  }\n\n  async executeReadOnlyBytecode(\n    readOnlyBytecodeExecution: t.ReadOnlyBytecodeExecution\n  ): Promise<t.ExecuteReadOnlyResponse> {\n    return this.connector\n      .execute_read_only_bytecode([readOnlyBytecodeExecution])\n      .then((r) => r[0])\n  }\n\n  async executeMultipleReadOnlyBytecode(\n    readOnlyBytecodeExecutions: t.ReadOnlyBytecodeExecution[]\n  ): Promise<t.ExecuteReadOnlyResponse[]> {\n    return this.connector.execute_read_only_bytecode(readOnlyBytecodeExecutions)\n  }\n\n  async executeReadOnlyCall(\n    params: ReadOnlyParams\n  ): Promise<ReadOnlyCallResult> {\n    const [res] = await this.connector.execute_read_only_call([\n      {\n        max_gas: Number(params.maxGas ?? MAX_GAS_CALL),\n        target_address: params.target,\n        target_function: params.func,\n        parameter: Array.from(params.parameter),\n        caller_address: params.caller,\n        coins: params.coins ? Mas.toString(params.coins) : null,\n        fee: params.fee ? Mas.toString(params.fee) : null,\n      },\n    ])\n\n    if (!res) {\n      throw new Error('No result returned from execute_read_only_call')\n    }\n\n    return formatReadOnlyCallResponse(res)\n  }\n\n  async executeMultipleReadOnlyCall(\n    readOnlyCalls: ReadOnlyParams[]\n  ): Promise<ReadOnlyCallResult[]> {\n    const params = readOnlyCalls.map((call) => ({\n      max_gas: Number(call.maxGas ?? MAX_GAS_CALL),\n      target_address: call.target,\n      target_function: call.func,\n      parameter: Array.from(call.parameter),\n      caller_address: call.caller,\n      coins: call.coins ? Mas.toString(call.coins) : null,\n      fee: call.fee ? Mas.toString(call.fee) : null,\n    }))\n    const res = await this.connector.execute_read_only_call(params)\n    return res.map((r) => formatReadOnlyCallResponse(r))\n  }\n\n  async getAddressInfo(address: string): Promise<t.AddressInfo> {\n    return this.getMultipleAddressInfo([address]).then((r) => r[0])\n  }\n\n  async getBalance(address: string, final = true): Promise<Mas.Mas> {\n    return this.getAddressInfo(address).then((r) => {\n      return Mas.fromString(final ? r.final_balance : r.candidate_balance)\n    })\n  }\n\n  async getMultipleAddressInfo(addresses: string[]): Promise<t.AddressInfo[]> {\n    return this.connector.get_addresses(addresses)\n  }\n\n  async getAddressesBytecode(\n    addressFilter: t.AddressFilter\n  ): Promise<Uint8Array> {\n    return this.connector\n      .get_addresses_bytecode([addressFilter])\n      .then((r) => Uint8Array.from(r[0]))\n  }\n\n  async executeMultipleGetAddressesBytecode(\n    addressFilters: t.AddressFilter[]\n  ): Promise<Uint8Array[]> {\n    const bytecodes =\n      await this.connector.get_addresses_bytecode(addressFilters)\n    return bytecodes.map((bytecode) => Uint8Array.from(bytecode))\n  }\n\n  async getBlock(blockId: t.BlockId): Promise<t.BlockInfo> {\n    return this.connector.get_blocks([blockId]).then((r) => r[0])\n  }\n\n  async getMultipleBlocks(blockIds: t.BlockId[]): Promise<t.BlockInfo[]> {\n    return this.connector.get_blocks(blockIds)\n  }\n\n  async getBlockcliqueBlock(slot: t.Slot): Promise<t.Block> {\n    return this.connector.get_blockclique_block_by_slot(slot)\n  }\n\n  async getCliques(): Promise<t.Clique[]> {\n    return this.connector.get_cliques()\n  }\n\n  async getDataStoreKeys(\n    contract: string,\n    filter: Uint8Array = new Uint8Array(),\n    final = true\n  ): Promise<Uint8Array[]> {\n    const addrInfo = await this.getAddressInfo(contract)\n    const keys = final\n      ? addrInfo.final_datastore_keys\n      : addrInfo.candidate_datastore_keys\n    return keys\n      .filter(\n        (key) =>\n          !filter.length ||\n          isEqual(Uint8Array.from(key.slice(0, filter.length)), filter)\n      )\n      .map((key) => Uint8Array.from(key))\n  }\n\n  async getDatastoreEntries(\n    inputs: DatastoreEntry[],\n    final = true\n  ): Promise<(Uint8Array | null)[]> {\n    const entriesQuery = inputs.map((entry) => {\n      const byteKey: Uint8Array =\n        typeof entry.key === 'string' ? strToBytes(entry.key) : entry.key\n      return {\n        key: Array.from(byteKey),\n        address: entry.address,\n      }\n    })\n    const res = await this.connector.get_datastore_entries(entriesQuery)\n    return res.map((r: t.DatastoreEntryOutput) => {\n      const val = final ? r.final_value : r.candidate_value\n      return val ? Uint8Array.from(val) : null\n    })\n  }\n\n  async getDatastoreEntry(\n    key: string | Uint8Array,\n    address: string,\n    final = true\n  ): Promise<Uint8Array | null> {\n    return this.getDatastoreEntries([{ key, address }], final).then((r) => r[0])\n  }\n\n  async getSlotTransfers(slot: t.Slot): Promise<t.TransferReceipt[]> {\n    return this.connector.get_slots_transfers([slot]).then((r) => r[0])\n  }\n\n  async getMultipleSlotTransfers(\n    slots: t.Slot[]\n  ): Promise<t.TransferReceipt[][]> {\n    return this.connector.get_slots_transfers(slots)\n  }\n\n  async getEndorsement(endorsementId: string): Promise<t.EndorsementInfo> {\n    return this.getMultipleEndorsements([endorsementId]).then((r) => r[0])\n  }\n\n  async getMultipleEndorsements(\n    endorsementIds: string[]\n  ): Promise<t.EndorsementInfo[]> {\n    return this.connector.get_endorsements(endorsementIds)\n  }\n\n  async getEvents(filter: EvtFilter): Promise<t.SCOutputEvent[]> {\n    const formattedFilter = {\n      start: filter.start,\n      end: filter.end,\n      emitter_address: filter.smartContractAddress,\n      original_caller_address: filter.callerAddress,\n      original_operation_id: filter.operationId,\n      is_final: filter.isFinal,\n      is_error: filter.isError,\n    }\n\n    return this.connector.get_filtered_sc_output_event(formattedFilter)\n  }\n\n  async getGraphInterval(\n    start?: number,\n    end?: number\n  ): Promise<t.GraphInterval[]> {\n    return this.connector.get_graph_interval({ start, end })\n  }\n\n  async getOperations(operationIds: string[]): Promise<t.OperationInfo[]> {\n    return this.connector.get_operations(operationIds)\n  }\n\n  async getOperation(\n    operationId: string\n  ): Promise<t.OperationInfo | undefined> {\n    return this.getOperations([operationId]).then((r) => r[0])\n  }\n\n  async getOperationStatus(operationId: string): Promise<OperationStatus> {\n    const op = await this.getOperation(operationId)\n\n    if (!op) {\n      return OperationStatus.NotFound\n    }\n\n    if (op.op_exec_status === null) {\n      if (op.is_operation_final === null) {\n        return OperationStatus.NotFound\n      }\n\n      throw new Error('unexpected status')\n    }\n\n    if (op.in_pool) {\n      return OperationStatus.PendingInclusion\n    }\n\n    if (!op.is_operation_final) {\n      return op.op_exec_status\n        ? OperationStatus.SpeculativeSuccess\n        : OperationStatus.SpeculativeError\n    }\n\n    return op.op_exec_status ? OperationStatus.Success : OperationStatus.Error\n  }\n\n  // todo rename PageRequest pagination\n  async getStakers(pagination: t.Pagination): Promise<t.Staker[]> {\n    return this.connector.get_stakers(pagination)\n  }\n\n  async status(): Promise<t.NodeStatus> {\n    this.lastStatus = await this.connector.get_status()\n    return this.lastStatus\n  }\n\n  async getMinimalFee(): Promise<bigint> {\n    if (!this.lastStatus) {\n      await this.status()\n    }\n    if (!this.lastStatus.minimal_fees) {\n      throw new Error('minimal fees: not available')\n    }\n    return Mas.fromString(this.lastStatus.minimal_fees)\n  }\n\n  async getChainId(): Promise<bigint> {\n    if (!this.lastStatus) {\n      await this.status()\n    }\n    return BigInt(this.lastStatus.chain_id)\n  }\n\n  async fetchPeriod(): Promise<number> {\n    const status = await this.status()\n    if (!status.last_slot) {\n      throw new Error('last slot: not available')\n    }\n    return status.last_slot.period\n  }\n\n  async getCurrentSlot(): Promise<t.Slot> {\n    const { last_slot } = await this.status()\n    return last_slot\n  }\n\n  private static convertOperationInput(\n    data: SendOperationInput\n  ): t.OperationInput {\n    return {\n      serialized_content: Array.from(data.data),\n      creator_public_key: data.publicKey,\n      signature: data.signature,\n    }\n  }\n\n  async sendOperation(data: SendOperationInput): Promise<t.OperationId> {\n    return this.sendOperations([data]).then((r) => r[0])\n  }\n\n  async sendOperations(data: SendOperationInput[]): Promise<t.OperationId[]> {\n    return this.sendMultipleOperations(\n      data.map((e) => PublicAPI.convertOperationInput(e))\n    )\n  }\n\n  async sendMultipleOperations(\n    data: t.OperationInput[]\n  ): Promise<t.OperationId[]> {\n    return this.connector.send_operations(data)\n  }\n\n  async deferredCallQuote(\n    quoteRequests: t.DeferredCallsQuoteRequest[]\n  ): Promise<t.DeferredCallsQuoteResponse[]> {\n    return this.connector.get_deferred_call_quote(quoteRequests)\n  }\n\n  async deferredCallsInfo(\n    deferredCallsIds: string[]\n  ): Promise<t.DeferredCallResponse[]> {\n    return this.connector.get_deferred_call_info(deferredCallsIds)\n  }\n\n  async deferredCallsBySlot(\n    slots: t.Slot[]\n  ): Promise<t.DeferredCallsSlotResponse[]> {\n    return this.connector.get_deferred_call_ids_by_slot(slots)\n  }\n}\n"]}