{"version":3,"file":"connector.js","sourceRoot":"","sources":["../../../src/client/connector.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { rpcTypes as t } from 'src/generated'\nimport { getHttpRpcClient, HttpRpcClient } from './http'\nimport { ClientOptions } from './types'\n\nexport class Connector {\n  private client: HttpRpcClient = {} as HttpRpcClient\n\n  constructor(url: string, opts: Partial<ClientOptions> = {}) {\n    this.client = getHttpRpcClient(url, opts)\n  }\n\n  /**\n   * Execute a smart contract in a read only context\n   */\n\n  public execute_read_only_bytecode: t.ExecuteReadOnlyBytecode = (params) => {\n    return this.client.request('execute_read_only_bytecode', params)\n  }\n\n  /**\n   * Call a function of a contract in a read only context\n   */\n\n  public execute_read_only_call: t.ExecuteReadOnlyCall = (params) => {\n    return this.client.request('execute_read_only_call', params)\n  }\n\n  /**\n   * To check when your address is selected to stake.\n   */\n\n  public get_addresses: t.GetAddresses = (params) => {\n    return this.client.request('get_addresses', params)\n  }\n\n  /**\n   * Returns the bytecode of the given addresses.\n   */\n\n  public get_addresses_bytecode: t.GetAddressesBytecode = (params) => {\n    return this.client.request('get_addresses_bytecode', params)\n  }\n\n  /**\n   * Get blocks\n   */\n\n  public get_blocks: t.GetBlocks = (params) => {\n    return this.client.request('get_blocks', params)\n  }\n\n  /**\n   * Get a block in the blockclique\n   */\n\n  public get_blockclique_block_by_slot: t.GetBlockcliqueBlockBySlot = (\n    params\n  ) => {\n    return this.client.request('get_blockclique_block_by_slot', params)\n  }\n\n  /**\n   * Get cliques\n   */\n\n  public get_cliques: t.GetCliques = () => {\n    return this.client.request('get_cliques', {})\n  }\n\n  /**\n   * Get a data entry both at the latest final and active executed slots for the given addresses.\n   */\n\n  public get_datastore_entries: t.GetDatastoreEntries = (params) => {\n    return this.client.request('get_datastore_entries', params)\n  }\n\n  /**\n   * Get transfers for specified slots\n   */\n\n  public get_slots_transfers: t.GetSlotsTransfers = (params) => {\n    return this.client.request('get_slots_transfers', params)\n  }\n\n  /**\n   * Get endorsements\n   */\n\n  public get_endorsements: t.GetEndorsements = (params) => {\n    return this.client.request('get_endorsements', params)\n  }\n\n  /**\n   * Returns events optionally filtered\n   */\n\n  public get_filtered_sc_output_event: t.GetFilteredScOutputEvent = (\n    params\n  ) => {\n    return this.client.request('get_filtered_sc_output_event', params)\n  }\n\n  /**\n   * Get graph interval\n   */\n\n  public get_graph_interval: t.GetGraphInterval = (params) => {\n    return this.client.request('get_graph_interval', params)\n  }\n\n  /**\n   * Get operations\n   */\n\n  public get_operations: t.GetOperations = (params) => {\n    return this.client.request('get_operations', params)\n  }\n\n  /**\n   * Get stakers\n   */\n\n  public get_stakers: t.GetStakers = (params) => {\n    return this.client.request('get_stakers', params)\n  }\n\n  /**\n   * Summary of the current state\n   */\n\n  public get_status: t.GetStatus = () => {\n    return this.client.request('get_status', {})\n  }\n\n  /**\n   * Add a vec of new secret(private) keys for the node to use to stake\n   */\n\n  public add_staking_secret_keys: t.AddStakingSecretKeys = (params) => {\n    return this.client.request('add_staking_secret_keys', params)\n  }\n\n  /**\n   * Return hashset of staking addresses\n   */\n\n  public get_staking_addresses: t.GetStakingAddresses = () => {\n    return this.client.request('get_staking_addresses', {})\n  }\n\n  /**\n   * Returns if slot is available and the price to book the requested gas\n   */\n  public get_deferred_call_quote: t.GetDeferredCallQuote = (params) => {\n    return this.client.request('get_deferred_call_quote', params)\n  }\n\n  /**\n   * Returns information about deferred calls.\n   */\n  public get_deferred_call_info: t.GetDeferredCallInfo = (params) => {\n    return this.client.request('get_deferred_call_info', params)\n  }\n\n  /**\n   * Returns ids of deferred calls for provided slots.\n   */\n  public get_deferred_call_ids_by_slot: t.GetDeferredCallIdsBySlot = (\n    params\n  ) => {\n    return this.client.request('get_deferred_call_ids_by_slot', params)\n  }\n\n  /**\n   * Add to bootstrap blacklist given IP addresses\n   */\n\n  public node_add_to_bootstrap_blacklist: t.NodeAddToBootstrapBlacklist = (\n    params\n  ) => {\n    return this.client.request('node_add_to_bootstrap_blacklist', params)\n  }\n\n  /**\n   * Add to bootstrap whitelist given IP addresses\n   */\n\n  public node_add_to_bootstrap_whitelist: t.NodeAddToBootstrapWhitelist = (\n    params\n  ) => {\n    return this.client.request('node_add_to_bootstrap_whitelist', params)\n  }\n\n  /**\n   * Add to peers whitelist given IP addresses\n   */\n\n  public node_add_to_peers_whitelist: t.NodeAddToPeersWhitelist = (params) => {\n    return this.client.request('node_add_to_peers_whitelist', params)\n  }\n\n  /**\n   * Ban given ids\n   */\n\n  public node_ban_by_id: t.NodeBanById = (params) => {\n    return this.client.request('node_ban_by_id', params)\n  }\n\n  /**\n   * Ban given IP addresses\n   */\n\n  public node_ban_by_ip: t.NodeBanByIp = (params) => {\n    return this.client.request('node_ban_by_ip', params)\n  }\n\n  /**\n   * Returns bootstrap blacklist IP addresses\n   */\n\n  public node_bootstrap_blacklist: t.NodeBootstrapBlacklist = () => {\n    return this.client.request('node_bootstrap_blacklist', {})\n  }\n\n  /**\n   * Returns bootstrap whitelist IP addresses\n   */\n\n  public node_bootstrap_whitelist: t.NodeBootstrapWhitelist = () => {\n    return this.client.request('node_bootstrap_whitelist', {})\n  }\n\n  /**\n   * Allow everyone to bootstrap from the node\n   */\n\n  public node_bootstrap_whitelist_allow_all: t.NodeBootstrapWhitelistAllowAll =\n    () => {\n      return this.client.request('node_bootstrap_whitelist_allow_all', {})\n    }\n\n  /**\n   * Returns peers whitelist IP addresses\n   */\n\n  public node_peers_whitelist: t.NodePeersWhitelist = () => {\n    return this.client.request('node_peers_whitelist', {})\n  }\n\n  /**\n   * Remove from bootstrap blacklist given IP addresses\n   */\n\n  public node_remove_from_bootstrap_blacklist: t.NodeRemoveFromBootstrapBlacklist =\n    (params) => {\n      return this.client.request('node_remove_from_bootstrap_blacklist', params)\n    }\n\n  /**\n   * Remove from bootstrap whitelist given IP addresses\n   */\n\n  public node_remove_from_bootstrap_whitelist: t.NodeRemoveFromBootstrapWhitelist =\n    (params) => {\n      return this.client.request('node_remove_from_bootstrap_whitelist', params)\n    }\n\n  /**\n   * Remove from peers whitelist given IP addresses\n   */\n\n  public node_remove_from_peers_whitelist: t.NodeRemoveFromPeersWhitelist = (\n    params\n  ) => {\n    return this.client.request('node_remove_from_peers_whitelist', params)\n  }\n\n  /**\n   * Remove from whitelist given IP addresses\n   */\n\n  public node_remove_from_whitelist: t.NodeRemoveFromWhitelist = (params) => {\n    return this.client.request('node_remove_from_whitelist', params)\n  }\n\n  /**\n   * Remove a vec of addresses used to stake\n   */\n\n  public remove_staking_addresses: t.RemoveStakingAddresses = (params) => {\n    return this.client.request('remove_staking_addresses', params)\n  }\n\n  /**\n   * Sign message with node’s key\n   */\n\n  public node_sign_message: t.NodeSignMessage = (params) => {\n    return this.client.request('node_sign_message', params)\n  }\n\n  /**\n   * Gracefully stop the node\n   */\n\n  public stop_node: t.StopNode = () => {\n    return this.client.request('stop_node', {})\n  }\n\n  /**\n   * Unban given ids\n   */\n\n  public node_unban_by_id: t.NodeUnbanById = (params) => {\n    return this.client.request('node_unban_by_id', params)\n  }\n\n  /**\n   * Unban given IP addresses\n   */\n\n  public node_unban_by_ip: t.NodeUnbanByIp = (params) => {\n    return this.client.request('node_unban_by_ip', params)\n  }\n\n  /**\n   * Whitelist given IP addresses\n   */\n\n  public node_whitelist: t.NodeWhitelist = (params) => {\n    return this.client.request('node_whitelist', params)\n  }\n\n  /**\n   * Adds operations to pool\n   */\n\n  public send_operations: t.SendOperations = (params) => {\n    return this.client.request('send_operations', params)\n  }\n\n  /**\n   * Get largest stakers\n   */\n\n  public get_largest_stakers: t.GetLargestStakers = (params) => {\n    return this.client.request('get_largest_stakers', params)\n  }\n\n  /**\n   * Get next block best parents\n   */\n\n  public get_next_block_best_parents: t.GetNextBlockBestParents = () => {\n    return this.client.request('get_next_block_best_parents', {})\n  }\n\n  /**\n   * Get Massa node version\n   */\n\n  public get_version: t.GetVersion = () => {\n    return this.client.request('get_version', {})\n  }\n\n  /**\n   * New produced blocks\n   */\n\n  public subscribe_new_blocks: t.SubscribeNewBlocks = () => {\n    return this.client.request('subscribe_new_blocks', {})\n  }\n\n  /**\n   * New produced blocks headers\n   */\n\n  public subscribe_new_blocks_headers: t.SubscribeNewBlocksHeaders = () => {\n    return this.client.request('subscribe_new_blocks_headers', {})\n  }\n\n  /**\n   * New produced blocks with operations content\n   */\n\n  public subscribe_new_filled_blocks: t.SubscribeNewFilledBlocks = () => {\n    return this.client.request('subscribe_new_filled_blocks', {})\n  }\n\n  /**\n   * Subscribe to new operations\n   */\n\n  public subscribe_new_operations: t.SubscribeNewOperations = () => {\n    return this.client.request('subscribe_new_operations', {})\n  }\n\n  /**\n   * Unsubscribe from new produced blocks\n   */\n\n  public unsubscribe_new_blocks: t.UnsubscribeNewBlocks = (params) => {\n    return this.client.request('unsubscribe_new_blocks', params)\n  }\n\n  /**\n   * Unsubscribe from new produced blocks headers\n   */\n\n  public unsubscribe_new_blocks_headers: t.UnsubscribeNewBlocksHeaders = (\n    params\n  ) => {\n    return this.client.request('unsubscribe_new_blocks_headers', params)\n  }\n\n  /**\n   * Unsubscribe from new produced filled blocks\n   */\n\n  public unsubscribe_new_filled_blocks: t.UnsubscribeNewFilledBlocks = (\n    params\n  ) => {\n    return this.client.request('unsubscribe_new_filled_blocks', params)\n  }\n\n  /**\n   * Unsubscribe from new received operations\n   */\n\n  public unsubscribe_new_operations: t.UnsubscribeNewOperations = (params) => {\n    return this.client.request('unsubscribe_new_operations', params)\n  }\n}\n"]}