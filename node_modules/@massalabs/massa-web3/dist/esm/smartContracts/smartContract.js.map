{"version":3,"file":"smartContract.js","sourceRoot":"","sources":["../../../src/smartContracts/smartContract.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAA;AAahD;;GAEG;AACH,MAAM,OAAO,aAAa;IAEf;IACA;IAFT,YACS,QAAmC,EACnC,OAAe;QADf,aAAQ,GAAR,QAAQ,CAA2B;QACnC,YAAO,GAAP,OAAO,CAAQ;IACrB,CAAC;IAEJ;;;;;;OAMG;IACH,KAAK,CAAC,IAAI,CACR,IAAY,EACZ,OAA0B,IAAI,UAAU,EAAE,EAC1C,UAAyB,EAAE;QAE3B,MAAM,UAAU,GAAiB;YAC/B,IAAI;YACJ,SAAS,EAAE,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,GAAG,OAAO;SACX,CAAA;QAED,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC9B,OAAQ,IAAI,CAAC,QAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QACvD,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAA;IACrD,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,IAAI,CACR,IAAY,EACZ,OAA0B,IAAI,UAAU,EAAE,EAC1C,UAAyB,EAAE;QAE3B,MAAM,UAAU,GAAiB;YAC/B,IAAI;YACJ,SAAS,EAAE,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,GAAG,OAAO;SACX,CAAA;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;IACzC,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,QAAkB,EAClB,QAAoB,EACpB,kBAAqC,IAAI,UAAU,EAAE,EACrD,UAA2B,EAAE;QAE7B,MAAM,YAAY,GAAmB;YACnC,QAAQ;YACR,SAAS,EAAE,eAAe;YAC1B,GAAG,OAAO;SACX,CAAA;QACD,OAAO,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;IACxC,CAAC;CACF","sourcesContent":["import { isProvider } from '../provider/helpers'\nimport { Args } from '..'\nimport { Operation } from '../operation'\nimport {\n  CallSCParams,\n  DeploySCParams,\n  Provider,\n  PublicProvider,\n  ReadSCData,\n  ReadSCParams,\n} from '../provider'\nimport { CallSCOptions, DeploySCOptions, ReadSCOptions } from './'\n\n/**\n * A class to interact with a smart contract.\n */\nexport class SmartContract {\n  constructor(\n    public provider: PublicProvider | Provider,\n    public address: string\n  ) {}\n\n  /**\n   * Executes a smart contract call operation\n   * @param func - The smart contract function to be called.\n   * @param parameter - Parameters for the function call in Uint8Array or number[] format.\n   * @param options - Includes optional and required parameters like fee, maxGas, coins, and periodToLive.\n   * @returns A promise that resolves to an Operation object representing the transaction.\n   */\n  async call(\n    func: string,\n    args: Args | Uint8Array = new Uint8Array(),\n    options: CallSCOptions = {}\n  ): Promise<Operation> {\n    const callParams: CallSCParams = {\n      func,\n      parameter: args,\n      target: this.address,\n      ...options,\n    }\n\n    if (isProvider(this.provider)) {\n      return (this.provider as Provider).callSC(callParams)\n    }\n\n    throw new Error('Provider does not support callSC')\n  }\n\n  /**\n   * Executes a smart contract read operation\n   * @param func - The smart contract function to be called.\n   * @param args - Parameter for the function call in Uint8Array format.\n   * @param options - Includes optional parameters like fee, maxGas, coins, and periodToLive.\n   * @returns A promise that resolves to the result of the read operation.\n   */\n  async read(\n    func: string,\n    args: Args | Uint8Array = new Uint8Array(),\n    options: ReadSCOptions = {}\n  ): Promise<ReadSCData> {\n    const readParams: ReadSCParams = {\n      func,\n      parameter: args,\n      target: this.address,\n      ...options,\n    }\n    return this.provider.readSC(readParams)\n  }\n\n  /**\n   * Deploy a SmartContract byteCode\n   * @param provider - Web3 provider.\n   * @param byteCode - Compiled SmartContract bytecode.\n   * @param constructorArgs - Parameter for call of constructor function.\n   * @param options - Includes optional parameters like fee, maxGas, coins, and periodToLive.\n   * @returns A promise that resolves to the result of the read operation.\n   */\n  static async deploy(\n    provider: Provider,\n    byteCode: Uint8Array,\n    constructorArgs: Args | Uint8Array = new Uint8Array(),\n    options: DeploySCOptions = {}\n  ): Promise<SmartContract> {\n    const deployParams: DeploySCParams = {\n      byteCode,\n      parameter: constructorArgs,\n      ...options,\n    }\n    return provider.deploySC(deployParams)\n  }\n}\n"]}