{"version":3,"file":"mns.js","sourceRoot":"","sources":["../../../src/contracts-wrappers/mns.ts"],"names":[],"mappings":"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","sourcesContent":["import { Args, bytesToStr, strToBytes, U256, U64 } from '../basicElements'\nimport { Operation } from '../operation'\nimport { Provider, PublicProvider } from '../provider'\nimport { CallSCOptions, ReadSCOptions, SmartContract } from '../smartContracts'\nimport { checkNetwork } from './tokens'\nimport { ErrorDataEntryNotFound } from '../errors/dataEntryNotFound'\nimport { CHAIN_ID } from '../utils'\n\nexport const MNS_CONTRACTS = {\n  mainnet: 'AS1q5hUfxLXNXLKsYQVXZLK7MPUZcWaNZZsK7e9QzqhGdAgLpUGT',\n  buildnet: 'AS12qKAVjU1nr66JSkQ6N4Lqu4iwuVc6rAbRTrxFoynPrPdP1sj3G',\n}\n\n/**\n * @class MNS\n * @extends SmartContract\n *\n * The MNS class provides methods to interact with the Massa Name System (MNS) smart contract.\n * It allows resolving domain names, reverse resolving addresses, allocating domains, freeing domains,\n * and updating domain targets.\n * MNS contract is available here: https://github.com/massalabs/massa-name-system/blob/main/smart-contract/assembly/contracts/main.ts\n *\n * @example\n * ```typescript\n * const mns = await MNS.mainnet(provider);\n * const address = await mns.resolve(\"example\");\n * ```\n *\n */\n\n// Constants are taken from the smart contract\n// https://github.com/massalabs/massa-name-service/blob/main/smart-contract/assembly/contracts/main.ts\n// eslint-disable-next-line  @typescript-eslint/no-magic-numbers\nconst DOMAIN_SEPARATOR_KEY = [0x42]\nconst TOKEN_ID_KEY_PREFIX = [0x1]\n// eslint-disable-next-line  @typescript-eslint/no-magic-numbers\nconst TARGET_KEY_PREFIX = [0x02]\n// eslint-disable-next-line  @typescript-eslint/no-magic-numbers\nconst DOMAIN_KEY_PREFIX = [0x3]\n// eslint-disable-next-line  @typescript-eslint/no-magic-numbers\nconst ADDRESS_KEY_PREFIX_V2 = [0x6]\nconst OWNED_TOKENS_KEY = strToBytes('ownedTokens')\n\nexport class MNS extends SmartContract {\n  constructor(provider: Provider | PublicProvider, chainId: bigint) {\n    const address =\n      chainId === CHAIN_ID.Mainnet\n        ? MNS_CONTRACTS.mainnet\n        : MNS_CONTRACTS.buildnet\n    super(provider, address)\n  }\n\n  static async init(provider: Provider | PublicProvider): Promise<MNS> {\n    const { chainId } = await provider.networkInfos()\n    return new MNS(provider, chainId)\n  }\n\n  static mainnet(provider: Provider | PublicProvider): MNS {\n    checkNetwork(provider, true)\n    return new MNS(provider, CHAIN_ID.Mainnet)\n  }\n\n  static buildnet(provider: Provider | PublicProvider): MNS {\n    checkNetwork(provider, false)\n    return new MNS(provider, CHAIN_ID.Buildnet)\n  }\n\n  // Resolve domain name (without \".massa\") to address\n  async resolve(name: string, options?: ReadSCOptions): Promise<string> {\n    const res = await this.read(\n      'dnsResolve',\n      new Args().addString(name),\n      options\n    )\n    return bytesToStr(res.value)\n  }\n\n  // deprecated. Use getDomainsFromTarget instead\n  async fromAddress(\n    address: string,\n    options?: ReadSCOptions\n  ): Promise<string[]> {\n    const res = await this.read(\n      'dnsReverseResolve',\n      new Args().addString(address),\n      options\n    )\n    return bytesToStr(res.value).split(',')\n  }\n\n  async getDomainsFromTarget(target: string, final = false): Promise<string[]> {\n    const targetBytes = strToBytes(target)\n    const filter = Uint8Array.from([\n      ...DOMAIN_SEPARATOR_KEY,\n      ...ADDRESS_KEY_PREFIX_V2,\n      targetBytes.length,\n      ...targetBytes,\n    ])\n    const keys = await this.provider.getStorageKeys(this.address, filter, final)\n    return keys.map((key) => bytesToStr(key.slice(filter.length)))\n  }\n\n  async alloc(\n    name: string,\n    owner: string,\n    options?: CallSCOptions\n  ): Promise<Operation> {\n    return this.call(\n      'dnsAlloc',\n      new Args().addString(name).addString(owner),\n      options\n    )\n  }\n\n  async getTokenId(name: string): Promise<bigint> {\n    const key = Uint8Array.from([\n      ...DOMAIN_SEPARATOR_KEY,\n      ...TOKEN_ID_KEY_PREFIX,\n      ...strToBytes(name),\n    ])\n    const data = await this.provider.readStorage(this.address, [key], true)\n    if (data[0] == null) {\n      throw new ErrorDataEntryNotFound({\n        key: key,\n        address: this.address,\n        details: `mns Domain ${name} not found`,\n      })\n    }\n    return U256.fromBytes(data[0])\n  }\n\n  async free(name: string, options?: CallSCOptions): Promise<Operation> {\n    const tokenId = await this.getTokenId(name)\n    return this.call('dnsFree', new Args().addU256(tokenId), options)\n  }\n\n  async updateTarget(\n    name: string,\n    newTarget: string,\n    options?: CallSCOptions\n  ): Promise<Operation> {\n    return this.call(\n      'dnsUpdateTarget',\n      new Args().addString(name).addString(newTarget),\n      options\n    )\n  }\n\n  async getOwnedDomains(address: string, final = false): Promise<string[]> {\n    const filter = Uint8Array.from([\n      ...OWNED_TOKENS_KEY,\n      ...strToBytes(address),\n    ])\n    const ownedKeys = await this.provider.getStorageKeys(\n      this.address,\n      filter,\n      final\n    )\n\n    const domainKeys = ownedKeys.map((k) => {\n      const tokenIdBytes = k.slice(filter.length)\n      return Uint8Array.from([\n        ...DOMAIN_SEPARATOR_KEY,\n        ...DOMAIN_KEY_PREFIX,\n        ...tokenIdBytes,\n      ])\n    })\n    const domainsBytes = await this.provider.readStorage(\n      this.address,\n      domainKeys,\n      final\n    )\n    return domainsBytes.map((d, i) => {\n      if (!d) {\n        throw new ErrorDataEntryNotFound({\n          key: ownedKeys[i],\n          address: this.address,\n          details: `Domain with tokenId ${U256.fromBytes(ownedKeys[i].slice(filter.length))} not found`,\n        })\n      }\n      return bytesToStr(d as Uint8Array)\n    })\n  }\n\n  async getTargets(domains: string[], final = false): Promise<string[]> {\n    const targetDataStoreEntries = domains.map((name) =>\n      Uint8Array.from([\n        ...DOMAIN_SEPARATOR_KEY,\n        ...TARGET_KEY_PREFIX,\n        ...strToBytes(name),\n      ])\n    )\n\n    const targetsBytes = await this.provider.readStorage(\n      this.address,\n      targetDataStoreEntries,\n      final\n    )\n\n    return targetsBytes.map(bytesToStr)\n  }\n\n  async dnsAllocCost(domain: string, options?: ReadSCOptions): Promise<bigint> {\n    const res = await this.read(\n      'dnsAllocCost',\n      new Args().addString(domain),\n      options\n    )\n\n    if (res.info.error) throw new Error(res.info.error)\n\n    return U64.fromBytes(res.value)\n  }\n\n  async transferFrom(\n    domain: string,\n    currentOwner: string,\n    newOwner: string,\n    options?: CallSCOptions\n  ): Promise<Operation> {\n    const tokenId = await this.getTokenId(domain)\n    const args = new Args()\n      .addString(currentOwner)\n      .addString(newOwner)\n      .addU256(tokenId)\n\n    return await this.call('transferFrom', args, options)\n  }\n\n  async balanceOf(owner: string, options?: ReadSCOptions): Promise<bigint> {\n    const res = await this.read(\n      'balanceOf',\n      new Args().addString(owner),\n      options\n    )\n    return U256.fromBytes(res.value)\n  }\n}\n"]}