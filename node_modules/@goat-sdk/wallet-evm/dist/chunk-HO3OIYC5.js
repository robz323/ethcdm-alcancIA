"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } var _class;var _chunkEI7MMDWYjs = require('./chunk-EI7MMDWY.js');var _core = require('@goat-sdk/core');var _viem = require('viem');var _chains = require('viem/chains'); var h = _interopRequireWildcard(_chains);var _zod = require('zod');var a= (_class =class extends _core.PluginBase{static{_chunkEI7MMDWYjs.a.call(void 0, this,"SendETHPlugin")}constructor(){super("sendETH",[]);_class.prototype.__init.call(this);}__init() {this.supportsChain=_chunkEI7MMDWYjs.a.call(void 0, e=>e.type==="evm","supportsChain")}getTools(e){return[_core.createTool.call(void 0, {name:`send_${i(e.getChain().id).symbol}`,description:`Send ${i(e.getChain().id).symbol} to an address.`,parameters:u},s=>p(e,s))]}}, _class),f= exports.b =_chunkEI7MMDWYjs.a.call(void 0, ()=>new a,"sendETH"),u=_zod.z.object({to:_zod.z.string().describe("The address to send ETH to"),amount:_zod.z.string().describe("The amount of ETH to send")});async function p(o,e){try{let n=_viem.parseEther.call(void 0, e.amount);return(await o.sendTransaction({to:e.to,value:n})).hash}catch(n){throw new Error(`Failed to send ${i(o.getChain().id)}: ${n}`)}}_chunkEI7MMDWYjs.a.call(void 0, p,"sendETHMethod");function i(o){let n=Object.values(h).find(s=>s.id===o);if(!n)throw new Error(`Unsupported EVM chain ID: ${o}`);return{symbol:n.nativeCurrency.symbol,name:n.nativeCurrency.name,decimals:n.nativeCurrency.decimals}}_chunkEI7MMDWYjs.a.call(void 0, i,"getChainToken");exports.a = a; exports.b = f;
