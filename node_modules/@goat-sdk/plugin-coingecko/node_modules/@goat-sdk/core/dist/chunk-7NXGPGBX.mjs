// src/plugins/send-sol.ts
import { PublicKey } from "@solana/web3.js";
import { parseUnits } from "viem";
import { z } from "zod";
import { SystemProgram } from "@solana/web3.js";
function sendSOL() {
  return {
    name: "send_sol",
    supportsSmartWallets: () => true,
    supportsChain: (chain) => chain.type === "solana",
    getTools: async () => {
      return [
        {
          name: "send_sol",
          description: "This {{tool}} sends SOL to an address on a Solana chain.",
          parameters: sendSOLParametersSchema,
          method: sendSOLMethod
        }
      ];
    }
  };
}
var sendSOLParametersSchema = z.object({
  to: z.string().describe("The address to send SOL to"),
  amount: z.string().describe("The amount of SOL to send")
});
async function sendSOLMethod(walletClient, parameters) {
  try {
    const { to, amount } = parameters;
    const senderAddress = walletClient.getAddress();
    const lamports = parseUnits(amount, 9);
    const transferInstruction = SystemProgram.transfer({
      fromPubkey: new PublicKey(senderAddress),
      toPubkey: new PublicKey(to),
      lamports
    });
    const txResult = await walletClient.sendTransaction({
      instructions: [transferInstruction]
    });
    return txResult.hash;
  } catch (error) {
    throw new Error(`Failed to send SOL: ${error}`);
  }
}

export {
  sendSOL
};
//# sourceMappingURL=chunk-7NXGPGBX.mjs.map