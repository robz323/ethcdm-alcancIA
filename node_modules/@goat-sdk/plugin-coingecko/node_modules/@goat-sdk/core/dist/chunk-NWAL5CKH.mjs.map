{"version":3,"sources":["../src/tools.ts"],"sourcesContent":["import type { z } from \"zod\";\nimport { deferredEVMCoreTools } from \"./evm/tools\";\nimport type { Plugin } from \"./plugins/plugins\";\nimport { deferredSolanaTools } from \"./solana/tools\";\nimport type { WalletClient, ChainForWalletClient, AnyEVMWalletClient } from \"./wallets\";\nimport { replaceToolPlaceholder } from \"./utils\";\nimport { isEVMChain, isEVMSmartWalletClient, isSolanaChain } from \"./wallets\";\n\nexport type Tool = {\n    name: string;\n    description: string;\n    parameters: z.ZodSchema;\n    method: (parameters: z.infer<z.ZodSchema>) => string | Promise<string>;\n};\n\nexport type GetToolsParams<TWalletClient extends WalletClient> = {\n    wallet: TWalletClient;\n    plugins?: (Plugin<TWalletClient> | Plugin<WalletClient>)[];\n    wordForTool?: string;\n};\n\nexport async function getTools<TWalletClient extends WalletClient>({\n    wallet,\n    plugins = [],\n    wordForTool,\n}: GetToolsParams<TWalletClient>): Promise<Tool[]> {\n    const chain = wallet.getChain() as ChainForWalletClient<TWalletClient>;\n\n    const tools: DeferredTool<TWalletClient>[] =\n        await getDeferredTools<TWalletClient>({\n            chain,\n            plugins,\n            supportsSmartWallets: isEVMSmartWalletClient(wallet),\n            wordForTool,\n        });\n\n    return tools.map((tool) => ({\n        ...tool,\n        method: (parameters) => tool.method(wallet, parameters),\n    }));\n}\n\n/**\n * Deferred tools defer which wallet client to be passed to the method until the tool is called.\n */\nexport type DeferredTool<TWalletClient extends WalletClient> = {\n    name: string;\n    description: string;\n    parameters: z.ZodSchema;\n    method: (\n        walletClient: TWalletClient,\n        parameters: z.infer<z.ZodSchema>\n    ) => string | Promise<string>;\n};\n\nexport type GetDeferredToolsParams<TWalletClient extends WalletClient> = {\n    chain: ChainForWalletClient<TWalletClient>;\n    plugins?: (Plugin<TWalletClient> | Plugin<WalletClient>)[];\n    supportsSmartWallets?: boolean;\n    wordForTool?: string;\n};\n\nexport async function getDeferredTools<\n    TWalletClient extends AnyEVMWalletClient | WalletClient\n>({\n    chain,\n    supportsSmartWallets = false,\n    wordForTool = \"tool\",\n    plugins = [],\n}: GetDeferredToolsParams<TWalletClient>): Promise<\n    DeferredTool<TWalletClient>[]\n> {\n    const tools: DeferredTool<TWalletClient>[] = [];\n\n    if (isEVMChain(chain)) {\n        // We know that TWalletClient is compatible with EVMWalletClient here\n        tools.push(\n            ...(deferredEVMCoreTools as unknown as DeferredTool<TWalletClient>[])\n        );\n    } else if (isSolanaChain(chain)) {\n        // We know that TWalletClient is compatible with SolanaWalletClient here\n        tools.push(\n            ...(deferredSolanaTools as unknown as DeferredTool<TWalletClient>[])\n        );\n    } else {\n        throw new Error(`Unsupported chain type: ${chain.type}`);\n    }\n\n    for (const plugin of plugins) {\n        if (!plugin.supportsChain(chain)) {\n            console.warn(\n                `Plugin ${plugin.name} does not support chain ${chain.type}. Skipping.`\n            );\n            continue;\n        }\n\n        if (!plugin.supportsSmartWallets() && supportsSmartWallets) {\n            console.warn(\n                `Plugin ${plugin.name} does not support smart wallets. Skipping.`\n            );\n            continue;\n        }\n\n        const pluginTools = await plugin.getTools(chain);\n\n        if (pluginTools.length === 0) {\n            console.warn(`Plugin ${plugin.name} returned no tools. Skipping.`);\n            continue;\n        }\n\n        tools.push(...pluginTools);\n    }\n\n    return tools.map((tool) => ({\n        ...tool,\n        description: replaceToolPlaceholder(tool.description, wordForTool),\n    }));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAqBA,eAAsB,SAA6C;AAAA,EAC/D;AAAA,EACA,UAAU,CAAC;AAAA,EACX;AACJ,GAAmD;AAC/C,QAAM,QAAQ,OAAO,SAAS;AAE9B,QAAM,QACF,MAAM,iBAAgC;AAAA,IAClC;AAAA,IACA;AAAA,IACA,sBAAsB,uBAAuB,MAAM;AAAA,IACnD;AAAA,EACJ,CAAC;AAEL,SAAO,MAAM,IAAI,CAAC,UAAU;AAAA,IACxB,GAAG;AAAA,IACH,QAAQ,CAAC,eAAe,KAAK,OAAO,QAAQ,UAAU;AAAA,EAC1D,EAAE;AACN;AAsBA,eAAsB,iBAEpB;AAAA,EACE;AAAA,EACA,uBAAuB;AAAA,EACvB,cAAc;AAAA,EACd,UAAU,CAAC;AACf,GAEE;AACE,QAAM,QAAuC,CAAC;AAE9C,MAAI,WAAW,KAAK,GAAG;AAEnB,UAAM;AAAA,MACF,GAAI;AAAA,IACR;AAAA,EACJ,WAAW,cAAc,KAAK,GAAG;AAE7B,UAAM;AAAA,MACF,GAAI;AAAA,IACR;AAAA,EACJ,OAAO;AACH,UAAM,IAAI,MAAM,2BAA2B,MAAM,IAAI,EAAE;AAAA,EAC3D;AAEA,aAAW,UAAU,SAAS;AAC1B,QAAI,CAAC,OAAO,cAAc,KAAK,GAAG;AAC9B,cAAQ;AAAA,QACJ,UAAU,OAAO,IAAI,2BAA2B,MAAM,IAAI;AAAA,MAC9D;AACA;AAAA,IACJ;AAEA,QAAI,CAAC,OAAO,qBAAqB,KAAK,sBAAsB;AACxD,cAAQ;AAAA,QACJ,UAAU,OAAO,IAAI;AAAA,MACzB;AACA;AAAA,IACJ;AAEA,UAAM,cAAc,MAAM,OAAO,SAAS,KAAK;AAE/C,QAAI,YAAY,WAAW,GAAG;AAC1B,cAAQ,KAAK,UAAU,OAAO,IAAI,+BAA+B;AACjE;AAAA,IACJ;AAEA,UAAM,KAAK,GAAG,WAAW;AAAA,EAC7B;AAEA,SAAO,MAAM,IAAI,CAAC,UAAU;AAAA,IACxB,GAAG;AAAA,IACH,aAAa,uBAAuB,KAAK,aAAa,WAAW;AAAA,EACrE,EAAE;AACN;","names":[]}