{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import type { ZodTypeAny } from \"zod\";\nimport { z } from \"zod\";\n\nexport function addParametersToDescription(\n    description: string,\n    schema: z.ZodTypeAny\n): string {\n    let paramLines: string[] = [];\n\n    if (schema instanceof z.ZodObject) {\n        const shape = schema.shape;\n        paramLines = Object.entries<ZodTypeAny>(shape).map(([key, value]) => {\n            const isOptional = value.isOptional();\n            const paramDescription = value.description || \"\";\n            const typeStr = getTypeString(value);\n\n            return `- ${key}${\n                isOptional ? \" (optional)\" : \"\"\n            } (${typeStr}): ${paramDescription}`;\n        });\n    } else {\n        const isOptional = schema.isOptional();\n        const paramDescription = schema.description || \"\";\n        const typeStr = getTypeString(schema);\n\n        paramLines.push(\n            `- ${\n                isOptional ? \"(optional) \" : \"\"\n            }(${typeStr}): ${paramDescription}`\n        );\n    }\n\n    return `${description}\\n${paramLines.join(\"\\n\")}`;\n}\n\nfunction getTypeString(schema: z.ZodTypeAny): string {\n    if (schema instanceof z.ZodString) {\n        return \"string\";\n    }\n    if (schema instanceof z.ZodNumber) {\n        return \"number\";\n    }\n    if (schema instanceof z.ZodBoolean) {\n        return \"boolean\";\n    }\n    if (schema instanceof z.ZodArray) {\n        return \"array\";\n    }\n    if (schema instanceof z.ZodObject) {\n        return \"object\";\n    }\n    return \"unknown\";\n}\n\nexport function replaceToolPlaceholder(\n    template: string,\n    wordForTool = \"tool\"\n): string {\n    const placeholderRegex = /\\{\\{\\s*tool\\s*\\}\\}/g;\n    return template.replace(placeholderRegex, wordForTool);\n}\n\nexport function parametersToJsonExample(parameters: z.ZodTypeAny): string {\n    const exampleObject = generateExample(parameters);\n    return JSON.stringify(exampleObject, null, 2);\n\n    function generateExample(schema: z.ZodTypeAny): unknown {\n        if (schema instanceof z.ZodString) {\n            return \"string\";\n        }\n        if (schema instanceof z.ZodNumber) {\n            return 0;\n        }\n        if (schema instanceof z.ZodBoolean) {\n            return false;\n        }\n        if (schema instanceof z.ZodArray) {\n            const elementSchema = schema._def.type;\n            return [generateExample(elementSchema)];\n        }\n        if (schema instanceof z.ZodObject) {\n            const shape = schema._def.shape();\n            const obj: Record<string, unknown> = {};\n            for (const [key, valueSchema] of Object.entries(shape)) {\n                obj[key] = generateExample(valueSchema as ZodTypeAny);\n            }\n            return obj;\n        }\n        if (\n            schema instanceof z.ZodOptional ||\n            schema instanceof z.ZodNullable\n        ) {\n            const innerSchema = schema.unwrap();\n            return generateExample(innerSchema);\n        }\n        if (schema instanceof z.ZodUnion) {\n            const options = schema._def.options;\n            return generateExample(options[0]); // Use the first option as an example\n        }\n        if (schema instanceof z.ZodLiteral) {\n            return schema._def.value;\n        }\n        if (schema instanceof z.ZodEnum) {\n            return schema._def.values[0]; // Use the first enum value as an example\n        }\n        if (schema instanceof z.ZodDefault) {\n            return generateExample(schema._def.innerType);\n        }\n        return null; // Default value if type is unrecognized\n    }\n}\n"],"mappings":";AACA,SAAS,SAAS;AAEX,SAAS,2BACZ,aACA,QACM;AACN,MAAI,aAAuB,CAAC;AAE5B,MAAI,kBAAkB,EAAE,WAAW;AAC/B,UAAM,QAAQ,OAAO;AACrB,iBAAa,OAAO,QAAoB,KAAK,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACjE,YAAM,aAAa,MAAM,WAAW;AACpC,YAAM,mBAAmB,MAAM,eAAe;AAC9C,YAAM,UAAU,cAAc,KAAK;AAEnC,aAAO,KAAK,GAAG,GACX,aAAa,gBAAgB,EACjC,KAAK,OAAO,MAAM,gBAAgB;AAAA,IACtC,CAAC;AAAA,EACL,OAAO;AACH,UAAM,aAAa,OAAO,WAAW;AACrC,UAAM,mBAAmB,OAAO,eAAe;AAC/C,UAAM,UAAU,cAAc,MAAM;AAEpC,eAAW;AAAA,MACP,KACI,aAAa,gBAAgB,EACjC,IAAI,OAAO,MAAM,gBAAgB;AAAA,IACrC;AAAA,EACJ;AAEA,SAAO,GAAG,WAAW;AAAA,EAAK,WAAW,KAAK,IAAI,CAAC;AACnD;AAEA,SAAS,cAAc,QAA8B;AACjD,MAAI,kBAAkB,EAAE,WAAW;AAC/B,WAAO;AAAA,EACX;AACA,MAAI,kBAAkB,EAAE,WAAW;AAC/B,WAAO;AAAA,EACX;AACA,MAAI,kBAAkB,EAAE,YAAY;AAChC,WAAO;AAAA,EACX;AACA,MAAI,kBAAkB,EAAE,UAAU;AAC9B,WAAO;AAAA,EACX;AACA,MAAI,kBAAkB,EAAE,WAAW;AAC/B,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEO,SAAS,uBACZ,UACA,cAAc,QACR;AACN,QAAM,mBAAmB;AACzB,SAAO,SAAS,QAAQ,kBAAkB,WAAW;AACzD;AAEO,SAAS,wBAAwB,YAAkC;AACtE,QAAM,gBAAgB,gBAAgB,UAAU;AAChD,SAAO,KAAK,UAAU,eAAe,MAAM,CAAC;AAE5C,WAAS,gBAAgB,QAA+B;AACpD,QAAI,kBAAkB,EAAE,WAAW;AAC/B,aAAO;AAAA,IACX;AACA,QAAI,kBAAkB,EAAE,WAAW;AAC/B,aAAO;AAAA,IACX;AACA,QAAI,kBAAkB,EAAE,YAAY;AAChC,aAAO;AAAA,IACX;AACA,QAAI,kBAAkB,EAAE,UAAU;AAC9B,YAAM,gBAAgB,OAAO,KAAK;AAClC,aAAO,CAAC,gBAAgB,aAAa,CAAC;AAAA,IAC1C;AACA,QAAI,kBAAkB,EAAE,WAAW;AAC/B,YAAM,QAAQ,OAAO,KAAK,MAAM;AAChC,YAAM,MAA+B,CAAC;AACtC,iBAAW,CAAC,KAAK,WAAW,KAAK,OAAO,QAAQ,KAAK,GAAG;AACpD,YAAI,GAAG,IAAI,gBAAgB,WAAyB;AAAA,MACxD;AACA,aAAO;AAAA,IACX;AACA,QACI,kBAAkB,EAAE,eACpB,kBAAkB,EAAE,aACtB;AACE,YAAM,cAAc,OAAO,OAAO;AAClC,aAAO,gBAAgB,WAAW;AAAA,IACtC;AACA,QAAI,kBAAkB,EAAE,UAAU;AAC9B,YAAM,UAAU,OAAO,KAAK;AAC5B,aAAO,gBAAgB,QAAQ,CAAC,CAAC;AAAA,IACrC;AACA,QAAI,kBAAkB,EAAE,YAAY;AAChC,aAAO,OAAO,KAAK;AAAA,IACvB;AACA,QAAI,kBAAkB,EAAE,SAAS;AAC7B,aAAO,OAAO,KAAK,OAAO,CAAC;AAAA,IAC/B;AACA,QAAI,kBAAkB,EAAE,YAAY;AAChC,aAAO,gBAAgB,OAAO,KAAK,SAAS;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AACJ;","names":[]}