"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/plugins/send-sol.ts
var _web3js = require('@solana/web3.js');
var _viem = require('viem');
var _zod = require('zod');

function sendSOL() {
  return {
    name: "send_sol",
    supportsSmartWallets: () => true,
    supportsChain: (chain) => chain.type === "solana",
    getTools: async () => {
      return [
        {
          name: "send_sol",
          description: "This {{tool}} sends SOL to an address on a Solana chain.",
          parameters: sendSOLParametersSchema,
          method: sendSOLMethod
        }
      ];
    }
  };
}
var sendSOLParametersSchema = _zod.z.object({
  to: _zod.z.string().describe("The address to send SOL to"),
  amount: _zod.z.string().describe("The amount of SOL to send")
});
async function sendSOLMethod(walletClient, parameters) {
  try {
    const { to, amount } = parameters;
    const senderAddress = walletClient.getAddress();
    const lamports = _viem.parseUnits.call(void 0, amount, 9);
    const transferInstruction = _web3js.SystemProgram.transfer({
      fromPubkey: new (0, _web3js.PublicKey)(senderAddress),
      toPubkey: new (0, _web3js.PublicKey)(to),
      lamports
    });
    const txResult = await walletClient.sendTransaction({
      instructions: [transferInstruction]
    });
    return txResult.hash;
  } catch (error) {
    throw new Error(`Failed to send SOL: ${error}`);
  }
}



exports.sendSOL = sendSOL;
//# sourceMappingURL=chunk-DDMEL5TB.js.map