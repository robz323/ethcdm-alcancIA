import { EVMWalletClient, EVMTypedData, EVMTransaction, EVMReadRequest } from '@goat-sdk/wallet-evm';
import { WalletClient } from 'viem';

type ViemOptions = {
    paymaster?: {
        defaultAddress: `0x${string}`;
        defaultInput?: `0x${string}`;
    };
};
declare class ViemEVMWalletClient extends EVMWalletClient {
    #private;
    private get publicClient();
    constructor(client: WalletClient, options?: ViemOptions);
    getAddress(): `0x${string}` | "";
    getChain(): {
        type: "evm";
        id: number;
    };
    resolveAddress(address: string): Promise<`0x${string}`>;
    signMessage(message: string): Promise<{
        signature: `0x${string}`;
    }>;
    signTypedData(data: EVMTypedData): Promise<{
        signature: `0x${string}`;
    }>;
    sendTransaction(transaction: EVMTransaction): Promise<{
        hash: `0x${string}`;
        status: "success" | "reverted";
    }>;
    read(request: EVMReadRequest): Promise<{
        value: unknown;
    }>;
    balanceOf(address: string): Promise<{
        value: string;
        decimals: number;
        symbol: string;
        name: string;
        inBaseUnits: string;
    }>;
    private waitForReceipt;
}
declare function viem(client: WalletClient, options?: ViemOptions): ViemEVMWalletClient;

export { ViemEVMWalletClient, type ViemOptions, viem };
