import{a as u}from"./chunk-LRPXRHNE.mjs";import{a as m,b,c as h,d as g,e as w,f as T,g as k,h as v,i as A}from"./chunk-ONF4HCCC.mjs";import{a as l}from"./chunk-YSXGDEY5.mjs";import{Tool as c}from"@goat-sdk/core";import{EVMWalletClient as s}from"@goat-sdk/wallet-evm";function d(f,t,n,e){var r=arguments.length,a=r<3?t:e===null?e=Object.getOwnPropertyDescriptor(t,n):e,p;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")a=Reflect.decorate(f,t,n,e);else for(var y=f.length-1;y>=0;y--)(p=f[y])&&(a=(r<3?p(a):r>3?p(t,n,a):p(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a}l(d,"_ts_decorate");function o(f,t){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(f,t)}l(o,"_ts_metadata");var i=class{static{l(this,"Erc20Service")}tokens;constructor({tokens:t}={}){this.tokens=t??[]}async getTokenInfoBySymbol(t,n){let e=this.tokens.find(p=>[p.symbol,p.symbol.toLowerCase()].includes(n.symbol));if(!e)throw Error(`Token with symbol ${n.symbol} not found`);let r=t.getChain(),a=e.chains[r.id]?.contractAddress;if(!a)throw Error(`Token with symbol ${n.symbol} not found on chain ${r.id}`);return{symbol:e?.symbol,contractAddress:a,decimals:e?.decimals,name:e?.name}}async getTokenBalance(t,n){try{let e=await t.resolveAddress(n.wallet),r=await t.read({address:n.tokenAddress,abi:u,functionName:"balanceOf",args:[e]});return Number(r.value)}catch(e){throw Error(`Failed to fetch balance: ${e}`)}}async transfer(t,n){try{let e=await t.resolveAddress(n.to);return(await t.sendTransaction({to:n.tokenAddress,abi:u,functionName:"transfer",args:[e,n.amount]})).hash}catch(e){throw Error(`Failed to transfer: ${e}`)}}async getTokenTotalSupply(t,n){try{return(await t.read({address:n.tokenAddress,abi:u,functionName:"totalSupply"})).value}catch(e){throw Error(`Failed to fetch total supply: ${e}`)}}async getTokenAllowance(t,n){try{let e=await t.resolveAddress(n.owner),r=await t.resolveAddress(n.spender),a=await t.read({address:n.tokenAddress,abi:u,functionName:"allowance",args:[e,r]});return Number(a.value)}catch(e){throw Error(`Failed to fetch allowance: ${e}`)}}async approve(t,n){try{let e=await t.resolveAddress(n.spender);return(await t.sendTransaction({to:n.tokenAddress,abi:u,functionName:"approve",args:[e,n.amount]})).hash}catch(e){throw Error(`Failed to approve: ${e}`)}}async transferFrom(t,n){try{let e=await t.resolveAddress(n.from),r=await t.resolveAddress(n.to);return(await t.sendTransaction({to:n.tokenAddress,abi:u,functionName:"transferFrom",args:[e,r,n.amount]})).hash}catch(e){throw Error(`Failed to transfer from: ${e}`)}}async convertToBaseUnit(t){let{amount:n,decimals:e}=t,r=n*10**e;return Number(r)}async convertFromBaseUnit(t){let{amount:n,decimals:e}=t,r=n/10**e;return Number(r)}};d([c({description:"Get the ERC20 token info by its symbol, including the contract address, decimals, and name"}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof m>"u"?Object:m]),o("design:returntype",Promise)],i.prototype,"getTokenInfoBySymbol",null);d([c({description:"Get the balance of an ERC20 token in base units. Convert to decimal units before returning."}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof b>"u"?Object:b]),o("design:returntype",Promise)],i.prototype,"getTokenBalance",null);d([c({description:"Transfer an amount of an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof h>"u"?Object:h]),o("design:returntype",Promise)],i.prototype,"transfer",null);d([c({description:"Get the total supply of an ERC20 token"}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof g>"u"?Object:g]),o("design:returntype",Promise)],i.prototype,"getTokenTotalSupply",null);d([c({description:"Get the allowance of an ERC20 token"}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof w>"u"?Object:w]),o("design:returntype",Promise)],i.prototype,"getTokenAllowance",null);d([c({description:"Approve an amount of an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof T>"u"?Object:T]),o("design:returntype",Promise)],i.prototype,"approve",null);d([c({description:"Transfer an amount of an ERC20 token from an address to another address"}),o("design:type",Function),o("design:paramtypes",[typeof s>"u"?Object:s,typeof k>"u"?Object:k]),o("design:returntype",Promise)],i.prototype,"transferFrom",null);d([c({description:"Convert an amount of an ERC20 token to its base unit"}),o("design:type",Function),o("design:paramtypes",[typeof v>"u"?Object:v]),o("design:returntype",Promise)],i.prototype,"convertToBaseUnit",null);d([c({description:"Convert an amount of an ERC20 token from its base unit to its decimal unit"}),o("design:type",Function),o("design:paramtypes",[typeof A>"u"?Object:A]),o("design:returntype",Promise)],i.prototype,"convertFromBaseUnit",null);export{i as a};
