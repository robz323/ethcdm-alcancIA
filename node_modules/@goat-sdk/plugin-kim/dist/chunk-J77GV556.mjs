import{a as t}from"./chunk-YSXGDEY5.mjs";import{createToolParameters as i}from"@goat-sdk/core";import{z as e}from"zod";var o=class extends i(e.object({})){static{t(this,"GetSwapRouterAddressParams")}},f=e.object({tokenIn:e.string().describe("Address of the first token in the path"),tokenOut:e.string().describe("Address of the last token in the path"),intermediateTokens:e.array(e.string()).describe("Addresses of the intermediate tokens in the path"),fees:e.array(e.number()).describe("Fee tiers between each hop")}),s=class extends i(e.object({path:f.describe("The path of the swap"),recipient:e.string().describe("Address to receive the output tokens"),deadline:e.number().describe("The deadline for the swap"),amountIn:e.string().describe("The amount of tokens to swap in"),amountOutMinimum:e.string().describe("The minimum amount of tokens to receive")})){static{t(this,"ExactInputParams")}},r=class extends i(e.object({path:e.any().describe("The path of the swap"),recipient:e.string().describe("The address to receive the output tokens"),deadline:e.number().describe("The deadline for the swap"),amountOut:e.string().describe("The amount of tokens to swap out"),amountInMaximum:e.string().describe("The maximum amount of tokens to swap in")})){static{t(this,"ExactOutputParams")}},d=class extends i(e.object({tokenIn:e.string().describe("The address of the token to swap in"),tokenOut:e.string().describe("The address of the token to swap out"),recipient:e.string().describe("The address to receive the output tokens"),deadline:e.number().optional().default(60*60*24).describe("The deadline for the swap in seconds from now"),amountIn:e.string().describe("The amount of tokens to swap in in base units"),amountOutMinimum:e.string().describe("The minimum amount of tokens to receive in base units"),limitSqrtPrice:e.string().describe("The limit price for the swap")})){static{t(this,"ExactInputSingleParams")}},c=class extends i(e.object({tokenIn:e.string().describe("The token to swap in"),tokenOut:e.string().describe("The token to swap out"),recipient:e.string().describe("The address to receive the output tokens"),deadline:e.number().describe("The deadline for the swap"),amountOut:e.string().describe("The amount of tokens to swap out"),amountInMaximum:e.string().describe("The maximum amount of tokens to swap in"),limitSqrtPrice:e.string().describe("The limit price for the swap")})){static{t(this,"ExactOutputSingleParams")}},h=class extends i(e.object({poolAddress:e.string().describe("The address of the pool")})){static{t(this,"DefaultConfigurationForPoolParams")}},a=class extends i(e.object({token0:e.string().describe("The first token in the pair"),token1:e.string().describe("The second token in the pair")})){static{t(this,"PoolByPairParams")}},m=class extends i(e.object({token0:e.string().describe("The first token in the pair"),token1:e.string().describe("The second token in the pair"),tickLower:e.number().describe("The lower tick for the liquidity"),tickUpper:e.number().describe("The upper tick for the liquidity"),amount0Desired:e.string().describe("The amount of token0 to add"),amount1Desired:e.string().describe("The amount of token1 to add"),amount0Min:e.string().describe("The minimum amount of token0 to add"),amount1Min:e.string().describe("The minimum amount of token1 to add"),recipient:e.string().describe("The address to receive the output tokens"),deadline:e.number().describe("The deadline for the swap")})){static{t(this,"MintParams")}},u=class extends i(e.object({token0:e.string().describe("The first token in the pair"),token1:e.string().describe("The second token in the pair"),tokenId:e.string().describe("The token id of the liquidity"),amount0Desired:e.string().describe("The amount of token0 to add"),amount1Desired:e.string().describe("The amount of token1 to add"),amount0Min:e.string().describe("The minimum amount of token0 to add"),amount1Min:e.string().describe("The minimum amount of token1 to add"),deadline:e.number().describe("The deadline for the swap")})){static{t(this,"IncreaseLiquidityParams")}},b=class extends i(e.object({token0:e.string().describe("The first token in the pair"),token1:e.string().describe("The second token in the pair"),tokenId:e.string().describe("The token id of the liquidity"),liquidity:e.string().describe("The amount of liquidity to remove"),amount0Min:e.string().describe("The minimum amount of token0 to remove"),amount1Min:e.string().describe("The minimum amount of token1 to remove"),deadline:e.number().describe("The deadline for the swap")})){static{t(this,"DecreaseLiquidityParams")}},p=class extends i(e.object({tokenId:e.string().describe("The token id of the liquidity"),token0:e.string().describe("The first token in the pair"),token1:e.string().describe("The second token in the pair"),recipient:e.string().describe("The address to receive the output tokens"),amount0Max:e.string().describe("The maximum amount of token0 to collect"),amount1Max:e.string().describe("The maximum amount of token1 to collect")})){static{t(this,"CollectParams")}},k=class extends i(e.object({tokenId:e.string().describe("The token id of the liquidity position to be burned")})){static{t(this,"BurnParams")}},T=class extends i(e.object({price:e.string().describe("The current price of the pool"),tick:e.number().describe("The current tick of the pool"),lastFee:e.number().describe("The current (last known) fee in hundredths of a bip"),pluginCongig:e.number().describe("The current plugin config as bitmap"),communityFee:e.number().describe("The community fee represented as a percent of all collected fee in thousandths"),unlocked:e.boolean().describe("Whether the pool is unlocked")})){static{t(this,"GlobalStateResponseParams")}};export{o as a,f as b,s as c,r as d,d as e,c as f,h as g,a as h,m as i,u as j,b as k,p as l,k as m,T as n};
