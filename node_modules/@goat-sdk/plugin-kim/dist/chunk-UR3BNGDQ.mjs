import{a as k}from"./chunk-HZFO2ZNC.mjs";import{a as I,c as N,d as _,e as P,f as D,i as S,j as x,k as M,l as A,m as E}from"./chunk-J77GV556.mjs";import{a as r}from"./chunk-G6NXRO24.mjs";import{a as j}from"./chunk-CSO5SXZE.mjs";import{a as R}from"./chunk-4MIIWOU6.mjs";import{a as l}from"./chunk-2VGOQ75U.mjs";import{a as w}from"./chunk-YSXGDEY5.mjs";import{Tool as f}from"@goat-sdk/core";import{EVMWalletClient as c}from"@goat-sdk/wallet-evm";import{parseUnits as s}from"viem";import{encodeAbiParameters as T}from"viem";function m(h,n,t,e){var a=arguments.length,o=a<3?n:e===null?e=Object.getOwnPropertyDescriptor(n,t):e,d;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")o=Reflect.decorate(h,n,t,e);else for(var p=h.length-1;p>=0;p--)(d=h[p])&&(o=(a<3?d(o):a>3?d(n,t,o):d(n,t))||o);return a>3&&o&&Object.defineProperty(n,t,o),o}w(m,"_ts_decorate");function i(h,n){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(h,n)}w(i,"_ts_metadata");var b="0xAc48FcF1049668B285f3dC72483DF5Ae2162f7e8",g="0x2e8614625226D26180aDf6530C3b1677d3D7cf10",U="0xB5F00c2C5f8821155D8ed27E31932CFD9DB3C5D5",u=class{static{w(this,"KimService")}async getSwapRouterAddress(n){return b}async swapExactInputSingleHop(n,t){try{let e=await n.resolveAddress(t.recipient),a=t.amountIn,o=t.amountOutMinimum,d=t.limitSqrtPrice,p=Math.floor(Date.now()/1e3)+t.deadline;return(await n.sendTransaction({to:b,abi:k,functionName:"exactInputSingle",args:[{tokenIn:t.tokenIn,tokenOut:t.tokenOut,recipient:e,deadline:p,amountIn:a,amountOutMinimum:o,limitSqrtPrice:d}]})).hash}catch(e){throw Error(`Failed to swap: ${e}`)}}async swapExactOutputSingleHop(n,t){try{let e=await n.resolveAddress(t.tokenIn),a=await n.resolveAddress(t.tokenOut),o=await n.resolveAddress(t.recipient),d=Number(await n.read({address:t.tokenIn,abi:r,functionName:"decimals"})),p=Number(await n.read({address:t.tokenOut,abi:r,functionName:"decimals"})),y=s(t.amountOut,p),F=s(t.amountInMaximum,d),O=s(t.limitSqrtPrice,96);return(await n.sendTransaction({to:b,abi:k,functionName:"exactOutputSingle",args:[e,a,o,t.deadline,y,F,O]})).hash}catch(e){throw Error(`Failed to swap: ${e}`)}}async swapExactInputMultiHop(n,t){try{let e=await n.resolveAddress(t.recipient),a=Number(await n.read({address:t.path.tokenIn,abi:r,functionName:"decimals"})),o=Number(await n.read({address:t.path.tokenOut,abi:r,functionName:"decimals"})),d=T([{type:"address[]"},{type:"uint24[]"}],[[t.path.tokenIn,...t.path.intermediateTokens.map(y=>y),t.path.tokenOut],t.path.fees]);return(await n.sendTransaction({to:b,abi:k,functionName:"exactInput",args:[d,e,t.deadline,s(t.amountIn,a),s(t.amountOutMinimum,o)]})).hash}catch(e){throw new Error(`Failed to swap: ${e}`)}}async swapExactOutputMultiHop(n,t){try{let e=await n.resolveAddress(t.recipient),a=Number(await n.read({address:t.path.tokenIn,abi:r,functionName:"decimals"})),o=Number(await n.read({address:t.path.tokenOut,abi:r,functionName:"decimals"})),d=T([{type:"address[]"},{type:"uint24[]"}],[[t.path.tokenIn,...t.path.intermediateTokens.map(y=>y),t.path.tokenOut],t.path.fees]);return(await n.sendTransaction({to:b,abi:k,functionName:"exactOutput",args:[d,e,t.deadline,s(t.amountOut,o),s(t.amountInMaximum,a)]})).hash}catch(e){throw new Error(`Failed to swap: ${e}`)}}async mintPosition(n,t){try{let a=await n.resolveAddress(t.recipient),o=await n.resolveAddress(t.token0),d=await n.resolveAddress(t.token1),p=await n.read({address:U,abi:j,functionName:"getPool",args:[o,d]}),{value:y}=await n.read({address:p,abi:R,functionName:"globalState"}),O=y.tick,q=t.tickLower?t.tickLower:Math.floor(O/60)*60-60*2,v=t.tickUpper?t.tickUpper:Math.floor(O/60)*60+60*2,[L,B]=await Promise.all([n.read({address:t.token0,abi:r,functionName:"decimals"}),n.read({address:t.token1,abi:r,functionName:"decimals"})]),$=s(t.amount0Desired,Number(L)),H=s(t.amount1Desired,Number(B));return(await n.sendTransaction({to:g,abi:l,functionName:"mint",args:[{token0:o,token1:d,tickLower:q,tickUpper:v,amount0Desired:$,amount1Desired:H,amount0Min:0,amount1Min:0,recipient:a,deadline:t.deadline}]})).hash}catch(e){throw new Error(`Failed to mint position: ${e}`)}}async increaseLiquidity(n,t){try{let[e,a]=await Promise.all([Number(await n.read({address:t.token0,abi:r,functionName:"decimals"})),Number(await n.read({address:t.token1,abi:r,functionName:"decimals"}))]);return(await n.sendTransaction({to:g,abi:l,functionName:"increaseLiquidity",args:[{tokenId:t.tokenId,amount0Desired:s(t.amount0Desired,e),amount1Desired:s(t.amount1Desired,a),amount0Min:s(t.amount0Min,e),amount1Min:s(t.amount1Min,a),deadline:t.deadline}]})).hash}catch(e){throw new Error(`Failed to increase liquidity: ${e}`)}}async decreaseLiquidity(n,t){try{let[e,a]=await Promise.all([Number(await n.read({address:t.token0,abi:r,functionName:"decimals"})),Number(await n.read({address:t.token1,abi:r,functionName:"decimals"}))]);return(await n.sendTransaction({to:g,abi:l,functionName:"decreaseLiquidity",args:[{tokenId:t.tokenId,liquidity:s(t.liquidity,18),amount0Min:s(t.amount0Min,e),amount1Min:s(t.amount1Min,a),deadline:t.deadline}]})).hash}catch(e){throw new Error(`Failed to decrease liquidity: ${e}`)}}async collect(n,t){try{let e=await n.resolveAddress(t.recipient),[a,o]=await Promise.all([Number(await n.read({address:t.token0,abi:r,functionName:"decimals"})),Number(await n.read({address:t.token1,abi:r,functionName:"decimals"}))]);return(await n.sendTransaction({to:g,abi:l,functionName:"collect",args:[{tokenId:t.tokenId,recipient:e,amount0Max:s(t.amount0Max,a),amount1Max:s(t.amount1Max,o)}]})).hash}catch(e){throw new Error(`Failed to collect: ${e}`)}}async burn(n,t){try{return(await n.sendTransaction({to:g,abi:l,functionName:"burn",args:[t.tokenId]})).hash}catch(e){throw new Error(`Failed to burn position: ${e}`)}}};m([f({name:"kim_get_swap_router_address",description:"Get the address of the swap router"}),i("design:type",Function),i("design:paramtypes",[typeof I>"u"?Object:I]),i("design:returntype",Promise)],u.prototype,"getSwapRouterAddress",null);m([f({description:"Swap an exact amount of input tokens for a single hop. Make sure tokens are approved for the swap router."}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof P>"u"?Object:P]),i("design:returntype",Promise)],u.prototype,"swapExactInputSingleHop",null);m([f({name:"kim_swap_exact_output_single_hop",description:"Swap an exact amount of output tokens for a single hop"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof D>"u"?Object:D]),i("design:returntype",Promise)],u.prototype,"swapExactOutputSingleHop",null);m([f({name:"kim_swap_exact_input_multi_hop",description:"Swap an exact amount of input tokens in multiple hops"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof N>"u"?Object:N]),i("design:returntype",Promise)],u.prototype,"swapExactInputMultiHop",null);m([f({name:"kim_swap_exact_output_multi_hop",description:"Swap tokens to receive an exact amount of output tokens in multiple hops"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof _>"u"?Object:_]),i("design:returntype",Promise)],u.prototype,"swapExactOutputMultiHop",null);m([f({name:"kim_mint_position",description:"Mint a new liquidity position"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof S>"u"?Object:S]),i("design:returntype",Promise)],u.prototype,"mintPosition",null);m([f({name:"kim_increase_liquidity",description:"Increase liquidity in an existing position"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof x>"u"?Object:x]),i("design:returntype",Promise)],u.prototype,"increaseLiquidity",null);m([f({name:"kim_decrease_liquidity",description:"Decrease liquidity in an existing position"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof M>"u"?Object:M]),i("design:returntype",Promise)],u.prototype,"decreaseLiquidity",null);m([f({name:"kim_collect",description:"Collect tokens from a liquidity position"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof A>"u"?Object:A]),i("design:returntype",Promise)],u.prototype,"collect",null);m([f({name:"kim_burn",description:"Burn a liquidity position NFT after all tokens have been collected"}),i("design:type",Function),i("design:paramtypes",[typeof c>"u"?Object:c,typeof E>"u"?Object:E]),i("design:returntype",Promise)],u.prototype,"burn",null);export{u as a};
