"use strict";
/**
 * When sending values to or receiving values from a [Contract](../classes/Contract), the data is generally encoded
 * using the [ABI
 * Specification](https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#formal-specification-of-the-encoding).
 *
 * The AbiCoder provides a utility to encode values to ABI data and decode values from ABI data.
 *
 * Most of the time, developers should favor the [Contract](../classes/Contract) class, which further abstracts the
 * finer details of ABI data.
 *
 * @category Application Binary Interface
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbiCoder = void 0;
const index_js_1 = require("../utils/index.js");
const abstract_coder_js_1 = require("./coders/abstract-coder.js");
const address_js_1 = require("./coders/address.js");
const array_js_1 = require("./coders/array.js");
const boolean_js_1 = require("./coders/boolean.js");
const bytes_js_1 = require("./coders/bytes.js");
const fixed_bytes_js_1 = require("./coders/fixed-bytes.js");
const null_js_1 = require("./coders/null.js");
const number_js_1 = require("./coders/number.js");
const string_js_1 = require("./coders/string.js");
const tuple_js_1 = require("./coders/tuple.js");
const fragments_js_1 = require("./fragments.js");
const index_js_2 = require("../address/index.js");
const index_js_3 = require("../utils/index.js");
// https://docs.soliditylang.org/en/v0.8.17/control-structures.html
const PanicReasons = new Map();
PanicReasons.set(0x00, 'GENERIC_PANIC');
PanicReasons.set(0x01, 'ASSERT_FALSE');
PanicReasons.set(0x11, 'OVERFLOW');
PanicReasons.set(0x12, 'DIVIDE_BY_ZERO');
PanicReasons.set(0x21, 'ENUM_RANGE_ERROR');
PanicReasons.set(0x22, 'BAD_STORAGE_DATA');
PanicReasons.set(0x31, 'STACK_UNDERFLOW');
PanicReasons.set(0x32, 'ARRAY_RANGE_ERROR');
PanicReasons.set(0x41, 'OUT_OF_MEMORY');
PanicReasons.set(0x51, 'UNINITIALIZED_FUNCTION_CALL');
const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
let defaultCoder = null;
let defaultMaxInflation = 1024;
function getBuiltinCallException(action, tx, data, abiCoder) {
    let message = 'missing revert data';
    let reason = null;
    const invocation = null;
    let revert = null;
    if (data) {
        message = 'execution reverted';
        const bytes = (0, index_js_3.getBytes)(data);
        data = (0, index_js_3.hexlify)(data);
        if (bytes.length === 0) {
            message += ' (no data present; likely require(false) occurred';
            reason = 'require(false)';
        }
        else if (bytes.length % 32 !== 4) {
            message += ' (could not decode reason; invalid data length)';
        }
        else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === '0x08c379a0') {
            // Error(string)
            try {
                reason = abiCoder.decode(['string'], bytes.slice(4))[0];
                revert = {
                    signature: 'Error(string)',
                    name: 'Error',
                    args: [reason],
                };
                message += `: ${JSON.stringify(reason)}`;
            }
            catch (error) {
                message += ' (could not decode reason; invalid string data)';
            }
        }
        else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === '0x4e487b71') {
            // Panic(uint256)
            try {
                const code = Number(abiCoder.decode(['uint256'], bytes.slice(4))[0]);
                revert = {
                    signature: 'Panic(uint256)',
                    name: 'Panic',
                    args: [code],
                };
                reason = `Panic due to ${PanicReasons.get(code) || 'UNKNOWN'}(${code})`;
                message += `: ${reason}`;
            }
            catch (error) {
                message += ' (could not decode panic code)';
            }
        }
        else {
            message += ' (unknown custom error)';
        }
    }
    const transaction = {
        to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,
        data: tx.data || '0x',
    };
    if (tx.from) {
        transaction.from = (0, index_js_2.getAddress)(tx.from);
    }
    return (0, index_js_3.makeError)(message, 'CALL_EXCEPTION', {
        action,
        data,
        reason,
        transaction,
        invocation,
        revert,
    });
}
/**
 * The **AbiCoder** is a low-level class responsible for encoding JavaScript values into binary data and decoding binary
 * data into JavaScript values.
 *
 * @category Application Binary Interface
 */
class AbiCoder {
    #getCoder(param) {
        if (param.isArray()) {
            return new array_js_1.ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
        }
        if (param.isTuple()) {
            return new tuple_js_1.TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
        }
        switch (param.baseType) {
            case 'address':
                return new address_js_1.AddressCoder(param.name);
            case 'bool':
                return new boolean_js_1.BooleanCoder(param.name);
            case 'string':
                return new string_js_1.StringCoder(param.name);
            case 'bytes':
                return new bytes_js_1.BytesCoder(param.name);
            case '':
                return new null_js_1.NullCoder(param.name);
        }
        // u?int[0-9]*
        let match = param.type.match(paramTypeNumber);
        if (match) {
            const size = parseInt(match[2] || '256');
            (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, 'invalid ' + match[1] + ' bit length', 'param', param);
            return new number_js_1.NumberCoder(size / 8, match[1] === 'int', param.name);
        }
        // bytes[0-9]+
        match = param.type.match(paramTypeBytes);
        if (match) {
            const size = parseInt(match[1]);
            (0, index_js_1.assertArgument)(size !== 0 && size <= 32, 'invalid bytes length', 'param', param);
            return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
        }
        (0, index_js_1.assertArgument)(false, 'invalid type', 'type', param.type);
    }
    /**
     * Get the default values for the given types. For example, a `uint` is by default `0` and `bool` is by default
     * `false`.
     *
     * @param {(string | ParamType)[]} types - Array of parameter types to get default values for.
     * @returns {Result} The default values corresponding to the given types.
     */
    getDefaultValue(types) {
        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, '_');
        return coder.defaultValue();
    }
    /**
     * Encode the values as the specified types into ABI data.
     *
     * @param {(string | ParamType)[]} types - Array of parameter types.
     * @param {any[]} values - Array of values to encode.
     * @returns {string} The encoded data in hexadecimal format.
     */
    encode(types, values) {
        (0, index_js_1.assertArgumentCount)(values.length, types.length, 'types/values length mismatch');
        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, '_');
        const writer = new abstract_coder_js_1.Writer();
        coder.encode(writer, values);
        return writer.data;
    }
    /**
     * Decode the ABI data as the types into values.
     *
     * If loose decoding is enabled, then strict padding is not enforced. Some older versions of Solidity incorrectly
     * padded event data emitted from `external` functions.
     *
     * @param {(string | ParamType)[]} types - Array of parameter types.
     * @param {BytesLike} data - The ABI data to decode.
     * @param {boolean} [loose=false] - Enable loose decoding. Default is `false`
     * @returns {Result} The decoded values.
     */
    decode(types, data, loose) {
        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, '_');
        return coder.decode(new abstract_coder_js_1.Reader(data, loose, defaultMaxInflation));
    }
    /**
     * Set the default maximum inflation factor.
     *
     * @ignore
     * @param {number} value - The new inflation factor.
     */
    static _setDefaultMaxInflation(value) {
        (0, index_js_1.assertArgument)(typeof value === 'number' && Number.isInteger(value), 'invalid defaultMaxInflation factor', 'value', value);
        defaultMaxInflation = value;
    }
    /**
     * Returns the shared singleton instance of a default {@link AbiCoder | **AbiCoder**}.
     *
     * On the first call, the instance is created internally.
     *
     * @returns {AbiCoder} The default ABI coder instance.
     */
    static defaultAbiCoder() {
        if (defaultCoder == null) {
            defaultCoder = new AbiCoder();
        }
        return defaultCoder;
    }
    /**
     * Returns a quais-compatible {@link CallExceptionError | **CallExceptionError**} for the given result data.
     *
     * @param {CallExceptionAction} action - The action that triggered the exception.
     * @param {Object} tx - The transaction information.
     * @param {BytesLike | null} data - The data associated with the call exception.
     * @returns {CallExceptionError} The corresponding call exception error.
     */
    static getBuiltinCallException(action, tx, data) {
        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());
    }
}
exports.AbiCoder = AbiCoder;
//# sourceMappingURL=abi-coder.js.map