"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDNodeBIP32Adapter = void 0;
const data_js_1 = require("../../utils/data.js");
class HDNodeBIP32Adapter {
    hdNodeWallet;
    constructor(hdNodeWallet) {
        this.hdNodeWallet = hdNodeWallet;
    }
    get chainCode() {
        return (0, data_js_1.getBytes)(this.hdNodeWallet.chainCode);
    }
    get network() {
        throw 'Not implemented';
    }
    get depth() {
        return this.hdNodeWallet.depth;
    }
    get index() {
        return this.hdNodeWallet.index;
    }
    get parentFingerprint() {
        return parseInt(this.hdNodeWallet.parentFingerprint);
    }
    get privateKey() {
        return (0, data_js_1.getBytes)(this.hdNodeWallet.privateKey);
    }
    get identifier() {
        throw 'Not implemented';
    }
    get fingerprint() {
        throw 'Not implemented';
    }
    isNeutered() {
        throw 'Not implemented';
    }
    neutered() {
        throw 'Not implemented';
    }
    toBase58() {
        throw 'Not implemented';
    }
    // Map `derive` to `deriveChild`
    derive(index) {
        const derivedNode = this.hdNodeWallet.deriveChild(index);
        return new HDNodeBIP32Adapter(derivedNode);
    }
    deriveHardened(index) {
        throw 'Not implemented';
    }
    derivePath(path) {
        const derivedNode = this.hdNodeWallet.derivePath(path);
        return new HDNodeBIP32Adapter(derivedNode);
    }
    tweak(t) {
        throw 'Not implemented';
    }
    get publicKey() {
        return (0, data_js_1.getBytes)(this.hdNodeWallet.publicKey);
    }
    get lowR() {
        throw 'Not implemented';
    }
    sign(hash) {
        const sig = this.hdNodeWallet.signingKey.sign(hash);
        return (0, data_js_1.getBytes)(sig.serialized);
    }
    verify(hash, signature) {
        throw 'Not implemented';
    }
    signSchnorr(hash) {
        throw 'Not implemented';
    }
    verifySchnorr(hash, signature) {
        throw 'Not implemented';
    }
}
exports.HDNodeBIP32Adapter = HDNodeBIP32Adapter;
//# sourceMappingURL=types.js.map