"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wallet = void 0;
const index_js_1 = require("../crypto/index.js");
const index_js_2 = require("../utils/index.js");
const base_wallet_js_1 = require("./base-wallet.js");
const json_keystore_js_1 = require("./json-keystore.js");
/**
 * A **Wallet** manages a single private key which is used to sign transactions, messages and other common payloads.
 *
 * This class is generally the main entry point for developers that wish to use a private key directly, as it can create
 * instances from a large variety of common sources, including raw private key,
 * [BIP-39](https://en.bitcoin.it/wiki/BIP_0039) mnemonics and encrypted JSON wallets.
 *
 * @category Wallet
 */
class Wallet extends base_wallet_js_1.BaseWallet {
    /**
     * Create a new wallet for the private `key`, optionally connected to `provider`.
     *
     * @param {string | SigningKey} key - The private key.
     * @param {null | Provider} [provider] - The provider to connect to.
     */
    constructor(key, provider) {
        if (typeof key === 'string' && !key.startsWith('0x')) {
            key = '0x' + key;
        }
        const signingKey = typeof key === 'string' ? new index_js_1.SigningKey(key) : key;
        super(signingKey, provider);
    }
    /**
     * Connects the wallet to a provider.
     *
     * @param {null | Provider} provider - The provider to connect to.
     * @returns {Wallet} The connected wallet.
     */
    connect(provider) {
        return new Wallet(this.signingKey, provider);
    }
    /**
     * Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with `password`.
     *
     * If `progressCallback` is specified, it will receive periodic updates as the encryption process progresses.
     *
     * @param {Uint8Array | string} password - The password to encrypt the wallet with.
     * @param {ProgressCallback} [progressCallback] - An optional callback to keep the user informed.
     * @returns {Promise<string>} The encrypted JSON wallet.
     */
    async encrypt(password, progressCallback) {
        const account = { address: this.address, privateKey: this.privateKey };
        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
    }
    /**
     * Returns a [JSON Keystore Wallet](json-wallets) encrypted with `password`.
     *
     * It is preferred to use the [async version](encrypt) instead, which allows a
     * {@link ProgressCallback | **ProgressCallback**} to keep the user informed.
     *
     * This method will block the event loop (freezing all UI) until it is complete, which may be a non-trivial
     * duration.
     *
     * @param {Uint8Array | string} password - The password to encrypt the wallet with.
     * @returns {string} The encrypted JSON wallet.
     */
    encryptSync(password) {
        const account = { address: this.address, privateKey: this.privateKey };
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
    }
    /**
     * Creates a wallet from a keystore account.
     *
     * @ignore
     * @param {KeystoreAccount} account - The keystore account.
     * @returns {Wallet} The wallet instance.
     */
    static #fromAccount(account) {
        (0, index_js_2.assertArgument)(account, 'invalid JSON wallet', 'json', '[ REDACTED ]');
        const wallet = new Wallet(account.privateKey);
        (0, index_js_2.assertArgument)(wallet.address === account.address, 'address/privateKey mismatch', 'json', '[ REDACTED ]');
        return wallet;
    }
    /**
     * Creates (asynchronously) a **Wallet** by decrypting the `json` with `password`.
     *
     * If `progress` is provided, it is called periodically during decryption so that any UI can be updated.
     *
     * @param {string} json - The JSON data to decrypt.
     * @param {Uint8Array | string} password - The password to decrypt the JSON data.
     * @param {ProgressCallback} [progress] - An optional callback to keep the user informed.
     * @returns {Promise<QuaiHDWallet | Wallet>} The decrypted wallet.
     */
    static async fromEncryptedJson(json, password, progress) {
        let account;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
            account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
            return Wallet.#fromAccount(account);
        }
        throw new Error('invalid JSON wallet');
    }
    /**
     * Creates a **Wallet** by decrypting the `json` with `password`.
     *
     * The {@link Wallet.fromEncryptedJson | **fromEncryptedJson**} method is preferred, as this method will lock up and
     * freeze the UI during decryption, which may take some time.
     *
     * @param {string} json - The JSON data to decrypt.
     * @param {Uint8Array | string} password - The password to decrypt the JSON data.
     * @returns {QuaiHDWallet | Wallet} The decrypted wallet.
     */
    static fromEncryptedJsonSync(json, password) {
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
            account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
        }
        else {
            (0, index_js_2.assertArgument)(false, 'invalid JSON wallet', 'json', '[ REDACTED ]');
        }
        return Wallet.#fromAccount(account);
    }
}
exports.Wallet = Wallet;
//# sourceMappingURL=wallet.js.map