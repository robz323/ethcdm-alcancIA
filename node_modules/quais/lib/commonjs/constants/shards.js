"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromShard = exports.toShard = exports.ShardData = exports.Shard = void 0;
const zones_js_1 = require("./zones.js");
/**
 * A shard represents a chain within the Quai network hierarchy. A shard refer to the Prime chain, a region under the
 * Prime chain, or a Zone within a region. The value is a hexadecimal string representing the encoded value of the
 * shard. Read more [here](https://github.com/quai-network/qips/blob/master/qip-0002.md).
 *
 * @category Constants
 */
var Shard;
(function (Shard) {
    Shard["Cyprus"] = "0x0";
    Shard["Cyprus1"] = "0x00";
    Shard["Cyprus2"] = "0x01";
    Shard["Cyprus3"] = "0x02";
    Shard["Paxos"] = "0x1";
    Shard["Paxos1"] = "0x10";
    Shard["Paxos2"] = "0x11";
    Shard["Paxos3"] = "0x12";
    Shard["Hydra"] = "0x2";
    Shard["Hydra1"] = "0x20";
    Shard["Hydra2"] = "0x21";
    Shard["Hydra3"] = "0x22";
    Shard["Prime"] = "0x";
})(Shard = exports.Shard || (exports.Shard = {}));
function shardFromBytes(shard) {
    switch (shard) {
        case '0x':
            return Shard.Prime;
        case '0x0':
            return Shard.Cyprus;
        case '0x1':
            return Shard.Paxos;
        case '0x2':
            return Shard.Hydra;
        case '0x00':
            return Shard.Cyprus1;
        case '0x01':
            return Shard.Cyprus2;
        case '0x02':
            return Shard.Cyprus3;
        case '0x10':
            return Shard.Paxos1;
        case '0x11':
            return Shard.Paxos2;
        case '0x12':
            return Shard.Paxos3;
        case '0x20':
            return Shard.Hydra1;
        case '0x21':
            return Shard.Hydra2;
        case '0x22':
            return Shard.Hydra3;
        default:
            throw new Error('Invalid shard');
    }
}
/**
 * Constant data that defines each shard within the network.
 *
 * @category Constants
 */
exports.ShardData = [
    ...zones_js_1.ZoneData,
    {
        name: 'Cyprus',
        nickname: 'cyprus',
        shard: 'region-0',
        context: 2,
        byte: '0x0',
    },
    {
        name: 'Paxos',
        nickname: 'paxos',
        shard: 'region-1',
        context: 2,
        byte: '0x1',
    },
    {
        name: 'Hydra',
        nickname: 'hydra',
        shard: 'region-2',
        context: 2,
        byte: '0x2',
    },
    {
        name: 'Prime',
        nickname: 'prime',
        shard: 'prime',
        context: 2,
        byte: '0x',
    },
];
function toShard(shard) {
    return shardFromBytes(exports.ShardData.find((it) => it.name == shard || it.byte == shard || it.nickname == shard || it.shard == shard)
        ?.byte || '');
}
exports.toShard = toShard;
function fromShard(shard, key) {
    return exports.ShardData.find((it) => it.byte == shard)?.[key] || '';
}
exports.fromShard = fromShard;
//# sourceMappingURL=shards.js.map