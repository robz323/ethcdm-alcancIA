"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoidSigner = exports.AbstractSigner = void 0;
/**
 * Generally the [Wallet](../classes/Wallet) and [JsonRpcSigner](../classes/JsonRpcSigner) and their sub-classes are
 * sufficent for most developers, but this is provided to fascilitate more complex Signers.
 */
const index_js_1 = require("../address/index.js");
const index_js_2 = require("../utils/index.js");
const provider_js_1 = require("../providers/provider.js");
const index_js_3 = require("../utils/index.js");
const index_js_4 = require("../transaction/index.js");
const index_js_5 = require("../constants/index.js");
function checkProvider(signer, operation) {
    if (signer.provider) {
        return signer.provider;
    }
    (0, index_js_2.assert)(false, 'missing provider', 'UNSUPPORTED_OPERATION', { operation });
}
async function populate(signer, tx) {
    const pop = (0, provider_js_1.copyRequest)(tx);
    if (pop.to != null) {
        pop.to = (0, index_js_1.resolveAddress)(pop.to);
        (0, index_js_1.validateAddress)(pop.to);
    }
    if (pop.from != null) {
        const from = pop.from;
        pop.from = await Promise.all([signer.getAddress(), (0, index_js_1.resolveAddress)(from)]).then(([address, from]) => {
            (0, index_js_2.assertArgument)(address.toLowerCase() === from.toLowerCase(), 'transaction from mismatch', 'tx.from', from);
            return address;
        });
    }
    else {
        pop.from = await signer.getAddress();
    }
    (0, index_js_1.validateAddress)(pop.from);
    return await (0, index_js_2.resolveProperties)(pop);
}
/**
 * An **AbstractSigner** includes most of teh functionality required to get a {@link Signer | **Signer**} working as
 * expected, but requires a few Signer-specific methods be overridden.
 *
 * @category Signers
 */
class AbstractSigner {
    /**
     * The provider this signer is connected to.
     */
    provider;
    /**
     * Creates a new Signer connected to `provider`.
     */
    constructor(provider) {
        (0, index_js_2.defineProperties)(this, { provider: provider || null });
    }
    /**
     * @ignore
     */
    _getAddress(address) {
        return (0, index_js_1.resolveAddress)(address);
    }
    async zoneFromAddress(_address) {
        const address = this._getAddress(_address);
        return (0, index_js_5.toZone)((await address).slice(0, 4));
    }
    async getNonce(blockTag) {
        return checkProvider(this, 'getTransactionCount').getTransactionCount(await this.getAddress(), blockTag);
    }
    async populateCall(tx) {
        const pop = await populate(this, tx);
        return pop;
    }
    async populateQuaiTransaction(tx) {
        const provider = checkProvider(this, 'populateTransaction');
        const zone = await this.zoneFromAddress(tx.from);
        const pop = (await populate(this, tx));
        if (pop.type == null) {
            pop.type = await (0, index_js_3.getTxType)(pop.from ?? null, pop.to ?? null);
        }
        if (pop.nonce == null) {
            pop.nonce = await this.getNonce('pending');
        }
        if (pop.gasLimit == null) {
            if (pop.type == 0)
                pop.gasLimit = await this.estimateGas(pop);
            else {
                //Special cases for type 2 tx to bypass address out of scope in the node
                const temp = pop.to;
                pop.to = '0x0000000000000000000000000000000000000000';
                pop.gasLimit = (0, index_js_2.getBigInt)(2 * Number(await this.estimateGas(pop)));
                pop.to = temp;
            }
        }
        // Populate the chain ID
        const network = await this.provider.getNetwork();
        if (pop.chainId != null) {
            const chainId = (0, index_js_2.getBigInt)(pop.chainId);
            (0, index_js_2.assertArgument)(chainId === network.chainId, 'transaction chainId mismatch', 'tx.chainId', zone);
        }
        else {
            pop.chainId = network.chainId;
        }
        if (pop.gasPrice == null || pop.minerTip == null) {
            const feeData = await provider.getFeeData(zone, true);
            if (pop.gasPrice == null) {
                pop.gasPrice = feeData.gasPrice;
            }
            if (pop.minerTip == null) {
                pop.minerTip = feeData.minerTip || 10n;
            }
        }
        if (pop.data) {
            if (tx.accessList) {
                pop.accessList = tx.accessList;
            }
            else {
                pop.accessList = await this.createAccessList(tx);
            }
        }
        //@TOOD: Don't await all over the place; save them up for
        // the end for better batching
        return await (0, index_js_2.resolveProperties)(pop);
    }
    async estimateGas(tx) {
        return checkProvider(this, 'estimateGas').estimateGas(await this.populateCall(tx));
    }
    async createAccessList(tx) {
        return checkProvider(this, 'createAccessList').createAccessList((await this.populateCall(tx)));
    }
    async call(tx) {
        return checkProvider(this, 'call').call(await this.populateCall(tx));
    }
    async sendTransaction(tx) {
        const provider = checkProvider(this, 'sendTransaction');
        const zone = await this.zoneFromAddress((0, provider_js_1.addressFromTransactionRequest)(tx));
        const pop = await this.populateQuaiTransaction(tx);
        const txObj = index_js_4.QuaiTransaction.from(pop);
        const sender = await this.getAddress();
        const signedTx = await this.signTransaction(txObj);
        return await provider.broadcastTransaction(zone, signedTx, sender);
    }
}
exports.AbstractSigner = AbstractSigner;
/**
 * A **VoidSigner** is a class deisgned to allow an address to be used in any API which accepts a Signer, but for which
 * there are no credentials available to perform any actual signing.
 *
 * This for example allow impersonating an account for the purpose of static calls or estimating gas, but does not allow
 * sending transactions.
 *
 * @category Signers
 */
class VoidSigner extends AbstractSigner {
    /**
     * The signer address.
     */
    address;
    /**
     * Creates a new **VoidSigner** with `address` attached to `provider`.
     */
    constructor(address, provider) {
        super(provider);
        (0, index_js_2.defineProperties)(this, { address });
    }
    async getAddress() {
        return this.address;
    }
    connect(provider) {
        return new VoidSigner(this.address, provider);
    }
    #throwUnsupported(suffix, operation) {
        (0, index_js_2.assert)(false, `VoidSigner cannot sign ${suffix}`, 'UNSUPPORTED_OPERATION', { operation });
    }
    // TODO: `domain`, `types` and `value` are not used, remove?
    // TODO: this function only throws, remove?
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async signTransaction(tx) {
        this.#throwUnsupported('transactions', 'signTransaction');
    }
    // TODO: `domain`, `types` and `value` are not used, remove?
    // TODO: this function only throws, remove?
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async signMessage(message) {
        this.#throwUnsupported('messages', 'signMessage');
    }
    // TODO: `domain`, `types` and `value` are not used, remove?
    // TODO: this function only throws, remove?
    async signTypedData(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    domain, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    types, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    value) {
        this.#throwUnsupported('typed-data', 'signTypedData');
    }
}
exports.VoidSigner = VoidSigner;
//# sourceMappingURL=abstract-signer.js.map