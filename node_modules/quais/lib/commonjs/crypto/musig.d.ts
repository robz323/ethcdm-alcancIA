declare function read32b(bytes: Uint8Array): bigint;
declare function write32b(num: bigint, dest?: Uint8Array): Uint8Array;
declare function readScalar(bytes: Uint8Array): bigint;
declare function readSecret(bytes: Uint8Array): bigint;
declare function secp256k1Right(x: bigint): bigint;
declare function jacobiSymbol(a: bigint): -1 | 0 | 1;
declare function isPoint(p: Uint8Array): boolean;
declare function isXOnlyPoint(p: Uint8Array): boolean;
declare function scalarAdd(a: Uint8Array, b: Uint8Array): Uint8Array;
declare function scalarMultiply(a: Uint8Array, b: Uint8Array): Uint8Array;
declare function scalarNegate(a: Uint8Array): Uint8Array;
declare function scalarMod(a: Uint8Array): Uint8Array;
declare function isScalar(t: Uint8Array): boolean;
declare function isSecret(s: Uint8Array): boolean;
declare function pointNegate(p: Uint8Array): Uint8Array;
declare function pointX(p: Uint8Array): Uint8Array;
declare function hasEvenY(p: Uint8Array): boolean;
declare function pointMultiplyUnsafe(p: Uint8Array, a: Uint8Array, compress: boolean): Uint8Array | null;
declare function pointMultiplyAndAddUnsafe(p1: Uint8Array, a: Uint8Array, p2: Uint8Array, compress: boolean): Uint8Array | null;
declare function pointAdd(a: Uint8Array, b: Uint8Array, compress: boolean): Uint8Array | null;
declare function pointAddTweak(p: Uint8Array, tweak: Uint8Array, compress: boolean): Uint8Array | null;
declare function pointCompress(p: Uint8Array, compress?: boolean): Uint8Array;
declare function liftX(p: Uint8Array): Uint8Array | null;
declare function getPublicKey(s: Uint8Array, compress: boolean): Uint8Array | null;
declare function taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array;
declare function sha256Hash(...messages: Uint8Array[]): Uint8Array;
export declare const musigCrypto: {
    read32b: typeof read32b;
    write32b: typeof write32b;
    readScalar: typeof readScalar;
    readSecret: typeof readSecret;
    secp256k1Right: typeof secp256k1Right;
    jacobiSymbol: typeof jacobiSymbol;
    isPoint: typeof isPoint;
    isXOnlyPoint: typeof isXOnlyPoint;
    scalarAdd: typeof scalarAdd;
    scalarMultiply: typeof scalarMultiply;
    scalarNegate: typeof scalarNegate;
    scalarMod: typeof scalarMod;
    isScalar: typeof isScalar;
    isSecret: typeof isSecret;
    pointNegate: typeof pointNegate;
    pointX: typeof pointX;
    hasEvenY: typeof hasEvenY;
    pointMultiplyUnsafe: typeof pointMultiplyUnsafe;
    pointMultiplyAndAddUnsafe: typeof pointMultiplyAndAddUnsafe;
    pointAdd: typeof pointAdd;
    pointAddTweak: typeof pointAddTweak;
    pointCompress: typeof pointCompress;
    liftX: typeof liftX;
    getPublicKey: typeof getPublicKey;
    taggedHash: typeof taggedHash;
    sha256: typeof sha256Hash;
};
export {};
//# sourceMappingURL=musig.d.ts.map