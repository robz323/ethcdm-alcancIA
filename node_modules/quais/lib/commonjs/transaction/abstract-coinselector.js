"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractCoinSelector = void 0;
/**
 * An **AbstractCoinSelector** provides a base class for other sub-classes to implement the functionality for selecting
 * UTXOs for a spend and to properly handle spend and change outputs.
 *
 * This class is abstract and should not be used directly. Sub-classes should implement the
 * {@link AbstractCoinSelector#performSelection | **performSelection**} method to provide the actual coin selection
 * logic.
 *
 * @category Transaction
 * @abstract
 */
class AbstractCoinSelector {
    availableUTXOs;
    totalInputValue = BigInt(0);
    spendOutputs = [];
    changeOutputs = [];
    selectedUTXOs = [];
    target = null;
    /**
     * Constructs a new AbstractCoinSelector instance with an empty UTXO array.
     *
     * @param {UTXO[]} [availableUXTOs=[]] - The initial available UTXOs. Default is `[]`
     */
    constructor(availableUTXOs = []) {
        this.availableUTXOs = availableUTXOs.map((utxo) => {
            this._validateUTXO(utxo);
            return utxo;
        });
        this.spendOutputs = [];
        this.changeOutputs = [];
    }
    /**
     * Validates the provided UTXO instance. In order to be valid for coin selection, the UTXO must have a valid address
     * and denomination.
     *
     * @param {UTXO} utxo - The UTXO to validate.
     * @throws {Error} If the UTXO is invalid.
     * @protected
     */
    _validateUTXO(utxo) {
        if (utxo.address == null) {
            throw new Error('UTXO address is required');
        }
        if (utxo.denomination == null) {
            throw new Error('UTXO denomination is required');
        }
        if (utxo.txhash == null) {
            throw new Error('UTXO txhash is required');
        }
        if (utxo.index == null) {
            throw new Error('UTXO index is required');
        }
    }
}
exports.AbstractCoinSelector = AbstractCoinSelector;
//# sourceMappingURL=abstract-coinselector.js.map