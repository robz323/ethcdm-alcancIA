import { getNumber } from '../utils/index.js';
/**
 * Class for subscribing to block connections.
 *
 * @category Providers
 * @class
 * @implements {Subscriber}
 */
export class BlockConnectionSubscriber {
    #provider;
    #blockNumber;
    #running;
    #filterId;
    #zone;
    /**
     * @ignore
     * @class
     * @param {ConnectionRpcProvider} provider - The provider for the connection.
     */
    constructor(provider, zone) {
        this.#provider = provider;
        this.#blockNumber = -2;
        this.#running = false;
        this.#filterId = null;
        this.#zone = zone;
    }
    /**
     * Start the block connection subscription.
     *
     * @returns {void}
     */
    start() {
        if (this.#running) {
            return;
        }
        this.#running = true;
        this.#filterId = this.#provider._subscribe(['newHeads'], (result) => {
            const blockNumber = getNumber(result.number);
            const initial = this.#blockNumber === -2 ? blockNumber : this.#blockNumber + 1;
            for (let b = initial; b <= blockNumber; b++) {
                this.#provider.emit('block', this.#zone, b);
            }
            this.#blockNumber = blockNumber;
        });
    }
    /**
     * Stop the block connection subscription.
     *
     * @returns {void}
     */
    stop() {
        if (!this.#running) {
            return;
        }
        this.#running = false;
        if (this.#filterId != null) {
            this.#provider._unsubscribe(this.#filterId);
            this.#filterId = null;
        }
    }
    /**
     * Pause the block connection subscription.
     *
     * @param {boolean} [dropWhilePaused=false] - Whether to drop blocks while paused. Default is `false`
     * @returns {void}
     */
    pause(dropWhilePaused) {
        if (dropWhilePaused) {
            this.#blockNumber = -2;
        }
        this.stop();
    }
    /**
     * Resume the block connection subscription.
     *
     * @returns {void}
     */
    resume() {
        this.start();
    }
}
//# sourceMappingURL=subscriber-connection.js.map