import { AbstractCoinSelector, SelectedCoinsResult } from './abstract-coinselector.js';
/**
 * The FewestCoinSelector class provides a coin selection algorithm that selects the fewest UTXOs required to meet the
 * target amount. This algorithm is useful for minimizing the size of the transaction and the fees associated with it.
 *
 * This class is a sub-class of {@link AbstractCoinSelector | **AbstractCoinSelector** } and implements the
 * {@link AbstractCoinSelector.performSelection | **performSelection** } method to provide the actual coin selection
 * logic.
 *
 * @category Transaction
 */
export declare class FewestCoinSelector extends AbstractCoinSelector {
    /**
     * Performs coin selection to meet the target amount plus fee, using the smallest possible denominations and
     * minimizing the number of inputs and outputs.
     *
     * @param {bigint} target - The target amount to spend.
     * @param {bigint} fee - The fee amount to include in the selection.
     * @returns {SelectedCoinsResult} The selected UTXOs and outputs.
     */
    performSelection(target: bigint, fee?: bigint): SelectedCoinsResult;
    /**
     * Finds the minimal set of UTXOs that can cover the total required amount.
     *
     * @param {UTXO[]} sortedUTXOs - Available UTXOs sorted by denomination (ascending).
     * @param {bigint} totalRequired - The total amount required (target + fee).
     * @returns {UTXO[]} The minimal set of UTXOs.
     */
    private findMinimalUTXOSet;
    /**
     * Creates spend outputs based on the target amount and input denominations.
     *
     * @param {bigint} amount - The target amount to spend.
     * @param {UTXO[]} inputs - The selected inputs.
     * @returns {UTXO[]} The spend outputs.
     */
    private createSpendOutputs;
    /**
     * Creates change outputs based on the change amount and input denominations.
     *
     * @param {bigint} change - The change amount to return.
     * @param {UTXO[]} inputs - The selected inputs.
     * @returns {UTXO[]} The change outputs.
     */
    private createChangeOutputs;
    /**
     * Calculates the total value of outputs (spend + change).
     *
     * @returns {bigint} The total output value.
     */
    private calculateTotalOutputValue;
    /**
     * Gets the maximum denomination value from the selected UTXOs.
     *
     * @returns {bigint} The maximum input denomination value.
     */
    private getMaxInputDenomination;
    /**
     * Gets the maximum denomination value from the spend and change outputs.
     *
     * @returns {bigint} The maximum output denomination value.
     */
    private getMaxOutputDenomination;
    /**
     * Gets the maximum denomination value from a list of UTXOs.
     *
     * @param {UTXO[]} utxos - The list of UTXOs.
     * @returns {bigint} The maximum denomination value.
     */
    private getMaxDenomination;
    /**
     * Increases the total fee by first reducing change outputs, then selecting additional inputs if necessary.
     *
     * @param {bigint} additionalFeeNeeded - The additional fee needed.
     * @returns {boolean} Returns true if successful, false if insufficient funds.
     */
    increaseFee(additionalFeeNeeded: bigint): SelectedCoinsResult;
    /**
     * Decreases the fee by removing inputs if possible and adjusting change outputs.
     *
     * @param {bigint} feeReduction - The amount by which the fee has decreased.
     * @returns {void}
     */
    decreaseFee(feeReduction: bigint): SelectedCoinsResult;
    /**
     * Helper method to adjust change outputs.
     *
     * @param {bigint} changeAmount - The amount to adjust change outputs by.
     */
    private adjustChangeOutputs;
    /**
     * Sorts UTXOs by their denomination.
     *
     * @param {UTXO[]} utxos - The UTXOs to sort.
     * @param {'asc' | 'desc'} direction - The direction to sort ('asc' for ascending, 'desc' for descending).
     * @returns {UTXO[]} The sorted UTXOs.
     */
    private sortUTXOsByDenomination;
    /**
     * Validates the available UTXOs.
     *
     * @throws Will throw an error if there are no available UTXOs.
     */
    private validateUTXOs;
}
//# sourceMappingURL=coinselector-fewest.d.ts.map