import * as _coral_xyz_anchor from '@coral-xyz/anchor';
import { BN, Program, IdlAccounts } from '@coral-xyz/anchor';
import { PublicKey, TransactionInstruction, Connection, Transaction, Cluster } from '@solana/web3.js';

type AlphaVault$1 = {
    "version": "0.3.2";
    "name": "alpha_vault";
    "instructions": [
        {
            "name": "transferVaultAuthority";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "vaultAuthority";
                    "isMut": false;
                    "isSigner": true;
                }
            ];
            "args": [
                {
                    "name": "newAuthority";
                    "type": "publicKey";
                }
            ];
        },
        {
            "name": "initializeProrataVault";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "base";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "InitializeProrataVaultParams";
                    };
                }
            ];
        },
        {
            "name": "initializeVaultWithProrataConfig";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "quoteMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "config";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "InitializeVaultWithConfigParams";
                    };
                }
            ];
        },
        {
            "name": "updateProrataVaultParameters";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "UpdateProrataVaultParams";
                    };
                }
            ];
        },
        {
            "name": "createProrataConfig";
            "accounts": [
                {
                    "name": "config";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "configParameters";
                    "type": {
                        "defined": "ProrataConfigParameters";
                    };
                }
            ];
        },
        {
            "name": "closeProrataConfig";
            "accounts": [
                {
                    "name": "config";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "rentReceiver";
                    "isMut": true;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "initializeFcfsVault";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "base";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "InitializeFcfsVaultParams";
                    };
                }
            ];
        },
        {
            "name": "initializeVaultWithFcfsConfig";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "quoteMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "config";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "InitializeVaultWithConfigParams";
                    };
                }
            ];
        },
        {
            "name": "updateFcfsVaultParameters";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "UpdateFcfsVaultParams";
                    };
                }
            ];
        },
        {
            "name": "createFcfsConfig";
            "accounts": [
                {
                    "name": "config";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "configParameters";
                    "type": {
                        "defined": "FcfsConfigParameters";
                    };
                }
            ];
        },
        {
            "name": "closeFcfsConfig";
            "accounts": [
                {
                    "name": "config";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "rentReceiver";
                    "isMut": true;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "createMerkleRootConfig";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "merkleRootConfig";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "params";
                    "type": {
                        "defined": "CreateMerkleRootConfigParams";
                    };
                }
            ];
        },
        {
            "name": "createNewEscrow";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "payer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "escrowFeeReceiver";
                    "isMut": true;
                    "isSigner": false;
                    "isOptional": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "createPermissionedEscrow";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "merkleRootConfig";
                    "isMut": false;
                    "isSigner": false;
                    "docs": [
                        "merkle_root_config"
                    ];
                },
                {
                    "name": "payer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "escrowFeeReceiver";
                    "isMut": true;
                    "isSigner": false;
                    "isOptional": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "maxCap";
                    "type": "u64";
                },
                {
                    "name": "proof";
                    "type": {
                        "vec": {
                            "array": [
                                "u8",
                                32
                            ];
                        };
                    };
                }
            ];
        },
        {
            "name": "createPermissionedEscrowWithAuthority";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "payer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "maxCap";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "closeEscrow";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "rentReceiver";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "deposit";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "sourceToken";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "maxAmount";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "withdraw";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "destinationToken";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "amount";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "withdrawRemainingQuote";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "destinationToken";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "claimToken";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "escrow";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOutVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "destinationToken";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "fillDlmm";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOutVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "ammProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "binArrayBitmapExtension";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "reserveX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenXMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenYMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "oracle";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenXProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenYProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "dlmmEventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "crankFeeWhitelist";
                    "isMut": false;
                    "isSigner": false;
                    "isOptional": true;
                },
                {
                    "name": "crankFeeReceiver";
                    "isMut": true;
                    "isSigner": false;
                    "isOptional": true;
                },
                {
                    "name": "cranker";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "maxAmount";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "fillDynamicAmm";
            "accounts": [
                {
                    "name": "vault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOutVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "ammProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "aVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "bVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "aTokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "bTokenVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "aVaultLpMint";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "bVaultLpMint";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "aVaultLp";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "bVaultLp";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "adminTokenFee";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "vaultProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "crankFeeWhitelist";
                    "isMut": false;
                    "isSigner": false;
                    "isOptional": true;
                },
                {
                    "name": "crankFeeReceiver";
                    "isMut": true;
                    "isSigner": false;
                    "isOptional": true;
                },
                {
                    "name": "cranker";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "maxAmount";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "createCrankFeeWhitelist";
            "accounts": [
                {
                    "name": "crankFeeWhitelist";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "cranker";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "closeCrankFeeWhitelist";
            "accounts": [
                {
                    "name": "crankFeeWhitelist";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "rentReceiver";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "eventAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "program";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        }
    ];
    "accounts": [
        {
            "name": "crankFeeWhitelist";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "owner";
                        "type": "publicKey";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u128",
                                5
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "escrow";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "vault";
                        "docs": [
                            "vault address"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "owner";
                        "docs": [
                            "owner"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "totalDeposit";
                        "docs": [
                            "total deposited quote token"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "claimedToken";
                        "docs": [
                            "Total token that escrow has claimed"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "lastClaimedPoint";
                        "docs": [
                            "Last claimed timestamp"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "refunded";
                        "docs": [
                            "Whether owner has claimed for remaining quote token"
                        ];
                        "type": "u8";
                    },
                    {
                        "name": "padding1";
                        "docs": [
                            "padding 1"
                        ];
                        "type": {
                            "array": [
                                "u8",
                                7
                            ];
                        };
                    },
                    {
                        "name": "maxCap";
                        "docs": [
                            "Only has meaning in permissioned vault"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "padding2";
                        "docs": [
                            "padding 2"
                        ];
                        "type": {
                            "array": [
                                "u8",
                                8
                            ];
                        };
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u128",
                                1
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "merkleRootConfig";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "root";
                        "docs": [
                            "The 256-bit merkle root."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                32
                            ];
                        };
                    },
                    {
                        "name": "vault";
                        "docs": [
                            "vault pubkey that config is belong"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "version";
                        "docs": [
                            "version"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "padding";
                        "docs": [
                            "padding for further use"
                        ];
                        "type": {
                            "array": [
                                "u128",
                                4
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "prorataVaultConfig";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxBuyingCap";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "type": "u64";
                    },
                    {
                        "name": "activationType";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                191
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "fcfsVaultConfig";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "depositingDurationUntilLastJoinPoint";
                        "type": "u64";
                    },
                    {
                        "name": "individualDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "type": "u64";
                    },
                    {
                        "name": "activationType";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                175
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "vault";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "pool";
                        "docs": [
                            "pool"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenVault";
                        "docs": [
                            "reserve quote token"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenOutVault";
                        "docs": [
                            "reserve base token"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "quoteMint";
                        "docs": [
                            "quote token"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "baseMint";
                        "docs": [
                            "base token"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "base";
                        "docs": [
                            "base key"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "owner";
                        "docs": [
                            "owner key, deprecated field, can re-use in the future"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "maxBuyingCap";
                        "docs": [
                            "max buying cap"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "totalDeposit";
                        "docs": [
                            "total deposited quote token"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "totalEscrow";
                        "docs": [
                            "total user deposit"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "swappedAmount";
                        "docs": [
                            "swapped_amount"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "boughtToken";
                        "docs": [
                            "total bought token"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "totalRefund";
                        "docs": [
                            "Total quote refund"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "totalClaimedToken";
                        "docs": [
                            "Total claimed_token"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "startVestingPoint";
                        "docs": [
                            "Start vesting ts"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "endVestingPoint";
                        "docs": [
                            "End vesting ts"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "bump";
                        "docs": [
                            "bump"
                        ];
                        "type": "u8";
                    },
                    {
                        "name": "poolType";
                        "docs": [
                            "pool type"
                        ];
                        "type": "u8";
                    },
                    {
                        "name": "vaultMode";
                        "docs": [
                            "vault mode"
                        ];
                        "type": "u8";
                    },
                    {
                        "name": "padding0";
                        "docs": [
                            "padding 0"
                        ];
                        "type": {
                            "array": [
                                "u8",
                                5
                            ];
                        };
                    },
                    {
                        "name": "maxDepositingCap";
                        "docs": [
                            "max depositing cap"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "individualDepositingCap";
                        "docs": [
                            "individual depositing cap"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "depositingPoint";
                        "docs": [
                            "depositing point"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "docs": [
                            "flat fee when user open an escrow"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "totalEscrowFee";
                        "docs": [
                            "total escrow fee just for statistic"
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "whitelistMode";
                        "docs": [
                            "deposit whitelist mode"
                        ];
                        "type": "u8";
                    },
                    {
                        "name": "activationType";
                        "docs": [
                            "activation type"
                        ];
                        "type": "u8";
                    },
                    {
                        "name": "padding1";
                        "docs": [
                            "padding 1"
                        ];
                        "type": {
                            "array": [
                                "u8",
                                6
                            ];
                        };
                    },
                    {
                        "name": "vaultAuthority";
                        "docs": [
                            "vault authority normally is vault creator, will be able to create merkle root config"
                        ];
                        "type": "publicKey";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u128",
                                5
                            ];
                        };
                    }
                ];
            };
        }
    ];
    "types": [
        {
            "name": "CreateMerkleRootConfigParams";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "root";
                        "docs": [
                            "The 256-bit merkle root."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                32
                            ];
                        };
                    },
                    {
                        "name": "version";
                        "docs": [
                            "version"
                        ];
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "FcfsConfigParameters";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "depositingDurationUntilLastJoinPoint";
                        "type": "u64";
                    },
                    {
                        "name": "individualDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "type": "u64";
                    },
                    {
                        "name": "activationType";
                        "type": "u8";
                    },
                    {
                        "name": "index";
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "InitializeFcfsVaultParams";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "poolType";
                        "type": "u8";
                    },
                    {
                        "name": "quoteMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "baseMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "depositingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "maxDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "individualDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "type": "u64";
                    },
                    {
                        "name": "whitelistMode";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "UpdateFcfsVaultParams";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "depositingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "individualDepositingCap";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingPoint";
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "ProrataConfigParameters";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxBuyingCap";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingDuration";
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "type": "u64";
                    },
                    {
                        "name": "activationType";
                        "type": "u8";
                    },
                    {
                        "name": "index";
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "InitializeProrataVaultParams";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "poolType";
                        "type": "u8";
                    },
                    {
                        "name": "quoteMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "baseMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "depositingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "maxBuyingCap";
                        "type": "u64";
                    },
                    {
                        "name": "escrowFee";
                        "type": "u64";
                    },
                    {
                        "name": "whitelistMode";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "InitializeVaultWithConfigParams";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "poolType";
                        "type": "u8";
                    },
                    {
                        "name": "quoteMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "baseMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "whitelistMode";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "UpdateProrataVaultParams";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxBuyingCap";
                        "type": "u64";
                    },
                    {
                        "name": "startVestingPoint";
                        "type": "u64";
                    },
                    {
                        "name": "endVestingPoint";
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "ActivationType";
            "docs": [
                "Type of the activation"
            ];
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Slot";
                    },
                    {
                        "name": "Timestamp";
                    }
                ];
            };
        },
        {
            "name": "PoolType";
            "docs": [
                "Type of the Pair. 0 = Permissionless, 1 = Permission. Putting 0 as permissionless for backward compatibility."
            ];
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Dlmm";
                    },
                    {
                        "name": "DynamicPool";
                    }
                ];
            };
        },
        {
            "name": "VaultMode";
            "docs": [
                "Vault Mode. 0 = Prorata, 1 = FirstComeFirstServe. Putting 0 as Prorata for backward compatibility."
            ];
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Prorata";
                    },
                    {
                        "name": "Fcfs";
                    }
                ];
            };
        },
        {
            "name": "WhitelistMode";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Permissionless";
                    },
                    {
                        "name": "PermissionWithMerkleProof";
                    },
                    {
                        "name": "PermissionWithAuthority";
                    }
                ];
            };
        }
    ];
    "events": [
        {
            "name": "ProrataVaultCreated";
            "fields": [
                {
                    "name": "baseMint";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "quoteMint";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "startVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "endVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "maxBuyingCap";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "pool";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "poolType";
                    "type": "u8";
                    "index": false;
                },
                {
                    "name": "escrowFee";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "activationType";
                    "type": "u8";
                    "index": false;
                }
            ];
        },
        {
            "name": "FcfsVaultCreated";
            "fields": [
                {
                    "name": "baseMint";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "quoteMint";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "startVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "endVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "maxDepositingCap";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "pool";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "poolType";
                    "type": "u8";
                    "index": false;
                },
                {
                    "name": "depositingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "individualDepositingCap";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "escrowFee";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "activationType";
                    "type": "u8";
                    "index": false;
                }
            ];
        },
        {
            "name": "EscrowCreated";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "escrow";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "owner";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "vaultTotalEscrow";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "escrowFee";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "MerkleRootConfigCreated";
            "fields": [
                {
                    "name": "admin";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "config";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "version";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "root";
                    "type": {
                        "array": [
                            "u8",
                            32
                        ];
                    };
                    "index": false;
                }
            ];
        },
        {
            "name": "ProrataVaultParametersUpdated";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "maxBuyingCap";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "startVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "endVestingPoint";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "FcfsVaultParametersUpdated";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "maxDepositingCap";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "startVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "endVestingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "depositingPoint";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "individualDepositingCap";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "EscrowRemainingWithdraw";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "escrow";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "owner";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "amount";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "vaultRemainingDeposit";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "EscrowWithdraw";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "escrow";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "owner";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "amount";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "vaultTotalDeposit";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "SwapFill";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "pair";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "fillAmount";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "purchasedAmount";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "unfilledAmount";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "EscrowDeposit";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "escrow";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "owner";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "amount";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "vaultTotalDeposit";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "EscrowClosed";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "escrow";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "owner";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "vaultTotalEscrow";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "EscrowClaimToken";
            "fields": [
                {
                    "name": "vault";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "escrow";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "owner";
                    "type": "publicKey";
                    "index": false;
                },
                {
                    "name": "amount";
                    "type": "u64";
                    "index": false;
                },
                {
                    "name": "vaultTotalClaimedToken";
                    "type": "u64";
                    "index": false;
                }
            ];
        },
        {
            "name": "CrankFeeWhitelistCreated";
            "fields": [
                {
                    "name": "cranker";
                    "type": "publicKey";
                    "index": false;
                }
            ];
        },
        {
            "name": "CrankFeeWhitelistClosed";
            "fields": [
                {
                    "name": "cranker";
                    "type": "publicKey";
                    "index": false;
                }
            ];
        }
    ];
    "errors": [
        {
            "code": 6000;
            "name": "TimePointNotInFuture";
            "msg": "Time point is not in future";
        },
        {
            "code": 6001;
            "name": "IncorrectTokenMint";
            "msg": "Token mint is incorrect";
        },
        {
            "code": 6002;
            "name": "IncorrectPairType";
            "msg": "Pair is not permissioned";
        },
        {
            "code": 6003;
            "name": "PoolHasStarted";
            "msg": "Pool has started";
        },
        {
            "code": 6004;
            "name": "NotPermitThisActionInThisTimePoint";
            "msg": "This action is not permitted in this time point";
        },
        {
            "code": 6005;
            "name": "TheSaleIsOngoing";
            "msg": "The sale is on going, cannot withdraw";
        },
        {
            "code": 6006;
            "name": "EscrowIsNotClosable";
            "msg": "Escrow is not closable";
        },
        {
            "code": 6007;
            "name": "TimePointOrdersAreIncorrect";
            "msg": "Time point orders are incorrect";
        },
        {
            "code": 6008;
            "name": "EscrowHasRefuned";
            "msg": "Escrow has refunded";
        },
        {
            "code": 6009;
            "name": "MathOverflow";
            "msg": "Math operation overflow";
        },
        {
            "code": 6010;
            "name": "MaxBuyingCapIsZero";
            "msg": "Max buying cap is zero";
        },
        {
            "code": 6011;
            "name": "MaxAmountIsTooSmall";
            "msg": "Max amount is too small";
        },
        {
            "code": 6012;
            "name": "PoolTypeIsNotSupported";
            "msg": "Pool type is not supported";
        },
        {
            "code": 6013;
            "name": "InvalidAdmin";
            "msg": "Invalid admin";
        },
        {
            "code": 6014;
            "name": "VaultModeIsIncorrect";
            "msg": "Vault mode is incorrect";
        },
        {
            "code": 6015;
            "name": "MaxDepositingCapIsInValid";
            "msg": "Max depositing cap is invalid";
        },
        {
            "code": 6016;
            "name": "VestingDurationIsInValid";
            "msg": "Vesting duration is invalid";
        },
        {
            "code": 6017;
            "name": "DepositAmountIsZero";
            "msg": "Deposit amount is zero";
        },
        {
            "code": 6018;
            "name": "PoolOwnerIsMismatched";
            "msg": "Pool owner is mismatched";
        },
        {
            "code": 6019;
            "name": "RefundAmountIsZero";
            "msg": "Refund amount is zero";
        },
        {
            "code": 6020;
            "name": "DepositingDurationIsInvalid";
            "msg": "Depositing duration is invalid";
        },
        {
            "code": 6021;
            "name": "DepositingTimePointIsInvalid";
            "msg": "Depositing time point is invalid";
        },
        {
            "code": 6022;
            "name": "IndividualDepositingCapIsZero";
            "msg": "Individual depositing cap is zero";
        },
        {
            "code": 6023;
            "name": "InvalidFeeReceiverAccount";
            "msg": "Invalid fee receiver account";
        },
        {
            "code": 6024;
            "name": "NotPermissionedVault";
            "msg": "Not permissioned vault";
        },
        {
            "code": 6025;
            "name": "NotPermitToDoThisAction";
            "msg": "Not permit to do this action";
        },
        {
            "code": 6026;
            "name": "InvalidProof";
            "msg": "Invalid Merkle proof";
        },
        {
            "code": 6027;
            "name": "InvalidActivationType";
            "msg": "Invalid activation type";
        },
        {
            "code": 6028;
            "name": "ActivationTypeIsMismatched";
            "msg": "Activation type is mismatched";
        },
        {
            "code": 6029;
            "name": "InvalidPool";
            "msg": "Pool is not connected to the alpha vault";
        },
        {
            "code": 6030;
            "name": "InvalidCreator";
            "msg": "Invalid creator";
        },
        {
            "code": 6031;
            "name": "PermissionedVaultCannotChargeEscrowFee";
            "msg": "Permissioned vault cannot charge escrow fee";
        },
        {
            "code": 6032;
            "name": "EscrowFeeTooHigh";
            "msg": "Escrow fee too high";
        },
        {
            "code": 6033;
            "name": "LockDurationInvalid";
            "msg": "Lock duration is invalid";
        },
        {
            "code": 6034;
            "name": "MaxBuyingCapIsTooSmall";
            "msg": "Max buying cap is too small";
        },
        {
            "code": 6035;
            "name": "MaxDepositingCapIsTooSmall";
            "msg": "Max depositing cap is too small";
        },
        {
            "code": 6036;
            "name": "InvalidWhitelistWalletMode";
            "msg": "Invalid whitelist wallet mode";
        },
        {
            "code": 6037;
            "name": "InvalidCrankFeeWhitelist";
            "msg": "Invalid crank fee whitelist";
        },
        {
            "code": 6038;
            "name": "MissingFeeReceiver";
            "msg": "Missing fee receiver";
        }
    ];
};
declare const IDL: AlphaVault$1;

declare const PROGRAM_ID: Readonly<{
    devnet: "vaU6kP7iNEGkbmPkLmZfGwiGxd4Mob24QQCie5R9kd2";
    "mainnet-beta": "vaU6kP7iNEGkbmPkLmZfGwiGxd4Mob24QQCie5R9kd2";
    localhost: "SNPmGgnywBvvrAKMLundzG6StojyHTHDLu7T4sdhP4k";
}>;
declare const SEED: Readonly<{
    escrow: "escrow";
    vault: "vault";
    merkleRoot: "merkle_root";
    crankFeeWhitelist: "crank_fee_whitelist";
}>;
declare const ALPHA_VAULT_TREASURY_ID: PublicKey;
declare const VAULT_PROGRAM_ID: PublicKey;
declare const DYNAMIC_AMM_PROGRAM_ID: PublicKey;
declare const DLMM_PROGRAM_ID: PublicKey;
declare const MERKLE_PROOF_API: Readonly<{
    devnet: "https://worker-dev.meteora.ag/merkle-root-config-proof";
    "mainnet-beta": "https://worker.meteora.ag/merkle-root-config-proof";
}>;
type WhitelistMode = 0 | 1 | 2;
declare const Permissionless = 0;
declare const PermissionWithMerkleProof = 1;
declare const PermissionWithAuthority = 2;

interface GetOrCreateATAResponse {
    ataPubKey: PublicKey;
    ix?: TransactionInstruction;
}
interface DepositWithProofParams {
    merkleRootConfig: PublicKey;
    maxCap: BN;
    proof: number[][];
}
interface DepositInfo {
    totalDeposit: BN;
    totalFilled: BN;
    totalReturned: BN;
}
interface WalletDepositCap {
    address: PublicKey;
    maxAmount: BN;
}
interface VaultParam {
    quoteMint: PublicKey;
    baseMint: PublicKey;
    poolAddress: PublicKey;
    poolType: PoolType;
    vaultMode: VaultMode;
    config: PublicKey;
}
interface CustomizableFcfsVaultParams {
    quoteMint: PublicKey;
    baseMint: PublicKey;
    poolAddress: PublicKey;
    poolType: PoolType;
    depositingPoint: BN;
    startVestingPoint: BN;
    endVestingPoint: BN;
    maxDepositingCap: BN;
    individualDepositingCap: BN;
    escrowFee: BN;
    whitelistMode: WhitelistMode;
}
interface CustomizableProrataVaultParams {
    quoteMint: PublicKey;
    baseMint: PublicKey;
    poolAddress: PublicKey;
    poolType: PoolType;
    depositingPoint: BN;
    startVestingPoint: BN;
    endVestingPoint: BN;
    maxBuyingCap: BN;
    escrowFee: BN;
    whitelistMode: WhitelistMode;
}
type AlphaVaultProgram = Program<AlphaVault$1>;
type Vault = IdlAccounts<AlphaVault$1>["vault"];
type Escrow = IdlAccounts<AlphaVault$1>["escrow"];
type FCFSConfig = IdlAccounts<AlphaVault$1>["fcfsVaultConfig"];
type ProrataConfig = IdlAccounts<AlphaVault$1>["prorataVaultConfig"];
declare enum VaultMode {
    PRORATA = 0,
    FCFS = 1
}
declare enum PoolType {
    DLMM = 0,
    DYNAMIC = 1
}
declare enum ActivationType {
    SLOT = 0,
    TIMESTAMP = 1
}

type Opt = {
    cluster: Cluster | "localhost";
};
declare class AlphaVault {
    program: AlphaVaultProgram;
    pubkey: PublicKey;
    vault: Vault;
    mode: VaultMode;
    constructor(program: AlphaVaultProgram, pubkey: PublicKey, vault: Vault, mode: VaultMode);
    /**
     * Creates an AlphaVault instance from a given vault address.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {PublicKey} vaultAddress - The address of the vault to create an instance for.
     * @param {Opt} [opt] - Optional configuration options.
     * @return {Promise<AlphaVault>} A promise resolving to the created AlphaVault instance.
     */
    static create(connection: Connection, vaultAddress: PublicKey, opt?: Opt): Promise<AlphaVault>;
    /**
     * Creates a customizable FCFS vault
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {CustomizableFcfsVaultParams} vaultParam - The parameters for creating the vault.
     * @param {PublicKey} owner - The owner of the vault.
     * @param {Opt} [opt] - Optional configuration options.
     * @return {Promise<Transaction>} The transaction for creating the vault.
     */
    static createCustomizableFcfsVault(connection: Connection, vaultParam: CustomizableFcfsVaultParams, owner: PublicKey, opt?: Opt): Promise<Transaction>;
    /**
     * Creates a customizable Prorata vault.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {CustomizableProrataVaultParams} vaultParam - The parameters for creating the vault.
     * @param {PublicKey} owner - The owner of the vault.
     * @param {Opt} [opt] - Optional configuration options.
     * @return {Promise<Transaction>} The transaction for creating the vault.
     */
    static createCustomizableProrataVault(connection: Connection, vaultParam: CustomizableProrataVaultParams, owner: PublicKey, opt?: Opt): Promise<Transaction>;
    /**
     * Creates a permissionless vault for dynamic amm / dlmm pool.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {VaultParam} params - The vault parameters.
     * @param {PublicKey} owner - The public key of the vault owner.
     * @param {Opt} [opt] - Optional parameters.
     * @return {Promise<Transaction>} The transaction creating the vault.
     */
    static createPermissionlessVault(connection: Connection, vaultParam: VaultParam, owner: PublicKey, opt?: Opt): Promise<Transaction>;
    /**
     * Creates a permissioned vault for dynamic amm / dlmm pool. Vault created with this function will require merkle proof to be passed along when create stake escrow.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {VaultParam} params - The vault parameters.
     * @param {PublicKey} owner - The public key of the vault owner.
     * @param {Opt} [opt] - Optional parameters.
     * @return {Promise<Transaction>} The transaction creating the vault.
     */
    static createPermissionedVaultWithMerkleProof(connection: Connection, vaultParam: VaultParam, owner: PublicKey, opt?: Opt): Promise<Transaction>;
    /**
     * Creates a permissioned vault for dynamic amm / dlmm pool. Vault created with this function will require vault creator to create stake escrow for each users.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {VaultParam} params - The vault parameters.
     * @param {PublicKey} owner - The public key of the vault owner.
     * @param {Opt} [opt] - Optional parameters.
     * @return {Promise<Transaction>} The transaction creating the vault.
     */
    static createPermissionedVaultWithAuthorityFund(connection: Connection, vaultParam: VaultParam, owner: PublicKey, opt?: Opt): Promise<Transaction>;
    /**
     * Retrieves a list of all FCFS vault configurations.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {Opt} [opt] - Optional parameters (e.g., cluster).
     * @return {Promise<fcfsVaultConfig[]>} A promise containing a list of FCFS vault configurations.
     */
    static getFcfsConfigs(connection: Connection, opt?: Opt): Promise<_coral_xyz_anchor.ProgramAccount<{
        maxDepositingCap: BN;
        startVestingDuration: BN;
        endVestingDuration: BN;
        depositingDurationUntilLastJoinPoint: BN;
        individualDepositingCap: BN;
        escrowFee: BN;
        activationType: number;
        padding: number[];
    }>[]>;
    /**
     * Retrieves a list of all prorata vault configurations.
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {Opt} [opt] - Optional configuration options.
     * @return {Promise<prorataVaultConfig[]>} A promise containing a list of prorata vault configurations.
     */
    static getProrataConfigs(connection: Connection, opt?: Opt): Promise<_coral_xyz_anchor.ProgramAccount<{
        maxBuyingCap: BN;
        startVestingDuration: BN;
        endVestingDuration: BN;
        escrowFee: BN;
        activationType: number;
        padding: number[];
    }>[]>;
    /**
     * Refreshes the state of the Alpha Vault by fetching the latest vault data.
     *
     * @return {void} No return value, updates the internal state of the Alpha Vault.
     */
    refreshState(): Promise<void>;
    /**
     * Retrieves the escrow account associated with the given owner.
     *
     * @param {PublicKey} owner - The public key of the owner.
     * @return {Promise<Escrow | null>} A promise containing the escrow account, or null if not found.
     */
    getEscrow(owner: PublicKey): Promise<Escrow | null>;
    /**
     * Creates a stake escrow account by vault authority. Only applicable with PermissionWithAuthority whitelist mode
     *
     * @param {BN} maxAmount - The maximum amount for the escrow.
     * @param {PublicKey} owner - The public key of the owner.
     * @param {PublicKey} vaultAuthority - The public key of the vault authority.
     * @return {Promise<Transaction>} A promise that resolves to the transaction for creating a stake escrow.
     */
    createStakeEscrowByAuthority(maxAmount: BN, owner: PublicKey, vaultAuthority: PublicKey): Promise<Transaction>;
    /**
     * Creates a stake escrow account by vault authority. Only applicable with PermissionWithAuthority whitelist mode
     *
     * @param {BN} maxAmount - The maximum amount for the escrow.
     * @param {PublicKey[]} owners - The public key of the owners.
     * @param {PublicKey} vaultAuthority - The public key of the vault authority.
     * @return {Promise<Transaction>} A promise that resolves to the transaction for creating a stake escrow.
     */
    createMultipleStakeEscrowByAuthorityInstructions(walletDepositCap: WalletDepositCap[], vaultAuthority: PublicKey): Promise<TransactionInstruction[]>;
    /**
     * Deposits a specified amount of tokens into the vault.
     *
     * @param {BN} maxAmount - The maximum amount of tokens to deposit.
     * @param {PublicKey} owner - The public key of the owner's wallet.
     * @param {DepositWithProofParams} [depositProof] - The deposit proof parameters. Required for permisisoned vault.
     * @return {Promise<Transaction>} A promise that resolves to the deposit transaction.
     */
    deposit(maxAmount: BN, owner: PublicKey, depositProof?: DepositWithProofParams): Promise<Transaction>;
    /**
     * Withdraws a specified amount of tokens from the vault.
     *
     * @param {BN} amount - The amount of tokens to withdraw.
     * @param {PublicKey} owner - The public key of the owner's wallet.
     * @return {Promise<Transaction>} A promise that resolves to the withdraw transaction.
     */
    withdraw(amount: BN, owner: PublicKey): Promise<Transaction>;
    /**
     * Withdraws the remaining quote from the vault.
     *
     * @param {PublicKey} owner - The public key of the owner's wallet.
     * @return {Promise<Transaction>} A promise that resolves to the withdraw transaction.
     */
    withdrawRemainingQuote(owner: PublicKey): Promise<Transaction>;
    /**
     * Claims bought token from the vault.
     *
     * @param {PublicKey} owner - The public key of the owner's wallet.
     * @return {Promise<Transaction>} A promise that resolves to the claim transaction.
     */
    claimToken(owner: PublicKey): Promise<Transaction>;
    /**
     * Crank the vault to buy tokens from the pool.
     *
     * @param {PublicKey} payer - The public key of the payer's wallet.
     *
     * @returns {Promise<Transaction | null>} A promise that resolves to the fill vault transaction or null if it's DLMM pool and out of liquidity.
     */
    fillVault(payer: PublicKey): Promise<Transaction | null>;
    /**
     * Creates a Merkle root configuration for the vault.
     *
     * @param {Buffer} root - The Merkle root to be configured.
     * @param {BN} version - The version of the Merkle root configuration.
     * @return {Transaction} A transaction to create the Merkle root configuration.
     */
    createMerkleRootConfig(root: Buffer, version: BN, vaultCreator: PublicKey): Promise<Transaction>;
    /**
     * Close the escrow account.
     *
     * @param {PublicKey} owner - The public key of the owner's wallet.
     * @return {Promise<Transaction>} A promise that resolves to the close escrow transaction.
     */
    closeEscrow(owner: PublicKey): Promise<Transaction>;
    /**
     * Retrieves deposit information for the given escrow account.
     *
     * @param {Escrow | null} escrowAccount - The escrow account to retrieve deposit information for.
     * @return {Promise<DepositInfo>} A promise that resolves to the deposit information, including total deposit, total filled, and total returned.
     */
    getDepositInfo(escrowAccount: Escrow | null): Promise<DepositInfo>;
    private static createVault;
    /**
     * Retrieves a list of all escrows by owner
     *
     * @param {Connection} connection - The Solana connection to use.
     * @param {PublicKey} owner - The owner of escrows.
     * @param {Opt} [opt] - Optional configuration options.
     * @return {Promise<Esrow[]>} A promise containing a list of escrow
     */
    static getEscrowByOwner(connection: Connection, owner: PublicKey, opt?: Opt): Promise<_coral_xyz_anchor.ProgramAccount<{
        vault: PublicKey;
        owner: PublicKey;
        totalDeposit: BN;
        claimedToken: BN;
        lastClaimedPoint: BN;
        refunded: number;
        padding1: number[];
        maxCap: BN;
        padding2: number[];
        padding: BN[];
    }>[]>;
    static getVault(connection: Connection, vaultAddress: PublicKey, opt?: Opt): Promise<{
        pool: PublicKey;
        tokenVault: PublicKey;
        tokenOutVault: PublicKey;
        quoteMint: PublicKey;
        baseMint: PublicKey;
        base: PublicKey;
        owner: PublicKey;
        maxBuyingCap: BN;
        totalDeposit: BN;
        totalEscrow: BN;
        swappedAmount: BN;
        boughtToken: BN;
        totalRefund: BN;
        totalClaimedToken: BN;
        startVestingPoint: BN;
        endVestingPoint: BN;
        bump: number;
        poolType: number;
        vaultMode: number;
        padding0: number[];
        maxDepositingCap: BN;
        individualDepositingCap: BN;
        depositingPoint: BN;
        escrowFee: BN;
        totalEscrowFee: BN;
        whitelistMode: number;
        activationType: number;
        padding1: number[];
        vaultAuthority: PublicKey;
        padding: BN[];
    }>;
}

export { ALPHA_VAULT_TREASURY_ID, ActivationType, AlphaVault$1 as AlphaVault, AlphaVaultProgram, CustomizableFcfsVaultParams, CustomizableProrataVaultParams, DLMM_PROGRAM_ID, DYNAMIC_AMM_PROGRAM_ID, DepositInfo, DepositWithProofParams, Escrow, FCFSConfig, GetOrCreateATAResponse, IDL, MERKLE_PROOF_API, PROGRAM_ID, PermissionWithAuthority, PermissionWithMerkleProof, Permissionless, PoolType, ProrataConfig, SEED, VAULT_PROGRAM_ID, Vault, VaultMode, VaultParam, WalletDepositCap, WhitelistMode, AlphaVault as default };
