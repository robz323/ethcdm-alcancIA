"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FomoRaydium = void 0;
const web3_js_1 = require("@solana/web3.js");
const raydium_sdk_v2_1 = require("@raydium-io/raydium-sdk-v2");
const ray_idl_json_1 = __importDefault(require("./idl/ray_idl.json"));
const spl_token_1 = require("@solana/spl-token");
const coral_xyz3_1 = require("coral-xyz3");
const anchor_1 = require("@coral-xyz/anchor");
const pda_1 = require("./pda");
const constants_1 = require("./constants");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
const token_1 = require("coral-xyz3/dist/cjs/utils/token");
class FomoRaydium {
    constructor(connection, cluster, program, authority) {
        this.connection = connection;
        this.authority = authority;
        this.program = program;
        this.cluster = cluster;
    }
    async createPool(token, priorityFee) {
        if (!this.authority)
            throw new Error("Missing authority keypair!");
        this.raydium = await raydium_sdk_v2_1.Raydium.load({
            connection: this.connection,
            cluster: this.cluster === "mainnet-beta" ? "mainnet" : "devnet",
            owner: this.authority,
        });
        const config = await this.getConfig();
        const bondingCurve = (0, pda_1.getBondingPda)(token, this.program.programId);
        const bondingBalance = await this.connection.getBalance(bondingCurve);
        const [mintA, mintB] = (0, utils_1.sortPubkeys)([
            token.toString(),
            spl_token_1.NATIVE_MINT.toString(),
        ]);
        const ammPool = (0, utils_1.getAmmPda)(config.index, raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM);
        const poolPda = (0, utils_1.getCpmmPoolPda)(raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM, new web3_js_1.PublicKey(mintA), new web3_js_1.PublicKey(mintB), ammPool);
        const withdrawIx = await this.program.methods
            .withdraw()
            .accounts({
            mint: token,
            authority: this.authority.publicKey,
        })
            .instruction();
        const [mintAAmount, mintBAmount] = mintA === spl_token_1.NATIVE_MINT.toString()
            ? [
                new anchor_1.BN(bondingBalance - 2 * web3_js_1.LAMPORTS_PER_SOL),
                new anchor_1.BN(150000000 * constants_1.DENOMINATOR),
            ]
            : [
                new anchor_1.BN(150000000 * constants_1.DENOMINATOR),
                new anchor_1.BN(bondingBalance - 2 * web3_js_1.LAMPORTS_PER_SOL),
            ];
        const program = new coral_xyz3_1.Program(ray_idl_json_1.default, raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM, new anchor_1.AnchorProvider(this.connection, {}, {}));
        const obsState = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("observation"), poolPda.toBuffer()], program.programId)[0];
        const lpMint = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("pool_lp_mint"), poolPda.toBuffer()], program.programId)[0];
        const lpAta = (0, spl_token_1.getAssociatedTokenAddressSync)(lpMint, this.authority.publicKey, true);
        const vault0Pda = web3_js_1.PublicKey.findProgramAddressSync([
            Buffer.from("pool_vault"),
            poolPda.toBuffer(),
            new web3_js_1.PublicKey(mintA).toBuffer(),
        ], program.programId)[0];
        const vault1Pda = web3_js_1.PublicKey.findProgramAddressSync([
            Buffer.from("pool_vault"),
            poolPda.toBuffer(),
            new web3_js_1.PublicKey(mintB).toBuffer(),
        ], program.programId)[0];
        const auth = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("vault_and_lp_mint_auth_seed")], program.programId)[0];
        const ix = await program.methods
            .initialize(mintAAmount, mintBAmount, new anchor_1.BN(0))
            .accounts({
            ammConfig: ammPool,
            associatedTokenProgram: token_1.ASSOCIATED_PROGRAM_ID,
            authority: auth,
            createPoolFee: raydium_sdk_v2_1.CREATE_CPMM_POOL_FEE_ACC,
            creator: this.authority.publicKey,
            creatorToken0: (0, spl_token_1.getAssociatedTokenAddressSync)(new web3_js_1.PublicKey(mintA), this.authority.publicKey),
            creatorToken1: (0, spl_token_1.getAssociatedTokenAddressSync)(new web3_js_1.PublicKey(mintB), this.authority.publicKey),
            observationState: obsState,
            poolState: poolPda,
            rent: web3_js_1.SYSVAR_RENT_PUBKEY,
            systemProgram: web3_js_1.SystemProgram.programId,
            lpMint: lpMint,
            creatorLpToken: lpAta,
            token0Mint: mintA,
            token1Mint: mintB,
            token0Program: spl_token_1.TOKEN_PROGRAM_ID,
            token1Program: spl_token_1.TOKEN_PROGRAM_ID,
            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            token0Vault: vault0Pda,
            token1Vault: vault1Pda,
        })
            .instruction();
        const instructions = [
            web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: priorityFee * web3_js_1.LAMPORTS_PER_SOL,
            }),
            withdrawIx,
        ];
        const wsolAta = (0, spl_token_1.getAssociatedTokenAddressSync)(spl_token_1.NATIVE_MINT, this.authority.publicKey);
        const wsolInfo = await this.connection.getAccountInfo(wsolAta);
        if (!wsolInfo) {
            instructions.push((0, spl_token_1.createAssociatedTokenAccountInstruction)(this.authority.publicKey, wsolAta, this.authority.publicKey, spl_token_1.NATIVE_MINT));
        }
        instructions.push(web3_js_1.SystemProgram.transfer({
            fromPubkey: this.authority.publicKey,
            lamports: mintA === spl_token_1.NATIVE_MINT.toString()
                ? mintAAmount.toNumber()
                : mintBAmount.toNumber(),
            toPubkey: wsolAta,
        }));
        instructions.push((0, spl_token_1.createSyncNativeInstruction)(wsolAta));
        instructions.push(ix);
        const tx = await (0, transaction_1.createTransaction)(this.connection, this.authority.publicKey, instructions);
        tx.sign([this.authority]);
        const sig = await (0, transaction_1.sendTransaction)(this.connection, tx);
        return { sig, poolAddress: poolPda, lpMint };
    }
    async burnLp(mint) {
        const ata = (0, spl_token_1.getAssociatedTokenAddressSync)(mint, this.authority?.publicKey);
        const balance = await this.connection.getTokenAccountBalance(ata);
        const burn = (0, spl_token_1.createBurnCheckedInstruction)(ata, mint, this.authority?.publicKey, +balance.value.amount, 9);
        const tx = await (0, transaction_1.createTransaction)(this.connection, this.authority?.publicKey, [
            web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({ microLamports: 5000000 }),
            burn,
        ]);
        tx.sign([this.authority]);
        const sig = await (0, transaction_1.sendTransaction)(this.connection, tx);
        return sig;
    }
    async getConfig() {
        const feeConfigs = await this.raydium.api.getCpmmConfigs();
        if (this.raydium.cluster === "devnet") {
            feeConfigs.forEach((config) => {
                config.id = (0, raydium_sdk_v2_1.getCpmmPdaAmmConfigId)(raydium_sdk_v2_1.DEVNET_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM, config.index).publicKey.toBase58();
            });
        }
        return feeConfigs[0];
    }
    async trade(wallet, priorityFee, amount, from, to, slippage) {
        this.raydium = await raydium_sdk_v2_1.Raydium.load({
            connection: this.connection,
            cluster: this.cluster === "mainnet-beta" ? "mainnet" : "devnet",
            owner: wallet,
        });
        const [mintA, mintB] = (0, utils_1.sortPubkeys)([from.toString(), to.toString()]);
        const config = await this.getConfig();
        const program = new coral_xyz3_1.Program(ray_idl_json_1.default, raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM, new anchor_1.AnchorProvider(this.connection, {}, {}));
        const pda = (0, utils_1.getAmmPda)(config.index, raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM);
        const pool = (0, utils_1.getCpmmPoolPda)(raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM, new web3_js_1.PublicKey(mintA), new web3_js_1.PublicKey(mintB), pda);
        const tokenInfo = await this.raydium.token.getTokenInfo(from);
        const parsedAmount = new anchor_1.BN(amount * 10 ** tokenInfo.decimals);
        const poolAcc = await program.account.poolState.fetch(pool);
        if (!poolAcc) {
            throw new Error("Pool does not exist for this token!");
        }
        const data = await this.raydium.cpmm.getPoolInfoFromRpc(pool.toString());
        const poolInfo = data.poolInfo;
        const baseIn = from.toString() === poolInfo.mintA.address;
        const rpcData = await this.raydium.cpmm.getRpcPoolInfo(poolInfo.id, true);
        const swapResult = raydium_sdk_v2_1.CurveCalculator.swap(parsedAmount, baseIn ? rpcData.baseReserve : rpcData.quoteReserve, baseIn ? rpcData.quoteReserve : rpcData.baseReserve, rpcData.configInfo.tradeFeeRate);
        const { builder } = await this.raydium.cpmm.swap({
            poolInfo,
            inputAmount: parsedAmount,
            payer: wallet,
            txVersion: raydium_sdk_v2_1.TxVersion.V0,
            swapResult,
            slippage: slippage / 100,
            baseIn,
            computeBudgetConfig: {
                units: 600000,
                microLamports: priorityFee * web3_js_1.LAMPORTS_PER_SOL,
            },
        });
        const instructions = [];
        instructions.push(...builder.allInstructions);
        const transaction = await (0, transaction_1.createTransaction)(this.connection, wallet, instructions);
        return transaction;
    }
    get raydiumProgramId() {
        return this.cluster === "devnet"
            ? raydium_sdk_v2_1.DEVNET_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM
            : raydium_sdk_v2_1.CREATE_CPMM_POOL_PROGRAM;
    }
    get poolFee() {
        return this.cluster === "devnet"
            ? raydium_sdk_v2_1.DEVNET_PROGRAM_ID.CREATE_CPMM_POOL_FEE_ACC
            : raydium_sdk_v2_1.CREATE_CPMM_POOL_FEE_ACC;
    }
}
exports.FomoRaydium = FomoRaydium;
