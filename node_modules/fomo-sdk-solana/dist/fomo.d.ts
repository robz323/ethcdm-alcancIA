import { BN, Program } from "@coral-xyz/anchor";
import { Cluster, Connection, Keypair, PublicKey } from "@solana/web3.js";
import { FomoContract as FomoContractDevnet } from "./idl/fomo_contract.devnet";
import { BondingCurve, PurchaseCurrency } from "./types";
import { FomoEvents } from "./events";
import { FomoRaydium } from "./raydium";
export declare class Fomo {
    program: Program<FomoContractDevnet>;
    private connection;
    private authority?;
    raydium: FomoRaydium;
    events: FomoEvents;
    SCALE_FACTOR: number;
    TOTAL_SUPPLY: number;
    constructor(connection: Connection, cluster: Cluster, authority?: Keypair);
    buyToken(wallet: PublicKey, tokenMint: PublicKey, amount: number, slippage: number, priorityFee: number, purchaseCurrency: PurchaseCurrency): Promise<import("@solana/web3.js").VersionedTransaction>;
    calculateTokenAmountForSol(solAmount: number, mint: PublicKey, action: "buy" | "sell"): Promise<number>;
    sellToken(wallet: PublicKey, tokenMint: PublicKey, amount: number, slippage: number, priorityFee: number, sellCurrency: PurchaseCurrency): Promise<import("@solana/web3.js").VersionedTransaction>;
    createToken(wallet: PublicKey, name: string, symbol: string, uri: string, priorityFee: number, mintKeypair: string, requiredLiquidity?: number, initialBuy?: number): Promise<{
        tokenAmount: number | undefined;
        transaction: import("@solana/web3.js").VersionedTransaction;
    }>;
    getGlobalData(): Promise<{
        authority: PublicKey;
        treasuryWallet: PublicKey;
        feeWallet: PublicKey;
        feeBps: number;
        rewardHoldUp: BN;
        rewardConfig: any[];
        devWallet: PublicKey;
        burnMint: PublicKey;
        burnAmount: BN;
        createSolDestination: PublicKey;
        createSolFee: BN;
    }>;
    getBondingCurve(tokenMint: PublicKey): Promise<BondingCurve>;
    calculatePrice(virtualSolReserve: BN, virtualTokenReserve: BN, realSolReserve: BN, realTokenReserve: BN): number;
    private calculateSlippage;
    private calculateTradePrice;
}
