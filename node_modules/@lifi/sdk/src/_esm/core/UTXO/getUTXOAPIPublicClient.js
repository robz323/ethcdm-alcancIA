import { UTXOAPIActions } from '@bigmi/core';
import { utxo } from '@bigmi/core';
import { createClient, fallback, rpcSchema, } from 'viem';
import { config } from '../../config.js';
// cached providers
const publicAPIClients = {};
/**
 * Get an instance of a provider for a specific chain
 * @param chainId - Id of the chain the provider is for
 * @returns The public client for the given chain
 */
export const getUTXOAPIPublicClient = async (chainId) => {
    if (!publicAPIClients[chainId]) {
        const _chain = await config.getChainById(chainId);
        const chain = {
            ..._chain,
            ..._chain.metamask,
            name: _chain.metamask.chainName,
            rpcUrls: {
                default: { http: _chain.metamask.rpcUrls },
                public: { http: _chain.metamask.rpcUrls },
            },
        };
        const client = createClient({
            chain,
            rpcSchema: rpcSchema(),
            transport: fallback([
                utxo('https://api.blockchair.com', {
                    key: 'blockchair',
                    includeChainToURL: true,
                }),
                utxo('https://rpc.ankr.com/http/btc_blockbook/api/v2', {
                    key: 'ankr',
                }),
                utxo('https://api.blockcypher.com/v1/btc/main', {
                    key: 'blockcypher',
                }),
                utxo('https://mempool.space/api', {
                    key: 'mempool',
                }),
            ]),
        }).extend(UTXOAPIActions);
        publicAPIClients[chainId] = client;
    }
    if (!publicAPIClients[chainId]) {
        throw new Error(`Unable to configure provider for chain ${chainId}`);
    }
    return publicAPIClients[chainId];
};
//# sourceMappingURL=getUTXOAPIPublicClient.js.map