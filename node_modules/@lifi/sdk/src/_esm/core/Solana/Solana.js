import { ChainType } from '@lifi/types';
import { SolanaStepExecutor } from './SolanaStepExecutor.js';
import { getSNSAddress } from './getSNSAddress.js';
import { getSolanaBalance } from './getSolanaBalance.js';
import { isSVMAddress } from './isSVMAddress.js';
export function Solana(options) {
    const _options = options ?? {};
    return {
        get type() {
            return ChainType.SVM;
        },
        isAddress: isSVMAddress,
        resolveAddress: getSNSAddress,
        getBalance: getSolanaBalance,
        async getStepExecutor(options) {
            if (!_options.getWalletAdapter) {
                throw new Error('getWalletAdapter is not provided.');
            }
            const walletAdapter = await _options.getWalletAdapter();
            const executor = new SolanaStepExecutor({
                walletAdapter,
                routeId: options.routeId,
                executionOptions: {
                    ...options.executionOptions,
                },
            });
            return executor;
        },
        setOptions(options) {
            Object.assign(_options, options);
        },
    };
}
//# sourceMappingURL=Solana.js.map