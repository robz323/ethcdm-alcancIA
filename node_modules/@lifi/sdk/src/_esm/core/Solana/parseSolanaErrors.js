import { SDKError } from '../../errors/SDKError.js';
import { BaseError } from '../../errors/baseError.js';
import { ErrorMessage, LiFiErrorCode } from '../../errors/constants.js';
import { TransactionError, UnknownError } from '../../errors/errors.js';
export const parseSolanaErrors = async (e, step, process) => {
    if (e instanceof SDKError) {
        e.step = e.step ?? step;
        e.process = e.process ?? process;
        return e;
    }
    const baseError = handleSpecificErrors(e);
    return new SDKError(baseError, step, process);
};
const handleSpecificErrors = (e) => {
    if (e.name === 'WalletSignTransactionError') {
        return new TransactionError(LiFiErrorCode.SignatureRejected, e.message, e);
    }
    if (e.name === 'SendTransactionError') {
        return new TransactionError(LiFiErrorCode.TransactionFailed, e.message, e);
    }
    if (e.name === 'TransactionExpiredBlockheightExceededError') {
        return new TransactionError(LiFiErrorCode.TransactionExpired, e.message, e);
    }
    if (e.message?.includes('simulate')) {
        return new TransactionError(LiFiErrorCode.TransactionSimulationFailed, e.message, e);
    }
    if (e instanceof BaseError) {
        return e;
    }
    return new UnknownError(e.message || ErrorMessage.UnknownError, e);
};
//# sourceMappingURL=parseSolanaErrors.js.map