import { VersionedTransaction } from '@solana/web3.js';
import { withTimeout } from 'viem';
import { config } from '../../config.js';
import { LiFiErrorCode } from '../../errors/constants.js';
import { TransactionError } from '../../errors/errors.js';
import { getStepTransaction } from '../../services/api.js';
import { base64ToUint8Array } from '../../utils/base64ToUint8Array.js';
import { getTransactionFailedMessage } from '../../utils/getTransactionMessage.js';
import { BaseStepExecutor } from '../BaseStepExecutor.js';
import { checkBalance } from '../checkBalance.js';
import { getSubstatusMessage } from '../processMessages.js';
import { stepComparison } from '../stepComparison.js';
import { waitForReceivingTransaction } from '../waitForReceivingTransaction.js';
import { callSolanaWithRetry } from './connection.js';
import { parseSolanaErrors } from './parseSolanaErrors.js';
import { sendAndConfirmTransaction } from './sendAndConfirmTransaction.js';
export class SolanaStepExecutor extends BaseStepExecutor {
    constructor(options) {
        super(options);
        Object.defineProperty(this, "walletAdapter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkWalletAdapter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step) => {
                // Prevent execution of the quote by wallet different from the one which requested the quote
                if (this.walletAdapter.publicKey.toString() !== step.action.fromAddress) {
                    throw new TransactionError(LiFiErrorCode.WalletChangedDuringExecution, 'The wallet address that requested the quote does not match the wallet address attempting to sign the transaction.');
                }
            }
        });
        Object.defineProperty(this, "executeStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step) => {
                step.execution = this.statusManager.initExecutionObject(step);
                const fromChain = await config.getChainById(step.action.fromChainId);
                const toChain = await config.getChainById(step.action.toChainId);
                const isBridgeExecution = fromChain.id !== toChain.id;
                const currentProcessType = isBridgeExecution ? 'CROSS_CHAIN' : 'SWAP';
                // STEP 2: Get transaction
                let process = this.statusManager.findOrCreateProcess({
                    step,
                    type: currentProcessType,
                });
                if (process.status !== 'DONE') {
                    try {
                        process = this.statusManager.updateProcess(step, process.type, 'STARTED');
                        // Check balance
                        await checkBalance(this.walletAdapter.publicKey.toString(), step);
                        // Create new transaction
                        if (!step.transactionRequest) {
                            const { execution, ...stepBase } = step;
                            const updatedStep = await getStepTransaction(stepBase);
                            const comparedStep = await stepComparison(this.statusManager, step, updatedStep, this.allowUserInteraction, this.executionOptions);
                            Object.assign(step, {
                                ...comparedStep,
                                execution: step.execution,
                            });
                        }
                        if (!step.transactionRequest?.data) {
                            throw new TransactionError(LiFiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                        }
                        process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED');
                        if (!this.allowUserInteraction) {
                            return step;
                        }
                        let transactionRequest = {
                            data: step.transactionRequest.data,
                        };
                        if (this.executionOptions?.updateTransactionRequestHook) {
                            const customizedTransactionRequest = await this.executionOptions.updateTransactionRequestHook({
                                requestType: 'transaction',
                                ...transactionRequest,
                            });
                            transactionRequest = {
                                ...transactionRequest,
                                ...customizedTransactionRequest,
                            };
                        }
                        if (!transactionRequest.data) {
                            throw new TransactionError(LiFiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                        }
                        const versionedTransaction = VersionedTransaction.deserialize(base64ToUint8Array(transactionRequest.data));
                        this.checkWalletAdapter(step);
                        // We give users 2 minutes to sign the transaction or it should be considered expired
                        const signedTx = await withTimeout(() => this.walletAdapter.signTransaction(versionedTransaction), {
                            // https://solana.com/docs/advanced/confirmation#transaction-expiration
                            // Use 2 minutes to account for fluctuations
                            timeout: 120_000,
                            errorInstance: new TransactionError(LiFiErrorCode.TransactionExpired, 'Transaction has expired: blockhash is no longer recent enough.'),
                        });
                        process = this.statusManager.updateProcess(step, process.type, 'PENDING');
                        const simulationResult = await callSolanaWithRetry((connection) => connection.simulateTransaction(signedTx, {
                            commitment: 'confirmed',
                            replaceRecentBlockhash: true,
                        }));
                        if (simulationResult.value.err) {
                            throw new TransactionError(LiFiErrorCode.TransactionSimulationFailed, 'Transaction simulation failed');
                        }
                        const confirmedTx = await sendAndConfirmTransaction(signedTx);
                        if (!confirmedTx.signatureResult) {
                            throw new TransactionError(LiFiErrorCode.TransactionExpired, 'Transaction has expired: The block height has exceeded the maximum allowed limit.');
                        }
                        if (confirmedTx.signatureResult.err) {
                            const reason = typeof confirmedTx.signatureResult.err === 'object'
                                ? JSON.stringify(confirmedTx.signatureResult.err)
                                : confirmedTx.signatureResult.err;
                            throw new TransactionError(LiFiErrorCode.TransactionFailed, `Transaction failed: ${reason}`);
                        }
                        // Transaction has been confirmed and we can update the process
                        process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                            txHash: confirmedTx.txSignature,
                            txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${confirmedTx.txSignature}`,
                        });
                        if (isBridgeExecution) {
                            process = this.statusManager.updateProcess(step, process.type, 'DONE');
                        }
                    }
                    catch (e) {
                        const error = await parseSolanaErrors(e, step, process);
                        process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                            error: {
                                message: error.cause.message,
                                code: error.code,
                            },
                        });
                        this.statusManager.updateExecution(step, 'FAILED');
                        throw error;
                    }
                }
                // STEP 5: Wait for the receiving chain
                const processTxHash = process.txHash;
                if (isBridgeExecution) {
                    process = this.statusManager.findOrCreateProcess({
                        step,
                        type: 'RECEIVING_CHAIN',
                        status: 'PENDING',
                        chainId: toChain.id,
                    });
                }
                let statusResponse;
                try {
                    if (!processTxHash) {
                        throw new Error('Transaction hash is undefined.');
                    }
                    statusResponse = (await waitForReceivingTransaction(processTxHash, this.statusManager, process.type, step));
                    const statusReceiving = statusResponse.receiving;
                    process = this.statusManager.updateProcess(step, process.type, 'DONE', {
                        substatus: statusResponse.substatus,
                        substatusMessage: statusResponse.substatusMessage ||
                            getSubstatusMessage(statusResponse.status, statusResponse.substatus),
                        txHash: statusReceiving?.txHash,
                        txLink: `${toChain.metamask.blockExplorerUrls[0]}tx/${statusReceiving?.txHash}`,
                    });
                    this.statusManager.updateExecution(step, 'DONE', {
                        fromAmount: statusResponse.sending.amount,
                        toAmount: statusReceiving?.amount,
                        toToken: statusReceiving?.token,
                        gasCosts: [
                            {
                                amount: statusResponse.sending.gasAmount,
                                amountUSD: statusResponse.sending.gasAmountUSD,
                                token: statusResponse.sending.gasToken,
                                estimate: statusResponse.sending.gasUsed,
                                limit: statusResponse.sending.gasUsed,
                                price: statusResponse.sending.gasPrice,
                                type: 'SEND',
                            },
                        ],
                    });
                }
                catch (e) {
                    const htmlMessage = await getTransactionFailedMessage(step, process.txLink);
                    process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                        error: {
                            code: LiFiErrorCode.TransactionFailed,
                            message: 'Failed while waiting for receiving chain.',
                            htmlMessage,
                        },
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    console.warn(e);
                    throw e;
                }
                // DONE
                return step;
            }
        });
        this.walletAdapter = options.walletAdapter;
    }
}
//# sourceMappingURL=SolanaStepExecutor.js.map