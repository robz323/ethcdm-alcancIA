"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTxErrorDetails = exports.convertQuoteToRoute = exports.checkPackageUpdates = void 0;
const SDKError_js_1 = require("./errors/SDKError.js");
const errors_js_1 = require("./errors/errors.js");
const version_js_1 = require("./version.js");
const checkPackageUpdates = async (packageName, packageVersion) => {
    try {
        const pkgName = packageName ?? version_js_1.name;
        const response = await fetch(`https://registry.npmjs.org/${pkgName}/latest`);
        const reponseBody = await response.json();
        const latestVersion = reponseBody.version;
        const currentVersion = packageVersion ?? version_js_1.version;
        if (latestVersion > currentVersion) {
            console.warn(`${pkgName}: new package version is available. Please update as soon as possible to enjoy the newest features. Current version: ${currentVersion}. Latest version: ${latestVersion}.`);
        }
    }
    catch (_error) {
    }
};
exports.checkPackageUpdates = checkPackageUpdates;
const convertQuoteToRoute = (step) => {
    if (!step.estimate.fromAmountUSD) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError("Missing 'fromAmountUSD' in step estimate."));
    }
    if (!step.estimate.toAmountUSD) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError("Missing 'toAmountUSD' in step estimate."));
    }
    const route = {
        fromToken: step.action.fromToken,
        toToken: step.action.toToken,
        fromAmount: step.action.fromAmount,
        toAmount: step.estimate.toAmount,
        id: step.id,
        fromChainId: step.action.fromToken.chainId,
        toChainId: step.action.toToken.chainId,
        fromAmountUSD: step.estimate.fromAmountUSD,
        toAmountUSD: step.estimate.toAmountUSD,
        steps: [step],
        toAmountMin: step.estimate.toAmountMin,
        insurance: { state: 'NOT_INSURABLE', feeAmountUsd: '0' },
    };
    return route;
};
exports.convertQuoteToRoute = convertQuoteToRoute;
const fetchTxErrorDetails = async (txHash, chainId) => {
    try {
        const response = await fetch(`https://api.tenderly.co/api/v1/public-contract/${chainId}/tx/${txHash}`);
        const reponseBody = await response.json();
        return reponseBody;
    }
    catch (_) { }
};
exports.fetchTxErrorDetails = fetchTxErrorDetails;
//# sourceMappingURL=helpers.js.map