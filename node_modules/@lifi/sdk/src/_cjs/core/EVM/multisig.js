"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMultisigRouteProcess = void 0;
const constants_js_1 = require("../../errors/constants.js");
const errors_js_1 = require("../../errors/errors.js");
const updateMultisigRouteProcess = async (internalTxHash, step, processType, fromChain, statusManager, multisig) => {
    if (!multisig?.getMultisigTransactionDetails) {
        throw new Error('getMultisigTransactionDetails is missing in multisig config.');
    }
    const updateIntermediateMultisigStatus = () => {
        statusManager.updateProcess(step, processType, 'PENDING');
    };
    const multisigStatusResponse = await multisig?.getMultisigTransactionDetails(internalTxHash, fromChain.id, updateIntermediateMultisigStatus);
    if (multisigStatusResponse.status === 'DONE') {
        statusManager.updateProcess(step, processType, 'PENDING', {
            txHash: multisigStatusResponse.txHash,
            multisigTxHash: undefined,
            txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${multisigStatusResponse.txHash}`,
        });
    }
    if (multisigStatusResponse.status === 'FAILED') {
        throw new errors_js_1.TransactionError(constants_js_1.LiFiErrorCode.TransactionFailed, 'Multisig transaction failed.');
    }
    if (multisigStatusResponse.status === 'CANCELLED') {
        throw new errors_js_1.TransactionError(constants_js_1.LiFiErrorCode.SignatureRejected, 'Transaction was rejected by user.');
    }
};
exports.updateMultisigRouteProcess = updateMultisigRouteProcess;
//# sourceMappingURL=multisig.js.map