"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchChain = void 0;
const actions_1 = require("viem/actions");
const constants_js_1 = require("../../errors/constants.js");
const errors_js_1 = require("../../errors/errors.js");
const switchChain = async (client, statusManager, step, allowUserInteraction, switchChainHook) => {
    const currentChainId = await (0, actions_1.getChainId)(client);
    if (currentChainId === step.action.fromChainId) {
        return client;
    }
    step.execution = statusManager.initExecutionObject(step);
    statusManager.updateExecution(step, 'ACTION_REQUIRED');
    let switchProcess = statusManager.findOrCreateProcess({
        step,
        type: 'SWITCH_CHAIN',
        status: 'ACTION_REQUIRED',
    });
    if (!allowUserInteraction) {
        return;
    }
    try {
        const updatedClient = await switchChainHook?.(step.action.fromChainId);
        let updatedChainId;
        if (updatedClient) {
            updatedChainId = await (0, actions_1.getChainId)(updatedClient);
        }
        if (updatedChainId !== step.action.fromChainId) {
            throw new errors_js_1.ProviderError(constants_js_1.LiFiErrorCode.ChainSwitchError, 'Chain switch required.');
        }
        switchProcess = statusManager.updateProcess(step, switchProcess.type, 'DONE');
        statusManager.updateExecution(step, 'PENDING');
        return updatedClient;
    }
    catch (error) {
        statusManager.updateProcess(step, switchProcess.type, 'FAILED', {
            error: {
                message: error.message,
                code: constants_js_1.LiFiErrorCode.ChainSwitchError,
            },
        });
        statusManager.updateExecution(step, 'FAILED');
        throw error;
    }
};
exports.switchChain = switchChain;
//# sourceMappingURL=switchChain.js.map