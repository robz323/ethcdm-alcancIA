"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokeTokenApproval = exports.setTokenAllowance = exports.setAllowance = void 0;
const viem_1 = require("viem");
const actions_1 = require("viem/actions");
const isZeroAddress_js_1 = require("../../utils/isZeroAddress.js");
const abi_js_1 = require("./abi.js");
const getAllowance_js_1 = require("./getAllowance.js");
const utils_js_1 = require("./utils.js");
const setAllowance = async (client, tokenAddress, contractAddress, amount, settings, returnPopulatedTransaction) => {
    const data = (0, viem_1.encodeFunctionData)({
        abi: abi_js_1.approveAbi,
        functionName: 'approve',
        args: [contractAddress, amount],
    });
    if (returnPopulatedTransaction) {
        return data;
    }
    let transactionRequest = {
        to: tokenAddress,
        data,
        maxPriorityFeePerGas: client.account?.type === 'local'
            ? await (0, utils_js_1.getMaxPriorityFeePerGas)(client)
            : undefined,
    };
    if (settings?.updateTransactionRequestHook) {
        const customizedTransactionRequest = await settings.updateTransactionRequestHook({
            requestType: 'approve',
            ...transactionRequest,
        });
        transactionRequest = {
            ...transactionRequest,
            ...customizedTransactionRequest,
        };
    }
    return (0, actions_1.sendTransaction)(client, {
        to: transactionRequest.to,
        account: client.account,
        data: transactionRequest.data,
        gas: transactionRequest.gas,
        gasPrice: transactionRequest.gasPrice,
        maxFeePerGas: transactionRequest.maxFeePerGas,
        maxPriorityFeePerGas: transactionRequest.maxPriorityFeePerGas,
        chain: null,
    });
};
exports.setAllowance = setAllowance;
const setTokenAllowance = async ({ walletClient, token, spenderAddress, amount, }) => {
    if ((0, isZeroAddress_js_1.isNativeTokenAddress)(token.address)) {
        return;
    }
    const approvedAmount = await (0, getAllowance_js_1.getAllowance)(token.chainId, token.address, walletClient.account.address, spenderAddress);
    if (amount > approvedAmount) {
        const approveTx = await (0, exports.setAllowance)(walletClient, token.address, spenderAddress, amount);
        return approveTx;
    }
};
exports.setTokenAllowance = setTokenAllowance;
const revokeTokenApproval = async ({ walletClient, token, spenderAddress, }) => {
    if ((0, isZeroAddress_js_1.isNativeTokenAddress)(token.address)) {
        return;
    }
    const approvedAmount = await (0, getAllowance_js_1.getAllowance)(token.chainId, token.address, walletClient.account.address, spenderAddress);
    if (approvedAmount > 0) {
        const approveTx = await (0, exports.setAllowance)(walletClient, token.address, spenderAddress, 0n);
        return approveTx;
    }
};
exports.revokeTokenApproval = revokeTokenApproval;
//# sourceMappingURL=setAllowance.js.map