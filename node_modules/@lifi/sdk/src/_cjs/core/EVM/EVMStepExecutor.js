"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EVMStepExecutor = void 0;
const actions_1 = require("viem/actions");
const config_js_1 = require("../../config.js");
const constants_js_1 = require("../../errors/constants.js");
const errors_js_1 = require("../../errors/errors.js");
const api_js_1 = require("../../services/api.js");
const getTransactionMessage_js_1 = require("../../utils/getTransactionMessage.js");
const isZeroAddress_js_1 = require("../../utils/isZeroAddress.js");
const BaseStepExecutor_js_1 = require("../BaseStepExecutor.js");
const checkBalance_js_1 = require("../checkBalance.js");
const processMessages_js_1 = require("../processMessages.js");
const stepComparison_js_1 = require("../stepComparison.js");
const waitForReceivingTransaction_js_1 = require("../waitForReceivingTransaction.js");
const checkAllowance_js_1 = require("./checkAllowance.js");
const multisig_js_1 = require("./multisig.js");
const parseEVMErrors_js_1 = require("./parseEVMErrors.js");
const switchChain_js_1 = require("./switchChain.js");
const utils_js_1 = require("./utils.js");
const waitForTransactionReceipt_js_1 = require("./waitForTransactionReceipt.js");
class EVMStepExecutor extends BaseStepExecutor_js_1.BaseStepExecutor {
    constructor(options) {
        super(options);
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "multisig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step, process) => {
                const updatedClient = await (0, switchChain_js_1.switchChain)(this.client, this.statusManager, step, this.allowUserInteraction, this.executionOptions?.switchChainHook);
                if (updatedClient) {
                    this.client = updatedClient;
                }
                let accountAddress = this.client.account?.address;
                if (!accountAddress) {
                    const accountAddresses = await (0, actions_1.getAddresses)(this.client);
                    accountAddress = accountAddresses?.[0];
                }
                if (accountAddress !== step.action.fromAddress) {
                    let processToUpdate = process;
                    if (!processToUpdate) {
                        processToUpdate = this.statusManager.findOrCreateProcess({
                            step,
                            type: 'TRANSACTION',
                        });
                    }
                    const errorMessage = 'The wallet address that requested the quote does not match the wallet address attempting to sign the transaction.';
                    this.statusManager.updateProcess(step, processToUpdate.type, 'FAILED', {
                        error: {
                            code: constants_js_1.LiFiErrorCode.WalletChangedDuringExecution,
                            message: errorMessage,
                        },
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    throw await (0, parseEVMErrors_js_1.parseEVMErrors)(new errors_js_1.TransactionError(constants_js_1.LiFiErrorCode.WalletChangedDuringExecution, errorMessage), step, process);
                }
                return updatedClient;
            }
        });
        Object.defineProperty(this, "executeStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step) => {
                step.execution = this.statusManager.initExecutionObject(step);
                const recievingChainProcess = step.execution?.process.find((process) => process.type === 'RECEIVING_CHAIN');
                if (recievingChainProcess?.substatus !== 'WAIT_DESTINATION_TRANSACTION') {
                    const updatedClient = await this.checkClient(step);
                    if (!updatedClient) {
                        return step;
                    }
                }
                const isMultisigClient = !!this.multisig?.isMultisigWalletClient;
                const multisigBatchTransactions = [];
                const shouldBatchTransactions = this.multisig?.shouldBatchTransactions &&
                    !!this.multisig.sendBatchTransaction;
                const fromChain = await config_js_1.config.getChainById(step.action.fromChainId);
                const toChain = await config_js_1.config.getChainById(step.action.toChainId);
                const isBridgeExecution = fromChain.id !== toChain.id;
                const currentProcessType = isBridgeExecution ? 'CROSS_CHAIN' : 'SWAP';
                const existingProcess = step.execution.process.find((p) => p.type === currentProcessType);
                const checkForAllowance = !existingProcess?.txHash &&
                    !(0, isZeroAddress_js_1.isZeroAddress)(step.action.fromToken.address) &&
                    (shouldBatchTransactions || !isMultisigClient);
                if (checkForAllowance) {
                    const data = await (0, checkAllowance_js_1.checkAllowance)(this.client, fromChain, step, this.statusManager, this.executionOptions, this.allowUserInteraction, shouldBatchTransactions);
                    if (data) {
                        const baseTransaction = {
                            to: step.action.fromToken.address,
                            data,
                        };
                        multisigBatchTransactions.push(baseTransaction);
                    }
                }
                let process = this.statusManager.findOrCreateProcess({
                    step,
                    type: currentProcessType,
                    chainId: fromChain.id,
                });
                if (process.status !== 'DONE') {
                    const multisigProcess = step.execution.process.find((p) => !!p.multisigTxHash);
                    try {
                        if (isMultisigClient && multisigProcess) {
                            const multisigTxHash = multisigProcess.multisigTxHash;
                            if (!multisigTxHash) {
                                throw new errors_js_1.ValidationError('Multisig internal transaction hash is undefined.');
                            }
                            await (0, multisig_js_1.updateMultisigRouteProcess)(multisigTxHash, step, process.type, fromChain, this.statusManager, this.multisig);
                        }
                        let txHash;
                        if (process.txHash) {
                            const updatedClient = await this.checkClient(step, process);
                            if (!updatedClient) {
                                return step;
                            }
                            txHash = process.txHash;
                        }
                        else {
                            process = this.statusManager.updateProcess(step, process.type, 'STARTED');
                            await (0, checkBalance_js_1.checkBalance)(this.client.account.address, step);
                            if (!step.transactionRequest) {
                                const { execution, ...stepBase } = step;
                                const updatedStep = await (0, api_js_1.getStepTransaction)(stepBase);
                                const comparedStep = await (0, stepComparison_js_1.stepComparison)(this.statusManager, step, updatedStep, this.allowUserInteraction, this.executionOptions);
                                Object.assign(step, {
                                    ...comparedStep,
                                    execution: step.execution,
                                });
                            }
                            if (!step.transactionRequest) {
                                throw new errors_js_1.TransactionError(constants_js_1.LiFiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                            }
                            const updatedClient = await this.checkClient(step, process);
                            if (!updatedClient) {
                                return step;
                            }
                            process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED');
                            if (!this.allowUserInteraction) {
                                return step;
                            }
                            let transactionRequest = {
                                to: step.transactionRequest.to,
                                from: step.transactionRequest.from,
                                data: step.transactionRequest.data,
                                value: step.transactionRequest.value
                                    ? BigInt(step.transactionRequest.value)
                                    : undefined,
                                gas: step.transactionRequest.gasLimit
                                    ? BigInt(step.transactionRequest.gasLimit)
                                    : undefined,
                                maxPriorityFeePerGas: this.client.account?.type === 'local'
                                    ? await (0, utils_js_1.getMaxPriorityFeePerGas)(this.client)
                                    : step.transactionRequest.maxPriorityFeePerGas
                                        ? BigInt(step.transactionRequest.maxPriorityFeePerGas)
                                        : undefined,
                            };
                            if (this.executionOptions?.updateTransactionRequestHook) {
                                const customizedTransactionRequest = await this.executionOptions.updateTransactionRequestHook({
                                    requestType: 'transaction',
                                    ...transactionRequest,
                                });
                                transactionRequest = {
                                    ...transactionRequest,
                                    ...customizedTransactionRequest,
                                };
                            }
                            if (shouldBatchTransactions && this.multisig?.sendBatchTransaction) {
                                if (transactionRequest.to && transactionRequest.data) {
                                    const populatedTransaction = {
                                        value: transactionRequest.value,
                                        to: transactionRequest.to,
                                        data: transactionRequest.data,
                                    };
                                    multisigBatchTransactions.push(populatedTransaction);
                                    txHash = await this.multisig?.sendBatchTransaction(multisigBatchTransactions);
                                }
                                else {
                                    throw new errors_js_1.TransactionError(constants_js_1.LiFiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                                }
                            }
                            else {
                                txHash = await (0, actions_1.sendTransaction)(this.client, {
                                    to: transactionRequest.to,
                                    account: this.client.account,
                                    data: transactionRequest.data,
                                    value: transactionRequest.value,
                                    gas: transactionRequest.gas,
                                    gasPrice: transactionRequest.gasPrice,
                                    maxFeePerGas: transactionRequest.maxFeePerGas,
                                    maxPriorityFeePerGas: transactionRequest.maxPriorityFeePerGas,
                                    chain: null,
                                });
                            }
                            if (isMultisigClient) {
                                process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED', {
                                    multisigTxHash: txHash,
                                });
                            }
                            else {
                                process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                    txHash: txHash,
                                    txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${txHash}`,
                                });
                            }
                        }
                        const transactionReceipt = await (0, waitForTransactionReceipt_js_1.waitForTransactionReceipt)({
                            client: this.client,
                            chainId: fromChain.id,
                            txHash,
                            onReplaced: (response) => {
                                this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                    txHash: response.transaction.hash,
                                    txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${response.transaction.hash}`,
                                });
                            },
                        });
                        if (isMultisigClient && process.status === 'ACTION_REQUIRED') {
                            await (0, multisig_js_1.updateMultisigRouteProcess)(transactionReceipt?.transactionHash || txHash, step, process.type, fromChain, this.statusManager, this.multisig);
                        }
                        if (!isMultisigClient &&
                            transactionReceipt?.transactionHash &&
                            transactionReceipt.transactionHash !== txHash) {
                            process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                txHash: transactionReceipt.transactionHash,
                                txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${transactionReceipt.transactionHash}`,
                            });
                        }
                        if (isBridgeExecution) {
                            process = this.statusManager.updateProcess(step, process.type, 'DONE');
                        }
                    }
                    catch (e) {
                        const error = await (0, parseEVMErrors_js_1.parseEVMErrors)(e, step, process);
                        process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                            error: {
                                message: error.cause.message,
                                code: error.code,
                            },
                        });
                        this.statusManager.updateExecution(step, 'FAILED');
                        throw error;
                    }
                }
                const processTxHash = process.txHash;
                if (isBridgeExecution) {
                    process = this.statusManager.findOrCreateProcess({
                        step,
                        type: 'RECEIVING_CHAIN',
                        status: 'PENDING',
                        chainId: toChain.id,
                    });
                }
                let statusResponse;
                try {
                    if (!processTxHash) {
                        throw new Error('Transaction hash is undefined.');
                    }
                    statusResponse = (await (0, waitForReceivingTransaction_js_1.waitForReceivingTransaction)(processTxHash, this.statusManager, process.type, step));
                    const statusReceiving = statusResponse.receiving;
                    process = this.statusManager.updateProcess(step, process.type, 'DONE', {
                        substatus: statusResponse.substatus,
                        substatusMessage: statusResponse.substatusMessage ||
                            (0, processMessages_js_1.getSubstatusMessage)(statusResponse.status, statusResponse.substatus),
                        txHash: statusReceiving?.txHash,
                        txLink: `${toChain.metamask.blockExplorerUrls[0]}tx/${statusReceiving?.txHash}`,
                    });
                    this.statusManager.updateExecution(step, 'DONE', {
                        fromAmount: statusResponse.sending.amount,
                        toAmount: statusReceiving?.amount,
                        toToken: statusReceiving?.token,
                        gasCosts: [
                            {
                                amount: statusResponse.sending.gasAmount,
                                amountUSD: statusResponse.sending.gasAmountUSD,
                                token: statusResponse.sending.gasToken,
                                estimate: statusResponse.sending.gasUsed,
                                limit: statusResponse.sending.gasUsed,
                                price: statusResponse.sending.gasPrice,
                                type: 'SEND',
                            },
                        ],
                    });
                }
                catch (e) {
                    const htmlMessage = await (0, getTransactionMessage_js_1.getTransactionFailedMessage)(step, process.txLink);
                    process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                        error: {
                            code: constants_js_1.LiFiErrorCode.TransactionFailed,
                            message: 'Failed while waiting for receiving chain.',
                            htmlMessage,
                        },
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    throw await (0, parseEVMErrors_js_1.parseEVMErrors)(e, step, process);
                }
                return step;
            }
        });
        this.client = options.client;
        this.multisig = options.multisig;
    }
}
exports.EVMStepExecutor = EVMStepExecutor;
//# sourceMappingURL=EVMStepExecutor.js.map