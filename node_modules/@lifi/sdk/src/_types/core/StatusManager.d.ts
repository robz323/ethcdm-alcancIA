import type { ChainId, Execution, ExecutionStatus, LiFiStep, Process, ProcessStatus, ProcessType } from '@lifi/types';
import type { LiFiStepExtended } from './types.js';
export type FindOrCreateProcessProps = {
    step: LiFiStepExtended;
    type: ProcessType;
    chainId?: ChainId;
    status?: ProcessStatus;
};
/**
 * Manages status updates of a route and provides various functions for tracking processes
 * @param {string} routeId The route dd this StatusManger belongs to.
 * @returns {StatusManager} An instance of StatusManager.
 */
export declare class StatusManager {
    private readonly routeId;
    private shouldUpdate;
    constructor(routeId: string);
    /**
     * Initializes the execution object of a Step.
     * @param step  The current step in execution
     * @returns The initialized execution object for this step and a function to update this step
     */
    initExecutionObject: (step: LiFiStepExtended) => Execution;
    /**
     * Updates the execution object of a Step.
     * @param step  The current step in execution
     * @param status  The status for the execution
     * @param execution Optional. Information about received tokens
     * @returns The step with the updated execution object
     */
    updateExecution(step: LiFiStepExtended, status: ExecutionStatus, execution?: Partial<Execution>): LiFiStep;
    /**
     * Create and push a new process into the execution.
     * @param step.step The step that should contain the new process.
     * @param step.type Type of the process. Used to identify already existing processes.
     * @param step.chainId Chain Id of the process.
     * @param step.status By default created procces is set to the STARTED status. We can override new process with the needed status.
     * @param root0
     * @param root0.step
     * @param root0.type
     * @param root0.chainId
     * @param root0.status
     * @returns Returns process.
     */
    findOrCreateProcess: ({ step, type, chainId, status, }: FindOrCreateProcessProps) => Process;
    /**
     * Update a process object.
     * @param step The step where the process should be updated
     * @param type  The process type to update
     * @param status The status the process gets.
     * @param [params] Additional parameters to append to the process.
     * @returns The update process
     */
    updateProcess: (step: LiFiStepExtended, type: ProcessType, status: ProcessStatus, params?: Partial<Process>) => Process;
    /**
     * Remove a process from the execution
     * @param step The step where the process should be removed from
     * @param type  The process type to remove
     */
    removeProcess: (step: LiFiStepExtended, type: ProcessType) => void;
    updateStepInRoute: (step: LiFiStep) => LiFiStep;
    allowUpdates(value: boolean): void;
}
//# sourceMappingURL=StatusManager.d.ts.map