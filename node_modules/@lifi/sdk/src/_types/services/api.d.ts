import { type ChainId, type ChainKey, type ChainsRequest, type ConnectionsRequest, type ConnectionsResponse, type ContractCallsQuoteRequest, type ExtendedChain, type GasRecommendationRequest, type GasRecommendationResponse, type GetStatusRequest, type LiFiStep, type QuoteRequest, type RequestOptions, type RoutesRequest, type RoutesResponse, type StatusResponse, type Token, type TokensRequest, type TokensResponse, type ToolsRequest, type ToolsResponse, type TransactionAnalyticsRequest, type TransactionAnalyticsResponse } from '@lifi/types';
/**
 * Fetch information about a Token
 * @param chain - Id or key of the chain that contains the token
 * @param token - Address or symbol of the token on the requested chain
 * @param options - Request options
 * @throws {LiFiError} - Throws a LiFiError if request fails
 * @returns Token information
 */
export declare const getToken: (chain: ChainKey | ChainId, token: string, options?: RequestOptions) => Promise<Token>;
/**
 * Get a quote for a token transfer
 * @param params - The configuration of the requested quote
 * @param options - Request options
 * @throws {LiFiError} - Throws a LiFiError if request fails
 * @returns Quote for a token transfer
 */
export declare const getQuote: (params: QuoteRequest, options?: RequestOptions) => Promise<LiFiStep>;
/**
 * Get a quote for a destination contract call
 * @param params - The configuration of the requested destination call
 * @param options - Request options
 * @throws {LiFiError} - Throws a LiFiError if request fails
 * @returns - Returns step.
 */
export declare const getContractCallsQuote: (params: ContractCallsQuoteRequest, options?: RequestOptions) => Promise<LiFiStep>;
/**
 * Check the status of a transfer. For cross chain transfers, the "bridge" parameter is required.
 * @param params - Configuration of the requested status
 * @param options - Request options.
 * @throws {LiFiError} - Throws a LiFiError if request fails
 * @returns Returns status response.
 */
export declare const getStatus: (params: GetStatusRequest, options?: RequestOptions) => Promise<StatusResponse>;
/**
 * Get all available chains
 * @param params - The configuration of the requested chains
 * @param options - Request options
 * @returns A list of all available chains
 * @throws {LiFiError} Throws a LiFiError if request fails.
 */
export declare const getChains: (params?: ChainsRequest, options?: RequestOptions) => Promise<ExtendedChain[]>;
/**
 * Get a set of routes for a request that describes a transfer of tokens.
 * @param params - A description of the transfer.
 * @param options - Request options
 * @returns The resulting routes that can be used to realize the described transfer of tokens.
 * @throws {LiFiError} Throws a LiFiError if request fails.
 */
export declare const getRoutes: (params: RoutesRequest, options?: RequestOptions) => Promise<RoutesResponse>;
/**
 * Get the transaction data for a single step of a route
 * @param step - The step object.
 * @param options - Request options
 * @returns The step populated with the transaction data.
 * @throws {LiFiError} Throws a LiFiError if request fails.
 */
export declare const getStepTransaction: (step: LiFiStep, options?: RequestOptions) => Promise<LiFiStep>;
/**
 * Get the available tools to bridge and swap tokens.
 * @param params - The configuration of the requested tools
 * @param options - Request options
 * @returns The tools that are available on the requested chains
 */
export declare const getTools: (params?: ToolsRequest, options?: RequestOptions) => Promise<ToolsResponse>;
/**
 * Get all known tokens.
 * @param params - The configuration of the requested tokens
 * @param options - Request options
 * @returns The tokens that are available on the requested chains
 */
export declare const getTokens: (params?: TokensRequest, options?: RequestOptions) => Promise<TokensResponse>;
/**
 * Get gas recommendation for a certain chain
 * @param params - Configuration of the requested gas recommendation.
 * @param options - Request options
 * @throws {LiFiError} Throws a LiFiError if request fails.
 * @returns Gas recommendation response.
 */
export declare const getGasRecommendation: (params: GasRecommendationRequest, options?: RequestOptions) => Promise<GasRecommendationResponse>;
/**
 * Get all the available connections for swap/bridging tokens
 * @param connectionRequest ConnectionsRequest
 * @param options - Request options
 * @returns ConnectionsResponse
 */
export declare const getConnections: (connectionRequest: ConnectionsRequest, options?: RequestOptions) => Promise<ConnectionsResponse>;
export declare const getTransactionHistory: ({ wallet, status, fromTimestamp, toTimestamp }: TransactionAnalyticsRequest, options?: RequestOptions) => Promise<TransactionAnalyticsResponse>;
//# sourceMappingURL=api.d.ts.map