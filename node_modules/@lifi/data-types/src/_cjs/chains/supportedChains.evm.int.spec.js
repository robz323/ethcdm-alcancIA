"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const viem_1 = require("viem");
const vitest_1 = require("vitest");
const supportedChains_evm_js_1 = require("./supportedChains.evm.js");
vitest_1.describe.concurrent('EVM chains RPC check', () => {
    const rpcUrls = supportedChains_evm_js_1.supportedEVMChains.flatMap((chain) => chain.metamask.rpcUrls.map((rpcUrl) => ({
        rpcUrl: rpcUrl,
        chainId: chain.id,
        chainName: chain.name,
    })));
    vitest_1.test.for(rpcUrls)(`should successfully get chain ID from $chainName - $chainId RPC: $rpcUrl`, { timeout: 10_000, retry: 3 }, async ({ rpcUrl, chainId }) => {
        const client = (0, viem_1.createPublicClient)({
            transport: (0, viem_1.http)(rpcUrl),
        });
        const _chainId = await client.getChainId();
        (0, vitest_1.expect)(_chainId).toBe(chainId);
    });
});
vitest_1.describe.concurrent('EVM chains block explorer check', () => {
    const blockExplorerUrls = supportedChains_evm_js_1.supportedEVMChains.flatMap((chain) => chain.metamask.blockExplorerUrls.map((blockExplorerUrl) => ({
        blockExplorerUrl: blockExplorerUrl,
        chainId: chain.id,
        chainName: chain.name,
    })));
    vitest_1.test.for(blockExplorerUrls)(`block explorer should be alive $chainName - $chainId - $blockExplorerUrl`, { timeout: 10_000, retry: 3 }, async ({ blockExplorerUrl }) => {
        const response = await fetch(blockExplorerUrl);
        (0, vitest_1.expect)(response.url).toBe(blockExplorerUrl);
        (0, vitest_1.expect)(response.ok).toBe(true);
        (0, vitest_1.expect)(response.status).toBe(200);
    });
});
//# sourceMappingURL=supportedChains.evm.int.spec.js.map