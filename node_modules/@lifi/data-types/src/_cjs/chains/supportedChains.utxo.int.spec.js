"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const supportedChains_utxo_js_1 = require("./supportedChains.utxo.js");
vitest_1.describe.concurrent('UTXO chains RPC check', () => {
    const rpcUrls = supportedChains_utxo_js_1.supportedUXTOChains.flatMap((chain) => chain.metamask.rpcUrls.map((rpcUrl) => ({
        rpcUrl: rpcUrl,
        chainId: chain.id,
        chainName: chain.name,
    })));
    vitest_1.test.for(rpcUrls)(`should successfully get chain ID from $chainName - $chainId RPC: $rpcUrl`, { timeout: 10_000, retry: 3 }, async ({ rpcUrl }) => {
        const response = await fetch(rpcUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: '1.0',
                id: 'curltest',
                method: 'getblockchaininfo',
                params: [],
            }),
        });
        const data = await response.json();
        (0, vitest_1.expect)(response.ok).toBeTruthy();
        (0, vitest_1.expect)(response.status).toBe(200);
        (0, vitest_1.expect)(data.result.blocks).toBeGreaterThan(0);
    });
});
vitest_1.describe.concurrent('UTXO chains block explorer check', () => {
    const blockExplorerUrls = supportedChains_utxo_js_1.supportedUXTOChains.flatMap((chain) => chain.metamask.blockExplorerUrls.map((blockExplorerUrl) => ({
        blockExplorerUrl: blockExplorerUrl,
        chainId: chain.id,
        chainName: chain.name,
    })));
    vitest_1.test.for(blockExplorerUrls)(`block explorer should be alive $chainName - $chainId - $blockExplorerUrl`, { timeout: 10_000, retry: 3 }, async ({ blockExplorerUrl }) => {
        const response = await fetch(blockExplorerUrl);
        (0, vitest_1.expect)(response.url).toBe(blockExplorerUrl);
        (0, vitest_1.expect)(response.ok).toBe(true);
        (0, vitest_1.expect)(response.status).toBe(200);
    });
});
//# sourceMappingURL=supportedChains.utxo.int.spec.js.map