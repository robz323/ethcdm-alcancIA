import type { Coin, StaticToken } from '@lifi/types';
import { ChainId, CoinKey } from '@lifi/types';
type BasicToken = {
    address: string;
    decimals: number;
    name?: string;
    symbol?: string;
};
type BasicCoin = {
    key: CoinKey;
    name: string;
    logoURI: string;
    verified: boolean;
    chains: {
        [key: number]: BasicToken;
    };
};
export declare const basicCoins: BasicCoin[];
export declare const defaultCoins: Array<Coin>;
export declare const wrappedTokens: {
    [ChainId: string]: StaticToken;
};
export declare const findDefaultCoin: (coinKey: CoinKey) => Coin;
export declare const findDefaultToken: (coinKey: CoinKey, chainId: ChainId) => StaticToken;
export declare const findWrappedGasOnChain: (chainId: ChainId) => StaticToken;
export declare const findTokenByChainIdAndAddress: (chainId: number, tokenAddress: string) => StaticToken | null;
export {};
//# sourceMappingURL=coins.d.ts.map