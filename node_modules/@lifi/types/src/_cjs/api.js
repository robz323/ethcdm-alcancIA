"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegratorFeeType = exports.isSubstatusFailed = exports.isSubstatusDone = exports.isSubstatusPending = exports.isContractCallsRequestWithToAmount = exports.isContractCallsRequestWithFromAmount = exports.TokenHistoricGranularity = exports._InsuranceState = exports.Orders = void 0;
exports.Orders = ['RECOMMENDED', 'FASTEST', 'CHEAPEST', 'SAFEST'];
exports._InsuranceState = [
    'INSURED',
    'INSURABLE',
    'NOT_INSURABLE',
];
var TokenHistoricGranularity;
(function (TokenHistoricGranularity) {
    TokenHistoricGranularity["THIRTY_MIN"] = "30min";
    TokenHistoricGranularity["HOUR"] = "hour";
    TokenHistoricGranularity["DAY"] = "day";
    TokenHistoricGranularity["OVER_DAY"] = ">day";
})(TokenHistoricGranularity || (exports.TokenHistoricGranularity = TokenHistoricGranularity = {}));
const isContractCallsRequestWithFromAmount = (r) => 'fromAmount' in r;
exports.isContractCallsRequestWithFromAmount = isContractCallsRequestWithFromAmount;
const isContractCallsRequestWithToAmount = (r) => 'toAmount' in r;
exports.isContractCallsRequestWithToAmount = isContractCallsRequestWithToAmount;
const _StatusMessage = [
    'NOT_FOUND',
    'INVALID',
    'PENDING',
    'DONE',
    'FAILED',
];
const _SubstatusPending = [
    'WAIT_SOURCE_CONFIRMATIONS',
    'WAIT_DESTINATION_TRANSACTION',
    'BRIDGE_NOT_AVAILABLE',
    'CHAIN_NOT_AVAILABLE',
    'REFUND_IN_PROGRESS',
    'UNKNOWN_ERROR',
];
const _SubstatusDone = [
    'COMPLETED',
    'PARTIAL',
    'REFUNDED',
];
const _SubstatusFailed = [
    'INSUFFICIENT_ALLOWANCE',
    'INSUFFICIENT_BALANCE',
    'OUT_OF_GAS',
    'EXPIRED',
    'SLIPPAGE_EXCEEDED',
    'UNKNOWN_FAILED_ERROR',
];
const isSubstatusPending = (substatus) => _SubstatusPending.includes(substatus);
exports.isSubstatusPending = isSubstatusPending;
const isSubstatusDone = (substatus) => _SubstatusDone.includes(substatus);
exports.isSubstatusDone = isSubstatusDone;
const isSubstatusFailed = (substatus) => _SubstatusFailed.includes(substatus);
exports.isSubstatusFailed = isSubstatusFailed;
const _LIFuelState = ['PENDING', 'DONE', 'NOT_FOUND'];
var IntegratorFeeType;
(function (IntegratorFeeType) {
    IntegratorFeeType["FIXED"] = "FIXED";
    IntegratorFeeType["SHARED"] = "SHARED";
})(IntegratorFeeType || (exports.IntegratorFeeType = IntegratorFeeType = {}));
//# sourceMappingURL=api.js.map