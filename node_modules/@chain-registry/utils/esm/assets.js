import { customFind } from './utils';
const getAssetByKeyValue = (assets, key, value, chainName) => {
    const filteredAssets = assets
        .filter(({ chain_name }) => !chainName || chain_name === chainName)
        .flatMap(({ assets }) => assets);
    return customFind(filteredAssets, (asset) => asset[key] === value, `key:${key} value:${value} chainName:${chainName}`);
};
export const getAssetByDenom = (assets, denom, chainName) => {
    const filteredAssets = assets
        .filter(({ chain_name }) => !chainName || chain_name === chainName)
        .flatMap(({ assets }) => assets);
    return customFind(filteredAssets, (asset) => {
        const found = asset.denom_units.find(unit => unit.denom === denom);
        return !!found;
    }, `denom:${denom} chainName:${chainName}`);
};
export const getAssetBySymbol = (assets, symbol, chainName) => {
    return getAssetByKeyValue(assets, 'symbol', symbol, chainName);
};
export const getDenomByCoinGeckoId = (assets, coinGeckoId, chainName) => {
    return getAssetByKeyValue(assets, 'coingecko_id', coinGeckoId, chainName)
        ?.base;
};
export const getDenomsByCoinGeckoId = (assets, coinGeckoId, chainName) => {
    const filteredAssets = assets
        .filter(({ chain_name }) => !chainName || chain_name === chainName)
        .flatMap(({ assets }) => assets);
    const denoms = filteredAssets
        .filter(a => a.coingecko_id === coinGeckoId)
        .map(a => a.base);
    return denoms;
};
export const getCoinGeckoIdByDenom = (assets, denom, { chainName, allowTestnet = false, customAssetFilter = () => true, excludedChainNames = [] } = {}) => {
    const filteredAssetLists = assets.filter(({ chain_name }) => {
        return ((!chainName || chain_name === chainName) &&
            (allowTestnet || !chain_name.includes('testnet')) &&
            !excludedChainNames.includes(chain_name));
    });
    const filteredAssets = filteredAssetLists
        .flatMap(({ assets }) => assets)
        .filter(({ coingecko_id }) => coingecko_id)
        .filter(customAssetFilter);
    const asset = filteredAssets.find(({ base }) => base === denom);
    return asset?.coingecko_id;
};
export const getSymbolByDenom = (assets, denom, chainName) => {
    return getAssetByDenom(assets, denom, chainName)?.symbol;
};
export const getDenomBySymbol = (assets, symbol, chainName) => {
    return getAssetByKeyValue(assets, 'symbol', symbol, chainName)?.base;
};
export const getExponentFromAsset = (asset) => {
    return asset.denom_units.find(({ denom }) => denom === asset.display)
        ?.exponent;
};
export const getExponentByDenomFromAsset = (asset, denom) => {
    return asset.denom_units.find((unit) => {
        return unit.denom === denom || unit?.aliases?.find(a => a === denom);
    })
        ?.exponent;
};
export const getExponentByDenom = (assets, denom, chainName) => {
    const asset = getAssetByDenom(assets, denom, chainName);
    return asset ? getExponentFromAsset(asset) : undefined;
};
export const getExponentBySymbol = (assets, symbol, chainName) => {
    const asset = getAssetBySymbol(assets, symbol, chainName);
    return asset ? getExponentFromAsset(asset) : undefined;
};
export const getNativeAssetByChainName = (assets, chainName) => {
    const assetList = customFind(assets, (assetList) => assetList.chain_name === chainName &&
        !assetList.assets[0].base.startsWith('ibc/'), `chainName:${chainName}`);
    return assetList?.assets[0];
};
export const getAssetLogoByDenom = (assets, denom, chainName) => {
    const asset = getAssetByDenom(assets, denom, chainName);
    return Object.values(asset?.logo_URIs || {})[0];
};
export const getChainLogo = (assets, chainName) => {
    const nativeAsset = getNativeAssetByChainName(assets, chainName);
    return Object.values(nativeAsset?.logo_URIs || {})[0];
};
export const getAssetNameByDenom = (assets, denom, chainName) => {
    const asset = getAssetByDenom(assets, denom, chainName);
    return asset?.name;
};
export const getChainNameByDenom = (assets, denom) => {
    const isIbcDenom = denom.startsWith('ibc/');
    if (isIbcDenom) {
        const asset = getAssetByDenom(assets, denom);
        return asset?.traces?.find((t) => t.type === 'ibc')?.counterparty
            ?.chain_name;
    }
    return customFind(assets, (assetList) => assetList.assets.some((asset) => asset.base === denom), `denom:${denom}`)?.chain_name;
};
export const getChainByStakingDenom = (chains, denom) => customFind(chains, (chain) => !!chain.staking?.staking_tokens.find((token) => token.denom === denom), `denom:${denom}`);
export const getChainNameByStakingDenom = (chains, denom) => getChainByStakingDenom(chains, denom)?.chain_name;
