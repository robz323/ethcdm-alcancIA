{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/search.ts","../src/extract.ts","../src/client.ts"],"sourcesContent":["export * from './client';","import axios, { AxiosResponse } from \"axios\";\nimport { encodingForModel, TiktokenModel } from \"js-tiktoken\";\n\nconst BASE_URL = \"https://api.tavily.com\";\nconst DEFAULT_MODEL_ENCODING = \"gpt-3.5-turbo\";\nexport const DEFAULT_MAX_TOKENS = 4000;\n\nexport async function post(\n  endpoint: string,\n  body: any\n): Promise<AxiosResponse> {\n  const url = `${BASE_URL}/${endpoint}`;\n  return axios.post(url, body);\n}\n\nfunction getTotalTokensFromString(\n  str: string,\n  encodingName: TiktokenModel = DEFAULT_MODEL_ENCODING\n) {\n  const encoding = encodingForModel(encodingName);\n  return encoding.encode(str).length;\n}\n\nexport function getMaxTokensFromList(\n  data: Array<any>,\n  maxTokens: number = DEFAULT_MAX_TOKENS\n): string {\n  var result = [];\n  let currentTokens = 0;\n  for (let item of data) {\n    let itemString = JSON.stringify(item);\n    let newTotalTokens = currentTokens + getTotalTokensFromString(itemString);\n    if (newTotalTokens > maxTokens) {\n      break;\n    }\n    result.push(item);\n    currentTokens = newTotalTokens;\n  }\n  return JSON.stringify(result);\n}\n","import { TavilySearchOptions, TavilySearchFuncton, TavilyQNASearchFuncton, TavilyContextSearchFuncton} from \"./types\";\nimport { post, DEFAULT_MAX_TOKENS, getMaxTokensFromList } from \"./utils\";\n\n\n\nexport function _search(apiKey: string): TavilySearchFuncton {\n  return async function search(\n    query: string,\n    options: TavilySearchOptions = {\n      searchDepth: \"basic\",\n      topic: \"general\",\n      days: 3,\n      maxResults: 5,\n      includeImages: false,\n      includeImageDescriptions: false,\n      includeAnswer: false,\n      includeRawContent: false,\n      includeDomains: undefined,\n      excludeDomains: undefined,\n      maxTokens: undefined\n    }\n  ) {\n    const response = await post(\"search\", {\n      api_key: apiKey,\n      query,\n      search_depth: options.searchDepth,\n      topic: options.topic,\n      days: options.days,\n      max_results: options.maxResults,\n      include_images: options.includeImages,\n      include_image_descriptions: options.includeImageDescriptions,\n      include_answer: options.includeAnswer,\n      include_raw_content: options.includeRawContent,\n      include_domains: options.includeDomains,\n      exclude_domains: options.excludeDomains,\n    });\n\n    return {\n      query,\n      responseTime: response.data.response_time,\n      images: response.data.images.map((image: any) => {\n        return {\n          url: image?.url || image,\n          description: image.description,\n        };\n      }),\n      results: response.data.results.map((result: any) => {\n        return {\n          title: result.title,\n          url: result.url,\n          content: result.content,\n          rawContent: result.raw_content,\n          score: result.score,\n          publishedDate: result.published_date,\n        };\n      }),\n      answer: response.data.answer,\n    };\n  };\n}\n\nexport function _searchQNA(apiKey: string):  TavilyQNASearchFuncton {\n  return async function searchQNA(\n    query: string,\n    options: TavilySearchOptions = {\n      searchDepth: \"advanced\",\n      topic: \"general\",\n      days: 3,\n      maxResults: 5,\n      includeImages: false,\n      includeImageDescriptions: false,\n      includeAnswer: false,\n      includeRawContent: false,\n      includeDomains: undefined,\n      excludeDomains: undefined,\n      maxTokens: undefined\n    }\n  ) {\n    const response = await post(\"search\", {\n      api_key: apiKey,\n      query,\n      search_depth: options.searchDepth,\n      topic: options.topic,\n      days: options.days,\n      max_results: options.maxResults,\n      include_images: false,\n      include_image_descriptions: false,\n      include_answer: true,\n      include_raw_content: false,\n      include_domains: options.includeDomains,\n      exclude_domains: options.excludeDomains,\n    });\n\n    const answer = response.data.answer;\n\n    return answer;\n  };\n}\n\nexport function _searchContext(apiKey: string): TavilyContextSearchFuncton {\n  return async function searchContext(\n    query: string,\n    options: TavilySearchOptions = {\n      searchDepth: \"basic\",\n      topic: \"general\",\n      days: 3,\n      maxResults: 5,\n      includeImages: false,\n      includeImageDescriptions: false,\n      includeAnswer: false,\n      includeRawContent: false,\n      includeDomains: undefined,\n      excludeDomains: undefined,\n      maxTokens: DEFAULT_MAX_TOKENS\n    }\n  ) {\n    const response = await post(\"search\", {\n      api_key: apiKey,\n      query,\n      search_depth: options.searchDepth,\n      topic: options.topic,\n      days: options.days,\n      max_results: options.maxResults,\n      include_images: false,\n      include_image_descriptions: false,\n      include_answer: false,\n      include_raw_content: false,\n      include_domains: options.includeDomains,\n      exclude_domains: options.excludeDomains,\n      max_tokens: options.maxTokens\n    });\n\n    const sources = response.data?.results || [];\n\n    const context = sources.map((source: any) => {\n      return {\n        url: source.url,\n        content: source.content\n      }\n    });\n\n    return JSON.stringify(getMaxTokensFromList(context, options.maxTokens));\n\n  };\n}","import { TavilyExtractFunction } from \"./types\";\nimport { post } from \"./utils\";\n\nexport function _extract(apiKey: string): TavilyExtractFunction {\n  return async function extract(urls: Array<string>) {\n    const response = await post(\"extract\", {\n      api_key: apiKey,\n      urls,\n    });\n\n    return {\n      responseTime: response.data.response_time,\n      results: response.data.results.map((result: any) => {\n        return {\n          url: result.url,\n          rawContent: result.raw_content,\n        };\n      }),\n      failedResults: response.data.failed_results.map((result: any) => {\n        return {\n          url: result.url,\n          error: result.error,\n        };\n      }),\n    };\n  };\n}\n","import { TavilyClientOptions, TavilyClient } from \"./types\";\nimport { _search, _searchQNA, _searchContext } from \"./search\";\nimport { _extract } from \"./extract\";\n\nexport function tavily(options?: TavilyClientOptions): TavilyClient {\n  const apiKey = options?.apiKey || process.env.TAVILY_API_KEY;\n  if (!apiKey) {\n    throw new Error(\"No API key provided\");\n  }\n\n  return {\n    search: _search(apiKey),\n    extract: _extract(apiKey),\n    searchQNA: _searchQNA(apiKey),\n    searchContext: _searchContext(apiKey)\n  };\n}\n"],"mappings":"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","names":["axios"]}