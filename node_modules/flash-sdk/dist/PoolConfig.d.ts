import { Address } from '@coral-xyz/anchor';
import { Cluster, PublicKey } from '@solana/web3.js';
import poolConfigs from './PoolConfig.json';
import { Side } from './types';
export interface CustodyConfig {
    custodyId: number;
    custodyAccount: PublicKey;
    tokenAccount: PublicKey;
    symbol: string;
    mintKey: PublicKey;
    decimals: number;
    usdPrecision: number;
    tokenPrecision: number;
    isStable: boolean;
    isVirtual: boolean;
    intOracleAccount: PublicKey;
    extOracleAccount: PublicKey;
    pythTicker: string;
    pythPriceId: string;
}
export interface MarketConfig {
    marketId: number;
    marketAccount: PublicKey;
    marketCorrelation: boolean;
    pool: PublicKey;
    targetCustody: PublicKey;
    collateralCustody: PublicKey;
    side: Side;
    maxLev: number;
    targetCustodyId: number;
    collateralCustodyId: number;
    targetMint: PublicKey;
    collateralMint: PublicKey;
}
export type Token = {
    symbol: string;
    mintKey: PublicKey;
    decimals: number;
    usdPrecision: number;
    tokenPrecision: number;
    isStable: boolean;
    isVirtual: boolean;
    pythTicker: string;
    pythPriceId: string;
};
export declare class PoolConfig {
    programId: PublicKey;
    perpComposibilityProgramId: PublicKey;
    fbNftRewardProgramId: PublicKey;
    cluster: Cluster;
    poolName: string;
    poolAddress: PublicKey;
    stakedLpTokenMint: PublicKey;
    compoundingTokenMint: PublicKey;
    stakedLpVault: PublicKey;
    compoundingLpVault: PublicKey;
    lpDecimals: number;
    compoundingLpTokenSymbol: string;
    stakedLpTokenSymbol: string;
    perpetuals: PublicKey;
    transferAuthority: PublicKey;
    tokenMint: PublicKey;
    tokenVault: PublicKey;
    tokenVaultTokenAccount: PublicKey;
    multisig: PublicKey;
    addressLookupTableAddresses: PublicKey[];
    backupOracle: PublicKey;
    nftCollectionAddress: PublicKey;
    rewardDistributionProgram: {
        programId: PublicKey;
        transferAuthority: PublicKey;
        rewardVault: PublicKey;
        rewardMint: PublicKey;
        rewardTokenAccount: PublicKey;
    };
    tokens: Token[];
    custodies: CustodyConfig[];
    markets: MarketConfig[];
    constructor(programId: PublicKey, perpComposibilityProgramId: PublicKey, fbNftRewardProgramId: PublicKey, cluster: Cluster, poolName: string, poolAddress: PublicKey, stakedLpTokenMint: PublicKey, compoundingTokenMint: PublicKey, stakedLpVault: PublicKey, compoundingLpVault: PublicKey, lpDecimals: number, compoundingLpTokenSymbol: string, stakedLpTokenSymbol: string, perpetuals: PublicKey, transferAuthority: PublicKey, tokenMint: PublicKey, tokenVault: PublicKey, tokenVaultTokenAccount: PublicKey, multisig: PublicKey, addressLookupTableAddresses: PublicKey[], backupOracle: PublicKey, nftCollectionAddress: PublicKey, rewardDistributionProgram: {
        programId: PublicKey;
        transferAuthority: PublicKey;
        rewardVault: PublicKey;
        rewardMint: PublicKey;
        rewardTokenAccount: PublicKey;
    }, tokens: Token[], custodies: CustodyConfig[], markets: MarketConfig[]);
    getAllTokenMints(): PublicKey[];
    getMarketConfigByPk(marketAccountPk: PublicKey): MarketConfig;
    getMarketConfig(targetCustody: PublicKey, collateralCustody: PublicKey, side: Side): MarketConfig | null;
    getMarketPk(targetCustody: PublicKey, collateralCustody: PublicKey, side: Side): PublicKey;
    getPositionFromMarketPk(owner: PublicKey, marketAccount: PublicKey): PublicKey;
    getOrderFromMarketPk(owner: PublicKey, marketAccount: PublicKey): PublicKey;
    getPositionFromCustodyPk(owner: PublicKey, targetCustody: PublicKey, collateralCustody: PublicKey, side: Side): PublicKey;
    doesMarketExist(pubkey: PublicKey): boolean;
    getAllMarketPks(): PublicKey[];
    getNonStableTokens(): PublicKey[];
    getAllCustodies(): PublicKey[];
    getNonStableCustodies(): PublicKey[];
    getTokenFromSymbol: (symbol: string) => Token;
    getTokenFromMintString: (mint: string) => Token;
    getTokenFromMintPk: (mint: PublicKey) => Token;
    static getCustodyConfig(custodyAccountPk: Address, poolName: string, cluster: Cluster): CustodyConfig;
    getCustodyIdFromCustodyAccount(custodyAccountPk: Address): number;
    getCustodyAccountFromCustodyId(custodyId: number): PublicKey;
    static getTokensInPool(name: string, cluster: Cluster): Token[];
    static buildPoolconfigFromJson(poolConfig: typeof poolConfigs['pools'][0]): PoolConfig;
    static fromIdsByName(name: string, cluster: Cluster): PoolConfig;
    static fromIdsByPk(poolPk: PublicKey, cluster: Cluster): PoolConfig;
}
