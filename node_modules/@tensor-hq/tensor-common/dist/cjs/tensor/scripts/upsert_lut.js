"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** USAGE:
 *
 * KEYPAIR_FILE=<path to kp> LUT_MODE=(create|upsert) CLUSTER=(mainnet-beta|devnet) yarn ts-node --skipProject <script>
 *
 * */
const web3_js_1 = require("@solana/web3.js");
const fs_1 = require("fs");
const solana_contrib_1 = require("../../solana_contrib");
const lut_1 = require("../lut");
const constants_1 = require("../constants");
(async () => {
    // lut authority and payer
    const kpFile = process.env.KEYPAIR_FILE;
    const lutMode = process.env.LUT_MODE;
    const cluster = process.env.CLUSTER; // LUT varies between mainnet and devnet
    if (!kpFile)
        throw new Error('KEYPAIR_FILE env var not set');
    if (!lutMode)
        throw new Error('LUT_MODE env var not set');
    if (!cluster)
        throw new Error('CLUSTER env var not set');
    if (cluster !== 'devnet' && cluster !== 'mainnet-beta')
        throw new Error('CLUSTER env var invalid');
    const lookupTableAddress = cluster === 'mainnet-beta' ? constants_1.TENSOR_LUT_ADDR : constants_1.TENSOR_LUT_DEVNET_ADDR;
    const conn = new web3_js_1.Connection((0, web3_js_1.clusterApiUrl)(cluster), 'confirmed');
    const payer = web3_js_1.Keypair.fromSecretKey(Buffer.from(JSON.parse((0, fs_1.readFileSync)(kpFile).toString())));
    if (lutMode === 'create') {
        await (0, solana_contrib_1.createLUT)({
            payer,
            conn,
            addresses: lut_1.TENSOR_LUT_STORED_ADDRS,
        });
    }
    else if (lutMode === 'upsert') {
        console.log(`upserting LUT ${lookupTableAddress.toBase58()}`);
        await (0, solana_contrib_1.upsertLUT)({
            payer,
            conn,
            lookupTableAddress,
            addresses: lut_1.TENSOR_LUT_STORED_ADDRS,
        });
    }
    else {
        throw new Error(`invalid LUT_MODE: ${lutMode}`);
    }
})();
//# sourceMappingURL=upsert_lut.js.map