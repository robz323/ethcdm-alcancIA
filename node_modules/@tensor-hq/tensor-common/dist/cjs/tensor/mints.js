"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMintsSortFn = exports.getSortSign = exports.getMintRank = void 0;
const big_js_1 = __importDefault(require("big.js"));
const math_1 = require("../math");
const traits_1 = require("./traits");
const types_1 = require("./types");
const getMintRank = (sortBy, ranks) => {
    switch (sortBy) {
        case types_1.MintsSortBy.RankHrttAsc:
        case types_1.MintsSortBy.RankHrttDesc:
            return (0, traits_1.getRarityRank)(types_1.RaritySystem.Hrtt, ranks);
        case types_1.MintsSortBy.RankStatAsc:
        case types_1.MintsSortBy.RankStatDesc:
            return (0, traits_1.getRarityRank)(types_1.RaritySystem.Stat, ranks);
        case types_1.MintsSortBy.RankTeamAsc:
        case types_1.MintsSortBy.RankTeamDesc:
            return (0, traits_1.getRarityRank)(types_1.RaritySystem.Team, ranks);
        case types_1.MintsSortBy.RankTnAsc:
        case types_1.MintsSortBy.RankTnDesc:
            return (0, traits_1.getRarityRank)(types_1.RaritySystem.Tn, ranks);
    }
};
exports.getMintRank = getMintRank;
const getSortSign = (sortBy) => {
    switch (sortBy) {
        case types_1.MintsSortBy.PriceAsc:
        case types_1.MintsSortBy.LastSaleAsc:
        case types_1.MintsSortBy.RankHrttAsc:
        case types_1.MintsSortBy.RankStatAsc:
        case types_1.MintsSortBy.RankTeamAsc:
        case types_1.MintsSortBy.RankTnAsc:
        case types_1.MintsSortBy.OrdinalAsc:
        case types_1.MintsSortBy.NormalizedPriceAsc:
        case types_1.MintsSortBy.HybridAmountAsc:
            return 1;
        case types_1.MintsSortBy.PriceDesc:
        case types_1.MintsSortBy.LastSaleDesc:
        case types_1.MintsSortBy.ListedDesc:
        case types_1.MintsSortBy.RankHrttDesc:
        case types_1.MintsSortBy.RankStatDesc:
        case types_1.MintsSortBy.RankTeamDesc:
        case types_1.MintsSortBy.RankTnDesc:
        case types_1.MintsSortBy.OrdinalDesc:
        case types_1.MintsSortBy.NormalizedPriceDesc:
        case types_1.MintsSortBy.HybridAmountDesc:
            return -1;
    }
};
exports.getSortSign = getSortSign;
const makeMintsSortFn = (sortBy) => {
    const sign = (0, exports.getSortSign)(sortBy);
    //(!) sync with the front-end
    // nulls always come last after the sort.
    const nullsFirst = sign === -1;
    return (a, b) => {
        switch (sortBy) {
            case types_1.MintsSortBy.PriceAsc:
            case types_1.MintsSortBy.PriceDesc:
                return (sign *
                    (0, math_1.sortNumberOrBig)(a.grossAmount ? new big_js_1.default(a.grossAmount) : null, b.grossAmount ? new big_js_1.default(b.grossAmount) : null, nullsFirst));
            case types_1.MintsSortBy.LastSaleAsc:
            case types_1.MintsSortBy.LastSaleDesc:
                return (sign *
                    (0, math_1.sortNumberOrBig)(a.lastSale ? new big_js_1.default(a.lastSale) : null, b.lastSale ? new big_js_1.default(b.lastSale) : null, nullsFirst));
            case types_1.MintsSortBy.ListedDesc:
                return sign * (a.txAt - b.txAt);
            case types_1.MintsSortBy.OrdinalAsc:
            case types_1.MintsSortBy.OrdinalDesc:
                return (sign *
                    (0, math_1.sortBigInt)(a.ordinal ? BigInt(a.ordinal) : null, b.ordinal ? BigInt(b.ordinal) : null, nullsFirst));
            case types_1.MintsSortBy.NormalizedPriceAsc:
            case types_1.MintsSortBy.NormalizedPriceDesc:
                return (sign *
                    (0, math_1.sortNumberOrBig)(a.normalizedPrice ? new big_js_1.default(a.normalizedPrice) : null, b.normalizedPrice ? new big_js_1.default(b.normalizedPrice) : null, nullsFirst));
            case types_1.MintsSortBy.HybridAmountAsc:
            case types_1.MintsSortBy.HybridAmountDesc:
                return (sign *
                    (0, math_1.sortNumberOrBig)(a.hybridAmount ? new big_js_1.default(a.hybridAmount) : null, b.hybridAmount ? new big_js_1.default(b.hybridAmount) : null, nullsFirst));
            // NB: need default in case divergence b/w FE & BE.
            default:
                return (sign *
                    (0, math_1.sortNumberOrBig)((0, exports.getMintRank)(sortBy, a.ranks), (0, exports.getMintRank)(sortBy, b.ranks), nullsFirst));
        }
    };
};
exports.makeMintsSortFn = makeMintsSortFn;
//# sourceMappingURL=mints.js.map