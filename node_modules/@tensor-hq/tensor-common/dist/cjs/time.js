"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateYYYYMMDD = exports.calcNumDays = exports.addTime = exports.truncateTime = exports.waitMS = exports.sleep = exports.YEARS = exports.DAYS = exports.HOURS = exports.MINUTES = exports.SECONDS = void 0;
exports.SECONDS = 1000;
exports.MINUTES = 60 * exports.SECONDS;
exports.HOURS = 60 * exports.MINUTES;
exports.DAYS = 24 * exports.HOURS;
exports.YEARS = 365.25 * exports.DAYS;
const totalMS = (time) => {
    const millis = time.Millis || 0;
    const seconds = time.Seconds || 0;
    const minutes = time.Minutes || 0;
    const hours = time.Hours || 0;
    const days = time.Days || 0;
    return (millis + exports.SECONDS * seconds + exports.MINUTES * minutes + exports.HOURS * hours + exports.DAYS * days);
};
const sleep = (time) => {
    return new Promise((resolve) => setTimeout(resolve, totalMS(time)));
};
exports.sleep = sleep;
const waitMS = async (ms) => (0, exports.sleep)({ Millis: ms });
exports.waitMS = waitMS;
const truncateTime = (date) => {
    const timePortion = date.getTime() % exports.DAYS;
    return new Date(date.getTime() - timePortion);
};
exports.truncateTime = truncateTime;
const addTime = (date, time) => {
    return new Date(new Date(date).getTime() + totalMS(time));
};
exports.addTime = addTime;
const calcNumDays = (start, end) => {
    const difference = new Date(start).getTime() - new Date(end).getTime();
    return Math.ceil(difference / (1000 * 3600 * 24));
};
exports.calcNumDays = calcNumDays;
const dateYYYYMMDD = (date) => {
    return `${date.getFullYear()}${('0' + (date.getMonth() + 1)).slice(-2)}${('0' + date.getDate()).slice(-2)}`;
};
exports.dateYYYYMMDD = dateYYYYMMDD;
//# sourceMappingURL=time.js.map