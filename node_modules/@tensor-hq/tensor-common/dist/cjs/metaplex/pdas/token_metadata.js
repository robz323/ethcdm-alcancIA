"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findProgramAsBurnerPda = exports.findUseAuthorityRecordPda = exports.findCollectionAuthorityRecordPda = exports.findEditionMarkerPda = exports.findEditionPda = exports.findMasterEditionPda = exports.findMetadataPda = exports.TMETA_PROGRAM_ID = exports.TokenStandard = void 0;
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
var mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
Object.defineProperty(exports, "TokenStandard", { enumerable: true, get: function () { return mpl_token_metadata_1.TokenStandard; } });
exports.TMETA_PROGRAM_ID = new web3_js_1.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
const findMetadataPda = (mint, programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer()], programId);
};
exports.findMetadataPda = findMetadataPda;
const findMasterEditionPda = (mint, programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
        Buffer.from('edition', 'utf8'),
    ], programId);
};
exports.findMasterEditionPda = findMasterEditionPda;
const findEditionPda = (mint, programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
        Buffer.from('edition', 'utf8'),
    ], programId);
};
exports.findEditionPda = findEditionPda;
const findEditionMarkerPda = (mint, edition, programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
        Buffer.from('edition', 'utf8'),
        Buffer.from(edition.div(new bn_js_1.default(248)).toString()),
    ], programId);
};
exports.findEditionMarkerPda = findEditionMarkerPda;
const findCollectionAuthorityRecordPda = (mint, collectionAuthority, programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
        Buffer.from('collection_authority', 'utf8'),
        collectionAuthority.toBuffer(),
    ], programId);
};
exports.findCollectionAuthorityRecordPda = findCollectionAuthorityRecordPda;
const findUseAuthorityRecordPda = (mint, useAuthority, programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
        Buffer.from('user', 'utf8'),
        useAuthority.toBuffer(),
    ], programId);
};
exports.findUseAuthorityRecordPda = findUseAuthorityRecordPda;
const findProgramAsBurnerPda = (programId = exports.TMETA_PROGRAM_ID) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        Buffer.from('burn', 'utf8'),
    ], programId);
};
exports.findProgramAsBurnerPda = findProgramAsBurnerPda;
//# sourceMappingURL=token_metadata.js.map