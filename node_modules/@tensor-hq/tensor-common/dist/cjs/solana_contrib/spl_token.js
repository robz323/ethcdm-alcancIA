"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNftTokenAcc = exports.getOrCreateAtaForMint = exports.findAta = void 0;
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const findAta = (mint, owner) => {
    return (0, spl_token_1.getAssociatedTokenAddressSync)(mint, owner, true);
};
exports.findAta = findAta;
const getOrCreateAtaForMint = async ({ connection, mint, owner, }) => {
    const instructions = [];
    const tokenAccount = (0, exports.findAta)(mint, owner);
    const accInfo = await connection.getAccountInfo(tokenAccount);
    //create if missing
    if (!accInfo) {
        instructions.push((0, spl_token_1.createAssociatedTokenAccountInstruction)(owner, tokenAccount, owner, mint));
    }
    return {
        tokenAccount,
        instructions,
    };
};
exports.getOrCreateAtaForMint = getOrCreateAtaForMint;
// Returns the token account currently holding the NFT.
const getNftTokenAcc = async (conn, mint) => {
    const nftTokenAcc = (await conn.getTokenLargestAccounts(mint)).value.find((acc) => acc.uiAmount === 1);
    if (!nftTokenAcc)
        return null;
    return new web3_js_1.PublicKey(nftTokenAcc.address);
};
exports.getNftTokenAcc = getNftTokenAcc;
//# sourceMappingURL=spl_token.js.map