"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMEListingPda = exports.generateMEBidPda = exports.generateMEDepositPda = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const shared_1 = require("./shared");
const generateMEDepositPda = (owner) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('m2'),
        new web3_js_1.PublicKey(shared_1.ME_AH_ADDRESS).toBytes(),
        new web3_js_1.PublicKey(owner).toBytes(),
    ], new web3_js_1.PublicKey(shared_1.ME_PROGRAM));
};
exports.generateMEDepositPda = generateMEDepositPda;
const generateMEBidPda = (owner, mint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('m2'),
        new web3_js_1.PublicKey(owner).toBytes(),
        new web3_js_1.PublicKey(shared_1.ME_AH_ADDRESS).toBytes(),
        new web3_js_1.PublicKey(mint).toBytes(),
    ], new web3_js_1.PublicKey(shared_1.ME_PROGRAM));
};
exports.generateMEBidPda = generateMEBidPda;
const generateMEListingPda = (owner, mint, tokenAcc) => {
    tokenAcc ??= (0, spl_token_1.getAssociatedTokenAddressSync)(new web3_js_1.PublicKey(mint), new web3_js_1.PublicKey(owner)).toBase58();
    return web3_js_1.PublicKey.findProgramAddressSync([
        Buffer.from('m2'),
        new web3_js_1.PublicKey(owner).toBytes(),
        new web3_js_1.PublicKey(shared_1.ME_AH_ADDRESS).toBytes(),
        new web3_js_1.PublicKey(tokenAcc).toBytes(),
        new web3_js_1.PublicKey(mint).toBytes(),
    ], new web3_js_1.PublicKey(shared_1.ME_PROGRAM));
};
exports.generateMEListingPda = generateMEListingPda;
//# sourceMappingURL=pdas.js.map