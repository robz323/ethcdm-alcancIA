"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMECancelBidTx = void 0;
const shared_1 = require("./shared");
const web3_js_1 = require("@solana/web3.js");
const axios_1 = __importDefault(require("axios"));
const makeMECancelBidTx = async ({ tokenMint, buyer, priceLamports, apiKey, }) => {
    const price = priceLamports.div(web3_js_1.LAMPORTS_PER_SOL).toNumber();
    let buyerReferral = undefined;
    let offset = 0;
    while (true) {
        const { data } = await axios_1.default.get(`${shared_1.ME_URL}/v2/wallets/${buyer}/offers_made?offset=${offset}&limit=500`);
        if (data.length === 0)
            break;
        offset += data.length;
        const temp = data.find((b) => b.tokenMint === tokenMint);
        if (temp?.buyerReferral) {
            buyerReferral = temp.buyerReferral;
            break;
        }
    }
    const { data } = await axios_1.default.get(`${shared_1.ME_URL}/v2/instructions/buy_cancel`, {
        params: {
            buyer,
            auctionHouseAddress: shared_1.ME_AH_ADDRESS,
            tokenMint,
            price,
            buyerReferral,
            sellerExpiry: '-1',
        },
        headers: (0, shared_1.makeMEHeaders)(apiKey),
    });
    return data.txSigned.data;
};
exports.makeMECancelBidTx = makeMECancelBidTx;
//# sourceMappingURL=cancel_bid.js.map