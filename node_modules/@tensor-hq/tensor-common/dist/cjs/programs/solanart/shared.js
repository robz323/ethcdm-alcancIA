"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findBadgerPda = exports.findRoyaltiesPda = exports.findDataEscrowPda = exports.SOLANART_ESCROW_OWNER_ACCT = exports.SOLANART_FEE_ACCT = exports.BADGER_PROGRAM_ID = exports.SOLANART_PROGRAM_ID = void 0;
const web3_js_1 = require("@solana/web3.js");
exports.SOLANART_PROGRAM_ID = new web3_js_1.PublicKey('CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz');
exports.BADGER_PROGRAM_ID = new web3_js_1.PublicKey('7gDpaG9kUXHTz1dj4eVfykqtXnKq2efyuGigdMeCy74B');
exports.SOLANART_FEE_ACCT = new web3_js_1.PublicKey('FoN96i4kNNA4oyPRk8vsG3Py4VEZXEm6nbk4Tff96Mhy');
exports.SOLANART_ESCROW_OWNER_ACCT = new web3_js_1.PublicKey('3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK');
const findDataEscrowPda = (mint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('sale'), mint.toBuffer()], exports.SOLANART_PROGRAM_ID);
};
exports.findDataEscrowPda = findDataEscrowPda;
const findRoyaltiesPda = (mint, seller) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('fees'), mint.toBuffer(), seller.toBuffer()], exports.SOLANART_PROGRAM_ID);
};
exports.findRoyaltiesPda = findRoyaltiesPda;
const findBadgerPda = (seller) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('nft'), seller.toBuffer()], exports.BADGER_PROGRAM_ID);
};
exports.findBadgerPda = findBadgerPda;
//# sourceMappingURL=shared.js.map