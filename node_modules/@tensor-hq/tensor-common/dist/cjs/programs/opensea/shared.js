"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestOSFulfillmentTx = exports.requestOSOfferOrListingTx = exports.listOSActiveOrdersOrListings = void 0;
const axios_1 = __importDefault(require("axios"));
const OS_ASSET_CONTRACT_ADDRESS = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
const OS_BASE_PATH = 'https://api.opensea.io';
// While an order (bid) or listing may appear active on AH,
// OpenSea actually has some off-chain state to determine if you can actually
// cross the bid/listing (since they require co-signing).
// Use this to determine if the bid/listing is actually valid for OS.
const listOSActiveOrdersOrListings = async (type, { tokenMint, apiKey, maker, listedAfter: listed_after, listedBefore: listed_before, orderBy: order_by, orderDir: order_direction, }) => {
    const { data } = await axios_1.default.get(`${OS_BASE_PATH}/api/v2/orders/solana/auction-house/${type}`, {
        headers: {
            'content-type': 'application/x-www-form-urlencoded',
            ...(apiKey === undefined ? {} : { 'x-api-key': apiKey }),
        },
        params: {
            asset_contract_address: OS_ASSET_CONTRACT_ADDRESS,
            token_ids: tokenMint,
            maker,
            listed_after,
            listed_before,
            order_by,
            order_direction,
        },
    });
    // NB: data also has previous/next cursors... which may be of use later.
    return data.orders;
};
exports.listOSActiveOrdersOrListings = listOSActiveOrdersOrListings;
const requestOSOfferOrListingTx = async (type, { tokenMint, maker, priceLamports, apiKey, }) => {
    console.debug(`Requesting OS ${type} tx...`);
    const { data } = await axios_1.default.post(`${OS_BASE_PATH}/api/v2/nfts/solana/${tokenMint}/${type}-action`, {
        data: {
            maker_address: maker,
            price_lamports: priceLamports.toNumber(),
            order_type: 'basic',
        },
        headers: {
            'x-api-key': apiKey,
            'content-type': 'application/json',
        },
    });
    return data;
};
exports.requestOSOfferOrListingTx = requestOSOfferOrListingTx;
// This is for accepting a bid(?).
const requestOSFulfillmentTx = async ({ relayId, taker, apiKey, }) => {
    console.debug('Requesting OS fulfillment tx...');
    const { data } = await axios_1.default.post(`${OS_BASE_PATH}/api/v2/orders/${relayId}/fulfillment-action`, {
        data: {
            taker_address: taker,
            taker_fill_amount: 1,
        },
        headers: {
            'x-api-key': apiKey,
            'content-type': 'application/json',
        },
    });
    return data;
};
exports.requestOSFulfillmentTx = requestOSFulfillmentTx;
//# sourceMappingURL=shared.js.map