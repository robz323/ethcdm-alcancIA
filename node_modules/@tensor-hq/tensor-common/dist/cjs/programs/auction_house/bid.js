"use strict";
/*
place bid (for now native only)
https://solscan.io/tx/4XbkMExfhhbgRizdiQB9zS3N6sDfwkvfEuPjwRTcX3VnmBGWiDeFejtB2isiDC9H8dYriwEV1TrYkSDDwiGH6DD
deposit + buy + transfer
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAHBidTx = void 0;
const mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const metaplex_1 = require("../../metaplex");
const solana_contrib_1 = require("../../solana_contrib");
const shared_1 = require("./shared");
const makeAHBidTx = async (connections, tokenMint, bidder, auctionHouse, priceLamports, totalDepositLamports, tokenSize = 1) => {
    const connection = connections[0];
    const instructions = [];
    const additionalSigners = [];
    const auctionHouseKey = new web3_js_1.PublicKey(auctionHouse);
    const mintKey = new web3_js_1.PublicKey(tokenMint);
    const bidderKey = new web3_js_1.PublicKey(bidder);
    const auctionHouseObj = await mpl_auction_house_1.AuctionHouse.fromAccountAddress(connection, auctionHouseKey);
    const tokenSizeAdjusted = new bn_js_1.default(await (0, shared_1.getQuantityWithMantissa)(connection, tokenSize, mintKey));
    //this is supposed to be the account holding the NFT
    const largestTokenHolders = await connection.getTokenLargestAccounts(mintKey);
    const tokenAccountKey = largestTokenHolders.value[0].address;
    const [tradeState, tradeStateBump] = (0, metaplex_1.findAuctionHouseTradeStatePda)(auctionHouseKey, bidderKey, auctionHouseObj.treasuryMint, mintKey, priceLamports, tokenSizeAdjusted, tokenAccountKey);
    const [escrowPaymentAccount, escrowPaymentAccountBump] = (0, metaplex_1.findAuctionHouseBuyerEscrowPda)(auctionHouseKey, bidderKey);
    const buyIx = (0, mpl_auction_house_1.createBuyInstruction)({
        auctionHouse: auctionHouseKey,
        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
        authority: auctionHouseObj.authority,
        buyerTradeState: tradeState,
        escrowPaymentAccount,
        metadata: (0, metaplex_1.findMetadataPda)(mintKey)[0],
        paymentAccount: bidderKey,
        tokenAccount: tokenAccountKey,
        transferAuthority: web3_js_1.SystemProgram.programId,
        treasuryMint: auctionHouseObj.treasuryMint,
        wallet: bidderKey,
    }, {
        buyerPrice: priceLamports,
        escrowPaymentBump: escrowPaymentAccountBump,
        tokenSize: tokenSizeAdjusted,
        tradeStateBump: tradeStateBump,
    });
    //(!) optional deposit ix:
    //  - if not included, AH is smart enough to top up the account with minimum required during buyIx
    //  - if included in the SAME tx, the buyIx will deposit that much less (0 if min fully covered)
    if (totalDepositLamports) {
        const depositIx = (0, mpl_auction_house_1.createDepositInstruction)({
            auctionHouse: auctionHouseKey,
            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
            authority: auctionHouseObj.authority,
            escrowPaymentAccount,
            paymentAccount: bidderKey,
            transferAuthority: auctionHouseObj.authority,
            treasuryMint: auctionHouseObj.treasuryMint,
            wallet: bidderKey,
        }, {
            amount: totalDepositLamports,
            escrowPaymentBump: escrowPaymentAccountBump,
        });
        instructions.push(depositIx);
    }
    instructions.push(buyIx);
    return (0, solana_contrib_1.buildTx)({
        maybeBlockhash: {
            type: 'blockhashArgs',
            args: {
                connections,
            },
        },
        instructions,
        additionalSigners,
        feePayer: bidderKey,
    });
};
exports.makeAHBidTx = makeAHBidTx;
//# sourceMappingURL=bid.js.map