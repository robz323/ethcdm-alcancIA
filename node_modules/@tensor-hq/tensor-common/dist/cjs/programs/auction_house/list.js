"use strict";
/*
list
https://solscan.io/tx/4Cb7HJNiu2csheApMfjx21A2WPHqQF3Qx2aDEvkYoz8W9HGWkbeENhxUD1uavhNpm8nCtuFZbhEsKxqJARzzWYVc
sell + transfer
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAHListTx = void 0;
const web3_js_1 = require("@solana/web3.js");
const shared_1 = require("./shared");
const bn_js_1 = __importDefault(require("bn.js"));
const mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
const spl_token_1 = require("@solana/spl-token");
const solana_contrib_1 = require("../../solana_contrib");
const metaplex_1 = require("../../metaplex");
const makeAHListTx = async (connections, tokenMint, tokenOwner, auctionHouse, priceLamports, tokenSize = 1) => {
    const connection = connections[0];
    const instructions = [];
    const additionalSigners = [];
    const auctionHouseKey = new web3_js_1.PublicKey(auctionHouse);
    const mintKey = new web3_js_1.PublicKey(tokenMint);
    const ownerKey = new web3_js_1.PublicKey(tokenOwner);
    const auctionHouseObj = await mpl_auction_house_1.AuctionHouse.fromAccountAddress(connection, auctionHouseKey);
    const tokenSizeAdjusted = new bn_js_1.default(await (0, shared_1.getQuantityWithMantissa)(connection, tokenSize, mintKey));
    const tokenAccountKey = await (0, spl_token_1.getAssociatedTokenAddress)(mintKey, ownerKey);
    const [programAsSigner, programAsSignerBump] = (0, metaplex_1.findAuctionHouseProgramAsSignerPda)();
    const [tradeState, tradeStateBump] = (0, metaplex_1.findAuctionHouseTradeStatePda)(auctionHouseKey, ownerKey, auctionHouseObj.treasuryMint, mintKey, priceLamports, tokenSizeAdjusted, tokenAccountKey);
    const [freeTradeState, freeTradeStateBump] = (0, metaplex_1.findAuctionHouseTradeStatePda)(auctionHouseKey, ownerKey, auctionHouseObj.treasuryMint, mintKey, new bn_js_1.default(0), tokenSizeAdjusted, tokenAccountKey);
    const sellIx = (0, mpl_auction_house_1.createSellInstruction)({
        wallet: ownerKey,
        authority: auctionHouseObj.authority,
        auctionHouse: auctionHouseKey,
        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
        freeSellerTradeState: freeTradeState,
        metadata: (0, metaplex_1.findMetadataPda)(mintKey)[0],
        programAsSigner,
        sellerTradeState: tradeState,
        tokenAccount: tokenAccountKey,
    }, {
        buyerPrice: priceLamports,
        freeTradeStateBump,
        programAsSignerBump,
        tokenSize: tokenSizeAdjusted,
        tradeStateBump,
    });
    instructions.push(sellIx);
    return (0, solana_contrib_1.buildTx)({
        maybeBlockhash: {
            type: 'blockhashArgs',
            args: {
                connections,
            },
        },
        instructions,
        additionalSigners,
        feePayer: ownerKey,
    });
};
exports.makeAHListTx = makeAHListTx;
//# sourceMappingURL=list.js.map