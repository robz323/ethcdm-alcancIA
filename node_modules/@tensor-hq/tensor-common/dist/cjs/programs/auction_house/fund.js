"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAHDepositWithdrawTx = void 0;
const mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
const web3_js_1 = require("@solana/web3.js");
const metaplex_1 = require("../../metaplex");
const solana_contrib_1 = require("../../solana_contrib");
const makeAHDepositWithdrawTx = async (connections, action, auctionHouse, owner, amountLamports) => {
    const connection = connections[0];
    const instructions = [];
    const additionalSigners = [];
    const auctionHouseKey = new web3_js_1.PublicKey(auctionHouse);
    const ownerKey = new web3_js_1.PublicKey(owner);
    const auctionHouseObj = await mpl_auction_house_1.AuctionHouse.fromAccountAddress(connection, auctionHouseKey);
    const [escrowPaymentAccount, escrowPaymentBump] = (0, metaplex_1.findAuctionHouseBuyerEscrowPda)(auctionHouseKey, ownerKey);
    const ix = action === 'deposit'
        ? (0, mpl_auction_house_1.createDepositInstruction)({
            auctionHouse: auctionHouseKey,
            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
            authority: auctionHouseObj.authority,
            escrowPaymentAccount,
            paymentAccount: ownerKey,
            transferAuthority: auctionHouseObj.authority,
            treasuryMint: auctionHouseObj.treasuryMint,
            wallet: ownerKey,
        }, {
            amount: amountLamports,
            escrowPaymentBump,
        })
        : (0, mpl_auction_house_1.createWithdrawInstruction)({
            auctionHouse: auctionHouseKey,
            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
            authority: auctionHouseObj.authority,
            escrowPaymentAccount,
            receiptAccount: ownerKey,
            treasuryMint: auctionHouseObj.treasuryMint,
            wallet: ownerKey,
        }, {
            amount: amountLamports,
            escrowPaymentBump,
        });
    instructions.push(ix);
    return (0, solana_contrib_1.buildTx)({
        maybeBlockhash: {
            type: 'blockhashArgs',
            args: {
                connections,
            },
        },
        instructions,
        additionalSigners,
        feePayer: ownerKey,
    });
};
exports.makeAHDepositWithdrawTx = makeAHDepositWithdrawTx;
//# sourceMappingURL=fund.js.map