"use strict";
/*
Used for both:

delist
https://solscan.io/tx/3NNtERYmz8hWpFRZjiVPk7KBDpesLkmDxJSkNZNFUiAszyrTyUfy5HpySe3SQkBBWu6M8fZM3LpYVBTkLK9ma2P6
cancel + withdraw from fee + transfer

cancel bid
https://solscan.io/tx/5PCiWTkZqWHjcAoabsVzr8erM79uSwKMcJE671yiWYNFHd3aEeXr728dLZi7R2j7WJ3MzcQrSzESDEc6eHCLMfzL
cancel + withdraw from fee + transfer

the code basically checks if owner of token === wallet, if so it calls revoke, else simply closes trade state
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAHCancelBidTx = void 0;
const mpl_auction_house_1 = require("@metaplex-foundation/mpl-auction-house");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const metaplex_1 = require("../../metaplex");
const solana_contrib_1 = require("../../solana_contrib");
const shared_1 = require("./shared");
const makeAHCancelBidTx = async (connections, tokenMint, walletOwner, //either nft owner (for delisting) or bidder (for bid cancellation)
auctionHouse, priceLamports, totalWithdrawLamports, cancelBid = false, tokenSize = 1) => {
    const connection = connections[0];
    const instructions = [];
    const additionalSigners = [];
    const auctionHouseKey = new web3_js_1.PublicKey(auctionHouse);
    const mintKey = new web3_js_1.PublicKey(tokenMint);
    const ownerKey = new web3_js_1.PublicKey(walletOwner);
    const auctionHouseObj = await mpl_auction_house_1.AuctionHouse.fromAccountAddress(connection, auctionHouseKey);
    const tokenSizeAdjusted = new bn_js_1.default(await (0, shared_1.getQuantityWithMantissa)(connection, tokenSize, mintKey));
    //this is supposed to be the account holding the NFT
    //this will work both in the case of cancel listings & cancel bid
    const largestTokenHolders = await connection.getTokenLargestAccounts(mintKey);
    const tokenAccountKey = largestTokenHolders.value[0].address;
    const [tradeState] = (0, metaplex_1.findAuctionHouseTradeStatePda)(auctionHouseKey, ownerKey, auctionHouseObj.treasuryMint, mintKey, priceLamports, tokenSizeAdjusted, tokenAccountKey);
    const [escrowPaymentAccount, escrowPaymentBump] = (0, metaplex_1.findAuctionHouseBuyerEscrowPda)(auctionHouseKey, ownerKey);
    const cancelIx = (0, mpl_auction_house_1.createCancelInstruction)({
        auctionHouse: auctionHouseKey,
        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
        authority: auctionHouseObj.authority,
        tokenAccount: tokenAccountKey,
        tokenMint: mintKey,
        tradeState,
        wallet: ownerKey,
    }, { buyerPrice: priceLamports, tokenSize: tokenSizeAdjusted });
    //only relevant for bids (withdrawing escrowed amount)
    if (cancelBid && totalWithdrawLamports) {
        const withdrawIx = (0, mpl_auction_house_1.createWithdrawInstruction)({
            auctionHouse: auctionHouseKey,
            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
            authority: auctionHouseObj.authority,
            escrowPaymentAccount,
            receiptAccount: ownerKey,
            treasuryMint: auctionHouseObj.treasuryMint,
            wallet: ownerKey,
        }, {
            amount: totalWithdrawLamports,
            escrowPaymentBump,
        });
        instructions.push(withdrawIx);
    }
    instructions.push(cancelIx);
    return (0, solana_contrib_1.buildTx)({
        maybeBlockhash: {
            type: 'blockhashArgs',
            args: {
                connections,
            },
        },
        instructions,
        additionalSigners,
        feePayer: ownerKey,
    });
};
exports.makeAHCancelBidTx = makeAHCancelBidTx;
//# sourceMappingURL=cancel.js.map