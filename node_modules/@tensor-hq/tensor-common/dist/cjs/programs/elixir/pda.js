"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPoolAccPda = exports.findExternalAccPda = exports.findAppraisalAccPda = exports.findFeeAccPda = exports.findVaultAccPda = void 0;
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("./constants");
const findVaultAccPda = (fnftMint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('vault'), fnftMint.toBytes()], constants_1.ELIXIR_PROGRAM_IDS.vault);
};
exports.findVaultAccPda = findVaultAccPda;
const findFeeAccPda = (poolMint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('deposit'), poolMint.toBytes()], constants_1.ELIXIR_PROGRAM_IDS.vault);
};
exports.findFeeAccPda = findFeeAccPda;
const findAppraisalAccPda = (poolMint, nftMint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('appraisal'), poolMint.toBytes(), nftMint.toBytes()], constants_1.ELIXIR_PROGRAM_IDS.vault);
};
exports.findAppraisalAccPda = findAppraisalAccPda;
const findExternalAccPda = (poolMint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('fractions-seed'), poolMint.toBytes()], constants_1.ELIXIR_PROGRAM_IDS.vault);
};
exports.findExternalAccPda = findExternalAccPda;
const findPoolAccPda = (poolMint) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from('fractions'), poolMint.toBytes()], constants_1.ELIXIR_PROGRAM_IDS.vault);
};
exports.findPoolAccPda = findPoolAccPda;
//# sourceMappingURL=pda.js.map