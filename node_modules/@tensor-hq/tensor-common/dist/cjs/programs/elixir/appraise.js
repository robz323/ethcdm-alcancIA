"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAppraisal = void 0;
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("./constants");
const pda_1 = require("./pda");
async function createAppraisal(connection, poolMint, nftMint, initializer) {
    const [extAcc] = await (0, pda_1.findExternalAccPda)(poolMint);
    const [poolAcc] = await (0, pda_1.findPoolAccPda)(poolMint);
    const [appraiserAcc] = await (0, pda_1.findAppraisalAccPda)(poolMint, nftMint);
    const appAccExists = await connection.getAccountInfo(appraiserAcc);
    if (!!appAccExists) {
        return;
    }
    const appraiserQuery = await fetch(constants_1.BRIDGESPLIT_API + '/appraiser/ix', {
        method: 'POST',
        body: JSON.stringify({
            appraiser: '3RDTwtVmMcH9zvzqj8mZi9GH8apqWpRZyXB9DWL7QqrP',
            initializer: initializer.toString(),
            index_mint: poolMint.toString(),
            index: poolAcc.toString(),
            external_account: extAcc.toString(),
            asset_mint: nftMint.toString(),
            appraisal: appraiserAcc.toString(),
            system: web3_js_1.SystemProgram.programId.toString(),
            clock: web3_js_1.SYSVAR_CLOCK_PUBKEY.toString(),
        }),
    })
        .then(async (response) => {
        // Need to format this response and add this ixn to the txn
        return await response.text();
    })
        .catch((err) => {
        // eslint-disable-next-line no-console
        console.log('Error creating an appraisal', err);
        return null;
    });
    if (appraiserQuery && appraiserQuery !== 'false') {
        return web3_js_1.Transaction.from(Buffer.from(appraiserQuery, 'base64'));
    }
}
exports.createAppraisal = createAppraisal;
//# sourceMappingURL=appraise.js.map