"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BASE_TOKENS_PER_NFT = exports.ELIXIR_PROGRAM_IDS = exports.BRIDGESPLIT_API = exports.SOL_SWITCHBOARD_KEYS = exports.defaultVerifierAuthorityId = exports.METADATA_PREFIX = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const FULFILLMENT_KEYS = {
    devnet: new web3_js_1.PublicKey('BWjEMEtrW2BfdCrjkUcCZKCddQwM3SeiCFB9D1TTFFw6'),
    mainnet: new web3_js_1.PublicKey('E6WNTMKecxpDvN4gNPE7zCeubXMSNoXgCnC8mEudXKXY'),
};
exports.METADATA_PREFIX = 'metadata';
exports.defaultVerifierAuthorityId = new web3_js_1.PublicKey('AcAJFFQLZ6zgpropNYU4cwnVjz2numBkPoMYWGYSeyFx');
const vaultProgramId = new web3_js_1.PublicKey('2qGyiNeWyZxNdkvWHc2jT5qkCnYa1j1gDLSSUmyoWMh8');
const augurProgramId = new web3_js_1.PublicKey('AUGUREpS2W6T5FgTiycU9oD7WFrbbf4mtvi6nwEkob5T');
const multiAssetPoolProgramId = new web3_js_1.PublicKey('CurZttATHFmd9vfeYvV9faBkXBeCrfEdXQp9n5j8kP6x');
const rentalProgramId = new web3_js_1.PublicKey('rentxNUvmi2jSsm41jkuNDSZbxFyJzgrE83XxvfSKYk');
const rentalsAuxilaryProgramId = new web3_js_1.PublicKey('rAUXwct9rF3cX8fb1n2sjgniiQ8dp9mBtNwTQ2kXKbc');
const lotteryProgramId = new web3_js_1.PublicKey('1otEfEhS4FQaJRwkv6saaw7iqM1nPegfaNpfFxge4Li');
const parliamentProgramId = new web3_js_1.PublicKey('houseKq5iHRX7hjyeFWk6dwALTUE6BG6RQptNSiJY6s');
const augurAuthorityId = new web3_js_1.PublicKey('AbZU2HupUBLkz9mUF2i6Q9UT1vjxULN9TdRK1uSQP67G');
const FEE_PID = new web3_js_1.PublicKey('fee6uQpfQYhfZUxiYLvpAjuCGNE7NTJrCoXV8tsqsn6');
const DEX_PROGRAMS = {
    devnet: new web3_js_1.PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY'),
    mainnet: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
};
const AMM_PROGRAMS = {
    devnet: new web3_js_1.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'),
    mainnet: new web3_js_1.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'),
};
const WRAPPED_SOL_MINT = new web3_js_1.PublicKey('So11111111111111111111111111111111111111112');
const SWAP_PROGRAMS = {
    devnet: new web3_js_1.PublicKey('ziR2PGyshLYwLsGsH5hXH5rkZTf6GNJ6RzvX23v52iY'),
    mainnet: new web3_js_1.PublicKey('ziR2PGyshLYwLsGsH5hXH5rkZTf6GNJ6RzvX23v52iY'),
};
const TREASURY_ACCOUNTS = {
    devnet: new web3_js_1.PublicKey('6kLLewcYCvUK6xLQE1ep36ReamuTLFuTWwhCnbMCb3pd'),
    mainnet: new web3_js_1.PublicKey('6kLLewcYCvUK6xLQE1ep36ReamuTLFuTWwhCnbMCb3pd'),
};
const METADATA_PROGRAM_ID = new web3_js_1.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
const MEMO_ID = new web3_js_1.PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');
const APPRAISER = new web3_js_1.PublicKey('3RDTwtVmMcH9zvzqj8mZi9GH8apqWpRZyXB9DWL7QqrP');
const COMPOSE_PID = new web3_js_1.PublicKey('E1XRkj9fPF2NQUdoq41AHPqwMDHykYfn5PzBXAyDs7Be');
const PROGRAMS_LOOKUP_TABLE = new web3_js_1.PublicKey('FDU3PjpftvmM1g6d8ocF8dXzdYrB5zoCbs5Kv9PSJAgo');
exports.SOL_SWITCHBOARD_KEYS = {
    devnet: new web3_js_1.PublicKey('AdtRGGhmqvom3Jemp5YNrxd9q9unX36BZk1pujkkXijL'),
    mainnet: new web3_js_1.PublicKey('AdtRGGhmqvom3Jemp5YNrxd9q9unX36BZk1pujkkXijL'),
};
exports.BRIDGESPLIT_API = 'https://backend.bridgesplit.com';
exports.ELIXIR_PROGRAM_IDS = {
    token: spl_token_1.TOKEN_PROGRAM_ID,
    associatedToken: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
    system: web3_js_1.SystemProgram.programId,
    rent: web3_js_1.SYSVAR_RENT_PUBKEY,
    fulfillment: FULFILLMENT_KEYS.mainnet,
    vault: vaultProgramId,
    augur: augurProgramId,
    multi_asset: multiAssetPoolProgramId,
    augur_authority: augurAuthorityId,
    metadata: METADATA_PROGRAM_ID,
    treasury: TREASURY_ACCOUNTS.mainnet,
    dex: DEX_PROGRAMS.mainnet,
    amm: AMM_PROGRAMS.mainnet,
    sol_oracle: exports.SOL_SWITCHBOARD_KEYS.mainnet,
    wrapped_sol: WRAPPED_SOL_MINT,
    sol: spl_token_1.NATIVE_MINT.toString(),
    swap: SWAP_PROGRAMS.mainnet,
    memo: MEMO_ID,
    rental: rentalProgramId,
    rental_auxilary: rentalsAuxilaryProgramId,
    lottery: lotteryProgramId,
    parliament: parliamentProgramId,
    appraiser: APPRAISER,
    fee: FEE_PID,
    compose: COMPOSE_PID,
    lookups: PROGRAMS_LOOKUP_TABLE,
};
exports.BASE_TOKENS_PER_NFT = 100000;
//# sourceMappingURL=constants.js.map