/*
list
https://solscan.io/tx/4Cb7HJNiu2csheApMfjx21A2WPHqQF3Qx2aDEvkYoz8W9HGWkbeENhxUD1uavhNpm8nCtuFZbhEsKxqJARzzWYVc
sell + transfer
 */
import { PublicKey, } from '@solana/web3.js';
import { getQuantityWithMantissa } from './shared';
import BN from 'bn.js';
import { AuctionHouse, createSellInstruction, } from '@metaplex-foundation/mpl-auction-house';
import { getAssociatedTokenAddress } from '@solana/spl-token';
import { buildTx } from '../../solana_contrib';
import { findAuctionHouseProgramAsSignerPda, findAuctionHouseTradeStatePda, findMetadataPda, } from '../../metaplex';
export const makeAHListTx = async (connections, tokenMint, tokenOwner, auctionHouse, priceLamports, tokenSize = 1) => {
    const connection = connections[0];
    const instructions = [];
    const additionalSigners = [];
    const auctionHouseKey = new PublicKey(auctionHouse);
    const mintKey = new PublicKey(tokenMint);
    const ownerKey = new PublicKey(tokenOwner);
    const auctionHouseObj = await AuctionHouse.fromAccountAddress(connection, auctionHouseKey);
    const tokenSizeAdjusted = new BN(await getQuantityWithMantissa(connection, tokenSize, mintKey));
    const tokenAccountKey = await getAssociatedTokenAddress(mintKey, ownerKey);
    const [programAsSigner, programAsSignerBump] = findAuctionHouseProgramAsSignerPda();
    const [tradeState, tradeStateBump] = findAuctionHouseTradeStatePda(auctionHouseKey, ownerKey, auctionHouseObj.treasuryMint, mintKey, priceLamports, tokenSizeAdjusted, tokenAccountKey);
    const [freeTradeState, freeTradeStateBump] = findAuctionHouseTradeStatePda(auctionHouseKey, ownerKey, auctionHouseObj.treasuryMint, mintKey, new BN(0), tokenSizeAdjusted, tokenAccountKey);
    const sellIx = createSellInstruction({
        wallet: ownerKey,
        authority: auctionHouseObj.authority,
        auctionHouse: auctionHouseKey,
        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
        freeSellerTradeState: freeTradeState,
        metadata: findMetadataPda(mintKey)[0],
        programAsSigner,
        sellerTradeState: tradeState,
        tokenAccount: tokenAccountKey,
    }, {
        buyerPrice: priceLamports,
        freeTradeStateBump,
        programAsSignerBump,
        tokenSize: tokenSizeAdjusted,
        tradeStateBump,
    });
    instructions.push(sellIx);
    return buildTx({
        maybeBlockhash: {
            type: 'blockhashArgs',
            args: {
                connections,
            },
        },
        instructions,
        additionalSigners,
        feePayer: ownerKey,
    });
};
//# sourceMappingURL=list.js.map