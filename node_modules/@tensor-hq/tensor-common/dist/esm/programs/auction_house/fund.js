import { AuctionHouse, createDepositInstruction, createWithdrawInstruction, } from '@metaplex-foundation/mpl-auction-house';
import { PublicKey, } from '@solana/web3.js';
import { findAuctionHouseBuyerEscrowPda } from '../../metaplex';
import { buildTx } from '../../solana_contrib';
export const makeAHDepositWithdrawTx = async (connections, action, auctionHouse, owner, amountLamports) => {
    const connection = connections[0];
    const instructions = [];
    const additionalSigners = [];
    const auctionHouseKey = new PublicKey(auctionHouse);
    const ownerKey = new PublicKey(owner);
    const auctionHouseObj = await AuctionHouse.fromAccountAddress(connection, auctionHouseKey);
    const [escrowPaymentAccount, escrowPaymentBump] = findAuctionHouseBuyerEscrowPda(auctionHouseKey, ownerKey);
    const ix = action === 'deposit'
        ? createDepositInstruction({
            auctionHouse: auctionHouseKey,
            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
            authority: auctionHouseObj.authority,
            escrowPaymentAccount,
            paymentAccount: ownerKey,
            transferAuthority: auctionHouseObj.authority,
            treasuryMint: auctionHouseObj.treasuryMint,
            wallet: ownerKey,
        }, {
            amount: amountLamports,
            escrowPaymentBump,
        })
        : createWithdrawInstruction({
            auctionHouse: auctionHouseKey,
            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,
            authority: auctionHouseObj.authority,
            escrowPaymentAccount,
            receiptAccount: ownerKey,
            treasuryMint: auctionHouseObj.treasuryMint,
            wallet: ownerKey,
        }, {
            amount: amountLamports,
            escrowPaymentBump,
        });
    instructions.push(ix);
    return buildTx({
        maybeBlockhash: {
            type: 'blockhashArgs',
            args: {
                connections,
            },
        },
        instructions,
        additionalSigners,
        feePayer: ownerKey,
    });
};
//# sourceMappingURL=fund.js.map