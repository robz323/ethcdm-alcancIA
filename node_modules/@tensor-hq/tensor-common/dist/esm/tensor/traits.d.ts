import { PublicKey } from '@solana/web3.js';
import { Maybe } from '../utils';
import { Attribute, AttributeCamelCase, RarityRanks, RaritySystem } from './types';
export declare const getRarityRank: (system: RaritySystem, ranks: RarityRanks) => number | null;
export declare const NAME_TRAIT_TYPE = "<name>";
export declare const nullLikeTraitValues: string[];
export declare const NONE_TRAIT_VALUE = "None";
export declare const DOMAIN_MCC_LIST: string[];
export declare const languageRegex: {
    English: RegExp;
    Arabic: RegExp;
    Chinese: RegExp;
    Cyrillic: RegExp;
    Hindi: RegExp;
    Japanese: RegExp;
    Korean: RegExp;
};
export declare const generateDomainTraits: (mccPk: PublicKey, name: string | null, currentAttributes: Attribute[] | null) => Attribute[];
export declare const normalizeTraitValue: (value: string) => string;
export declare const countNonNullAttributes: (attributes: Attribute[], includeNone?: boolean) => number;
export declare const matchesTraitFilter: ({ traitsFilter, attributes, name, }: {
    traitsFilter: {
        traitType: string;
        values: string[];
    }[];
    attributes: Maybe<Attribute[]>;
    name: Maybe<string>;
}) => boolean;
type JsonObject = {
    [Key in string]?: JsonValue;
};
interface JsonArray extends Array<JsonValue> {
}
type JsonValue = string | number | boolean | JsonObject | JsonArray | null;
export declare const normalizeMintTraits: (attrs: Attribute[] | JsonValue | undefined) => Attribute[] | null;
export declare const camelCaseAttributes: (attributes: Attribute[]) => AttributeCamelCase[];
export declare const snakeCaseAttributes: (attributes: AttributeCamelCase[]) => Attribute[];
export declare const hasMatchingTraits: (requiredTraits: Attribute[], nftTraits: Attribute[]) => boolean;
export {};
//# sourceMappingURL=traits.d.ts.map