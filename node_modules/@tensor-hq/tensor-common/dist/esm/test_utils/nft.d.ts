import { TokenStandard } from '@metaplex-foundation/mpl-token-metadata';
import { Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';
export declare const createAta: ({ conn, payer, mint, owner, }: {
    conn: Connection;
    payer: Keypair;
    mint: PublicKey;
    owner: Keypair;
}) => Promise<{
    mint: PublicKey;
    owner: Keypair;
    ata: PublicKey;
}>;
export type CreatorInput = {
    address: PublicKey;
    share: number;
    authority?: Signer;
};
export declare const createNft: ({ conn, payer, owner, mint, tokenStandard, royaltyBps, creators, collection, collectionVerified, ruleSet, }: {
    conn: Connection;
    payer: Keypair;
    owner: Keypair;
    mint: Keypair;
    tokenStandard: TokenStandard;
    royaltyBps?: number | undefined;
    creators?: CreatorInput[] | undefined;
    collection?: Keypair | undefined;
    collectionVerified?: boolean | undefined;
    ruleSet?: PublicKey | null | undefined;
}) => Promise<{
    ata: PublicKey;
    metadata: PublicKey;
    masterEdition: PublicKey;
}>;
export declare const createAndFundAta: ({ conn, payer, owner, mint, royaltyBps, creators, collection, collectionVerified, createCollection, programmable, ruleSetAddr, }: {
    conn: Connection;
    payer: Keypair;
    owner?: Keypair | undefined;
    mint?: Keypair | undefined;
    royaltyBps?: number | undefined;
    creators?: CreatorInput[] | undefined;
    collection?: Keypair | undefined;
    createCollection?: boolean | undefined;
    collectionVerified?: boolean | undefined;
    programmable?: boolean | undefined;
    ruleSetAddr?: PublicKey | undefined;
}) => Promise<{
    mint: PublicKey;
    ata: PublicKey;
    owner: Keypair;
    metadata: PublicKey;
    masterEdition: PublicKey;
    collectionInfo?: {
        mint: PublicKey;
        metadata: PublicKey;
        masterEdition: PublicKey;
    } | undefined;
}>;
/** Creates a mint + 2 ATAs. The `owner` will have the mint initially. */
export declare const makeMintTwoAta: ({ conn, payer, owner, other, royaltyBps, creators, collection, collectionVerified, createCollection, programmable, ruleSetAddr, }: {
    conn: Connection;
    payer: Keypair;
    owner: Keypair;
    other: Keypair;
    royaltyBps?: number | undefined;
    creators?: CreatorInput[] | undefined;
    collection?: Keypair | undefined;
    collectionVerified?: boolean | undefined;
    createCollection?: boolean | undefined;
    programmable?: boolean | undefined;
    ruleSetAddr?: PublicKey | undefined;
}) => Promise<{
    mint: PublicKey;
    metadata: PublicKey;
    ata: PublicKey;
    otherAta: PublicKey;
    masterEdition: PublicKey;
    collectionInfo: {
        mint: PublicKey;
        metadata: PublicKey;
        masterEdition: PublicKey;
    } | undefined;
}>;
//# sourceMappingURL=nft.d.ts.map