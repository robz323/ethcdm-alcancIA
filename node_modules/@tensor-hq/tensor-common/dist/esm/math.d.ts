import BN from 'bn.js';
import { Big } from 'big.js';
import { Maybe } from './utils';
export declare const sum: (arr: Array<number>) => number;
export declare const minDate: (a: Date, b: Date) => Date;
export declare const maxDate: (a: Date, b: Date) => Date;
export declare const minBigInt: (a: bigint, b: bigint) => bigint;
export declare const maxBigInt: (a: bigint, b: bigint) => bigint;
export declare const sqBigInt: (a: bigint) => bigint;
export declare const minBigInts: (arr: bigint[]) => bigint | null;
export declare const maxBigInts: (arr: bigint[]) => bigint | null;
export declare const validBigStr: (s: string) => boolean;
export declare const sumBig: (arr: Array<Big>) => Big;
export declare const sumBN: (arr: Array<BN>) => BN;
export declare function minBigBN(a: Big, b: Big): Big;
export declare function minBigBN(a: BN, b: BN): BN;
export declare function maxBigBN(a: Big, b: Big): Big;
export declare function maxBigBN(a: BN, b: BN): BN;
export declare function minBigsBNs(arr: Big[]): Big | null;
export declare function minBigsBNs(arr: BN[]): BN | null;
export declare function maxBigsBNs(arr: Big[]): Big | null;
export declare function maxBigsBNs(arr: BN[]): BN | null;
export declare const sortNumberOrBig: (a: Big | BN | number | null | undefined, b: Big | BN | number | null | undefined, nullsFirst?: boolean) => number;
export declare const sortBigInt: (a: Maybe<bigint>, b: Maybe<bigint>, nullsFirst?: boolean) => number;
export declare const bigToBN: (big: Big) => BN;
export declare const BNToBig: (bn: BN) => Big;
//# sourceMappingURL=math.d.ts.map