import { AuthorizationData, Metadata, TransferArgs } from '@metaplex-foundation/mpl-token-metadata';
import { Connection, PublicKey } from '@solana/web3.js';
export { AuthorizationData } from '@metaplex-foundation/mpl-token-metadata';
export declare const prepPnftRuleset: ({ connection, meta, nftMint, }: {
    connection: Connection;
    /** If provided, skips RPC call for the the metadata account */
    meta?: {
        address: PublicKey;
        metadata: Metadata;
    } | undefined;
    nftMint: PublicKey;
}) => Promise<{
    meta: {
        address: PublicKey;
        metadata: Metadata;
    };
    ruleSet: PublicKey | undefined;
}>;
export declare const prepPnftAccounts: ({ connection, meta, nftMint, sourceAta, destAta, authData, }: {
    connection: Connection;
    /** If provided, skips RPC call for the the metadata account */
    meta?: {
        address: PublicKey;
        metadata: Metadata;
    } | undefined;
    nftMint: PublicKey;
    sourceAta: PublicKey;
    destAta: PublicKey;
    authData?: AuthorizationData | null | undefined;
}) => Promise<{
    meta: {
        address: PublicKey;
        metadata: Metadata;
    };
    creators: import("@metaplex-foundation/mpl-token-metadata").Creator[];
    ruleSet: PublicKey | undefined;
    ownerTokenRecordBump: number;
    ownerTokenRecordPda: PublicKey;
    destTokenRecordBump: number;
    destTokenRecordPda: PublicKey;
    nftEditionPda: PublicKey;
    authDataSerialized: {
        payload: {
            name: string;
            payload: any;
        }[];
    } | null;
}>;
export declare const makePnftTransferIx: ({ mint, tokenOwner, destinationOwner, authority, args, connection, fromAddr, toAddr, tokenProgram, }: {
    mint: PublicKey;
    tokenOwner: PublicKey;
    destinationOwner: PublicKey;
    authority?: PublicKey | null | undefined;
    args?: ({
        __kind: "V1";
    } & Omit<{
        amount: import("@metaplex-foundation/beet").bignum;
        authorizationData: import("@metaplex-foundation/beet").COption<AuthorizationData>;
    }, "void">) | null | undefined;
    connection: Connection;
    fromAddr: PublicKey;
    toAddr: PublicKey;
    tokenProgram: PublicKey;
}) => Promise<import("@solana/web3.js").TransactionInstruction>;
//# sourceMappingURL=token_rules.d.ts.map