import { PROGRAM_ID } from '@metaplex-foundation/mpl-auction-house';
import { PublicKey } from '@solana/web3.js';
import { Buffer } from 'buffer';
export const findAuctionHousePda = (creator, treasuryMint, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('auction_house', 'utf8'),
        creator.toBuffer(),
        treasuryMint.toBuffer(),
    ], programId);
};
export const findAuctioneerPda = (auctionHouse, auctioneerAuthority, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('auctioneer', 'utf8'),
        auctionHouse.toBuffer(),
        auctioneerAuthority.toBuffer(),
    ], programId);
};
export const findAuctionHouseProgramAsSignerPda = (programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([Buffer.from('auction_house', 'utf8'), Buffer.from('signer', 'utf8')], programId);
};
export const findAuctionHouseFeePda = (auctionHouse, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('auction_house', 'utf8'),
        auctionHouse.toBuffer(),
        Buffer.from('fee_payer', 'utf8'),
    ], programId);
};
export const findAuctionHouseTreasuryPda = (auctionHouse, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('auction_house', 'utf8'),
        auctionHouse.toBuffer(),
        Buffer.from('treasury', 'utf8'),
    ], programId);
};
export const findAuctionHouseBuyerEscrowPda = (auctionHouse, buyer, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('auction_house', 'utf8'),
        auctionHouse.toBuffer(),
        buyer.toBuffer(),
    ], programId);
};
export const findAuctionHouseTradeStatePda = (auctionHouse, wallet, treasuryMint, tokenMint, buyPrice, tokenSize, tokenAccount, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('auction_house', 'utf8'),
        wallet.toBuffer(),
        auctionHouse.toBuffer(),
        ...(tokenAccount ? [tokenAccount.toBuffer()] : []),
        treasuryMint.toBuffer(),
        tokenMint.toBuffer(),
        buyPrice.toArrayLike(Buffer, 'le', 8),
        tokenSize.toArrayLike(Buffer, 'le', 8),
    ], programId);
};
export const findListingReceiptPda = (tradeState, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([Buffer.from('listing_receipt', 'utf8'), tradeState.toBuffer()], programId);
};
export const findBidReceiptPda = (tradeState, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([Buffer.from('bid_receipt', 'utf8'), tradeState.toBuffer()], programId);
};
export const findPurchaseReceiptPda = (sellerTradeState, buyerTradeState, programId = PROGRAM_ID) => {
    return PublicKey.findProgramAddressSync([
        Buffer.from('purchase_receipt', 'utf8'),
        sellerTradeState.toBuffer(),
        buyerTradeState.toBuffer(),
    ], programId);
};
//# sourceMappingURL=auction_house.js.map