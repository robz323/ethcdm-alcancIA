import BN from 'bn.js';
export const stringifyPKsAndBNs = (i) => {
    if (_isPk(i)) {
        return i.toBase58();
    }
    else if (i instanceof BN) {
        return i.toString();
    }
    else if (_parseType(i) === 'array') {
        return _stringifyPKsAndBNInArray(i);
    }
    else if (_parseType(i) === 'object') {
        return _stringifyPKsAndBNsInObject(i);
    }
    return i;
};
const _isPk = (obj) => {
    return (typeof obj === 'object' &&
        obj !== null &&
        typeof obj['toBase58'] === 'function');
};
const _stringifyPKsAndBNsInObject = (o) => {
    const newO = { ...o };
    for (const [k, v] of Object.entries(newO)) {
        if (_isPk(v)) {
            newO[k] = v.toBase58();
        }
        else if (v instanceof BN) {
            newO[k] = v.toString();
        }
        else if (_parseType(v) === 'array') {
            newO[k] = _stringifyPKsAndBNInArray(v);
        }
        else if (_parseType(v) === 'object') {
            newO[k] = _stringifyPKsAndBNsInObject(v);
        }
        else {
            newO[k] = v;
        }
    }
    return newO;
};
const _stringifyPKsAndBNInArray = (a) => {
    const newA = [];
    for (const i of a) {
        if (_isPk(i)) {
            newA.push(i.toBase58());
        }
        else if (i instanceof BN) {
            newA.push(i.toString());
        }
        else if (_parseType(i) === 'array') {
            newA.push(_stringifyPKsAndBNInArray(i));
        }
        else if (_parseType(i) === 'object') {
            newA.push(stringifyPKsAndBNs(i));
        }
        else {
            newA.push(i);
        }
    }
    return newA;
};
const _parseType = (v) => {
    if (v === null || v === undefined) {
        return 'null';
    }
    if (typeof v === 'object') {
        if (v instanceof Array) {
            return 'array';
        }
        if (v instanceof Date) {
            return 'date';
        }
        return 'object';
    }
    return typeof v;
};
//# sourceMappingURL=formatting.js.map