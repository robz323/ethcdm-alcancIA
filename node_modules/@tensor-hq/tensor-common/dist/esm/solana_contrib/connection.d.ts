import { Connection } from '@solana/web3.js';
export declare enum Cluster {
    Mainnet = "mainnet",
    Devnet = "devnet"
}
export declare const FAILOVER_ASYNC_METHODS: readonly ["getBalanceAndContext", "getBalance", "getBlockTime", "getMinimumLedgerSlot", "getFirstAvailableBlock", "getSupply", "getTokenSupply", "getTokenAccountBalance", "getTokenAccountsByOwner", "getParsedTokenAccountsByOwner", "getLargestAccounts", "getTokenLargestAccounts", "getAccountInfoAndContext", "getParsedAccountInfo", "getAccountInfo", "getMultipleAccountsInfoAndContext", "getMultipleAccountsInfo", "getStakeActivation", "getProgramAccounts", "getParsedProgramAccounts", "confirmTransaction", "confirmTransaction", "getClusterNodes", "getVoteAccounts", "getSlot", "getSlotLeader", "getSlotLeaders", "getSignatureStatus", "getSignatureStatuses", "getTransactionCount", "getTotalSupply", "getInflationGovernor", "getInflationReward", "getEpochInfo", "getEpochSchedule", "getLeaderSchedule", "getMinimumBalanceForRentExemption", "getRecentBlockhashAndContext", "getRecentPerformanceSamples", "getFeeCalculatorForBlockhash", "getFeeForMessage", "getRecentBlockhash", "getLatestBlockhash", "getLatestBlockhashAndContext", "getVersion", "getGenesisHash", "getBlock", "getBlock", "getBlockHeight", "getBlockProduction", "getTransaction", "getTransaction", "getParsedTransaction", "getParsedTransactions", "getTransactions", "getTransactions", "getConfirmedBlock", "getBlocks", "getBlockSignatures", "getConfirmedBlockSignatures", "getConfirmedTransaction", "getParsedConfirmedTransaction", "getParsedConfirmedTransactions", "getConfirmedSignaturesForAddress", "getConfirmedSignaturesForAddress2", "getSignaturesForAddress", "getAddressLookupTable", "getNonceAndContext", "getNonce", "requestAirdrop", "getStakeMinimumDelegation", "simulateTransaction", "simulateTransaction", "sendTransaction", "sendTransaction", "sendRawTransaction", "sendEncodedTransaction"];
export type ConnAsyncMethod = typeof FAILOVER_ASYNC_METHODS[number];
export declare const ALCHEMY_BLACKLIST: ConnAsyncMethod[];
export declare const makeFailoverBlacklist: (conns: Connection[]) => {
    [k: string]: ("getBalanceAndContext" | "getBalance" | "getBlockTime" | "getMinimumLedgerSlot" | "getFirstAvailableBlock" | "getSupply" | "getTokenSupply" | "getTokenAccountBalance" | "getTokenAccountsByOwner" | "getParsedTokenAccountsByOwner" | "getLargestAccounts" | "getTokenLargestAccounts" | "getAccountInfoAndContext" | "getParsedAccountInfo" | "getAccountInfo" | "getMultipleAccountsInfoAndContext" | "getMultipleAccountsInfo" | "getStakeActivation" | "getProgramAccounts" | "getParsedProgramAccounts" | "confirmTransaction" | "getClusterNodes" | "getVoteAccounts" | "getSlot" | "getSlotLeader" | "getSlotLeaders" | "getSignatureStatus" | "getSignatureStatuses" | "getTransactionCount" | "getTotalSupply" | "getInflationGovernor" | "getInflationReward" | "getEpochInfo" | "getEpochSchedule" | "getLeaderSchedule" | "getMinimumBalanceForRentExemption" | "getRecentBlockhashAndContext" | "getRecentPerformanceSamples" | "getFeeCalculatorForBlockhash" | "getFeeForMessage" | "getRecentBlockhash" | "getLatestBlockhash" | "getLatestBlockhashAndContext" | "getVersion" | "getGenesisHash" | "getBlock" | "getBlockHeight" | "getBlockProduction" | "getTransaction" | "getParsedTransaction" | "getParsedTransactions" | "getTransactions" | "getConfirmedBlock" | "getBlocks" | "getBlockSignatures" | "getConfirmedBlockSignatures" | "getConfirmedTransaction" | "getParsedConfirmedTransaction" | "getParsedConfirmedTransactions" | "getConfirmedSignaturesForAddress" | "getConfirmedSignaturesForAddress2" | "getSignaturesForAddress" | "getAddressLookupTable" | "getNonceAndContext" | "getNonce" | "requestAirdrop" | "getStakeMinimumDelegation" | "simulateTransaction" | "sendTransaction" | "sendRawTransaction" | "sendEncodedTransaction")[];
};
export declare const makeFailoverConnection: (conns: Connection[], options?: {
    timeoutMS?: number | undefined;
    failoverAsyncMethods?: string[] | undefined;
    rpcBlacklistMethods?: {
        [x: string]: ("getBalanceAndContext" | "getBalance" | "getBlockTime" | "getMinimumLedgerSlot" | "getFirstAvailableBlock" | "getSupply" | "getTokenSupply" | "getTokenAccountBalance" | "getTokenAccountsByOwner" | "getParsedTokenAccountsByOwner" | "getLargestAccounts" | "getTokenLargestAccounts" | "getAccountInfoAndContext" | "getParsedAccountInfo" | "getAccountInfo" | "getMultipleAccountsInfoAndContext" | "getMultipleAccountsInfo" | "getStakeActivation" | "getProgramAccounts" | "getParsedProgramAccounts" | "confirmTransaction" | "getClusterNodes" | "getVoteAccounts" | "getSlot" | "getSlotLeader" | "getSlotLeaders" | "getSignatureStatus" | "getSignatureStatuses" | "getTransactionCount" | "getTotalSupply" | "getInflationGovernor" | "getInflationReward" | "getEpochInfo" | "getEpochSchedule" | "getLeaderSchedule" | "getMinimumBalanceForRentExemption" | "getRecentBlockhashAndContext" | "getRecentPerformanceSamples" | "getFeeCalculatorForBlockhash" | "getFeeForMessage" | "getRecentBlockhash" | "getLatestBlockhash" | "getLatestBlockhashAndContext" | "getVersion" | "getGenesisHash" | "getBlock" | "getBlockHeight" | "getBlockProduction" | "getTransaction" | "getParsedTransaction" | "getParsedTransactions" | "getTransactions" | "getConfirmedBlock" | "getBlocks" | "getBlockSignatures" | "getConfirmedBlockSignatures" | "getConfirmedTransaction" | "getParsedConfirmedTransaction" | "getParsedConfirmedTransactions" | "getConfirmedSignaturesForAddress" | "getConfirmedSignaturesForAddress2" | "getSignaturesForAddress" | "getAddressLookupTable" | "getNonceAndContext" | "getNonce" | "requestAirdrop" | "getStakeMinimumDelegation" | "simulateTransaction" | "sendTransaction" | "sendRawTransaction" | "sendEncodedTransaction")[] | undefined;
    } | undefined;
} | undefined) => Connection;
//# sourceMappingURL=connection.d.ts.map