"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adjustBaseDirectory = adjustBaseDirectory;
const path = __importStar(require("path"));
/**
 * This method is designed to resolve the base directory paths for documentation presets.
 */
function adjustBaseDirectory(originalPath, subPath) {
    // Normalize the paths to handle different path formats and OS differences
    originalPath = path.normalize(originalPath);
    subPath = path.normalize(subPath);
    // Split the original path into an array of segments
    const segments = originalPath.split(path.sep);
    // Split the sub path into an array of segments and filter out ".." to handle relative paths
    const subSegments = subPath
        .split(path.sep)
        .filter((segment) => segment !== '..');
    // Find the index of the first sub path segment in the original path segments
    const startIndex = segments.indexOf(subSegments[0]);
    // Remove the sub path segments from the original path segments if found
    if (startIndex !== -1) {
        segments.splice(startIndex, subSegments.length);
    }
    // Join the segments back into a path and remove the leading slash if present
    let newPath = segments.join(path.sep);
    // Ensure there is no leading slash
    if (newPath.startsWith(path.sep)) {
        newPath = newPath.slice(1);
    }
    return newPath.replace(/\\/g, '/');
}
