"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = pluginDocusaurus;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const typedoc_1 = require("typedoc");
const options_1 = require("./options");
const options = __importStar(require("./options/declarations"));
const sidebar_1 = require("./sidebar");
const adjust_basedir_1 = require("./utils/adjust-basedir");
// store list of plugin ids when running multiple instances
const apps = [];
async function pluginDocusaurus(context, opts) {
    const PLUGIN_NAME = 'docusaurus-plugin-typedoc';
    if (opts.id && !apps.includes(opts.id)) {
        apps.push(opts.id);
        await generateTypedoc(context, opts);
    }
    return {
        name: PLUGIN_NAME,
        extendCli(cli) {
            cli
                .command('generate-typedoc')
                .description(`[${PLUGIN_NAME}] Generate TypeDoc docs independently of the Docusaurus build process.`)
                .action(async () => {
                context.siteConfig?.plugins.forEach((pluginConfig) => {
                    // Check PluginConfig is typed to [string, PluginOptions]
                    if (pluginConfig && typeof pluginConfig[1] === 'object') {
                        generateTypedoc(context, pluginConfig[1]);
                    }
                });
            });
        },
    };
}
/**
 * Initiates a new typedoc Application bootstrapped with plugin options
 */
async function generateTypedoc(context, opts) {
    const { siteDir } = context;
    const pluginOptions = (0, options_1.getPluginOptions)(opts);
    const { id, sidebar, ...optionsPassedToTypeDoc } = pluginOptions;
    const outputDir = path.join(siteDir, pluginOptions.out);
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    const app = (await typedoc_1.Application.bootstrapWithPlugins(optionsPassedToTypeDoc));
    Object.entries(options).forEach(([name, option]) => {
        app.options.addDeclaration({
            name,
            ...option,
        });
    });
    if (sidebar?.autoConfiguration) {
        const docsPreset = context.siteConfig?.presets?.find((preset) => Boolean(preset[1]?.docs));
        app.renderer.postRenderAsyncJobs.push(async (output) => {
            if (output.navigation) {
                const sidebarPath = path.resolve(outputDir, 'typedoc-sidebar.cjs');
                let baseDir = path
                    .relative(siteDir, outputDir)
                    .split(path.sep)
                    .slice(1)
                    .join('/');
                const docsPresetPath = docsPreset ? docsPreset[1]?.docs?.path : null;
                if (Boolean(docsPresetPath)) {
                    baseDir = (0, adjust_basedir_1.adjustBaseDirectory)(baseDir, docsPresetPath);
                }
                const sidebarJson = (0, sidebar_1.getSidebar)(output.navigation, baseDir, docsPreset ? docsPreset[1]?.docs?.numberPrefixParser : null);
                fs.writeFileSync(sidebarPath, `// @ts-check
/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const typedocSidebar = { items: ${JSON.stringify(sidebarJson, null, sidebar.pretty ? 2 : 0)}};
module.exports = typedocSidebar.items;`);
            }
        });
    }
    const project = await app.convert();
    // if project is undefined typedoc has a problem - error logging will be supplied by typedoc.
    if (!project) {
        if (app.options.getValue('skipErrorChecking')) {
            return;
        }
        console.error('[docusaurus-plugin-typedoc] TypeDoc exited with an error. Use the "skipErrorChecking" option to disable TypeDoc error checking.');
        process.exit(1);
    }
    if (app.options.getValue('watch')) {
        app.convertAndWatch(async (project) => {
            await app.generateDocs(project, outputDir);
        });
    }
    else {
        await app.generateDocs(project, outputDir);
    }
}
