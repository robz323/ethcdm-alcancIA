import type { AccountAddress, ChainAddress, ChainsConfig, Contracts, Network, Platform } from '@wormhole-foundation/sdk-connect';
import { TBTCBridge } from '@wormhole-foundation/sdk-connect';
import type { EvmChains } from '@wormhole-foundation/sdk-evm';
import { EvmUnsignedTransaction } from '@wormhole-foundation/sdk-evm';
import { Contract, Provider } from 'ethers';
import { EvmWormholeCore } from '@wormhole-foundation/sdk-evm-core';
export declare class EvmTBTCBridge<N extends Network, C extends EvmChains = EvmChains> implements TBTCBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly provider: Provider;
    readonly contracts: Contracts;
    chainId: bigint;
    core: EvmWormholeCore<N, C>;
    gatewayAddress: string;
    gateway: Contract;
    tbtcTokenAddr: string;
    constructor(network: N, chain: C, provider: Provider, contracts: Contracts);
    static fromRpc<N extends Network>(provider: Provider, config: ChainsConfig<N, Platform>): Promise<EvmTBTCBridge<N, EvmChains>>;
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, amount: bigint): AsyncGenerator<EvmUnsignedTransaction<N, C>>;
    redeem(sender: AccountAddress<C>, vaa: TBTCBridge.VAA): AsyncGenerator<EvmUnsignedTransaction<N, C>>;
    private approve;
    private createUnsignedTransaction;
}
//# sourceMappingURL=bridge.d.ts.map