import type { Chain } from "./chains.js";
export declare enum ConsistencyLevels {
    Finalized = 1,
    Immediate = 200,
    Safe = 201
}
export declare const safeThreshold: (<const K1 extends "Ethereum">(args_0: K1) => {
    readonly Ethereum: 32;
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1]) & {
    readonly has: (args_0: string) => boolean;
    readonly get: (args_0: string) => 32 | undefined;
};
/**
 * The number of blocks before a transaction may be considered "final" and
 * will not be rolled back
 */
export declare const finalityThreshold: (<const K1 extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Xpla" | "Base" | "Sei" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Berachain" | "Seievm" | "Snaxchain" | "Unichain" | "Worldchain" | "Ink" | "HyperEVM" | "Monad" | "Mezo" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Dymension" | "Provenance" | "Noble" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "PolygonSepolia">(args_0: K1) => {
    readonly Solana: 32;
    readonly Ethereum: 72;
    readonly Bsc: 15;
    readonly Optimism: 512;
    readonly Base: 512;
    readonly Arbitrum: 4096;
    readonly Blast: 512;
    readonly Xlayer: 300;
    readonly Scroll: 300;
    readonly Mantle: 512;
    readonly Worldchain: 512;
    readonly Polygon: 32;
    readonly Fantom: 1;
    readonly Celo: 1;
    readonly Moonbeam: 1;
    readonly Karura: 1;
    readonly Acala: 1;
    readonly Oasis: 1;
    readonly Avalanche: 0;
    readonly Sui: 0;
    readonly Algorand: 0;
    readonly Aptos: 0;
    readonly Klaytn: 0;
    readonly Sei: 0;
    readonly Near: 0;
    readonly Osmosis: 0;
    readonly Terra: 0;
    readonly Terra2: 0;
    readonly Xpla: 0;
    readonly Injective: 0;
    readonly Berachain: 1;
    readonly Seievm: 1;
    readonly Snaxchain: 512;
    readonly Unichain: 1024;
    readonly Ink: 512;
    readonly HyperEVM: 1;
    readonly Monad: 1;
    readonly Mezo: 1;
    readonly Cosmoshub: 0;
    readonly Evmos: 0;
    readonly Kujira: 0;
    readonly Neutron: 0;
    readonly Celestia: 0;
    readonly Stargaze: 0;
    readonly Dymension: 0;
    readonly Provenance: 0;
    readonly Noble: 0;
    readonly Sepolia: 72;
    readonly ArbitrumSepolia: 4096;
    readonly BaseSepolia: 512;
    readonly OptimismSepolia: 512;
    readonly PolygonSepolia: 32;
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1]) & {
    readonly has: (args_0: string) => boolean;
    readonly get: (args_0: string) => 0 | 1 | 15 | 32 | 72 | 512 | 4096 | 300 | 1024 | undefined;
};
/** The amount of time between block production, in milliseconds  */
export declare const blockTime: (<const K1 extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Berachain" | "Unichain" | "Worldchain" | "Ink" | "Monad" | "Mezo" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia">(args_0: K1) => {
    readonly Acala: 12000;
    readonly Algorand: 3300;
    readonly Aptos: 4000;
    readonly Arbitrum: 260;
    readonly ArbitrumSepolia: 260;
    readonly Aurora: 3000;
    readonly Avalanche: 2000;
    readonly Base: 2000;
    readonly BaseSepolia: 2000;
    readonly Blast: 2000;
    readonly Bsc: 3000;
    readonly Celo: 5000;
    readonly Cosmoshub: 5000;
    readonly Ethereum: 15000;
    readonly Evmos: 2000;
    readonly Fantom: 2500;
    readonly Gnosis: 5000;
    readonly Holesky: 15000;
    readonly Injective: 2500;
    readonly Karura: 12000;
    readonly Klaytn: 1000;
    readonly Kujira: 3000;
    readonly Mantle: 2000;
    readonly Moonbeam: 12000;
    readonly Monad: 1000;
    readonly Near: 1500;
    readonly Neon: 30000;
    readonly Oasis: 6000;
    readonly Optimism: 2000;
    readonly OptimismSepolia: 2000;
    readonly Osmosis: 6000;
    readonly Polygon: 2000;
    readonly PolygonSepolia: 2000;
    readonly Scroll: 3000;
    readonly Sei: 400;
    readonly Sepolia: 15000;
    readonly Solana: 400;
    readonly Sui: 3000;
    readonly Terra: 6000;
    readonly Terra2: 6000;
    readonly Unichain: 1000;
    readonly Xpla: 5000;
    readonly Xlayer: 3000;
    readonly Worldchain: 2000;
    readonly Ink: 1000;
    readonly Wormchain: 5000;
    readonly Btc: 600000;
    readonly Pythnet: 400;
    readonly Dymension: 5000;
    readonly Celestia: 5000;
    readonly Neutron: 5000;
    readonly Stargaze: 5000;
    readonly Seda: 7500;
    readonly Berachain: 2000;
    readonly Mezo: 4000;
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1]) & {
    readonly has: (args_0: string) => boolean;
    readonly get: (args_0: string) => 1000 | 4000 | 12000 | 3300 | 260 | 3000 | 2000 | 5000 | 15000 | 2500 | 1500 | 30000 | 6000 | 400 | 600000 | 7500 | undefined;
};
/**
 * Estimate the block number that a VAA might be available
 * for a given chain, initial block where the tx was submitted
 * and consistency level
 */
export declare function consistencyLevelToBlock(chain: Chain, consistencyLevel: number, fromBlock?: bigint): bigint;
/**
 * Estimates the time required for a transaction to be considered "final"
 * @param chain The chain to estimate finality time for
 * @returns The estimated time in milliseconds
 */
export declare function estimateFinalityTime(chain: Chain): number;
//# sourceMappingURL=finality.d.ts.map