export const range = (length) => [...Array(length).keys()];
export function entries(arr) {
    return [...arr.entries()];
}
export const flatten = (arr) => arr.flat();
export const column = (tupArr, index) => tupArr.map((tuple) => tuple[index]);
export const zip = (arr) => range(arr[0].length).map(col => range(arr.length).map(row => arr[row][col]));
export const pickWithOrder = (arr, indexes) => indexes.map((i) => arr[i]);
export const filterIndexes = (arr, indexes, exclude) => {
    const indexSet = new Set(Array.isArray(indexes) ? indexes : [indexes]);
    return arr.filter((_, i) => indexSet.has(i) !== exclude);
};
export function median(arr, isSorted = false) {
    if (arr.length === 0)
        throw new Error("Can't calculate median of empty array");
    const sorted = isSorted ? arr : [...arr].sort((a, b) => (a > b ? 1 : a < b ? -1 : 0)); // handle bigint and number
    const mid = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 1) {
        return sorted[mid];
    }
    const left = sorted[mid - 1];
    const right = sorted[mid];
    if (typeof left === "bigint" && typeof right === "bigint") {
        return (left + right) / 2n;
    }
    if (typeof left === "number" && typeof right === "number") {
        return (left + right) / 2;
    }
    throw new Error("Can't calculate median of array with mixed number and bigint");
}
//# sourceMappingURL=array.js.map