import type { LayoutToType } from "@wormhole-foundation/sdk-base";
declare const foreignAddressSeedLayout: readonly [{
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("@wormhole-foundation/sdk-definitions").UniversalAddress;
        from: (val: import("@wormhole-foundation/sdk-definitions").UniversalAddress) => Uint8Array;
    };
    readonly name: "tokenBridgeAddress";
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Snaxchain" | "Unichain" | "Worldchain" | "Ink" | "HyperEVM" | "Monad" | "Mezo" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Noble" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia";
        from: (val: "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Snaxchain" | "Unichain" | "Worldchain" | "Ink" | "HyperEVM" | "Monad" | "Mezo" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Noble" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "chain";
}, {
    readonly name: "domainSeparator";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("@wormhole-foundation/sdk-definitions").UniversalAddress;
        from: (val: import("@wormhole-foundation/sdk-definitions").UniversalAddress) => Uint8Array;
    };
    readonly name: "tokenId";
}, {
    readonly name: "domainSeparator";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}];
export declare const serializeForeignAddressSeeds: (data: LayoutToType<typeof foreignAddressSeedLayout>) => Uint8Array;
export {};
//# sourceMappingURL=foreignAddress.d.ts.map