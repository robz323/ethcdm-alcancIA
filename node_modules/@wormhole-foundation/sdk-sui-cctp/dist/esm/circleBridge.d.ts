import type { SuiClient } from "@mysten/sui/client";
import { type SuiChains, SuiUnsignedTransaction } from "@wormhole-foundation/sdk-sui";
import type { AccountAddress, ChainAddress, ChainsConfig, Network, Platform } from "@wormhole-foundation/sdk-connect";
import { CircleBridge, CircleTransferMessage, Contracts } from "@wormhole-foundation/sdk-connect";
export declare class SuiCircleBridge<N extends Network, C extends SuiChains> implements CircleBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly provider: SuiClient;
    readonly contracts: Contracts;
    readonly usdcId: string;
    readonly usdcTreasuryId: string;
    readonly tokenMessengerId: string;
    readonly tokenMessengerStateId: string;
    readonly messageTransmitterId: string;
    readonly messageTransmitterStateId: string;
    constructor(network: N, chain: C, provider: SuiClient, contracts: Contracts);
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, amount: bigint): AsyncGenerator<SuiUnsignedTransaction<N, C>>;
    isTransferCompleted(message: CircleBridge.Message): Promise<boolean>;
    redeem(sender: AccountAddress<C>, message: CircleBridge.Message, attestation: string): AsyncGenerator<SuiUnsignedTransaction<N, C>>;
    parseTransactionDetails(digest: string): Promise<CircleTransferMessage>;
    static fromRpc<N extends Network>(provider: SuiClient, config: ChainsConfig<N, Platform>): Promise<SuiCircleBridge<N, SuiChains>>;
    private createUnsignedTx;
}
//# sourceMappingURL=circleBridge.d.ts.map