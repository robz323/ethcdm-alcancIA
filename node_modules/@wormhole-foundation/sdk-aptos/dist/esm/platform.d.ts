import type { Balances, Chain, ChainsConfig, Network, SignedTx, StaticPlatformMethods, TokenId, TxHash } from "@wormhole-foundation/sdk-connect";
import { PlatformContext } from "@wormhole-foundation/sdk-connect";
import { Aptos } from "@aptos-labs/ts-sdk";
import { AptosChain } from "./chain.js";
import type { AptosChains, AptosPlatformType } from "./types.js";
import type { AnyAptosAddress } from "./types.js";
/**
 * @category Aptos
 */
export declare class AptosPlatform<N extends Network> extends PlatformContext<N, AptosPlatformType> implements StaticPlatformMethods<AptosPlatformType, typeof AptosPlatform> {
    static _platform: "Aptos";
    constructor(network: N, config?: ChainsConfig<N, AptosPlatformType>);
    getRpc<C extends AptosChains>(chain: C): Aptos;
    getChain<C extends AptosChains>(chain: C, rpc?: Aptos): AptosChain<N, C>;
    static nativeTokenId<N extends Network, C extends AptosChains>(network: N, chain: C): TokenId<C>;
    static isNativeTokenId<N extends Network, C extends AptosChains>(network: N, chain: C, tokenId: TokenId): boolean;
    static isSupportedChain(chain: Chain): boolean;
    static getDecimals(chain: Chain, rpc: Aptos, token: AnyAptosAddress): Promise<number>;
    static getBalance(chain: Chain, rpc: Aptos, walletAddress: string, token: AnyAptosAddress): Promise<bigint | null>;
    static getBalances(chain: Chain, rpc: Aptos, walletAddress: string, tokens: AnyAptosAddress[]): Promise<Balances>;
    static sendWait(chain: Chain, rpc: Aptos, stxns: SignedTx[]): Promise<TxHash[]>;
    static getLatestBlock(rpc: Aptos): Promise<number>;
    static getLatestFinalizedBlock(rpc: Aptos): Promise<number>;
    static chainFromChainId(chainId: string | bigint): [Network, AptosChains];
    static chainFromRpc(rpc: Aptos): Promise<[Network, AptosChains]>;
}
//# sourceMappingURL=platform.d.ts.map