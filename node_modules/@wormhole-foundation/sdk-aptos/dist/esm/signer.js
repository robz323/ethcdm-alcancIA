import { encoding } from "@wormhole-foundation/sdk-connect";
import { AptosPlatform } from "./platform.js";
import { Account, Ed25519PrivateKey, } from "@aptos-labs/ts-sdk";
// returns a SignOnlySigner for the Aptos platform
export async function getAptosSigner(rpc, privateKey) {
    const [_, chain] = await AptosPlatform.chainFromRpc(rpc);
    const account = Account.fromPrivateKey({
        // TODO: support secp256k1
        privateKey: new Ed25519PrivateKey(encoding.hex.decode(privateKey)),
    });
    return new AptosSigner(chain, account, rpc);
}
export class AptosSigner {
    _chain;
    _account;
    _rpc;
    _debug;
    constructor(_chain, _account, _rpc, _debug) {
        this._chain = _chain;
        this._account = _account;
        this._rpc = _rpc;
        this._debug = _debug;
    }
    chain() {
        return this._chain;
    }
    address() {
        return this._account.accountAddress.toString();
    }
    async signAndSend(tx) {
        const txhashes = [];
        for (const txn of tx) {
            const { description, transaction } = txn;
            if (this._debug)
                console.log(`Signing: ${description} for ${this.address()}`);
            const tx = await this._rpc.transaction.build.simple({
                sender: this._account.accountAddress,
                data: transaction,
            });
            const { hash } = await this._simSignSend(tx);
            txhashes.push(hash);
        }
        return txhashes;
    }
    async _simSignSend(rawTx) {
        // simulate transaction
        await this._rpc.transaction.simulate
            .simple({
            signerPublicKey: this._account.publicKey,
            transaction: rawTx,
        })
            .then((sims) => sims.forEach((tx) => {
            if (!tx.success) {
                throw new Error(`Transaction failed: ${tx.vm_status}\n${JSON.stringify(tx, null, 2)}`);
            }
        }));
        return this._rpc
            .signAndSubmitTransaction({ signer: this._account, transaction: rawTx })
            .then((pendingTx) => this._rpc.waitForTransaction({ transactionHash: pendingTx.hash }));
    }
}
//# sourceMappingURL=signer.js.map