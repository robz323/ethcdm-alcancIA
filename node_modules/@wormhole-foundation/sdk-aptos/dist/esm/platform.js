import { PlatformContext, Wormhole, chainToPlatform, isNative, nativeChainIds, decimals as nativeDecimals, networkPlatformConfigs, } from "@wormhole-foundation/sdk-connect";
import { Aptos, AptosConfig, Network as AptosNetwork } from "@aptos-labs/ts-sdk";
import { AptosChain } from "./chain.js";
import { _platform } from "./types.js";
import { AptosAddress } from "./address.js";
import { APTOS_COIN } from "./constants.js";
/**
 * @category Aptos
 */
export class AptosPlatform extends PlatformContext {
    static _platform = _platform;
    constructor(network, config) {
        super(network, config ?? networkPlatformConfigs(network, AptosPlatform._platform));
    }
    getRpc(chain) {
        if (chain in this.config) {
            const network = this.network === "Mainnet" ? AptosNetwork.MAINNET : AptosNetwork.TESTNET;
            const config = new AptosConfig({ fullnode: this.config[chain].rpc, network });
            return new Aptos(config);
        }
        throw new Error("No configuration available for chain: " + chain);
    }
    getChain(chain, rpc) {
        if (chain in this.config)
            return new AptosChain(chain, this);
        throw new Error("No configuration available for chain: " + chain);
    }
    static nativeTokenId(network, chain) {
        if (!this.isSupportedChain(chain))
            throw new Error(`invalid chain: ${chain}`);
        return Wormhole.tokenId(chain, APTOS_COIN);
    }
    static isNativeTokenId(network, chain, tokenId) {
        if (!this.isSupportedChain(chain))
            return false;
        if (tokenId.chain !== chain)
            return false;
        const native = this.nativeTokenId(network, chain);
        return native == tokenId;
    }
    static isSupportedChain(chain) {
        const platform = chainToPlatform(chain);
        return platform === AptosPlatform._platform;
    }
    static async getDecimals(chain, rpc, token) {
        if (isNative(token) || token === APTOS_COIN)
            return nativeDecimals.nativeDecimals(AptosPlatform._platform);
        const assetType = token.toString();
        const data = await rpc.getFungibleAssetMetadataByAssetType({ assetType });
        return data.decimals;
    }
    static async getBalance(chain, rpc, walletAddress, token) {
        const assetType = isNative(token) ? APTOS_COIN : token.toString();
        try {
            const data = await rpc.getCurrentFungibleAssetBalances({
                options: {
                    where: {
                        owner_address: { _eq: walletAddress },
                        asset_type: { _eq: assetType },
                    },
                },
            });
            return data[0]?.amount ?? null;
        }
        catch (e) {
            if (e.status === 404) {
                return null;
            }
            throw e;
        }
    }
    static async getBalances(chain, rpc, walletAddress, tokens) {
        const balancesArr = await Promise.all(tokens.map(async (token) => {
            const balance = await this.getBalance(chain, rpc, walletAddress, token);
            const address = isNative(token) ? "native" : new AptosAddress(token).toString();
            return { [address]: balance };
        }));
        return balancesArr.reduce((obj, item) => Object.assign(obj, item), {});
    }
    static async sendWait(chain, rpc, stxns) {
        const txhashes = [];
        for (const stxn of stxns) {
            const pendingTx = await rpc.transaction.submit.simple(stxn.transaction);
            const res = await rpc.waitForTransaction({
                transactionHash: pendingTx.hash,
            });
            txhashes.push(res.hash);
        }
        return txhashes;
    }
    static async getLatestBlock(rpc) {
        const li = await rpc.getLedgerInfo();
        return Number(li.block_height);
    }
    static async getLatestFinalizedBlock(rpc) {
        const li = await rpc.getLedgerInfo();
        return Number(li.block_height);
    }
    static chainFromChainId(chainId) {
        const netChain = nativeChainIds.platformNativeChainIdToNetworkChain(AptosPlatform._platform, BigInt(chainId));
        if (!netChain)
            throw new Error(`No matching chainId to determine network and chain: ${chainId}`);
        const [network, chain] = netChain;
        return [network, chain];
    }
    static async chainFromRpc(rpc) {
        const li = await rpc.getLedgerInfo();
        return this.chainFromChainId(li.chain_id.toString());
    }
}
//# sourceMappingURL=platform.js.map