import { type Chain, type Network } from "@wormhole-foundation/sdk-base";
import { type AccountAddress, type ChainAddress } from "../../address.js";
import type { TokenId } from "../../types.js";
import type { UnsignedTransaction } from "../../unsignedTransaction.js";
import { type ProtocolVAA } from "./../../vaa/index.js";
import type { EmptyPlatformMap } from "../../protocol.js";
import "../../registry.js";
declare module "../../registry.js" {
    namespace WormholeRegistry {
        interface ProtocolToInterfaceMapping<N, C> {
            TBTCBridge: TBTCBridge<N, C>;
        }
        interface ProtocolToPlatformMapping {
            TBTCBridge: EmptyPlatformMap<"TBTCBridge">;
        }
    }
}
export declare namespace TBTCBridge {
    const _protocol = "TBTCBridge";
    export type ProtocolName = typeof _protocol;
    const _transferPayloads: readonly ["GatewayTransfer", "Transfer"];
    const _payloads: readonly ["GatewayTransfer", "Transfer"];
    export type TransferPayloadNames = (typeof _transferPayloads)[number];
    export type PayloadNames = (typeof _payloads)[number];
    /** The VAA types emitted by the TBTCBridge protocol */
    export type VAA<PayloadName extends PayloadNames = PayloadNames> = ProtocolVAA<ProtocolName, PayloadName>;
    export const getTransferDiscriminator: () => import("../../vaa/functions.js").PayloadDiscriminator<"TBTCBridge:Transfer" | "TBTCBridge:GatewayTransfer", false>;
    export const getNativeTbtcToken: (chain: Chain) => TokenId | undefined;
    export {};
}
export interface TBTCBridge<N extends Network = Network, C extends Chain = Chain> {
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, amount: bigint): AsyncGenerator<UnsignedTransaction<N, C>>;
    redeem(sender: AccountAddress<C>, vaa: TBTCBridge.VAA): AsyncGenerator<UnsignedTransaction<N, C>>;
}
//# sourceMappingURL=tbtc.d.ts.map