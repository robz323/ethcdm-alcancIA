{"version":3,"file":"index.cjs","sources":["../../../../../src/idl/light_compressed_token.ts","../../../../../src/instructions/pack-compressed-token-accounts.ts","../../../../../src/constants.ts","../../../../../src/program.ts","../../../../../src/actions/approve-and-mint-to.ts","../../../../../src/actions/compress.ts","../../../../../src/actions/transfer.ts","../../../../../src/actions/decompress.ts","../../../../../src/actions/create-mint.ts","../../../../../src/actions/mint-to.ts","../../../../../src/actions/merge-token-accounts.ts","../../../../../src/actions/create-token-pool.ts","../../../../../src/actions/create-token-program-lookup-table.ts","../../../../../src/actions/compress-spl-token-account.ts"],"sourcesContent":["export type LightCompressedToken = {\n    version: '1.2.0';\n    name: 'light_compressed_token';\n    instructions: [\n        {\n            name: 'createTokenPool';\n            docs: [\n                'This instruction creates a token pool for a given mint. Every spl mint',\n                'can have one token pool. When a token is compressed the tokens are',\n                'transferrred to the token pool, and their compressed equivalent is',\n                'minted into a Merkle tree.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'mintTo';\n            docs: [\n                'Mints tokens from an spl token mint to a list of compressed accounts.',\n                'Minted tokens are transferred to a pool account owned by the compressed',\n                'token program. The instruction creates one compressed output account for',\n                'every amount and pubkey input pair. A constant amount of lamports can be',\n                'transferred to each output account to enable. A use case to add lamports',\n                'to a compressed token account is to prevent spam. This is the only way',\n                'to add lamports to a compressed token account.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['programs'];\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'solPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'publicKeys';\n                    type: {\n                        vec: 'publicKey';\n                    };\n                },\n                {\n                    name: 'amounts';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'lamports';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'compressSplTokenAccount';\n            docs: [\n                'Compresses the balance of an spl token account sub an optional remaining',\n                'amount. This instruction does not close the spl token account. To close',\n                'the account bundle a close spl account instruction in your transaction.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'owner';\n                    type: 'publicKey';\n                },\n                {\n                    name: 'remainingAmount';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n                {\n                    name: 'cpiContext';\n                    type: {\n                        option: {\n                            defined: 'CompressedCpiContext';\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'transfer';\n            docs: [\n                'Transfers compressed tokens from one account to another. All accounts',\n                'must be of the same mint. Additional spl tokens can be compressed or',\n                'decompressed. In one transaction only compression or decompression is',\n                'possible. Lamports can be transferred alongside tokens. If output token',\n                'accounts specify less lamports than inputs the remaining lamports are',\n                'transferred to an output compressed account. Signer must be owner or',\n                'delegate. If a delegated token account is transferred the delegate is',\n                'not preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'approve';\n            docs: [\n                'Delegates an amount to a delegate. A compressed token account is either',\n                'completely delegated or not. Prior delegates are not preserved. Cannot',\n                'be called by a delegate.',\n                'The instruction creates two output accounts:',\n                '1. one account with delegated amount',\n                '2. one account with remaining(change) amount',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'revoke';\n            docs: [\n                'Revokes a delegation. The instruction merges all inputs into one output',\n                'account. Cannot be called by a delegate. Delegates are not preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'freeze';\n            docs: [\n                'Freezes compressed token accounts. Inputs must not be frozen. Creates as',\n                'many outputs as inputs. Balances and delegates are preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['that this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'thaw';\n            docs: [\n                'Thaws frozen compressed token accounts. Inputs must be frozen. Creates',\n                'as many outputs as inputs. Balances and delegates are preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['that this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'burn';\n            docs: [\n                'Burns compressed tokens and spl tokens from the pool account. Delegates',\n                'can burn tokens. The output compressed token account remains delegated.',\n                'Creates one output compressed token account.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'stubIdlBuild';\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs1';\n                    type: {\n                        defined: 'CompressedTokenInstructionDataTransfer';\n                    };\n                },\n                {\n                    name: 'inputs2';\n                    type: {\n                        defined: 'TokenData';\n                    };\n                },\n            ];\n        },\n    ];\n    types: [\n        {\n            name: 'AccessMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        docs: ['Owner of the Merkle tree.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'programOwner';\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'forester';\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ];\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'AccountState';\n            type: {\n                kind: 'enum';\n                variants: [\n                    {\n                        name: 'Initialized';\n                    },\n                    {\n                        name: 'Frozen';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccount';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'lamports';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'address';\n                        type: {\n                            option: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccountData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'discriminator';\n                        type: {\n                            array: ['u8', 8];\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: 'bytes';\n                    },\n                    {\n                        name: 'dataHash';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedCpiContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'setContext';\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'firstSetContext';\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContextAccountIndex';\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ];\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedProof';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'a';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'b';\n                        type: {\n                            array: ['u8', 64];\n                        };\n                    },\n                    {\n                        name: 'c';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedTokenInstructionDataTransfer';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'mint';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'delegatedTransfer';\n                        docs: [\n                            'Is required if the signer is delegate,',\n                            '-> delegate is authority account,',\n                            'owner = Some(owner) is the owner of the token account.',\n                        ];\n                        type: {\n                            option: {\n                                defined: 'DelegatedTransfer';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputTokenDataWithContext';\n                        type: {\n                            vec: {\n                                defined: 'InputTokenDataWithContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'PackedTokenTransferOutputData';\n                            };\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressAmount';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'lamportsChangeAccountMerkleTreeIndex';\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'DelegatedTransfer';\n            docs: [\n                'Struct to provide the owner when the delegate is signer of the transaction.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'delegateChangeAccountIndex';\n                        docs: [\n                            'Index of change compressed account in output compressed accounts. In',\n                            \"case that the delegate didn't spend the complete delegated compressed\",\n                            'account balance the change compressed account will be delegated to her',\n                            'as well.',\n                        ];\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InputTokenDataWithContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'amount';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'delegateIndex';\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        type: 'u16';\n                    },\n                    {\n                        name: 'lamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvoke';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvokeCpi';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'accessMetadata';\n                        type: {\n                            defined: 'AccessMetadata';\n                        };\n                    },\n                    {\n                        name: 'rolloverMetadata';\n                        type: {\n                            defined: 'RolloverMetadata';\n                        };\n                    },\n                    {\n                        name: 'associatedQueue';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'nextMerkleTree';\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeSequenceNumber';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'pubkey';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'seq';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'NewAddressParamsPacked';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'seed';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'addressQueueAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex';\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ];\n                        type: 'u16';\n                    },\n                    {\n                        name: 'readOnly';\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ];\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'leafIndex';\n                        type: 'u32';\n                    },\n                    {\n                        name: 'queueIndex';\n                        docs: [\n                            'Index of leaf in queue. Placeholder of batched Merkle tree updates',\n                            'currently unimplemented.',\n                        ];\n                        type: {\n                            option: {\n                                defined: 'QueueIndex';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedTokenTransferOutputData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'amount';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'lamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PublicTransactionEvent';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputLeafIndices';\n                        type: {\n                            vec: 'u32';\n                        };\n                    },\n                    {\n                        name: 'sequenceNumbers';\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'pubkeyArray';\n                        type: {\n                            vec: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'message';\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'QueueIndex';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'queueId';\n                        docs: ['Id of queue in queue account.'];\n                        type: 'u8';\n                    },\n                    {\n                        name: 'index';\n                        docs: ['Index of compressed account hash in queue.'];\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'RolloverMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'index';\n                        docs: ['Unique index.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverFee';\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverThreshold';\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        docs: ['Tip for maintaining the account.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolledoverSlot';\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'closeThreshold';\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'additionalBytes';\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ];\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'TokenData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'mint';\n                        docs: ['The mint associated with this account'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'owner';\n                        docs: ['The owner of this account.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'amount';\n                        docs: ['The amount of tokens this account holds.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'delegate';\n                        docs: [\n                            'If `delegate` is `Some` then `delegated_amount` represents',\n                            'the amount authorized by the delegate',\n                        ];\n                        type: {\n                            option: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'state';\n                        docs: [\"The account's state\"];\n                        type: {\n                            defined: 'AccountState';\n                        };\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n    ];\n    errors: [\n        {\n            code: 6000;\n            name: 'PublicKeyAmountMissmatch';\n            msg: 'public keys and amounts must be of same length';\n        },\n        {\n            code: 6001;\n            name: 'ComputeInputSumFailed';\n            msg: 'ComputeInputSumFailed';\n        },\n        {\n            code: 6002;\n            name: 'ComputeOutputSumFailed';\n            msg: 'ComputeOutputSumFailed';\n        },\n        {\n            code: 6003;\n            name: 'ComputeCompressSumFailed';\n            msg: 'ComputeCompressSumFailed';\n        },\n        {\n            code: 6004;\n            name: 'ComputeDecompressSumFailed';\n            msg: 'ComputeDecompressSumFailed';\n        },\n        {\n            code: 6005;\n            name: 'SumCheckFailed';\n            msg: 'SumCheckFailed';\n        },\n        {\n            code: 6006;\n            name: 'DecompressRecipientUndefinedForDecompress';\n            msg: 'DecompressRecipientUndefinedForDecompress';\n        },\n        {\n            code: 6007;\n            name: 'CompressedPdaUndefinedForDecompress';\n            msg: 'CompressedPdaUndefinedForDecompress';\n        },\n        {\n            code: 6008;\n            name: 'DeCompressAmountUndefinedForDecompress';\n            msg: 'DeCompressAmountUndefinedForDecompress';\n        },\n        {\n            code: 6009;\n            name: 'CompressedPdaUndefinedForCompress';\n            msg: 'CompressedPdaUndefinedForCompress';\n        },\n        {\n            code: 6010;\n            name: 'DeCompressAmountUndefinedForCompress';\n            msg: 'DeCompressAmountUndefinedForCompress';\n        },\n        {\n            code: 6011;\n            name: 'DelegateSignerCheckFailed';\n            msg: 'DelegateSignerCheckFailed';\n        },\n        {\n            code: 6012;\n            name: 'MintTooLarge';\n            msg: 'Minted amount greater than u64::MAX';\n        },\n        {\n            code: 6013;\n            name: 'SplTokenSupplyMismatch';\n            msg: 'SplTokenSupplyMismatch';\n        },\n        {\n            code: 6014;\n            name: 'HeapMemoryCheckFailed';\n            msg: 'HeapMemoryCheckFailed';\n        },\n        {\n            code: 6015;\n            name: 'InstructionNotCallable';\n            msg: 'The instruction is not callable';\n        },\n        {\n            code: 6016;\n            name: 'ArithmeticUnderflow';\n            msg: 'ArithmeticUnderflow';\n        },\n        {\n            code: 6017;\n            name: 'HashToFieldError';\n            msg: 'HashToFieldError';\n        },\n        {\n            code: 6018;\n            name: 'InvalidAuthorityMint';\n            msg: 'Expected the authority to be also a mint authority';\n        },\n        {\n            code: 6019;\n            name: 'InvalidFreezeAuthority';\n            msg: 'Provided authority is not the freeze authority';\n        },\n        {\n            code: 6020;\n            name: 'InvalidDelegateIndex';\n        },\n        {\n            code: 6021;\n            name: 'TokenPoolPdaUndefined';\n        },\n        {\n            code: 6022;\n            name: 'IsTokenPoolPda';\n            msg: 'Compress or decompress recipient is the same account as the token pool pda.';\n        },\n        {\n            code: 6023;\n            name: 'InvalidTokenPoolPda';\n        },\n        {\n            code: 6024;\n            name: 'NoInputTokenAccountsProvided';\n        },\n        {\n            code: 6025;\n            name: 'NoInputsProvided';\n        },\n        {\n            code: 6026;\n            name: 'MintHasNoFreezeAuthority';\n        },\n        {\n            code: 6027;\n            name: 'MintWithInvalidExtension';\n        },\n        {\n            code: 6028;\n            name: 'InsufficientTokenAccountBalance';\n            msg: 'The token account balance is less than the remaining amount.';\n        },\n    ];\n};\nexport const IDL: LightCompressedToken = {\n    version: '1.2.0',\n    name: 'light_compressed_token',\n    instructions: [\n        {\n            name: 'createTokenPool',\n            docs: [\n                'This instruction creates a token pool for a given mint. Every spl mint',\n                'can have one token pool. When a token is compressed the tokens are',\n                'transferrred to the token pool, and their compressed equivalent is',\n                'minted into a Merkle tree.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'mintTo',\n            docs: [\n                'Mints tokens from an spl token mint to a list of compressed accounts.',\n                'Minted tokens are transferred to a pool account owned by the compressed',\n                'token program. The instruction creates one compressed output account for',\n                'every amount and pubkey input pair. A constant amount of lamports can be',\n                'transferred to each output account to enable. A use case to add lamports',\n                'to a compressed token account is to prevent spam. This is the only way',\n                'to add lamports to a compressed token account.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['programs'],\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'solPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'publicKeys',\n                    type: {\n                        vec: 'publicKey',\n                    },\n                },\n                {\n                    name: 'amounts',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'lamports',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'compressSplTokenAccount',\n            docs: [\n                'Compresses the balance of an spl token account sub an optional remaining',\n                'amount. This instruction does not close the spl token account. To close',\n                'the account bundle a close spl account instruction in your transaction.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'owner',\n                    type: 'publicKey',\n                },\n                {\n                    name: 'remainingAmount',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n                {\n                    name: 'cpiContext',\n                    type: {\n                        option: {\n                            defined: 'CompressedCpiContext',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'transfer',\n            docs: [\n                'Transfers compressed tokens from one account to another. All accounts',\n                'must be of the same mint. Additional spl tokens can be compressed or',\n                'decompressed. In one transaction only compression or decompression is',\n                'possible. Lamports can be transferred alongside tokens. If output token',\n                'accounts specify less lamports than inputs the remaining lamports are',\n                'transferred to an output compressed account. Signer must be owner or',\n                'delegate. If a delegated token account is transferred the delegate is',\n                'not preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'approve',\n            docs: [\n                'Delegates an amount to a delegate. A compressed token account is either',\n                'completely delegated or not. Prior delegates are not preserved. Cannot',\n                'be called by a delegate.',\n                'The instruction creates two output accounts:',\n                '1. one account with delegated amount',\n                '2. one account with remaining(change) amount',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'revoke',\n            docs: [\n                'Revokes a delegation. The instruction merges all inputs into one output',\n                'account. Cannot be called by a delegate. Delegates are not preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'freeze',\n            docs: [\n                'Freezes compressed token accounts. Inputs must not be frozen. Creates as',\n                'many outputs as inputs. Balances and delegates are preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['that this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'thaw',\n            docs: [\n                'Thaws frozen compressed token accounts. Inputs must be frozen. Creates',\n                'as many outputs as inputs. Balances and delegates are preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['that this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'burn',\n            docs: [\n                'Burns compressed tokens and spl tokens from the pool account. Delegates',\n                'can burn tokens. The output compressed token account remains delegated.',\n                'Creates one output compressed token account.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'stubIdlBuild',\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs1',\n                    type: {\n                        defined: 'CompressedTokenInstructionDataTransfer',\n                    },\n                },\n                {\n                    name: 'inputs2',\n                    type: {\n                        defined: 'TokenData',\n                    },\n                },\n            ],\n        },\n    ],\n    types: [\n        {\n            name: 'AccessMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        docs: ['Owner of the Merkle tree.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'programOwner',\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'forester',\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ],\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'AccountState',\n            type: {\n                kind: 'enum',\n                variants: [\n                    {\n                        name: 'Initialized',\n                    },\n                    {\n                        name: 'Frozen',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccount',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'lamports',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'address',\n                        type: {\n                            option: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccountData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'discriminator',\n                        type: {\n                            array: ['u8', 8],\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: 'bytes',\n                    },\n                    {\n                        name: 'dataHash',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedCpiContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'setContext',\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'firstSetContext',\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContextAccountIndex',\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ],\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedProof',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'a',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'b',\n                        type: {\n                            array: ['u8', 64],\n                        },\n                    },\n                    {\n                        name: 'c',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedTokenInstructionDataTransfer',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'mint',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'delegatedTransfer',\n                        docs: [\n                            'Is required if the signer is delegate,',\n                            '-> delegate is authority account,',\n                            'owner = Some(owner) is the owner of the token account.',\n                        ],\n                        type: {\n                            option: {\n                                defined: 'DelegatedTransfer',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputTokenDataWithContext',\n                        type: {\n                            vec: {\n                                defined: 'InputTokenDataWithContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined: 'PackedTokenTransferOutputData',\n                            },\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressAmount',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'lamportsChangeAccountMerkleTreeIndex',\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'DelegatedTransfer',\n            docs: [\n                'Struct to provide the owner when the delegate is signer of the transaction.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'delegateChangeAccountIndex',\n                        docs: [\n                            'Index of change compressed account in output compressed accounts. In',\n                            \"case that the delegate didn't spend the complete delegated compressed\",\n                            'account balance the change compressed account will be delegated to her',\n                            'as well.',\n                        ],\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InputTokenDataWithContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'amount',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'delegateIndex',\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        type: 'u16',\n                    },\n                    {\n                        name: 'lamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvoke',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvokeCpi',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'accessMetadata',\n                        type: {\n                            defined: 'AccessMetadata',\n                        },\n                    },\n                    {\n                        name: 'rolloverMetadata',\n                        type: {\n                            defined: 'RolloverMetadata',\n                        },\n                    },\n                    {\n                        name: 'associatedQueue',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'nextMerkleTree',\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeSequenceNumber',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'pubkey',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'seq',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'NewAddressParamsPacked',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'seed',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'addressQueueAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex',\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ],\n                        type: 'u16',\n                    },\n                    {\n                        name: 'readOnly',\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ],\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'leafIndex',\n                        type: 'u32',\n                    },\n                    {\n                        name: 'queueIndex',\n                        docs: [\n                            'Index of leaf in queue. Placeholder of batched Merkle tree updates',\n                            'currently unimplemented.',\n                        ],\n                        type: {\n                            option: {\n                                defined: 'QueueIndex',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedTokenTransferOutputData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'amount',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'lamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PublicTransactionEvent',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputLeafIndices',\n                        type: {\n                            vec: 'u32',\n                        },\n                    },\n                    {\n                        name: 'sequenceNumbers',\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'pubkeyArray',\n                        type: {\n                            vec: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'message',\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'QueueIndex',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'queueId',\n                        docs: ['Id of queue in queue account.'],\n                        type: 'u8',\n                    },\n                    {\n                        name: 'index',\n                        docs: ['Index of compressed account hash in queue.'],\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'RolloverMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'index',\n                        docs: ['Unique index.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverFee',\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverThreshold',\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        docs: ['Tip for maintaining the account.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolledoverSlot',\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'closeThreshold',\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'additionalBytes',\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ],\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'TokenData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'mint',\n                        docs: ['The mint associated with this account'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'owner',\n                        docs: ['The owner of this account.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'amount',\n                        docs: ['The amount of tokens this account holds.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'delegate',\n                        docs: [\n                            'If `delegate` is `Some` then `delegated_amount` represents',\n                            'the amount authorized by the delegate',\n                        ],\n                        type: {\n                            option: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'state',\n                        docs: [\"The account's state\"],\n                        type: {\n                            defined: 'AccountState',\n                        },\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    errors: [\n        {\n            code: 6000,\n            name: 'PublicKeyAmountMissmatch',\n            msg: 'public keys and amounts must be of same length',\n        },\n        {\n            code: 6001,\n            name: 'ComputeInputSumFailed',\n            msg: 'ComputeInputSumFailed',\n        },\n        {\n            code: 6002,\n            name: 'ComputeOutputSumFailed',\n            msg: 'ComputeOutputSumFailed',\n        },\n        {\n            code: 6003,\n            name: 'ComputeCompressSumFailed',\n            msg: 'ComputeCompressSumFailed',\n        },\n        {\n            code: 6004,\n            name: 'ComputeDecompressSumFailed',\n            msg: 'ComputeDecompressSumFailed',\n        },\n        {\n            code: 6005,\n            name: 'SumCheckFailed',\n            msg: 'SumCheckFailed',\n        },\n        {\n            code: 6006,\n            name: 'DecompressRecipientUndefinedForDecompress',\n            msg: 'DecompressRecipientUndefinedForDecompress',\n        },\n        {\n            code: 6007,\n            name: 'CompressedPdaUndefinedForDecompress',\n            msg: 'CompressedPdaUndefinedForDecompress',\n        },\n        {\n            code: 6008,\n            name: 'DeCompressAmountUndefinedForDecompress',\n            msg: 'DeCompressAmountUndefinedForDecompress',\n        },\n        {\n            code: 6009,\n            name: 'CompressedPdaUndefinedForCompress',\n            msg: 'CompressedPdaUndefinedForCompress',\n        },\n        {\n            code: 6010,\n            name: 'DeCompressAmountUndefinedForCompress',\n            msg: 'DeCompressAmountUndefinedForCompress',\n        },\n        {\n            code: 6011,\n            name: 'DelegateSignerCheckFailed',\n            msg: 'DelegateSignerCheckFailed',\n        },\n        {\n            code: 6012,\n            name: 'MintTooLarge',\n            msg: 'Minted amount greater than u64::MAX',\n        },\n        {\n            code: 6013,\n            name: 'SplTokenSupplyMismatch',\n            msg: 'SplTokenSupplyMismatch',\n        },\n        {\n            code: 6014,\n            name: 'HeapMemoryCheckFailed',\n            msg: 'HeapMemoryCheckFailed',\n        },\n        {\n            code: 6015,\n            name: 'InstructionNotCallable',\n            msg: 'The instruction is not callable',\n        },\n        {\n            code: 6016,\n            name: 'ArithmeticUnderflow',\n            msg: 'ArithmeticUnderflow',\n        },\n        {\n            code: 6017,\n            name: 'HashToFieldError',\n            msg: 'HashToFieldError',\n        },\n        {\n            code: 6018,\n            name: 'InvalidAuthorityMint',\n            msg: 'Expected the authority to be also a mint authority',\n        },\n        {\n            code: 6019,\n            name: 'InvalidFreezeAuthority',\n            msg: 'Provided authority is not the freeze authority',\n        },\n        {\n            code: 6020,\n            name: 'InvalidDelegateIndex',\n        },\n        {\n            code: 6021,\n            name: 'TokenPoolPdaUndefined',\n        },\n        {\n            code: 6022,\n            name: 'IsTokenPoolPda',\n            msg: 'Compress or decompress recipient is the same account as the token pool pda.',\n        },\n        {\n            code: 6023,\n            name: 'InvalidTokenPoolPda',\n        },\n        {\n            code: 6024,\n            name: 'NoInputTokenAccountsProvided',\n        },\n        {\n            code: 6025,\n            name: 'NoInputsProvided',\n        },\n        {\n            code: 6026,\n            name: 'MintHasNoFreezeAuthority',\n        },\n        {\n            code: 6027,\n            name: 'MintWithInvalidExtension',\n        },\n        {\n            code: 6028,\n            name: 'InsufficientTokenAccountBalance',\n            msg: 'The token account balance is less than the remaining amount.',\n        },\n    ],\n};\n","import {\n    ParsedTokenAccount,\n    InputTokenDataWithContext,\n    getIndexOrAdd,\n    bn,\n    padOutputStateMerkleTrees,\n    TokenTransferOutputData,\n} from '@lightprotocol/stateless.js';\nimport { PublicKey, AccountMeta } from '@solana/web3.js';\nimport { PackedTokenTransferOutputData } from '../types';\n\nexport type PackCompressedTokenAccountsParams = {\n    /** Input state to be consumed */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * State trees that the output should be inserted into. Defaults to the 0th\n     * state tree of the input state. Gets padded to the length of\n     * outputCompressedAccounts.\n     */\n    outputStateTrees?: PublicKey[] | PublicKey;\n    /** Optional remaining accounts to append to */\n    remainingAccounts?: PublicKey[];\n    /**\n     *  Root indices that are used on-chain to fetch the correct root\n     *  from the state Merkle tree account for validity proof verification.\n     */\n    rootIndices: number[];\n    tokenTransferOutputs: TokenTransferOutputData[];\n};\n\n// TODO: include owner and lamports in packing.\n/**\n * Packs Compressed Token Accounts.\n */\nexport function packCompressedTokenAccounts(\n    params: PackCompressedTokenAccountsParams,\n): {\n    inputTokenDataWithContext: InputTokenDataWithContext[];\n    remainingAccountMetas: AccountMeta[];\n    packedOutputTokenData: PackedTokenTransferOutputData[];\n} {\n    const {\n        inputCompressedTokenAccounts,\n        outputStateTrees,\n        remainingAccounts = [],\n        rootIndices,\n        tokenTransferOutputs,\n    } = params;\n\n    const _remainingAccounts = remainingAccounts.slice();\n    let delegateIndex: number | null = null;\n\n    if (\n        inputCompressedTokenAccounts.length > 0 &&\n        inputCompressedTokenAccounts[0].parsed.delegate\n    ) {\n        delegateIndex = getIndexOrAdd(\n            _remainingAccounts,\n            inputCompressedTokenAccounts[0].parsed.delegate,\n        );\n    }\n    /// TODO: move pubkeyArray to remainingAccounts\n    /// Currently just packs 'delegate' to pubkeyArray\n    const packedInputTokenData: InputTokenDataWithContext[] = [];\n    /// pack inputs\n    inputCompressedTokenAccounts.forEach(\n        (account: ParsedTokenAccount, index) => {\n            const merkleTreePubkeyIndex = getIndexOrAdd(\n                _remainingAccounts,\n                account.compressedAccount.merkleTree,\n            );\n\n            const nullifierQueuePubkeyIndex = getIndexOrAdd(\n                _remainingAccounts,\n                account.compressedAccount.nullifierQueue,\n            );\n\n            packedInputTokenData.push({\n                amount: account.parsed.amount,\n                delegateIndex,\n                merkleContext: {\n                    merkleTreePubkeyIndex,\n                    nullifierQueuePubkeyIndex,\n                    leafIndex: account.compressedAccount.leafIndex,\n                    queueIndex: null,\n                },\n                rootIndex: rootIndices[index],\n                lamports: account.compressedAccount.lamports.eq(bn(0))\n                    ? null\n                    : account.compressedAccount.lamports,\n                tlv: null,\n            });\n        },\n    );\n\n    /// pack output state trees\n    const paddedOutputStateMerkleTrees = padOutputStateMerkleTrees(\n        outputStateTrees,\n        tokenTransferOutputs.length,\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    const packedOutputTokenData: PackedTokenTransferOutputData[] = [];\n    paddedOutputStateMerkleTrees.forEach((account, index) => {\n        const merkleTreeIndex = getIndexOrAdd(_remainingAccounts, account);\n        packedOutputTokenData.push({\n            owner: tokenTransferOutputs[index].owner,\n            amount: tokenTransferOutputs[index].amount,\n            lamports: tokenTransferOutputs[index].lamports?.eq(bn(0))\n                ? null\n                : tokenTransferOutputs[index].lamports,\n            merkleTreeIndex,\n            tlv: null,\n        });\n    });\n    // to meta\n    const remainingAccountMetas = _remainingAccounts.map(\n        (account): AccountMeta => ({\n            pubkey: account,\n            isWritable: true,\n            isSigner: false,\n        }),\n    );\n\n    return {\n        inputTokenDataWithContext: packedInputTokenData,\n        remainingAccountMetas,\n        packedOutputTokenData,\n    };\n}\n","export const POOL_SEED = Buffer.from('pool');\n\nexport const CPI_AUTHORITY_SEED = Buffer.from('cpi_authority');\n\nexport const SPL_TOKEN_MINT_RENT_EXEMPT_BALANCE = 1461600;\n","import {\n    PublicKey,\n    Keypair,\n    TransactionInstruction,\n    SystemProgram,\n    Connection,\n    AddressLookupTableProgram,\n    AccountMeta,\n} from '@solana/web3.js';\nimport { BN, Program, AnchorProvider, setProvider } from '@coral-xyz/anchor';\nimport { IDL, LightCompressedToken } from './idl/light_compressed_token';\nimport {\n    CompressedProof,\n    LightSystemProgram,\n    ParsedTokenAccount,\n    TokenTransferOutputData,\n    bn,\n    confirmConfig,\n    CompressedTokenInstructionDataTransfer,\n    defaultStaticAccountsStruct,\n    sumUpLamports,\n    toArray,\n    useWallet,\n    validateSameOwner,\n    validateSufficientBalance,\n    defaultTestStateTreeAccounts,\n} from '@lightprotocol/stateless.js';\nimport {\n    MINT_SIZE,\n    TOKEN_2022_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    createInitializeMint2Instruction,\n    createMintToInstruction,\n} from '@solana/spl-token';\nimport { CPI_AUTHORITY_SEED, POOL_SEED } from './constants';\nimport { packCompressedTokenAccounts } from './instructions/pack-compressed-token-accounts';\n\nexport type CompressParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * owner of the *uncompressed* token account.\n     */\n    owner: PublicKey;\n    /**\n     * source (associated) token account address.\n     */\n    source: PublicKey;\n    /**\n     * owner of the compressed token account.\n     * To compress to a batch of recipients, pass an array of PublicKeys.\n     */\n    toAddress: PublicKey | PublicKey[];\n    /**\n     * Mint address of the token to compress.\n     */\n    mint: PublicKey;\n    /**\n     * amount of tokens to compress.\n     */\n    amount: number | BN | number[] | BN[];\n    /**\n     * The state tree that the tx output should be inserted into. Defaults to a\n     * public state tree if unspecified.\n     */\n    outputStateTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type CompressSplTokenAccountParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Authority that owns the token account\n     */\n    authority: PublicKey;\n    /**\n     * Token account to compress\n     */\n    tokenAccount: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * Optional: remaining amount to leave in token account. Default: 0\n     */\n    remainingAmount?: BN;\n    /**\n     * The state tree that the compressed token account should be inserted into.\n     */\n    outputStateTree: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type DecompressParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * input state to be consumed\n     */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * address of **uncompressed** destination token account.\n     */\n    toAddress: PublicKey;\n    /**\n     * amount of tokens to decompress.\n     */\n    amount: number | BN;\n    /**\n     * The recent state root indices of the input state. The expiry is tied to\n     * the proof.\n     */\n    recentInputStateRootIndices: number[];\n    /**\n     * The recent validity proof for state inclusion of the input state. It\n     * expires after n slots.\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * The state tree that the change tx output should be inserted into.\n     * Defaults to a public state tree if unspecified.\n     */\n    outputStateTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type TransferParams = {\n    /**\n     * The payer of the transaction\n     */\n    payer: PublicKey;\n    /**\n     * The input state to be consumed\n     */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * Recipient address\n     */\n    toAddress: PublicKey;\n    /**\n     * Amount of tokens to transfer\n     */\n    amount: BN | number;\n    /**\n     * The recent state root indices of the input state. The expiry is tied to\n     * the proof.\n\n     */\n    recentInputStateRootIndices: number[];\n    /**\n     * The recent validity proof for state inclusion of the input state. It\n     * expires after n slots.\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * The state trees that the tx output should be inserted into. This can be a\n     * single PublicKey or an array of PublicKey. Defaults to the 0th state tree\n     * of input state.\n     */\n    outputStateTrees?: PublicKey[] | PublicKey;\n};\n\n/**\n * Create Mint account for compressed Tokens\n */\nexport type CreateMintParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Mint authority\n     */\n    authority: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * Mint decimals\n     */\n    decimals: number;\n    /**\n     * Optional: freeze authority\n     */\n    freezeAuthority: PublicKey | null;\n    /**\n     * lamport amount for mint account rent exemption\n     */\n    rentExemptBalance: number;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n    /**\n     * Optional: Mint size to use, defaults to MINT_SIZE\n     */\n    mintSize?: number;\n};\n\n/**\n * Parameters for merging compressed token accounts\n */\nexport type MergeTokenAccountsParams = {\n    /**\n     * Tx feepayer\n     */\n    payer: PublicKey;\n    /**\n     * Owner of the token accounts to be merged\n     */\n    owner: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * Array of compressed token accounts to merge\n     */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * Optional: Public key of the state tree to merge into\n     */\n    outputStateTree: PublicKey;\n    /**\n     * Optional: Recent validity proof for state inclusion\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * Optional: Recent state root indices of the input state\n     */\n    recentInputStateRootIndices: number[];\n};\n\n/**\n * Create compressed token accounts\n */\nexport type MintToParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Mint authority\n     */\n    authority: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * The Solana Public Keys to mint to.\n     */\n    toPubkey: PublicKey[] | PublicKey;\n    /**\n     * The amount of compressed tokens to mint.\n     */\n    amount: BN | BN[] | number | number[];\n    /**\n     * Public key of the state tree to mint into. Defaults to a public state\n     * tree if unspecified.\n     */\n    merkleTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\n/**\n * Register an existing SPL mint account to the compressed token program\n * Creates an omnibus account for the mint\n */\nexport type RegisterMintParams = {\n    /** Tx feepayer */\n    feePayer: PublicKey;\n    /** Mint public key */\n    mint: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\n/**\n * Mint from existing SPL mint to compressed token accounts\n */\nexport type ApproveAndMintToParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Mint authority\n     */\n    authority: PublicKey;\n    /**\n     * Mint authority (associated) token account\n     */\n    authorityTokenAccount: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * The Solana Public Key to mint to.\n     */\n    toPubkey: PublicKey;\n    /**\n     * The amount of compressed tokens to mint.\n     */\n    amount: BN | number;\n    /**\n     * Public key of the state tree to mint into. Defaults to a public state\n     * tree if unspecified.\n     */\n    merkleTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type CreateTokenProgramLookupTableParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * The authority of the transaction.\n     */\n    authority: PublicKey;\n    /**\n     *  Recently finalized Solana slot.\n     */\n    recentSlot: number;\n    /**\n     * Optional Mint addresses to store in the lookup table.\n     */\n    mints?: PublicKey[];\n    /**\n     * Optional additional addresses to store in the lookup table.\n     */\n    remainingAccounts?: PublicKey[];\n};\n\n/**\n * Sum up the token amounts of the compressed token accounts\n */\nexport const sumUpTokenAmount = (accounts: ParsedTokenAccount[]): BN => {\n    return accounts.reduce(\n        (acc, account: ParsedTokenAccount) => acc.add(account.parsed.amount),\n        bn(0),\n    );\n};\n\n/**\n * Validate that all the compressed token accounts are owned by the same owner.\n */\nexport const validateSameTokenOwner = (accounts: ParsedTokenAccount[]) => {\n    const owner = accounts[0].parsed.owner;\n    accounts.forEach(acc => {\n        if (!acc.parsed.owner.equals(owner)) {\n            throw new Error('Token accounts must be owned by the same owner');\n        }\n    });\n};\n\n/**\n * Parse compressed token accounts to get the mint, current owner and delegate.\n */\nexport const parseTokenData = (\n    compressedTokenAccounts: ParsedTokenAccount[],\n) => {\n    const mint = compressedTokenAccounts[0].parsed.mint;\n    const currentOwner = compressedTokenAccounts[0].parsed.owner;\n    const delegate = compressedTokenAccounts[0].parsed.delegate;\n\n    return { mint, currentOwner, delegate };\n};\n\n/**\n * Create the output state for a transfer transaction.\n * @param inputCompressedTokenAccounts  Input state\n * @param toAddress                     Recipient address\n * @param amount                        Amount of tokens to transfer\n * @returns                             Output token data for the transfer\n *                                      instruction\n */\nexport function createTransferOutputState(\n    inputCompressedTokenAccounts: ParsedTokenAccount[],\n    toAddress: PublicKey,\n    amount: number | BN,\n): TokenTransferOutputData[] {\n    amount = bn(amount);\n    const inputAmount = sumUpTokenAmount(inputCompressedTokenAccounts);\n    const inputLamports = sumUpLamports(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n\n    const changeAmount = inputAmount.sub(amount);\n\n    validateSufficientBalance(changeAmount);\n\n    if (changeAmount.eq(bn(0)) && inputLamports.eq(bn(0))) {\n        return [\n            {\n                owner: toAddress,\n                amount,\n                lamports: inputLamports,\n                tlv: null,\n            },\n        ];\n    }\n\n    /// validates token program\n    validateSameOwner(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    validateSameTokenOwner(inputCompressedTokenAccounts);\n\n    const outputCompressedAccounts: TokenTransferOutputData[] = [\n        {\n            owner: inputCompressedTokenAccounts[0].parsed.owner,\n            amount: changeAmount,\n            lamports: inputLamports,\n            tlv: null,\n        },\n        {\n            owner: toAddress,\n            amount,\n            lamports: bn(0),\n            tlv: null,\n        },\n    ];\n    return outputCompressedAccounts;\n}\n\n/**\n * Create the output state for a compress transaction.\n * @param inputCompressedTokenAccounts  Input state\n * @param amount                        Amount of tokens to compress\n * @returns                             Output token data for the compress\n *                                      instruction\n */\nexport function createDecompressOutputState(\n    inputCompressedTokenAccounts: ParsedTokenAccount[],\n    amount: number | BN,\n): TokenTransferOutputData[] {\n    amount = bn(amount);\n    const inputLamports = sumUpLamports(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    const inputAmount = sumUpTokenAmount(inputCompressedTokenAccounts);\n    const changeAmount = inputAmount.sub(amount);\n\n    validateSufficientBalance(changeAmount);\n\n    /// lamports gets decompressed\n    if (changeAmount.eq(bn(0)) && inputLamports.eq(bn(0))) {\n        return [];\n    }\n\n    validateSameOwner(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    validateSameTokenOwner(inputCompressedTokenAccounts);\n\n    const tokenTransferOutputs: TokenTransferOutputData[] = [\n        {\n            owner: inputCompressedTokenAccounts[0].parsed.owner,\n            amount: changeAmount,\n            lamports: inputLamports,\n            tlv: null,\n        },\n    ];\n    return tokenTransferOutputs;\n}\n\nexport class CompressedTokenProgram {\n    /**\n     * @internal\n     */\n    constructor() {}\n\n    /**\n     * Public key that identifies the CompressedPda program\n     */\n    static programId: PublicKey = new PublicKey(\n        'cTokenmWW8bLPjZEBAUgYy3zKxQZW6VKi7bqNFEVv3m',\n    );\n\n    /**\n     * Set a custom programId via PublicKey or base58 encoded string.\n     * This method is not required for regular usage.\n     *\n     * Use this only if you know what you are doing.\n     */\n    static setProgramId(programId: PublicKey | string) {\n        this.programId =\n            typeof programId === 'string'\n                ? new PublicKey(programId)\n                : programId;\n        // Reset program when programId changes\n        this._program = null;\n    }\n\n    private static _program: Program<LightCompressedToken> | null = null;\n\n    /** @internal */\n    static get program(): Program<LightCompressedToken> {\n        if (!this._program) {\n            this.initializeProgram();\n        }\n        return this._program!;\n    }\n\n    /**\n     * @internal\n     * Initializes the program statically if not already initialized.\n     */\n    private static initializeProgram() {\n        if (!this._program) {\n            /// Note: We can use a mock connection because we're using the\n            /// program only for serde and building instructions, not for\n            /// interacting with the network.\n            const mockKeypair = Keypair.generate();\n            const mockConnection = new Connection(\n                'http://127.0.0.1:8899',\n                'confirmed',\n            );\n            const mockProvider = new AnchorProvider(\n                mockConnection,\n                useWallet(mockKeypair),\n                confirmConfig,\n            );\n            setProvider(mockProvider);\n            this._program = new Program(IDL, this.programId, mockProvider);\n        }\n    }\n\n    /** @internal */\n    static deriveTokenPoolPda(mint: PublicKey): PublicKey {\n        const seeds = [POOL_SEED, mint.toBuffer()];\n        const [address, _] = PublicKey.findProgramAddressSync(\n            seeds,\n            this.programId,\n        );\n        return address;\n    }\n\n    /** @internal */\n    static get deriveCpiAuthorityPda(): PublicKey {\n        const [address, _] = PublicKey.findProgramAddressSync(\n            [CPI_AUTHORITY_SEED],\n            this.programId,\n        );\n        return address;\n    }\n\n    /**\n     * Construct createMint instruction for compressed tokens.\n     * @returns [createMintAccountInstruction, initializeMintInstruction, createTokenPoolInstruction]\n     *\n     * Note that `createTokenPoolInstruction` must be executed after `initializeMintInstruction`.\n     */\n    static async createMint(\n        params: CreateMintParams,\n    ): Promise<TransactionInstruction[]> {\n        const {\n            mint,\n            authority,\n            feePayer,\n            rentExemptBalance,\n            tokenProgramId,\n            freezeAuthority,\n            mintSize,\n        } = params;\n\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        /// Create and initialize SPL Mint account\n        const createMintAccountInstruction = SystemProgram.createAccount({\n            fromPubkey: feePayer,\n            lamports: rentExemptBalance,\n            newAccountPubkey: mint,\n            programId: tokenProgram,\n            space: mintSize ?? MINT_SIZE,\n        });\n        const initializeMintInstruction = createInitializeMint2Instruction(\n            mint,\n            params.decimals,\n            authority,\n            freezeAuthority,\n            tokenProgram,\n        );\n\n        const createTokenPoolInstruction = await this.createTokenPool({\n            feePayer,\n            mint,\n            tokenProgramId: tokenProgram,\n        });\n\n        return [\n            createMintAccountInstruction,\n            initializeMintInstruction,\n            createTokenPoolInstruction,\n        ];\n    }\n\n    /**\n     * Enable compression for an existing SPL mint, creating an omnibus account.\n     * For new mints, use `CompressedTokenProgram.createMint`.\n     */\n    static async createTokenPool(\n        params: RegisterMintParams,\n    ): Promise<TransactionInstruction> {\n        const { mint, feePayer, tokenProgramId } = params;\n\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const tokenPoolPda = this.deriveTokenPoolPda(mint);\n\n        const ix = await this.program.methods\n            .createTokenPool()\n            .accounts({\n                mint,\n                feePayer,\n                tokenPoolPda,\n                systemProgram: SystemProgram.programId,\n                tokenProgram,\n                cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            })\n            .instruction();\n\n        return ix;\n    }\n\n    /**\n     * Construct mintTo instruction for compressed tokens\n     */\n    static async mintTo(params: MintToParams): Promise<TransactionInstruction> {\n        const systemKeys = defaultStaticAccountsStruct();\n\n        const {\n            mint,\n            feePayer,\n            authority,\n            merkleTree,\n            toPubkey,\n            amount,\n            tokenProgramId,\n        } = params;\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const tokenPoolPda = this.deriveTokenPoolPda(mint);\n\n        const amounts = toArray<BN | number>(amount).map(amount => bn(amount));\n\n        const toPubkeys = toArray(toPubkey);\n\n        if (amounts.length !== toPubkeys.length) {\n            throw new Error(\n                'Amount and toPubkey arrays must have the same length',\n            );\n        }\n\n        const instruction = await this.program.methods\n            .mintTo(toPubkeys, amounts, null)\n            .accounts({\n                feePayer,\n                authority,\n                cpiAuthorityPda: this.deriveCpiAuthorityPda,\n                mint,\n                tokenPoolPda,\n                tokenProgram,\n                lightSystemProgram: LightSystemProgram.programId,\n                registeredProgramPda: systemKeys.registeredProgramPda,\n                noopProgram: systemKeys.noopProgram,\n                accountCompressionAuthority:\n                    systemKeys.accountCompressionAuthority,\n                accountCompressionProgram: systemKeys.accountCompressionProgram,\n                merkleTree:\n                    merkleTree ?? defaultTestStateTreeAccounts().merkleTree,\n                selfProgram: this.programId,\n                solPoolPda: null,\n            })\n            .instruction();\n        return instruction;\n    }\n\n    /**\n     * Mint tokens from registered SPL mint account to a compressed account\n     */\n    static async approveAndMintTo(params: ApproveAndMintToParams) {\n        const {\n            mint,\n            feePayer,\n            authorityTokenAccount,\n            authority,\n            merkleTree,\n            toPubkey,\n            tokenProgramId,\n        } = params;\n\n        const amount: bigint = BigInt(params.amount.toString());\n\n        /// 1. Mint to existing ATA of mintAuthority.\n        const splMintToInstruction = createMintToInstruction(\n            mint,\n            authorityTokenAccount,\n            authority,\n            amount,\n            [],\n            tokenProgramId,\n        );\n\n        /// 2. Compress from mint authority ATA to recipient compressed account\n        const compressInstruction = await this.compress({\n            payer: feePayer,\n            owner: authority,\n            source: authorityTokenAccount,\n            toAddress: toPubkey,\n            mint,\n            amount: params.amount,\n            outputStateTree: merkleTree,\n            tokenProgramId,\n        });\n\n        return [splMintToInstruction, compressInstruction];\n    }\n    /**\n     * Construct transfer instruction for compressed tokens\n     */\n    static async transfer(\n        params: TransferParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            payer,\n            inputCompressedTokenAccounts,\n            recentInputStateRootIndices,\n            recentValidityProof,\n            amount,\n            outputStateTrees,\n            toAddress,\n        } = params;\n\n        const tokenTransferOutputs: TokenTransferOutputData[] =\n            createTransferOutputState(\n                inputCompressedTokenAccounts,\n                toAddress,\n                amount,\n            );\n        const {\n            inputTokenDataWithContext,\n            packedOutputTokenData,\n            remainingAccountMetas,\n        } = packCompressedTokenAccounts({\n            inputCompressedTokenAccounts,\n            outputStateTrees,\n            rootIndices: recentInputStateRootIndices,\n            tokenTransferOutputs,\n        });\n\n        const { mint, currentOwner } = parseTokenData(\n            inputCompressedTokenAccounts,\n        );\n\n        const data: CompressedTokenInstructionDataTransfer = {\n            proof: recentValidityProof,\n            mint,\n            delegatedTransfer: null, // TODO: implement\n            inputTokenDataWithContext,\n            outputCompressedAccounts: packedOutputTokenData,\n            compressOrDecompressAmount: null,\n            isCompress: false,\n            cpiContext: null,\n            lamportsChangeAccountMerkleTreeIndex: null,\n        };\n\n        const encodedData = this.program.coder.types.encode(\n            'CompressedTokenInstructionDataTransfer',\n            data,\n        );\n\n        const {\n            accountCompressionAuthority,\n            noopProgram,\n            registeredProgramPda,\n            accountCompressionProgram,\n        } = defaultStaticAccountsStruct();\n\n        const instruction = await this.program.methods\n            .transfer(encodedData)\n            .accounts({\n                feePayer: payer!,\n                authority: currentOwner!,\n                cpiAuthorityPda: this.deriveCpiAuthorityPda,\n                lightSystemProgram: LightSystemProgram.programId,\n                registeredProgramPda: registeredProgramPda,\n                noopProgram: noopProgram,\n                accountCompressionAuthority: accountCompressionAuthority,\n                accountCompressionProgram: accountCompressionProgram,\n                selfProgram: this.programId,\n                tokenPoolPda: null,\n                compressOrDecompressTokenAccount: null,\n                tokenProgram: null,\n            })\n            .remainingAccounts(remainingAccountMetas)\n            .instruction();\n\n        return instruction;\n    }\n\n    /**\n     * Create lookup table instructions for the token program's default accounts.\n     */\n    static async createTokenProgramLookupTable(\n        params: CreateTokenProgramLookupTableParams,\n    ) {\n        const { authority, mints, recentSlot, payer, remainingAccounts } =\n            params;\n\n        const [createInstruction, lookupTableAddress] =\n            AddressLookupTableProgram.createLookupTable({\n                authority,\n                payer: authority,\n                recentSlot,\n            });\n\n        let optionalMintKeys: PublicKey[] = [];\n        if (mints) {\n            optionalMintKeys = [\n                ...mints,\n                ...mints.map(mint => this.deriveTokenPoolPda(mint)),\n            ];\n        }\n\n        const extendInstruction = AddressLookupTableProgram.extendLookupTable({\n            payer,\n            authority,\n            lookupTable: lookupTableAddress,\n            addresses: [\n                this.deriveCpiAuthorityPda,\n                LightSystemProgram.programId,\n                defaultStaticAccountsStruct().registeredProgramPda,\n                defaultStaticAccountsStruct().noopProgram,\n                defaultStaticAccountsStruct().accountCompressionAuthority,\n                defaultStaticAccountsStruct().accountCompressionProgram,\n                defaultTestStateTreeAccounts().merkleTree,\n                defaultTestStateTreeAccounts().nullifierQueue,\n                defaultTestStateTreeAccounts().addressTree,\n                defaultTestStateTreeAccounts().addressQueue,\n                this.programId,\n                TOKEN_PROGRAM_ID,\n                TOKEN_2022_PROGRAM_ID,\n                authority,\n                ...optionalMintKeys,\n                ...(remainingAccounts ?? []),\n            ],\n        });\n\n        return {\n            instructions: [createInstruction, extendInstruction],\n            address: lookupTableAddress,\n        };\n    }\n\n    /**\n     * Create compress instruction\n     * @returns compressInstruction\n     */\n    static async compress(\n        params: CompressParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            payer,\n            owner,\n            source,\n            toAddress,\n            mint,\n            outputStateTree,\n            tokenProgramId,\n        } = params;\n\n        if (Array.isArray(params.amount) !== Array.isArray(params.toAddress)) {\n            throw new Error(\n                'Both amount and toAddress must be arrays or both must be single values',\n            );\n        }\n\n        let tokenTransferOutputs: TokenTransferOutputData[];\n\n        if (Array.isArray(params.amount) && Array.isArray(params.toAddress)) {\n            if (params.amount.length !== params.toAddress.length) {\n                throw new Error(\n                    'Amount and toAddress arrays must have the same length',\n                );\n            }\n            tokenTransferOutputs = params.amount.map((amt, index) => {\n                const amount = bn(amt);\n                return {\n                    owner: (params.toAddress as PublicKey[])[index],\n                    amount,\n                    lamports: bn(0),\n                    tlv: null,\n                };\n            });\n        } else {\n            tokenTransferOutputs = [\n                {\n                    owner: toAddress as PublicKey,\n                    amount: bn(params.amount as number | BN),\n                    lamports: bn(0),\n                    tlv: null,\n                },\n            ];\n        }\n\n        const {\n            inputTokenDataWithContext,\n            packedOutputTokenData,\n            remainingAccountMetas,\n        } = packCompressedTokenAccounts({\n            inputCompressedTokenAccounts: [],\n            outputStateTrees: outputStateTree,\n            rootIndices: [],\n            tokenTransferOutputs,\n        });\n\n        const data: CompressedTokenInstructionDataTransfer = {\n            proof: null,\n            mint,\n            delegatedTransfer: null, // TODO: implement\n            inputTokenDataWithContext,\n            outputCompressedAccounts: packedOutputTokenData,\n            compressOrDecompressAmount: Array.isArray(params.amount)\n                ? params.amount\n                      .map(amt => new BN(amt))\n                      .reduce((sum, amt) => sum.add(amt), new BN(0))\n                : new BN(params.amount),\n            isCompress: true,\n            cpiContext: null,\n            lamportsChangeAccountMerkleTreeIndex: null,\n        };\n\n        const encodedData = this.program.coder.types.encode(\n            'CompressedTokenInstructionDataTransfer',\n            data,\n        );\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const instruction = await this.program.methods\n            .transfer(encodedData)\n            .accounts({\n                feePayer: payer,\n                authority: owner,\n                cpiAuthorityPda: this.deriveCpiAuthorityPda,\n                lightSystemProgram: LightSystemProgram.programId,\n                registeredProgramPda:\n                    defaultStaticAccountsStruct().registeredProgramPda,\n                noopProgram: defaultStaticAccountsStruct().noopProgram,\n                accountCompressionAuthority:\n                    defaultStaticAccountsStruct().accountCompressionAuthority,\n                accountCompressionProgram:\n                    defaultStaticAccountsStruct().accountCompressionProgram,\n                selfProgram: this.programId,\n                tokenPoolPda: this.deriveTokenPoolPda(mint),\n                compressOrDecompressTokenAccount: source, // token\n                tokenProgram,\n            })\n            .remainingAccounts(remainingAccountMetas)\n            .instruction();\n\n        return instruction;\n    }\n\n    /**\n     * Construct decompress instruction\n     */\n    static async decompress(\n        params: DecompressParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            payer,\n            inputCompressedTokenAccounts,\n            toAddress,\n            outputStateTree,\n            recentValidityProof,\n            recentInputStateRootIndices,\n            tokenProgramId,\n        } = params;\n        const amount = bn(params.amount);\n\n        const tokenTransferOutputs = createDecompressOutputState(\n            inputCompressedTokenAccounts,\n            amount,\n        );\n\n        /// Pack\n        const {\n            inputTokenDataWithContext,\n            packedOutputTokenData,\n            remainingAccountMetas,\n        } = packCompressedTokenAccounts({\n            inputCompressedTokenAccounts,\n            outputStateTrees: outputStateTree,\n            rootIndices: recentInputStateRootIndices,\n            tokenTransferOutputs: tokenTransferOutputs,\n        });\n\n        const { mint, currentOwner } = parseTokenData(\n            inputCompressedTokenAccounts,\n        );\n\n        const data: CompressedTokenInstructionDataTransfer = {\n            proof: recentValidityProof,\n            mint,\n            delegatedTransfer: null, // TODO: implement\n            inputTokenDataWithContext,\n            outputCompressedAccounts: packedOutputTokenData,\n            compressOrDecompressAmount: amount,\n            isCompress: false,\n            cpiContext: null,\n            lamportsChangeAccountMerkleTreeIndex: null,\n        };\n\n        const encodedData = this.program.coder.types.encode(\n            'CompressedTokenInstructionDataTransfer',\n            data,\n        );\n\n        const {\n            accountCompressionAuthority,\n            noopProgram,\n            registeredProgramPda,\n            accountCompressionProgram,\n        } = defaultStaticAccountsStruct();\n\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const instruction = await this.program.methods\n            .transfer(encodedData)\n            .accounts({\n                feePayer: payer,\n                authority: currentOwner,\n                cpiAuthorityPda: this.deriveCpiAuthorityPda,\n                lightSystemProgram: LightSystemProgram.programId,\n                registeredProgramPda: registeredProgramPda,\n                noopProgram: noopProgram,\n                accountCompressionAuthority: accountCompressionAuthority,\n                accountCompressionProgram: accountCompressionProgram,\n                selfProgram: this.programId,\n                tokenPoolPda: this.deriveTokenPoolPda(mint),\n                compressOrDecompressTokenAccount: toAddress,\n                tokenProgram,\n            })\n            .remainingAccounts(remainingAccountMetas)\n            .instruction();\n\n        return instruction;\n    }\n\n    static async mergeTokenAccounts(\n        params: MergeTokenAccountsParams,\n    ): Promise<TransactionInstruction[]> {\n        const {\n            payer,\n            owner,\n            inputCompressedTokenAccounts,\n            outputStateTree,\n            recentValidityProof,\n            recentInputStateRootIndices,\n        } = params;\n\n        if (inputCompressedTokenAccounts.length > 3) {\n            throw new Error('Cannot merge more than 3 token accounts at once');\n        }\n\n        const ix = await this.transfer({\n            payer,\n            inputCompressedTokenAccounts,\n            toAddress: owner,\n            amount: inputCompressedTokenAccounts.reduce(\n                (sum, account) => sum.add(account.parsed.amount),\n                new BN(0),\n            ),\n            outputStateTrees: outputStateTree,\n            recentInputStateRootIndices,\n            recentValidityProof,\n        });\n\n        return [ix];\n    }\n\n    static async compressSplTokenAccount(\n        params: CompressSplTokenAccountParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            feePayer,\n            authority,\n            tokenAccount,\n            mint,\n            remainingAmount,\n            outputStateTree,\n            tokenProgramId,\n        } = params;\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const remainingAccountMetas: AccountMeta[] = [\n            {\n                pubkey: outputStateTree,\n                isSigner: false,\n                isWritable: true,\n            },\n        ];\n\n        const instruction = await this.program.methods\n            .compressSplTokenAccount(authority, remainingAmount ?? null, null)\n            .accounts({\n                feePayer,\n                authority,\n                cpiAuthorityPda: this.deriveCpiAuthorityPda,\n                lightSystemProgram: LightSystemProgram.programId,\n                registeredProgramPda:\n                    defaultStaticAccountsStruct().registeredProgramPda,\n                noopProgram: defaultStaticAccountsStruct().noopProgram,\n                accountCompressionAuthority:\n                    defaultStaticAccountsStruct().accountCompressionAuthority,\n                accountCompressionProgram:\n                    defaultStaticAccountsStruct().accountCompressionProgram,\n                selfProgram: this.programId,\n                tokenPoolPda: this.deriveTokenPoolPda(mint),\n                compressOrDecompressTokenAccount: tokenAccount,\n                tokenProgram,\n                systemProgram: SystemProgram.programId,\n            })\n            .remainingAccounts(remainingAccountMetas)\n            .instruction();\n\n        return instruction;\n    }\n\n    static async get_mint_program_id(\n        mint: PublicKey,\n        connection: Connection,\n    ): Promise<PublicKey | undefined> {\n        return (await connection.getAccountInfo(mint))?.owner;\n    }\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { BN } from '@coral-xyz/anchor';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\nimport { CompressedTokenProgram } from '../program';\nimport { getOrCreateAssociatedTokenAccount } from '@solana/spl-token';\n\n/**\n * Mint compressed tokens to a solana address from an external mint authority\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param merkleTree     State tree account that the compressed tokens should be\n *                       part of. Defaults to the default state tree account.\n * @param confirmOptions Options for confirming the transaction\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approveAndMintTo(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer,\n    amount: number | BN,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const authorityTokenAccount = await getOrCreateAssociatedTokenAccount(\n        rpc,\n        payer,\n        mint,\n        authority.publicKey,\n        undefined,\n        undefined,\n        confirmOptions,\n        tokenProgramId,\n    );\n\n    const ixs = await CompressedTokenProgram.approveAndMintTo({\n        feePayer: payer.publicKey,\n        mint,\n        authority: authority.publicKey,\n        authorityTokenAccount: authorityTokenAccount.address,\n        amount,\n        toPubkey: destination,\n        merkleTree,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [authority]);\n\n    const tx = buildAndSignTx(\n        [\n            ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }),\n            ...ixs,\n        ],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n    ComputeBudgetProgram,\n} from '@solana/web3.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport { BN } from '@coral-xyz/anchor';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Compress SPL tokens\n *\n * @param rpc                   Rpc connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint of the compressed token\n * @param amount                Number of tokens to transfer\n * @param owner                 Owner of the compressed tokens.\n * @param sourceTokenAccount    Source (associated) token account\n * @param toAddress             Destination address of the recipient\n * @param merkleTree            State tree account that the compressed tokens\n *                              should be inserted into. Defaults to a default\n *                              state tree account.\n * @param confirmOptions        Options for confirming the transaction\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function compress(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | BN | number[] | BN[],\n    owner: Signer,\n    sourceTokenAccount: PublicKey,\n    toAddress: PublicKey | Array<PublicKey>,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const compressIx = await CompressedTokenProgram.compress({\n        payer: payer.publicKey,\n        owner: owner.publicKey,\n        source: sourceTokenAccount,\n        toAddress,\n        amount,\n        mint,\n        outputStateTree: merkleTree,\n        tokenProgramId,\n    });\n\n    const blockhashCtx = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [\n            ComputeBudgetProgram.setComputeUnitLimit({\n                units: 1_000_000,\n            }),\n            compressIx,\n        ],\n        payer,\n        blockhashCtx.blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(\n        rpc,\n        signedTx,\n        confirmOptions,\n        blockhashCtx,\n    );\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    bn,\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    ParsedTokenAccount,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport { BN } from '@coral-xyz/anchor';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Transfer compressed tokens from one owner to another\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint of the compressed token\n * @param amount         Number of tokens to transfer\n * @param owner          Owner of the compressed tokens\n * @param toAddress      Destination address of the recipient\n * @param merkleTree     State tree account that the compressed tokens should be\n *                       inserted into. Defaults to the default state tree\n *                       account.\n * @param confirmOptions Options for confirming the transaction\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transfer(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | BN,\n    owner: Signer,\n    toAddress: PublicKey,\n    /// TODO: allow multiple\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    amount = bn(amount);\n    const compressedTokenAccounts = await rpc.getCompressedTokenAccountsByOwner(\n        owner.publicKey,\n        {\n            mint,\n        },\n    );\n\n    const [inputAccounts] = selectMinCompressedTokenAccountsForTransfer(\n        compressedTokenAccounts.items,\n        amount,\n    );\n\n    const proof = await rpc.getValidityProof(\n        inputAccounts.map(account => bn(account.compressedAccount.hash)),\n    );\n\n    const ix = await CompressedTokenProgram.transfer({\n        payer: payer.publicKey,\n        inputCompressedTokenAccounts: inputAccounts,\n        toAddress,\n        amount,\n        recentInputStateRootIndices: proof.rootIndices,\n        recentValidityProof: proof.compressedProof,\n        outputStateTrees: merkleTree,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n    return txId;\n}\n\n/**\n * Selects the minimal number of compressed token accounts for a transfer.\n *\n * 1. Sorts the accounts by amount in descending order\n * 2. Accumulates the amount until it is greater than or equal to the transfer\n *    amount\n */\nexport function selectMinCompressedTokenAccountsForTransfer(\n    accounts: ParsedTokenAccount[],\n    transferAmount: BN,\n): [\n    selectedAccounts: ParsedTokenAccount[],\n    total: BN,\n    totalLamports: BN | null,\n] {\n    let accumulatedAmount = bn(0);\n    let accumulatedLamports = bn(0);\n\n    const selectedAccounts: ParsedTokenAccount[] = [];\n\n    accounts.sort((a, b) => b.parsed.amount.cmp(a.parsed.amount));\n\n    for (const account of accounts) {\n        if (accumulatedAmount.gte(bn(transferAmount))) break;\n        accumulatedAmount = accumulatedAmount.add(account.parsed.amount);\n        accumulatedLamports = accumulatedLamports.add(\n            account.compressedAccount.lamports,\n        );\n        selectedAccounts.push(account);\n    }\n\n    if (accumulatedAmount.lt(bn(transferAmount))) {\n        throw new Error(\n            `Not enough balance for transfer. Required: ${transferAmount.toString()}, available: ${accumulatedAmount.toString()}`,\n        );\n    }\n\n    return [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports.lt(bn(0)) ? accumulatedLamports : null,\n    ];\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    bn,\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport { BN } from '@coral-xyz/anchor';\n\nimport { CompressedTokenProgram } from '../program';\nimport { selectMinCompressedTokenAccountsForTransfer } from './transfer';\n\n/**\n * Decompress compressed tokens\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint of the compressed token\n * @param amount         Number of tokens to transfer\n * @param owner          Owner of the compressed tokens\n * @param toAddress      Destination **uncompressed** (associated) token account\n *                       address.\n * @param merkleTree     State tree account that any change compressed tokens should be\n *                       inserted into. Defaults to a default state tree\n *                       account.\n * @param confirmOptions Options for confirming the transaction\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function decompress(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | BN,\n    owner: Signer,\n    toAddress: PublicKey,\n    /// TODO: allow multiple\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    amount = bn(amount);\n\n    const compressedTokenAccounts = await rpc.getCompressedTokenAccountsByOwner(\n        owner.publicKey,\n        {\n            mint,\n        },\n    );\n\n    /// TODO: consider using a different selection algorithm\n    const [inputAccounts] = selectMinCompressedTokenAccountsForTransfer(\n        compressedTokenAccounts.items,\n        amount,\n    );\n\n    const proof = await rpc.getValidityProof(\n        inputAccounts.map(account => bn(account.compressedAccount.hash)),\n    );\n\n    const ix = await CompressedTokenProgram.decompress({\n        payer: payer.publicKey,\n        inputCompressedTokenAccounts: inputAccounts,\n        toAddress, // TODO: add explicit check that it is a token account\n        amount,\n        outputStateTree: merkleTree,\n        recentInputStateRootIndices: proof.rootIndices,\n        recentValidityProof: proof.compressedProof,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n    return txId;\n}\n","import {\n    ConfirmOptions,\n    Keypair,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { CompressedTokenProgram } from '../program';\nimport {\n    MINT_SIZE,\n    TOKEN_2022_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n    Rpc,\n    buildAndSignTx,\n    sendAndConfirmTx,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\n/**\n * Create and initialize a new compressed token mint\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param isToken22       Whether to create a Token 2022 mint. Defaults to false.\n *\n * @return Address of the new mint and the transaction signature\n */\nexport async function createMint(\n    rpc: Rpc,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    isToken22 = false,\n): Promise<{ mint: PublicKey; transactionSignature: TransactionSignature }> {\n    const rentExemptBalance =\n        await rpc.getMinimumBalanceForRentExemption(MINT_SIZE);\n\n    const tokenProgramId = isToken22 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID;\n\n    const ixs = await CompressedTokenProgram.createMint({\n        feePayer: payer.publicKey,\n        mint: keypair.publicKey,\n        decimals,\n        authority: mintAuthority,\n        freezeAuthority: null, // TODO: add feature\n        rentExemptBalance,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const additionalSigners = dedupeSigner(payer, [keypair]);\n\n    const tx = buildAndSignTx(ixs, payer, blockhash, additionalSigners);\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return { mint: keypair.publicKey, transactionSignature: txId };\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { BN } from '@coral-xyz/anchor';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Mint compressed tokens to a solana address\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to. Can be an array of\n *                       addresses if the amount is an array of amounts.\n * @param authority      Minting authority\n * @param amount         Amount to mint. Can be an array of amounts if the\n *                       destination is an array of addresses.\n * @param merkleTree     State tree account that the compressed tokens should be\n *                       part of. Defaults to the default state tree account.\n * @param confirmOptions Options for confirming the transaction\n *\n * @return Signature of the confirmed transaction\n */\nexport async function mintTo(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey | PublicKey[],\n    authority: Signer,\n    amount: number | BN | number[] | BN[],\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const additionalSigners = dedupeSigner(payer, [authority]);\n\n    const ix = await CompressedTokenProgram.mintTo({\n        feePayer: payer.publicKey,\n        mint,\n        authority: authority.publicKey,\n        amount: amount,\n        toPubkey: destination,\n        merkleTree,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const tx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    Rpc,\n    dedupeSigner,\n    buildAndSignTx,\n    sendAndConfirmTx,\n    bn,\n} from '@lightprotocol/stateless.js';\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Merge multiple compressed token accounts for a given mint into a single\n * account\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the token's mint\n * @param owner           Owner of the token accounts to be merged\n * @param merkleTree      Optional merkle tree for compressed tokens\n * @param confirmOptions  Options for confirming the transaction\n *\n * @return Array of transaction signatures\n */\nexport async function mergeTokenAccounts(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    const compressedTokenAccounts = await rpc.getCompressedTokenAccountsByOwner(\n        owner.publicKey,\n        { mint },\n    );\n\n    if (compressedTokenAccounts.items.length === 0) {\n        throw new Error(\n            `No compressed token accounts found for mint ${mint.toBase58()}`,\n        );\n    }\n    if (compressedTokenAccounts.items.length >= 6) {\n        throw new Error(\n            `Too many compressed token accounts used for mint ${mint.toBase58()}`,\n        );\n    }\n\n    const instructions = [\n        ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }),\n    ];\n\n    for (\n        let i = 0;\n        i < compressedTokenAccounts.items.slice(0, 6).length;\n        i += 3\n    ) {\n        const batch = compressedTokenAccounts.items.slice(i, i + 3);\n\n        const proof = await rpc.getValidityProof(\n            batch.map(account => bn(account.compressedAccount.hash)),\n        );\n\n        const batchInstructions =\n            await CompressedTokenProgram.mergeTokenAccounts({\n                payer: payer.publicKey,\n                owner: owner.publicKey,\n                mint,\n                inputCompressedTokenAccounts: batch,\n                outputStateTree: merkleTree!,\n                recentValidityProof: proof.compressedProof,\n                recentInputStateRootIndices: proof.rootIndices,\n            });\n\n        instructions.push(...batchInstructions);\n    }\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n\n    const signedTx = buildAndSignTx(\n        instructions,\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { CompressedTokenProgram } from '../program';\nimport {\n    Rpc,\n    buildAndSignTx,\n    sendAndConfirmTx,\n} from '@lightprotocol/stateless.js';\n\n/**\n * Register an existing mint with the CompressedToken program\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting. Is signer.\n * @param mintAddress     Address of the existing mint\n * @param confirmOptions  Options for confirming the transaction\n *\n * @return transaction signature\n */\nexport async function createTokenPool(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const ix = await CompressedTokenProgram.createTokenPool({\n        feePayer: payer.publicKey,\n        mint,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const tx = buildAndSignTx([ix], payer, blockhash);\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import { PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Create a lookup table for the token program's default accounts\n *\n * @param rpc                   Rpc connection to use\n * @param payer                 Payer of the transaction fees\n * @param authority             Authority of the lookup table\n * @param mints                 Optional array of mint public keys to include in\n *                              the lookup table\n * @param additionalAccounts    Optional array of additional account public keys\n *                              to include in the lookup table\n *\n * @return Transaction signatures and the address of the created lookup table\n */\nexport async function createTokenProgramLookupTable(\n    rpc: Rpc,\n    payer: Signer,\n    authority: Signer,\n    mints?: PublicKey[],\n    additionalAccounts?: PublicKey[],\n): Promise<{ txIds: TransactionSignature[]; address: PublicKey }> {\n    const recentSlot = await rpc.getSlot('finalized');\n    const { instructions, address } =\n        await CompressedTokenProgram.createTokenProgramLookupTable({\n            payer: payer.publicKey,\n            authority: authority.publicKey,\n            mints,\n            remainingAccounts: additionalAccounts,\n            recentSlot,\n        });\n\n    const additionalSigners = dedupeSigner(payer, [authority]);\n    const blockhashCtx = await rpc.getLatestBlockhash();\n    const signedTx = buildAndSignTx(\n        [instructions[0]],\n        payer,\n        blockhashCtx.blockhash,\n        additionalSigners,\n    );\n\n    /// Must wait for the first instruction to be finalized.\n    const txId = await sendAndConfirmTx(\n        rpc,\n        signedTx,\n        { commitment: 'finalized' },\n        blockhashCtx,\n    );\n\n    const blockhashCtx2 = await rpc.getLatestBlockhash();\n    const signedTx2 = buildAndSignTx(\n        [instructions[1]],\n        payer,\n        blockhashCtx2.blockhash,\n        additionalSigners,\n    );\n    const txId2 = await sendAndConfirmTx(\n        rpc,\n        signedTx2,\n        { commitment: 'finalized' },\n        blockhashCtx2,\n    );\n\n    return { txIds: [txId, txId2], address };\n}\n","import {\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n    ComputeBudgetProgram,\n} from '@solana/web3.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport { BN } from '@coral-xyz/anchor';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Compress SPL tokens into compressed token format\n *\n * @param rpc                   Rpc connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint of the token to compress\n * @param owner                 Owner of the token account\n * @param tokenAccount         Token account to compress\n * @param outputStateTree       State tree to insert the compressed token account into\n * @param remainingAmount      Optional: amount to leave in token account. Default: 0\n * @param confirmOptions       Options for confirming the transaction\n *\n * @return Signature of the confirmed transaction\n */\nexport async function compressSplTokenAccount(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer,\n    tokenAccount: PublicKey,\n    outputStateTree: PublicKey,\n    remainingAmount?: BN,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const compressIx = await CompressedTokenProgram.compressSplTokenAccount({\n        feePayer: payer.publicKey,\n        authority: owner.publicKey,\n        tokenAccount,\n        mint,\n        remainingAmount,\n        outputStateTree,\n        tokenProgramId,\n    });\n\n    const blockhashCtx = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [\n            ComputeBudgetProgram.setComputeUnitLimit({\n                units: 1_000_000,\n            }),\n            compressIx,\n        ],\n        payer,\n        blockhashCtx.blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(\n        rpc,\n        signedTx,\n        confirmOptions,\n        blockhashCtx,\n    );\n    return txId;\n}\n"],"names":["getIndexOrAdd","bn","padOutputStateMerkleTrees","sumUpLamports","validateSufficientBalance","validateSameOwner","PublicKey","Keypair","Connection","AnchorProvider","useWallet","confirmConfig","setProvider","Program","TOKEN_PROGRAM_ID","SystemProgram","MINT_SIZE","createInitializeMint2Instruction","defaultStaticAccountsStruct","toArray","LightSystemProgram","defaultTestStateTreeAccounts","createMintToInstruction","AddressLookupTableProgram","TOKEN_2022_PROGRAM_ID","BN","getOrCreateAssociatedTokenAccount","dedupeSigner","buildAndSignTx","ComputeBudgetProgram","sendAndConfirmTx"],"mappings":"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"}