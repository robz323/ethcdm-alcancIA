import { Buffer } from 'buffer';
import { Keypair } from '@solana/web3.js';
import { BN } from '@coral-xyz/anchor';
export declare function byteArrayToKeypair(byteArray: number[]): Keypair;
/**
 * @internal
 * convert BN to hex with '0x' prefix
 */
export declare function toHex(bn: BN): string;
export declare const toArray: <T>(value: T | T[]) => T[];
export declare const bufToDecStr: (buf: Buffer) => string;
/**
 * Hash the provided `bytes` with Keccak256 and ensure the result fits in the
 * BN254 prime field by repeatedly hashing the inputs with various "bump seeds"
 * and truncating the resulting hash to 31 bytes.
 *
 * @deprecated Use `hashvToBn254FieldSizeBe` instead.
 */
export declare function hashToBn254FieldSizeBe(bytes: Buffer): [Buffer, number] | null;
/**
 * Hash the provided `bytes` with Keccak256 and ensure that the result fits in
 * the BN254 prime field by truncating the resulting hash to 31 bytes.
 *
 * @param bytes Input bytes
 *
 * @returns     Hash digest
 */
export declare function hashvToBn254FieldSizeBe(bytes: Uint8Array[]): Uint8Array;
/** Mutates array in place */
export declare function pushUniqueItems<T>(items: T[], map: T[]): void;
export declare function toCamelCase(obj: Array<any> | unknown | any): Array<any> | unknown | any;
