{"version":3,"file":"index.cjs","sources":["../../../../../src/idls/light_system_program.ts","../../../../../src/wallet/interface.ts","../../../../../src/wallet/use-wallet.ts","../../../../../src/constants.ts","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/esm/utils/common.js","../../../../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js","../../../../../node_modules/.pnpm/base-x@3.0.9/node_modules/base-x/src/index.js","../../../../../node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/esm/utils/bytes/bs58.js","../../../../../src/state/BN254.ts","../../../../../src/state/compressed-account.ts","../../../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_assert.js","../../../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_u64.js","../../../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/utils.js","../../../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha3.js","../../../../../src/utils/conversion.ts","../../../../../src/instruction/pack-compressed-accounts.ts","../../../../../src/utils/validation.ts","../../../../../src/utils/address.ts","../../../../../src/utils/airdrop.ts","../../../../../src/utils/parse-validity-proof.ts","../../../../../src/utils/pipe.ts","../../../../../src/utils/send-and-confirm.ts","../../../../../src/utils/sleep.ts","../../../../../src/utils/test-utils.ts","../../../../../src/utils/calculate-compute-unit-price.ts","../../../../../src/programs/system.ts","../../../../../src/actions/compress.ts","../../../../../src/actions/create-account.ts","../../../../../src/actions/decompress.ts","../../../../../src/actions/common.ts","../../../../../src/actions/transfer.ts","../../../../../src/idls/account_compression.ts","../../../../../src/idls/light_registry.ts","../../../../../src/idls/light_compressed_token.ts","../../../../../src/errors.ts","../../../../../src/rpc-interface.ts","../../../../../src/rpc.ts","../../../../../src/test-helpers/merkle-tree/indexed-array.ts","../../../../../src/test-helpers/merkle-tree/merkle-tree.ts","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/cjs/utils/bytes/hex.js","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/cjs/utils/common.js","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/cjs/utils/bytes/utf8.js","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/cjs/utils/bytes/bs58.js","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/cjs/utils/bytes/base64.js","../../../../../node_modules/.pnpm/@coral-xyz+anchor@0.29.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@coral-xyz/anchor/dist/cjs/utils/bytes/index.js","../../../../../src/test-helpers/test-rpc/get-parsed-events.ts","../../../../../src/test-helpers/test-rpc/get-compressed-accounts.ts","../../../../../src/test-helpers/test-rpc/get-compressed-token-accounts.ts","../../../../../src/test-helpers/test-rpc/test-rpc.ts"],"sourcesContent":["export type LightSystemProgram = {\n    version: '1.2.0';\n    name: 'light_system_program';\n    constants: [\n        {\n            name: 'SOL_POOL_PDA_SEED';\n            type: 'bytes';\n            value: '[115, 111, 108, 95, 112, 111, 111, 108, 95, 112, 100, 97]';\n        },\n    ];\n    instructions: [\n        {\n            name: 'initCpiContextAccount';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiContextAccount';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'associatedMerkleTree';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'invoke';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Fee payer needs to be mutable to pay rollover and protocol fees.',\n                    ];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                    docs: [\n                        'This pda is used to invoke the account compression program.',\n                    ];\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['Merkle trees.'];\n                },\n                {\n                    name: 'solPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                    docs: [\n                        'Sol pool pda is used to store the native sol that has been compressed.',\n                        \"It's only required when compressing or decompressing sol.\",\n                    ];\n                },\n                {\n                    name: 'decompressionRecipient';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                    docs: [\n                        'Only needs to be provided for decompression as a recipient for the',\n                        'decompressed sol.',\n                        'Compressed sol originate from authority.',\n                    ];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'invokeCpi';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Fee payer needs to be mutable to pay rollover and protocol fees.',\n                    ];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'invokingProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'solPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'decompressionRecipient';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiContextAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'stubIdlBuild';\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Fee payer needs to be mutable to pay rollover and protocol fees.',\n                    ];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                    docs: [\n                        'This pda is used to invoke the account compression program.',\n                    ];\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['Merkle trees.'];\n                },\n                {\n                    name: 'solPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                    docs: [\n                        'Sol pool pda is used to store the native sol that has been compressed.',\n                        \"It's only required when compressing or decompressing sol.\",\n                    ];\n                },\n                {\n                    name: 'decompressionRecipient';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                    docs: [\n                        'Only needs to be provided for decompression as a recipient for the',\n                        'decompressed sol.',\n                        'Compressed sol originate from authority.',\n                    ];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs1';\n                    type: {\n                        defined: 'InstructionDataInvoke';\n                    };\n                },\n                {\n                    name: 'inputs2';\n                    type: {\n                        defined: 'InstructionDataInvokeCpi';\n                    };\n                },\n                {\n                    name: 'inputs3';\n                    type: {\n                        defined: 'PublicTransactionEvent';\n                    };\n                },\n            ];\n        },\n    ];\n    accounts: [\n        {\n            name: 'stateMerkleTreeAccount';\n            docs: [\n                'Concurrent state Merkle tree used for public compressed transactions.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'metadata';\n                        type: {\n                            defined: 'MerkleTreeMetadata';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'cpiContextAccount';\n            docs: [\n                'Collects instruction data without executing a compressed transaction.',\n                'Signer checks are performed on instruction data.',\n                'Collected instruction data is combined with the instruction data of the executing cpi,',\n                'and executed as a single transaction.',\n                'This enables to use input compressed accounts that are owned by multiple programs,',\n                'with one zero-knowledge proof.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'feePayer';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'associatedMerkleTree';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'context';\n                        type: {\n                            vec: {\n                                defined: 'InstructionDataInvokeCpi';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n    ];\n    types: [\n        {\n            name: 'AccessMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        docs: ['Owner of the Merkle tree.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'programOwner';\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'forester';\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ];\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'accessMetadata';\n                        type: {\n                            defined: 'AccessMetadata';\n                        };\n                    },\n                    {\n                        name: 'rolloverMetadata';\n                        type: {\n                            defined: 'RolloverMetadata';\n                        };\n                    },\n                    {\n                        name: 'associatedQueue';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'nextMerkleTree';\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'RolloverMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'index';\n                        docs: ['Unique index.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverFee';\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverThreshold';\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        docs: ['Tip for maintaining the account.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolledoverSlot';\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'closeThreshold';\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'additionalBytes';\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ];\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvoke';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'NewAddressParamsPacked';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'seed';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'addressQueueAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex';\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedProof';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'a';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'b';\n                        type: {\n                            array: ['u8', 64];\n                        };\n                    },\n                    {\n                        name: 'c';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvokeCpi';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedCpiContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'setContext';\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'firstSetContext';\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContextAccountIndex';\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ];\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccount';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'lamports';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'address';\n                        type: {\n                            option: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccountData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'discriminator';\n                        type: {\n                            array: ['u8', 8];\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: 'bytes';\n                    },\n                    {\n                        name: 'dataHash';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ];\n                        type: 'u16';\n                    },\n                    {\n                        name: 'readOnly';\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ];\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'leafIndex';\n                        type: 'u32';\n                    },\n                    {\n                        name: 'queueIndex';\n                        docs: [\n                            'Index of leaf in queue. Placeholder of batched Merkle tree updates',\n                            'currently unimplemented.',\n                        ];\n                        type: {\n                            option: {\n                                defined: 'QueueIndex';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'QueueIndex';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'queueId';\n                        docs: ['Id of queue in queue account.'];\n                        type: 'u8';\n                    },\n                    {\n                        name: 'index';\n                        docs: ['Index of compressed account hash in queue.'];\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeSequenceNumber';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'pubkey';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'seq';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PublicTransactionEvent';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputLeafIndices';\n                        type: {\n                            vec: 'u32';\n                        };\n                    },\n                    {\n                        name: 'sequenceNumbers';\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'pubkeyArray';\n                        type: {\n                            vec: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'message';\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n    ];\n    errors: [\n        {\n            code: 6000;\n            name: 'SumCheckFailed';\n            msg: 'Sum check failed';\n        },\n        {\n            code: 6001;\n            name: 'SignerCheckFailed';\n            msg: 'Signer check failed';\n        },\n        {\n            code: 6002;\n            name: 'CpiSignerCheckFailed';\n            msg: 'Cpi signer check failed';\n        },\n        {\n            code: 6003;\n            name: 'ComputeInputSumFailed';\n            msg: 'Computing input sum failed.';\n        },\n        {\n            code: 6004;\n            name: 'ComputeOutputSumFailed';\n            msg: 'Computing output sum failed.';\n        },\n        {\n            code: 6005;\n            name: 'ComputeRpcSumFailed';\n            msg: 'Computing rpc sum failed.';\n        },\n        {\n            code: 6006;\n            name: 'InvalidAddress';\n            msg: 'InvalidAddress';\n        },\n        {\n            code: 6007;\n            name: 'DeriveAddressError';\n            msg: 'DeriveAddressError';\n        },\n        {\n            code: 6008;\n            name: 'CompressedSolPdaUndefinedForCompressSol';\n            msg: 'CompressedSolPdaUndefinedForCompressSol';\n        },\n        {\n            code: 6009;\n            name: 'DeCompressLamportsUndefinedForCompressSol';\n            msg: 'DeCompressLamportsUndefinedForCompressSol';\n        },\n        {\n            code: 6010;\n            name: 'CompressedSolPdaUndefinedForDecompressSol';\n            msg: 'CompressedSolPdaUndefinedForDecompressSol';\n        },\n        {\n            code: 6011;\n            name: 'DeCompressLamportsUndefinedForDecompressSol';\n            msg: 'DeCompressLamportsUndefinedForDecompressSol';\n        },\n        {\n            code: 6012;\n            name: 'DecompressRecipientUndefinedForDecompressSol';\n            msg: 'DecompressRecipientUndefinedForDecompressSol';\n        },\n        {\n            code: 6013;\n            name: 'WriteAccessCheckFailed';\n            msg: 'WriteAccessCheckFailed';\n        },\n        {\n            code: 6014;\n            name: 'InvokingProgramNotProvided';\n            msg: 'InvokingProgramNotProvided';\n        },\n        {\n            code: 6015;\n            name: 'InvalidCapacity';\n            msg: 'InvalidCapacity';\n        },\n        {\n            code: 6016;\n            name: 'InvalidMerkleTreeOwner';\n            msg: 'InvalidMerkleTreeOwner';\n        },\n        {\n            code: 6017;\n            name: 'ProofIsNone';\n            msg: 'ProofIsNone';\n        },\n        {\n            code: 6018;\n            name: 'ProofIsSome';\n            msg: 'Proof is some but no input compressed accounts or new addresses provided.';\n        },\n        {\n            code: 6019;\n            name: 'EmptyInputs';\n            msg: 'EmptyInputs';\n        },\n        {\n            code: 6020;\n            name: 'CpiContextAccountUndefined';\n            msg: 'CpiContextAccountUndefined';\n        },\n        {\n            code: 6021;\n            name: 'CpiContextEmpty';\n            msg: 'CpiContextEmpty';\n        },\n        {\n            code: 6022;\n            name: 'CpiContextMissing';\n            msg: 'CpiContextMissing';\n        },\n        {\n            code: 6023;\n            name: 'DecompressionRecipientDefined';\n            msg: 'DecompressionRecipientDefined';\n        },\n        {\n            code: 6024;\n            name: 'SolPoolPdaDefined';\n            msg: 'SolPoolPdaDefined';\n        },\n        {\n            code: 6025;\n            name: 'AppendStateFailed';\n            msg: 'AppendStateFailed';\n        },\n        {\n            code: 6026;\n            name: 'InstructionNotCallable';\n            msg: 'The instruction is not callable';\n        },\n        {\n            code: 6027;\n            name: 'CpiContextFeePayerMismatch';\n            msg: 'CpiContextFeePayerMismatch';\n        },\n        {\n            code: 6028;\n            name: 'CpiContextAssociatedMerkleTreeMismatch';\n            msg: 'CpiContextAssociatedMerkleTreeMismatch';\n        },\n        {\n            code: 6029;\n            name: 'NoInputs';\n            msg: 'NoInputs';\n        },\n        {\n            code: 6030;\n            name: 'InputMerkleTreeIndicesNotInOrder';\n            msg: 'Input merkle tree indices are not in ascending order.';\n        },\n        {\n            code: 6031;\n            name: 'OutputMerkleTreeIndicesNotInOrder';\n            msg: 'Output merkle tree indices are not in ascending order.';\n        },\n        {\n            code: 6032;\n            name: 'OutputMerkleTreeNotUnique';\n        },\n        {\n            code: 6033;\n            name: 'DataFieldUndefined';\n        },\n    ];\n};\n\nexport const IDL: LightSystemProgram = {\n    version: '1.2.0',\n    name: 'light_system_program',\n    constants: [\n        {\n            name: 'SOL_POOL_PDA_SEED',\n            type: 'bytes',\n            value: '[115, 111, 108, 95, 112, 111, 111, 108, 95, 112, 100, 97]',\n        },\n    ],\n    instructions: [\n        {\n            name: 'initCpiContextAccount',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiContextAccount',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'associatedMerkleTree',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'invoke',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Fee payer needs to be mutable to pay rollover and protocol fees.',\n                    ],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                    docs: [\n                        'This pda is used to invoke the account compression program.',\n                    ],\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['Merkle trees.'],\n                },\n                {\n                    name: 'solPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                    docs: [\n                        'Sol pool pda is used to store the native sol that has been compressed.',\n                        \"It's only required when compressing or decompressing sol.\",\n                    ],\n                },\n                {\n                    name: 'decompressionRecipient',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                    docs: [\n                        'Only needs to be provided for decompression as a recipient for the',\n                        'decompressed sol.',\n                        'Compressed sol originate from authority.',\n                    ],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'invokeCpi',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Fee payer needs to be mutable to pay rollover and protocol fees.',\n                    ],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'invokingProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'solPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'decompressionRecipient',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiContextAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'stubIdlBuild',\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Fee payer needs to be mutable to pay rollover and protocol fees.',\n                    ],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                    docs: [\n                        'This pda is used to invoke the account compression program.',\n                    ],\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['Merkle trees.'],\n                },\n                {\n                    name: 'solPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                    docs: [\n                        'Sol pool pda is used to store the native sol that has been compressed.',\n                        \"It's only required when compressing or decompressing sol.\",\n                    ],\n                },\n                {\n                    name: 'decompressionRecipient',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                    docs: [\n                        'Only needs to be provided for decompression as a recipient for the',\n                        'decompressed sol.',\n                        'Compressed sol originate from authority.',\n                    ],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs1',\n                    type: {\n                        defined: 'InstructionDataInvoke',\n                    },\n                },\n                {\n                    name: 'inputs2',\n                    type: {\n                        defined: 'InstructionDataInvokeCpi',\n                    },\n                },\n                {\n                    name: 'inputs3',\n                    type: {\n                        defined: 'PublicTransactionEvent',\n                    },\n                },\n            ],\n        },\n    ],\n    accounts: [\n        {\n            name: 'stateMerkleTreeAccount',\n            docs: [\n                'Concurrent state Merkle tree used for public compressed transactions.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'metadata',\n                        type: {\n                            defined: 'MerkleTreeMetadata',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'cpiContextAccount',\n            docs: [\n                'Collects instruction data without executing a compressed transaction.',\n                'Signer checks are performed on instruction data.',\n                'Collected instruction data is combined with the instruction data of the executing cpi,',\n                'and executed as a single transaction.',\n                'This enables to use input compressed accounts that are owned by multiple programs,',\n                'with one zero-knowledge proof.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'feePayer',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'associatedMerkleTree',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'context',\n                        type: {\n                            vec: {\n                                defined: 'InstructionDataInvokeCpi',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    types: [\n        {\n            name: 'AccessMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        docs: ['Owner of the Merkle tree.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'programOwner',\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'forester',\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ],\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'accessMetadata',\n                        type: {\n                            defined: 'AccessMetadata',\n                        },\n                    },\n                    {\n                        name: 'rolloverMetadata',\n                        type: {\n                            defined: 'RolloverMetadata',\n                        },\n                    },\n                    {\n                        name: 'associatedQueue',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'nextMerkleTree',\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'RolloverMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'index',\n                        docs: ['Unique index.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverFee',\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverThreshold',\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        docs: ['Tip for maintaining the account.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolledoverSlot',\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'closeThreshold',\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'additionalBytes',\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ],\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvoke',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'NewAddressParamsPacked',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'seed',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'addressQueueAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex',\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedProof',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'a',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'b',\n                        type: {\n                            array: ['u8', 64],\n                        },\n                    },\n                    {\n                        name: 'c',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvokeCpi',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedCpiContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'setContext',\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'firstSetContext',\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContextAccountIndex',\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ],\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccount',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'lamports',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'address',\n                        type: {\n                            option: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccountData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'discriminator',\n                        type: {\n                            array: ['u8', 8],\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: 'bytes',\n                    },\n                    {\n                        name: 'dataHash',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ],\n                        type: 'u16',\n                    },\n                    {\n                        name: 'readOnly',\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ],\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'leafIndex',\n                        type: 'u32',\n                    },\n                    {\n                        name: 'queueIndex',\n                        docs: [\n                            'Index of leaf in queue. Placeholder of batched Merkle tree updates',\n                            'currently unimplemented.',\n                        ],\n                        type: {\n                            option: {\n                                defined: 'QueueIndex',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'QueueIndex',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'queueId',\n                        docs: ['Id of queue in queue account.'],\n                        type: 'u8',\n                    },\n                    {\n                        name: 'index',\n                        docs: ['Index of compressed account hash in queue.'],\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeSequenceNumber',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'pubkey',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'seq',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PublicTransactionEvent',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputLeafIndices',\n                        type: {\n                            vec: 'u32',\n                        },\n                    },\n                    {\n                        name: 'sequenceNumbers',\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'pubkeyArray',\n                        type: {\n                            vec: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'message',\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    errors: [\n        {\n            code: 6000,\n            name: 'SumCheckFailed',\n            msg: 'Sum check failed',\n        },\n        {\n            code: 6001,\n            name: 'SignerCheckFailed',\n            msg: 'Signer check failed',\n        },\n        {\n            code: 6002,\n            name: 'CpiSignerCheckFailed',\n            msg: 'Cpi signer check failed',\n        },\n        {\n            code: 6003,\n            name: 'ComputeInputSumFailed',\n            msg: 'Computing input sum failed.',\n        },\n        {\n            code: 6004,\n            name: 'ComputeOutputSumFailed',\n            msg: 'Computing output sum failed.',\n        },\n        {\n            code: 6005,\n            name: 'ComputeRpcSumFailed',\n            msg: 'Computing rpc sum failed.',\n        },\n        {\n            code: 6006,\n            name: 'InvalidAddress',\n            msg: 'InvalidAddress',\n        },\n        {\n            code: 6007,\n            name: 'DeriveAddressError',\n            msg: 'DeriveAddressError',\n        },\n        {\n            code: 6008,\n            name: 'CompressedSolPdaUndefinedForCompressSol',\n            msg: 'CompressedSolPdaUndefinedForCompressSol',\n        },\n        {\n            code: 6009,\n            name: 'DeCompressLamportsUndefinedForCompressSol',\n            msg: 'DeCompressLamportsUndefinedForCompressSol',\n        },\n        {\n            code: 6010,\n            name: 'CompressedSolPdaUndefinedForDecompressSol',\n            msg: 'CompressedSolPdaUndefinedForDecompressSol',\n        },\n        {\n            code: 6011,\n            name: 'DeCompressLamportsUndefinedForDecompressSol',\n            msg: 'DeCompressLamportsUndefinedForDecompressSol',\n        },\n        {\n            code: 6012,\n            name: 'DecompressRecipientUndefinedForDecompressSol',\n            msg: 'DecompressRecipientUndefinedForDecompressSol',\n        },\n        {\n            code: 6013,\n            name: 'WriteAccessCheckFailed',\n            msg: 'WriteAccessCheckFailed',\n        },\n        {\n            code: 6014,\n            name: 'InvokingProgramNotProvided',\n            msg: 'InvokingProgramNotProvided',\n        },\n        {\n            code: 6015,\n            name: 'InvalidCapacity',\n            msg: 'InvalidCapacity',\n        },\n        {\n            code: 6016,\n            name: 'InvalidMerkleTreeOwner',\n            msg: 'InvalidMerkleTreeOwner',\n        },\n        {\n            code: 6017,\n            name: 'ProofIsNone',\n            msg: 'ProofIsNone',\n        },\n        {\n            code: 6018,\n            name: 'ProofIsSome',\n            msg: 'Proof is some but no input compressed accounts or new addresses provided.',\n        },\n        {\n            code: 6019,\n            name: 'EmptyInputs',\n            msg: 'EmptyInputs',\n        },\n        {\n            code: 6020,\n            name: 'CpiContextAccountUndefined',\n            msg: 'CpiContextAccountUndefined',\n        },\n        {\n            code: 6021,\n            name: 'CpiContextEmpty',\n            msg: 'CpiContextEmpty',\n        },\n        {\n            code: 6022,\n            name: 'CpiContextMissing',\n            msg: 'CpiContextMissing',\n        },\n        {\n            code: 6023,\n            name: 'DecompressionRecipientDefined',\n            msg: 'DecompressionRecipientDefined',\n        },\n        {\n            code: 6024,\n            name: 'SolPoolPdaDefined',\n            msg: 'SolPoolPdaDefined',\n        },\n        {\n            code: 6025,\n            name: 'AppendStateFailed',\n            msg: 'AppendStateFailed',\n        },\n        {\n            code: 6026,\n            name: 'InstructionNotCallable',\n            msg: 'The instruction is not callable',\n        },\n        {\n            code: 6027,\n            name: 'CpiContextFeePayerMismatch',\n            msg: 'CpiContextFeePayerMismatch',\n        },\n        {\n            code: 6028,\n            name: 'CpiContextAssociatedMerkleTreeMismatch',\n            msg: 'CpiContextAssociatedMerkleTreeMismatch',\n        },\n        {\n            code: 6029,\n            name: 'NoInputs',\n            msg: 'NoInputs',\n        },\n        {\n            code: 6030,\n            name: 'InputMerkleTreeIndicesNotInOrder',\n            msg: 'Input merkle tree indices are not in ascending order.',\n        },\n        {\n            code: 6031,\n            name: 'OutputMerkleTreeIndicesNotInOrder',\n            msg: 'Output merkle tree indices are not in ascending order.',\n        },\n        {\n            code: 6032,\n            name: 'OutputMerkleTreeNotUnique',\n        },\n        {\n            code: 6033,\n            name: 'DataFieldUndefined',\n        },\n    ],\n};\n","/// TODO: extract wallet into its own npm package\nimport {\n    Commitment,\n    Connection,\n    Keypair,\n    VersionedTransaction,\n    sendAndConfirmTransaction,\n} from '@solana/web3.js';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nconst { sign } = nacl;\n\nexport type InclusionProofPublicInputs = {\n    root: string;\n    leaf: string;\n};\nexport type InclusionProofPrivateInputs = {\n    merkleProof: string[];\n    leaf: string;\n    leafIndex: string;\n};\n\n/// On the system level, we're proving simple inclusion proofs in a\n/// state tree, for each utxo used as input into a transaction.\nexport type InclusionProofInputs = (InclusionProofPublicInputs &\n    InclusionProofPrivateInputs)[];\n\n/// Mock Solana web3 library\nexport class Wallet {\n    _publicKey: PublicKey;\n    _keypair: Keypair;\n    _connection: Connection;\n    _url: string;\n    _commitment: Commitment;\n\n    constructor(keypair: Keypair, url: string, commitment: Commitment) {\n        this._publicKey = keypair.publicKey;\n        this._keypair = keypair;\n        this._connection = new Connection(url);\n        this._url = url;\n        this._commitment = commitment;\n    }\n\n    signTransaction = async (tx: any): Promise<any> => {\n        await tx.sign([this._keypair!]);\n        return tx;\n    };\n\n    sendTransaction = async (\n        transaction: VersionedTransaction,\n    ): Promise<string> => {\n        const signature = await this._connection.sendTransaction(transaction);\n        return signature;\n    };\n\n    signAllTransactions = async <T extends Transaction | VersionedTransaction>(\n        transactions: T[],\n    ): Promise<T[]> => {\n        const signedTxs = await Promise.all(\n            transactions.map(async tx => {\n                return await this.signTransaction(tx);\n            }),\n        );\n        return signedTxs;\n    };\n\n    signMessage = async (message: Uint8Array): Promise<Uint8Array> => {\n        return sign.detached(message, this._keypair.secretKey);\n    };\n\n    sendAndConfirmTransaction = async (\n        transaction: Transaction,\n        signers = [],\n    ): Promise<any> => {\n        const response = await sendAndConfirmTransaction(\n            this._connection,\n            transaction,\n            [this._keypair, ...signers],\n            {\n                commitment: this._commitment,\n            },\n        );\n        return response;\n    };\n}\n","import { Keypair, Commitment } from '@solana/web3.js';\nimport { Wallet } from './interface';\n\n// TODO consider adding isNodeWallet\nexport const useWallet = (\n    keypair: Keypair,\n    url: string = 'http://127.0.0.1:8899',\n    commitment: Commitment = 'confirmed',\n) => {\n    url = url !== 'mock' ? url : 'http://127.0.0.1:8899';\n    const wallet = new Wallet(keypair, url, commitment);\n    return {\n        publicKey: wallet._publicKey,\n        sendAndConfirmTransaction: wallet.sendAndConfirmTransaction,\n        signMessage: wallet.signMessage,\n        signTransaction: wallet.signTransaction,\n        signAllTransactions: wallet.signAllTransactions,\n        sendTransaction: wallet.sendTransaction,\n    };\n};\n","import { BN } from '@coral-xyz/anchor';\nimport { Buffer } from 'buffer';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\n\nexport const FIELD_SIZE = new BN(\n    '21888242871839275222246405745257275088548364400416034343698204186575808495617',\n);\nexport const HIGHEST_ADDRESS_PLUS_ONE = new BN(\n    '452312848583266388373324160190187140051835877600158453279131187530910662655',\n);\n\n// TODO: implement properly\nexport const noopProgram = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV';\nexport const lightProgram = 'SySTEM1eSU2p4BGQfQpimFEWWSC1XDFeun3Nqzz3rT7';\nexport const accountCompressionProgram = // also: merkletree program\n    'compr6CUsB5m2jS4Y3831ztGSTnDpnKJTKS95d64XVq';\n\nexport const getRegisteredProgramPda = () =>\n    new PublicKey('35hkDgaAKwMCaxRz2ocSZ6NaUrtKkyNqU6c4RV3tYJRh'); // TODO: better labelling. gov authority pda\n\nexport const getAccountCompressionAuthority = () =>\n    PublicKey.findProgramAddressSync(\n        [Buffer.from('cpi_authority')],\n        new PublicKey(\n            // TODO: can add check to ensure its consistent with the idl\n            lightProgram,\n        ),\n    )[0];\n\nexport const defaultStaticAccounts = () => [\n    new PublicKey(getRegisteredProgramPda()),\n    new PublicKey(noopProgram),\n    new PublicKey(accountCompressionProgram),\n    new PublicKey(getAccountCompressionAuthority()),\n];\nexport const defaultStaticAccountsStruct = () => {\n    return {\n        registeredProgramPda: new PublicKey(getRegisteredProgramPda()),\n        noopProgram: new PublicKey(noopProgram),\n        accountCompressionProgram: new PublicKey(accountCompressionProgram),\n        accountCompressionAuthority: new PublicKey(\n            getAccountCompressionAuthority(),\n        ),\n        cpiSignatureAccount: null,\n    };\n};\n\nexport const defaultTestStateTreeAccounts = () => {\n    return {\n        nullifierQueue: new PublicKey(nullifierQueuePubkey),\n        merkleTree: new PublicKey(merkletreePubkey),\n        merkleTreeHeight: DEFAULT_MERKLE_TREE_HEIGHT,\n        addressTree: new PublicKey(addressTree),\n        addressQueue: new PublicKey(addressQueue),\n    };\n};\n\nexport const nullifierQueuePubkey =\n    'nfq1NvQDJ2GEgnS8zt9prAe8rjjpAW1zFkrvZoBR148';\n\nexport const merkletreePubkey = 'smt1NamzXdq4AMqS2fS2F1i5KTYPZRhoHgWx38d8WsT';\nexport const addressTree = 'amt1Ayt45jfbdw5YSo7iz6WZxUmnZsQTYXy82hVwyC2';\nexport const addressQueue = 'aq1S9z4reTSQAdgWHGD2zDaS39sjGrAxbR31vxJ2F4F';\n\nexport const confirmConfig: ConfirmOptions = {\n    commitment: 'confirmed',\n    preflightCommitment: 'confirmed',\n};\n\nexport const DEFAULT_MERKLE_TREE_HEIGHT = 26;\nexport const DEFAULT_MERKLE_TREE_ROOTS = 2800;\n/** Threshold (per asset) at which new in-UTXOs get merged, in order to reduce UTXO pool size */\nexport const UTXO_MERGE_THRESHOLD = 20;\nexport const UTXO_MERGE_MAXIMUM = 10;\n\n/**\n * Treshold after which the currently used transaction Merkle tree is switched\n * to the next one\n */\nexport const TRANSACTION_MERKLE_TREE_ROLLOVER_THRESHOLD = new BN(\n    Math.floor(2 ** DEFAULT_MERKLE_TREE_HEIGHT * 0.95),\n);\n\n/**\n * Fee to provide continous funding for the state Merkle tree.\n * Once the state Merkle tree is at 95% capacity the accumulated fees\n * will be used to fund the next state Merkle tree with the same parameters.\n *\n * Is charged per output compressed account.\n */\nexport const STATE_MERKLE_TREE_ROLLOVER_FEE = new BN(300);\n\n/**\n * Fee to provide continous funding for the address queue and address Merkle tree.\n * Once the address Merkle tree is at 95% capacity the accumulated fees\n * will be used to fund the next address queue and address tree with the same parameters.\n *\n * Is charged per newly created address.\n */\nexport const ADDRESS_QUEUE_ROLLOVER_FEE = new BN(392);\n\n/**\n * Is charged if the transaction nullifies at least one compressed account.\n */\nexport const STATE_MERKLE_TREE_NETWORK_FEE = new BN(5000);\n\n/**\n * Is charged if the transaction creates at least one address.\n */\nexport const ADDRESS_TREE_NETWORK_FEE = new BN(5000);\n","var _a;\n/**\n * Returns true if being run inside a web browser,\n * false if in a Node process or electron app.\n */\nexport const isBrowser = process.env.ANCHOR_BROWSER ||\n    (typeof window !== \"undefined\" && !((_a = window.process) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(\"type\")));\n/**\n * Splits an array into chunks\n *\n * @param array Array of objects to chunk.\n * @param size The max size of a chunk.\n * @returns A two dimensional array where each T[] length is < the provided size.\n */\nexport function chunks(array, size) {\n    return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n/**\n * Check if a transaction object is a VersionedTransaction or not\n *\n * @param tx\n * @returns bool\n */\nexport const isVersionedTransaction = (tx) => {\n    return \"version\" in tx;\n};\n//# sourceMappingURL=common.js.map","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import bs58 from \"bs58\";\nexport function encode(data) {\n    return bs58.encode(data);\n}\nexport function decode(data) {\n    return bs58.decode(data);\n}\n//# sourceMappingURL=bs58.js.map","// TODO: consider implementing BN254 as wrapper class around _BN mirroring\n// PublicKey this would encapsulate our runtime checks and also enforce\n// typesafety at compile time\n\nimport { FIELD_SIZE } from '../constants';\nimport { PublicKey } from '@solana/web3.js';\nimport { BN } from '@coral-xyz/anchor';\nimport { bs58 } from '@coral-xyz/anchor/dist/esm/utils/bytes';\nimport { Buffer } from 'buffer';\n\n/**\n * bignumber with <254-bit max size. Anchor serialization doesn't support native\n * bigint yet, so we wrap BN. This wrapper has simple base10 encoding which is\n * needed for zk circuit compat, in addition to the base58 encoding that users\n * are used to from working with the web3.js PublicKey type.\n */\nexport type BN254 = BN;\n\nexport const bn = (\n    number: string | number | BN | Buffer | Uint8Array | number[],\n    base?: number | 'hex' | undefined,\n    endian?: BN.Endianness | undefined,\n): BN => new BN(number, base, endian);\n\n/** Create a bigint instance with <254-bit max size and base58 capabilities */\nexport const createBN254 = (\n    number: string | number | BN | Buffer | Uint8Array | number[],\n    base?: number | 'hex' | 'base58' | undefined,\n): BN254 => {\n    if (base === 'base58') {\n        if (typeof number !== 'string')\n            throw new Error('Must be a base58 string');\n        return createBN254(bs58.decode(number));\n    }\n\n    const bigintNumber = new BN(number, base);\n\n    return enforceSize(bigintNumber);\n};\n\n/**\n * Enforces a maximum size of <254 bits for bigint instances. This is necessary\n * for compatibility with zk-SNARKs, where hashes must be less than the field\n * modulus (~2^254).\n */\nfunction enforceSize(bigintNumber: BN254): BN254 {\n    if (bigintNumber.gte(FIELD_SIZE)) {\n        throw new Error('Value is too large. Max <254 bits');\n    }\n    return bigintNumber;\n}\n\n/** Convert <254-bit bigint to Base58 string.  */\nexport function encodeBN254toBase58(bigintNumber: BN): string {\n    /// enforce size\n    const bn254 = createBN254(bigintNumber);\n    const bn254Buffer = bn254.toArrayLike(Buffer, undefined, 32);\n\n    return bs58.encode(bn254Buffer);\n}\n","import { BN } from '@coral-xyz/anchor';\nimport { PublicKey } from '@solana/web3.js';\nimport { CompressedAccount, CompressedAccountData } from './types';\nimport { BN254, bn } from './BN254';\n\nexport type CompressedAccountWithMerkleContext = CompressedAccount &\n    MerkleContext & {\n        readOnly: boolean;\n    };\n\n/**\n * Context for compressed account inserted into a state Merkle tree\n * */\nexport type MerkleContext = {\n    /** State Merkle tree */\n    merkleTree: PublicKey;\n    /** The state nullfier queue belonging to merkleTree */\n    nullifierQueue: PublicKey;\n    /** Poseidon hash of the utxo preimage. Is a leaf in state merkle tree  */\n    hash: number[]; // TODO: BN254;\n    /** 'hash' position within the Merkle tree */\n    leafIndex: number;\n};\n\nexport type MerkleContextWithMerkleProof = MerkleContext & {\n    /** Recent valid 'hash' proof path, expires after n slots */\n    merkleProof: BN254[];\n    /** Index of state root the merkleproof is valid for, expires after n slots */\n    rootIndex: number;\n    /** Current root */\n    root: BN254;\n};\n\nexport const createCompressedAccount = (\n    owner: PublicKey,\n    lamports?: BN,\n    data?: CompressedAccountData,\n    address?: number[],\n): CompressedAccount => ({\n    owner,\n    lamports: lamports ?? bn(0),\n    address: address ?? null,\n    data: data ?? null,\n});\n\nexport const createCompressedAccountWithMerkleContext = (\n    merkleContext: MerkleContext,\n    owner: PublicKey,\n    lamports?: BN,\n    data?: CompressedAccountData,\n    address?: number[],\n): CompressedAccountWithMerkleContext => ({\n    ...createCompressedAccount(owner, lamports, data, address),\n    ...merkleContext,\n    readOnly: false,\n});\n\nexport const createMerkleContext = (\n    merkleTree: PublicKey,\n    nullifierQueue: PublicKey,\n    hash: number[], // TODO: BN254,\n    leafIndex: number,\n): MerkleContext => ({\n    merkleTree,\n    nullifierQueue,\n    hash,\n    leafIndex,\n});\n","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, isLE, byteSwap32, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","import { Buffer } from 'buffer';\nimport { bn, createBN254 } from '../state/BN254';\nimport { FIELD_SIZE } from '../constants';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { Keypair } from '@solana/web3.js';\nimport { BN } from '@coral-xyz/anchor';\n\nexport function byteArrayToKeypair(byteArray: number[]): Keypair {\n    return Keypair.fromSecretKey(Uint8Array.from(byteArray));\n}\n/**\n * @internal\n * convert BN to hex with '0x' prefix\n */\nexport function toHex(bn: BN): string {\n    return '0x' + bn.toString('hex');\n}\n\nexport const toArray = <T>(value: T | T[]) =>\n    Array.isArray(value) ? value : [value];\n\nexport const bufToDecStr = (buf: Buffer): string => {\n    return createBN254(buf).toString();\n};\nfunction isSmallerThanBn254FieldSizeBe(bytes: Buffer): boolean {\n    const bigint = bn(bytes, undefined, 'be');\n    return bigint.lt(FIELD_SIZE);\n}\n\n/**\n * Hash the provided `bytes` with Keccak256 and ensure the result fits in the\n * BN254 prime field by repeatedly hashing the inputs with various \"bump seeds\"\n * and truncating the resulting hash to 31 bytes.\n *\n * @deprecated Use `hashvToBn254FieldSizeBe` instead.\n */\nexport function hashToBn254FieldSizeBe(bytes: Buffer): [Buffer, number] | null {\n    // TODO(vadorovsky, affects-onchain): Get rid of the bump mechanism, it\n    // makes no sense. Doing the same as in the `hashvToBn254FieldSizeBe` below\n    // - overwriting the most significant byte with zero - is sufficient for\n    // truncation, it's also faster, doesn't force us to return `Option` and\n    // care about handling an error which is practically never returned.\n    //\n    // The reason we can't do it now is that it would affect on-chain programs.\n    // Once we can update programs, we can get rid of the seed bump (or even of\n    // this function all together in favor of the `hashv` variant).\n    let bumpSeed = 255;\n    while (bumpSeed >= 0) {\n        const inputWithBumpSeed = Buffer.concat([\n            bytes,\n            Buffer.from([bumpSeed]),\n        ]);\n        const hash = keccak_256(inputWithBumpSeed);\n        if (hash.length !== 32) {\n            throw new Error('Invalid hash length');\n        }\n        hash[0] = 0;\n\n        if (isSmallerThanBn254FieldSizeBe(Buffer.from(hash))) {\n            return [Buffer.from(hash), bumpSeed];\n        }\n\n        bumpSeed -= 1;\n    }\n    return null;\n}\n\n/**\n * Hash the provided `bytes` with Keccak256 and ensure that the result fits in\n * the BN254 prime field by truncating the resulting hash to 31 bytes.\n *\n * @param bytes Input bytes\n *\n * @returns     Hash digest\n */\nexport function hashvToBn254FieldSizeBe(bytes: Uint8Array[]): Uint8Array {\n    const hasher = keccak_256.create();\n    for (const input of bytes) {\n        hasher.update(input);\n    }\n    const hash = hasher.digest();\n    hash[0] = 0;\n    return hash;\n}\n\n/** Mutates array in place */\nexport function pushUniqueItems<T>(items: T[], map: T[]): void {\n    items.forEach(item => {\n        if (!map.includes(item)) {\n            map.push(item);\n        }\n    });\n}\n\nexport function toCamelCase(\n    obj: Array<any> | unknown | any,\n): Array<any> | unknown | any {\n    if (Array.isArray(obj)) {\n        return obj.map(v => toCamelCase(v));\n    } else if (obj !== null && obj.constructor === Object) {\n        return Object.keys(obj).reduce((result, key) => {\n            const camelCaseKey = key.replace(/([-_][a-z])/gi, $1 => {\n                return $1.toUpperCase().replace('-', '').replace('_', '');\n            });\n            result[camelCaseKey] = toCamelCase(obj[key]);\n            return result;\n        }, {} as any);\n    }\n    return obj;\n}\n\n// FIXME: check bundling and how to resolve the type error\n//@ts-ignore\nif (import.meta.vitest) {\n    //@ts-ignore\n    const { it, expect, describe } = import.meta.vitest;\n\n    describe('toArray function', () => {\n        it('should convert a single item to an array', () => {\n            expect(toArray(1)).toEqual([1]);\n        });\n\n        it('should leave an array unchanged', () => {\n            expect(toArray([1, 2, 3])).toEqual([1, 2, 3]);\n        });\n    });\n\n    describe('isSmallerThanBn254FieldSizeBe function', () => {\n        it('should return true for a small number', () => {\n            const buf = Buffer.from(\n                '0000000000000000000000000000000000000000000000000000000000000000',\n                'hex',\n            );\n            expect(isSmallerThanBn254FieldSizeBe(buf)).toBe(true);\n        });\n\n        it('should return false for a large number', () => {\n            const buf = Buffer.from(\n                '0000000000000000000000000000000000000000000000000000000000000065',\n                'hex',\n            ).reverse();\n            expect(isSmallerThanBn254FieldSizeBe(buf)).toBe(false);\n        });\n    });\n\n    describe('hashToBn254FieldSizeBe function', () => {\n        const refBumpSeed = [252];\n        const bytes = [\n            131, 219, 249, 246, 221, 196, 33, 3, 114, 23, 121, 235, 18, 229, 71,\n            152, 39, 87, 169, 208, 143, 101, 43, 128, 245, 59, 22, 134, 182,\n            231, 116, 33,\n        ];\n        const refResult = [\n            0, 146, 15, 187, 171, 163, 183, 93, 237, 121, 37, 231, 55, 162, 208,\n            188, 244, 77, 185, 157, 93, 9, 101, 193, 220, 247, 109, 94, 48, 212,\n            98, 149,\n        ];\n\n        it('should return a valid value for initial buffer', async () => {\n            const result = await hashToBn254FieldSizeBe(Buffer.from(bytes));\n            expect(Array.from(result![0])).toEqual(refResult);\n        });\n\n        it('should return a valid value for initial buffer', async () => {\n            const buf = Buffer.from(\n                '0000000000000000000000000000000000000000000000000000000000000000',\n                'hex',\n            );\n            const result = await hashToBn254FieldSizeBe(buf);\n            expect(result).not.toBeNull();\n            if (result) {\n                expect(result[0]).toBeInstanceOf(Buffer);\n                expect(result[1]).toBe(255);\n            }\n        });\n\n        it('should return a valid value for a buffer that can be hashed to a smaller value', async () => {\n            const buf = Buffer.from(\n                'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe',\n                'hex',\n            );\n            const result = await hashToBn254FieldSizeBe(buf);\n            expect(result).not.toBeNull();\n            if (result) {\n                expect(result[1]).toBeLessThanOrEqual(255);\n                expect(result[0]).toBeInstanceOf(Buffer);\n                // Check if the hashed value is indeed smaller than the bn254 field size\n                expect(isSmallerThanBn254FieldSizeBe(result[0])).toBe(true);\n            }\n        });\n\n        it('should correctly hash the input buffer', async () => {\n            const buf = Buffer.from('deadbeef', 'hex');\n            const result = await hashToBn254FieldSizeBe(buf);\n            expect(result).not.toBeNull();\n            if (result) {\n                // Since the actual hash value depends on the crypto implementation and input,\n                // we cannot predict the exact output. However, we can check if the output is valid.\n                expect(result[0].length).toBe(32); // SHA-256 hash length\n                expect(result[1]).toBeLessThanOrEqual(255);\n                expect(isSmallerThanBn254FieldSizeBe(result[0])).toBe(true);\n            }\n        });\n    });\n\n    describe('pushUniqueItems function', () => {\n        it('should add unique items', () => {\n            const map = [1, 2, 3];\n            const itemsToAdd = [3, 4, 5];\n            pushUniqueItems(itemsToAdd, map);\n            expect(map).toEqual([1, 2, 3, 4, 5]);\n        });\n\n        it('should ignore duplicates', () => {\n            const map = [1, 2, 3];\n            const itemsToAdd = [1, 2, 3];\n            pushUniqueItems(itemsToAdd, map);\n            expect(map).toEqual([1, 2, 3]);\n        });\n\n        it('should handle empty arrays', () => {\n            const map: number[] = [];\n            const itemsToAdd: number[] = [];\n            pushUniqueItems(itemsToAdd, map);\n            expect(map).toEqual([]);\n        });\n    });\n\n    describe('bufToDecStr', () => {\n        it(\"should convert buffer [0] to '0'\", () => {\n            expect(bufToDecStr(Buffer.from([0]))).toEqual('0');\n        });\n\n        it(\"should convert buffer [1] to '1'\", () => {\n            expect(bufToDecStr(Buffer.from([1]))).toEqual('1');\n        });\n\n        it(\"should convert buffer [1, 0] to '256'\", () => {\n            expect(bufToDecStr(Buffer.from([1, 0]))).toEqual('256');\n        });\n\n        it(\"should convert buffer [1, 1] to '257'\", () => {\n            expect(bufToDecStr(Buffer.from([1, 1]))).toEqual('257');\n        });\n\n        it(\"should convert buffer [7, 91, 205, 21] to '123456789'\", () => {\n            expect(bufToDecStr(Buffer.from([7, 91, 205, 21]))).toEqual(\n                '123456789',\n            );\n        });\n    });\n\n    describe('toCamelCase', () => {\n        it('should convert object keys to camelCase', () => {\n            const input = { test_key: 1, 'another-testKey': 2 };\n            const expected = { testKey: 1, anotherTestKey: 2 };\n            expect(toCamelCase(input)).toEqual(expected);\n        });\n\n        it('should handle arrays of objects', () => {\n            const input = [{ array_key: 3 }, { 'another_array-key': 4 }];\n            const expected = [{ arrayKey: 3 }, { anotherArrayKey: 4 }];\n            expect(toCamelCase(input)).toEqual(expected);\n        });\n\n        it('should return the input if it is neither an object nor an array', () => {\n            const input = 'testString';\n            expect(toCamelCase(input)).toBe(input);\n        });\n    });\n}\n","import { AccountMeta, PublicKey } from '@solana/web3.js';\nimport {\n    CompressedAccount,\n    OutputCompressedAccountWithPackedContext,\n    PackedCompressedAccountWithMerkleContext,\n} from '../state';\nimport { CompressedAccountWithMerkleContext } from '../state/compressed-account';\nimport { toArray } from '../utils/conversion';\nimport { defaultTestStateTreeAccounts } from '../constants';\n\n/**\n * @internal Finds the index of a PublicKey in an array, or adds it if not\n * present\n * */\nexport function getIndexOrAdd(\n    accountsArray: PublicKey[],\n    key: PublicKey,\n): number {\n    const index = accountsArray.findIndex(existingKey =>\n        existingKey.equals(key),\n    );\n    if (index === -1) {\n        accountsArray.push(key);\n        return accountsArray.length - 1;\n    }\n    return index;\n}\n\n/** @internal */\nexport function padOutputStateMerkleTrees(\n    outputStateMerkleTrees: PublicKey[] | PublicKey | undefined,\n    numberOfOutputCompressedAccounts: number,\n    inputCompressedAccountsWithMerkleContext: CompressedAccountWithMerkleContext[],\n): PublicKey[] {\n    if (numberOfOutputCompressedAccounts <= 0) {\n        return [];\n    }\n\n    /// Default: use the 0th state tree of input state for all output accounts\n    if (outputStateMerkleTrees === undefined) {\n        if (inputCompressedAccountsWithMerkleContext.length === 0) {\n            return new Array(numberOfOutputCompressedAccounts).fill(\n                defaultTestStateTreeAccounts().merkleTree,\n            );\n        }\n        return new Array(numberOfOutputCompressedAccounts).fill(\n            inputCompressedAccountsWithMerkleContext[0].merkleTree,\n        );\n        /// Align the number of output state trees with the number of output\n        /// accounts, and fill up with 0th output state tree\n    } else {\n        /// Into array\n        const treesArray = toArray(outputStateMerkleTrees);\n        if (treesArray.length >= numberOfOutputCompressedAccounts) {\n            return treesArray.slice(0, numberOfOutputCompressedAccounts);\n        } else {\n            return treesArray.concat(\n                new Array(\n                    numberOfOutputCompressedAccounts - treesArray.length,\n                ).fill(treesArray[0]),\n            );\n        }\n    }\n}\n\nexport function toAccountMetas(remainingAccounts: PublicKey[]): AccountMeta[] {\n    return remainingAccounts.map(\n        (account): AccountMeta => ({\n            pubkey: account,\n            isWritable: true,\n            isSigner: false,\n        }),\n    );\n}\n\n// TODO: include owner and lamports in packing.\n/**\n * Packs Compressed Accounts.\n *\n * Replaces PublicKey with index pointer to remaining accounts.\n *\n * @param inputCompressedAccounts           Ix input state to be consumed\n * @param inputStateRootIndices             The recent state root indices of the\n *                                          input state. The expiry is tied to\n *                                          the proof.\n * @param outputCompressedAccounts          Ix output state to be created\n * @param outputStateMerkleTrees            Optional output state trees to be\n *                                          inserted into the output state.\n *                                          Defaults to the 0th state tree of\n *                                          the input state. Gets padded to the\n *                                          length of outputCompressedAccounts.\n *\n * @param remainingAccounts                 Optional existing array of accounts\n *                                          to append to.\n **/\nexport function packCompressedAccounts(\n    inputCompressedAccounts: CompressedAccountWithMerkleContext[],\n    inputStateRootIndices: number[],\n    outputCompressedAccounts: CompressedAccount[],\n    outputStateMerkleTrees?: PublicKey[] | PublicKey,\n    remainingAccounts: PublicKey[] = [],\n): {\n    packedInputCompressedAccounts: PackedCompressedAccountWithMerkleContext[];\n    packedOutputCompressedAccounts: OutputCompressedAccountWithPackedContext[];\n    remainingAccounts: PublicKey[];\n} {\n    const _remainingAccounts = remainingAccounts.slice();\n\n    const packedInputCompressedAccounts: PackedCompressedAccountWithMerkleContext[] =\n        [];\n\n    const packedOutputCompressedAccounts: OutputCompressedAccountWithPackedContext[] =\n        [];\n\n    /// input\n    inputCompressedAccounts.forEach((account, index) => {\n        const merkleTreePubkeyIndex = getIndexOrAdd(\n            _remainingAccounts,\n            account.merkleTree,\n        );\n\n        const nullifierQueuePubkeyIndex = getIndexOrAdd(\n            _remainingAccounts,\n            account.nullifierQueue,\n        );\n\n        packedInputCompressedAccounts.push({\n            compressedAccount: {\n                owner: account.owner,\n                lamports: account.lamports,\n                address: account.address,\n                data: account.data,\n            },\n            merkleContext: {\n                merkleTreePubkeyIndex,\n                nullifierQueuePubkeyIndex,\n                leafIndex: account.leafIndex,\n                queueIndex: null,\n            },\n            rootIndex: inputStateRootIndices[index],\n            readOnly: false,\n        });\n    });\n\n    /// output\n    const paddedOutputStateMerkleTrees = padOutputStateMerkleTrees(\n        outputStateMerkleTrees,\n        outputCompressedAccounts.length,\n        inputCompressedAccounts,\n    );\n\n    outputCompressedAccounts.forEach((account, index) => {\n        const merkleTreePubkeyIndex = getIndexOrAdd(\n            _remainingAccounts,\n            paddedOutputStateMerkleTrees[index],\n        );\n        packedOutputCompressedAccounts.push({\n            compressedAccount: {\n                owner: account.owner,\n                lamports: account.lamports,\n                address: account.address,\n                data: account.data,\n            },\n            merkleTreeIndex: merkleTreePubkeyIndex,\n        });\n    });\n\n    return {\n        packedInputCompressedAccounts,\n        packedOutputCompressedAccounts,\n        remainingAccounts: _remainingAccounts,\n    };\n}\n","import { BN } from '@coral-xyz/anchor';\nimport {\n    CompressedAccount,\n    CompressedAccountWithMerkleContext,\n    bn,\n} from '../state';\n\nexport const validateSufficientBalance = (balance: BN) => {\n    if (balance.lt(bn(0))) {\n        throw new Error('Not enough balance for transfer');\n    }\n};\n\nexport const validateSameOwner = (\n    compressedAccounts:\n        | CompressedAccount[]\n        | CompressedAccountWithMerkleContext[],\n) => {\n    if (compressedAccounts.length === 0) {\n        throw new Error('No accounts provided for validation');\n    }\n    const zerothOwner = compressedAccounts[0].owner;\n    if (\n        !compressedAccounts.every(account => account.owner.equals(zerothOwner))\n    ) {\n        throw new Error('All input accounts must have the same owner');\n    }\n};\n","import { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { hashToBn254FieldSizeBe, hashvToBn254FieldSizeBe } from './conversion';\nimport { defaultTestStateTreeAccounts } from '../constants';\nimport { getIndexOrAdd } from '../instruction';\n\nexport function deriveAddressSeed(\n    seeds: Uint8Array[],\n    programId: PublicKey,\n): Uint8Array {\n    const combinedSeeds: Uint8Array[] = [programId.toBytes(), ...seeds];\n    const hash = hashvToBn254FieldSizeBe(combinedSeeds);\n    return hash;\n}\n\n/**\n * Derive an address for a compressed account from a seed and an address Merkle\n * tree public key.\n *\n * @param seed                     Seed to derive the address from\n * @param addressMerkleTreePubkey  Merkle tree public key. Defaults to\n *                                 defaultTestStateTreeAccounts().addressTree\n * @returns                        Derived address\n */\nexport function deriveAddress(\n    seed: Uint8Array,\n    addressMerkleTreePubkey: PublicKey = defaultTestStateTreeAccounts()\n        .addressTree,\n): PublicKey {\n    if (seed.length != 32) {\n        throw new Error('Seed length is not 32 bytes.');\n    }\n    const bytes = addressMerkleTreePubkey.toBytes();\n    const combined = Buffer.from([...bytes, ...seed]);\n    const hash = hashToBn254FieldSizeBe(combined);\n\n    if (hash === null) {\n        throw new Error('DeriveAddressError');\n    }\n    const buf = hash[0];\n    return new PublicKey(buf);\n}\n\nexport interface NewAddressParams {\n    /**\n     * Seed for the compressed account. Must be seed used to derive\n     * newAccountAddress\n     */\n    seed: Uint8Array;\n    /**\n     * Recent state root index of the address tree. The expiry is tied to the\n     * validity proof.\n     */\n    addressMerkleTreeRootIndex: number;\n    /**\n     * Address tree pubkey. Must be base pubkey used to derive new address\n     */\n    addressMerkleTreePubkey: PublicKey;\n    /**\n     * Address space queue pubkey. Associated with the state tree.\n     */\n    addressQueuePubkey: PublicKey;\n}\n\nexport interface NewAddressParamsPacked {\n    /**\n     * Seed for the compressed account. Must be seed used to derive\n     * newAccountAddress\n     */\n    seed: number[];\n    /**\n     * Recent state root index of the address tree. The expiry is tied to the\n     * validity proof.\n     */\n    addressMerkleTreeRootIndex: number;\n    /**\n     * Index of the address merkle tree account in the remaining accounts array\n     */\n    addressMerkleTreeAccountIndex: number;\n    /**\n     * Index of the address queue account in the remaining accounts array\n     */\n    addressQueueAccountIndex: number;\n}\n\n/**\n * Packs new address params for instruction data in TypeScript clients\n *\n * @param newAddressParams      New address params\n * @param remainingAccounts     Remaining accounts\n * @returns                     Packed new address params\n */\nexport function packNewAddressParams(\n    newAddressParams: NewAddressParams[],\n    remainingAccounts: PublicKey[],\n): {\n    newAddressParamsPacked: NewAddressParamsPacked[];\n    remainingAccounts: PublicKey[];\n} {\n    const _remainingAccounts = remainingAccounts.slice();\n\n    const newAddressParamsPacked: NewAddressParamsPacked[] =\n        newAddressParams.map(x => ({\n            seed: Array.from(x.seed),\n            addressMerkleTreeRootIndex: x.addressMerkleTreeRootIndex,\n            addressMerkleTreeAccountIndex: 0, // will be assigned later\n            addressQueueAccountIndex: 0, // will be assigned later\n        }));\n\n    newAddressParams.forEach((params, i) => {\n        newAddressParamsPacked[i].addressMerkleTreeAccountIndex = getIndexOrAdd(\n            _remainingAccounts,\n            params.addressMerkleTreePubkey,\n        );\n    });\n\n    newAddressParams.forEach((params, i) => {\n        newAddressParamsPacked[i].addressQueueAccountIndex = getIndexOrAdd(\n            _remainingAccounts,\n            params.addressQueuePubkey,\n        );\n    });\n\n    return { newAddressParamsPacked, remainingAccounts: _remainingAccounts };\n}\n\n//@ts-ignore\nif (import.meta.vitest) {\n    //@ts-ignore\n    const { it, expect, describe } = import.meta.vitest;\n\n    const programId = new PublicKey(\n        '7yucc7fL3JGbyMwg4neUaenNSdySS39hbAk89Ao3t1Hz',\n    );\n\n    describe('derive address seed', () => {\n        it('should derive a valid address seed', () => {\n            const seeds: Uint8Array[] = [\n                new TextEncoder().encode('foo'),\n                new TextEncoder().encode('bar'),\n            ];\n            expect(deriveAddressSeed(seeds, programId)).toStrictEqual(\n                new Uint8Array([\n                    0, 246, 150, 3, 192, 95, 53, 123, 56, 139, 206, 179, 253,\n                    133, 115, 103, 120, 155, 251, 72, 250, 47, 117, 217, 118,\n                    59, 174, 207, 49, 101, 201, 110,\n                ]),\n            );\n        });\n\n        it('should derive a valid address seed', () => {\n            const seeds: Uint8Array[] = [\n                new TextEncoder().encode('ayy'),\n                new TextEncoder().encode('lmao'),\n            ];\n            expect(deriveAddressSeed(seeds, programId)).toStrictEqual(\n                new Uint8Array([\n                    0, 202, 44, 25, 221, 74, 144, 92, 69, 168, 38, 19, 206, 208,\n                    29, 162, 53, 27, 120, 214, 152, 116, 15, 107, 212, 168, 33,\n                    121, 187, 10, 76, 233,\n                ]),\n            );\n        });\n    });\n\n    describe('deriveAddress function', () => {\n        it('should derive a valid address from a seed and a merkle tree public key', async () => {\n            const seeds: Uint8Array[] = [\n                new TextEncoder().encode('foo'),\n                new TextEncoder().encode('bar'),\n            ];\n            const seed = deriveAddressSeed(seeds, programId);\n            const merkleTreePubkey = new PublicKey(\n                '11111111111111111111111111111111',\n            );\n            const derivedAddress = deriveAddress(seed, merkleTreePubkey);\n            expect(derivedAddress).toBeInstanceOf(PublicKey);\n            expect(derivedAddress).toStrictEqual(\n                new PublicKey('139uhyyBtEh4e1CBDJ68ooK5nCeWoncZf9HPyAfRrukA'),\n            );\n        });\n\n        it('should derive a valid address from a seed and a merkle tree public key', async () => {\n            const seeds: Uint8Array[] = [\n                new TextEncoder().encode('ayy'),\n                new TextEncoder().encode('lmao'),\n            ];\n            const seed = deriveAddressSeed(seeds, programId);\n            const merkleTreePubkey = new PublicKey(\n                '11111111111111111111111111111111',\n            );\n            const derivedAddress = deriveAddress(seed, merkleTreePubkey);\n            expect(derivedAddress).toBeInstanceOf(PublicKey);\n            expect(derivedAddress).toStrictEqual(\n                new PublicKey('12bhHm6PQjbNmEn3Yu1Gq9k7XwVn2rZpzYokmLwbFazN'),\n            );\n        });\n    });\n\n    describe('packNewAddressParams function', () => {\n        it('should pack new address params correctly', () => {\n            const newAddressParams = [\n                {\n                    seed: new Uint8Array([1, 2, 3, 4]),\n                    addressMerkleTreeRootIndex: 0,\n                    addressMerkleTreePubkey: new PublicKey(\n                        '11111111111111111111111111111111',\n                    ),\n                    addressQueuePubkey: new PublicKey(\n                        '11111111111111111111111111111112',\n                    ),\n                },\n            ];\n            const remainingAccounts = [\n                new PublicKey('11111111111111111111111111111112'),\n                new PublicKey('11111111111111111111111111111111'),\n            ];\n            const packedParams = packNewAddressParams(\n                newAddressParams,\n                remainingAccounts,\n            );\n            expect(\n                packedParams.newAddressParamsPacked[0]\n                    .addressMerkleTreeAccountIndex,\n            ).toBe(1);\n            expect(\n                packedParams.newAddressParamsPacked[0].addressQueueAccountIndex,\n            ).toBe(0);\n        });\n    });\n}\n","import {\n    Commitment,\n    Connection,\n    PublicKey,\n    TransactionConfirmationStrategy,\n} from '@solana/web3.js';\n\nexport async function airdropSol({\n    connection,\n    lamports,\n    recipientPublicKey,\n}: {\n    connection: Connection;\n    lamports: number;\n    recipientPublicKey: PublicKey;\n}) {\n    const txHash = await connection.requestAirdrop(\n        recipientPublicKey,\n        lamports,\n    );\n    await confirmTransaction(connection, txHash);\n    return txHash;\n}\n\nexport async function confirmTransaction(\n    connection: Connection,\n    signature: string,\n    confirmation: Commitment = 'confirmed',\n) {\n    const latestBlockHash = await connection.getLatestBlockhash(confirmation);\n    const strategy: TransactionConfirmationStrategy = {\n        signature: signature.toString(),\n        lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n        blockhash: latestBlockHash.blockhash,\n    };\n    return await connection.confirmTransaction(strategy, confirmation);\n}\n","import { BN } from '@coral-xyz/anchor';\nimport { FIELD_SIZE } from '../constants';\nimport { CompressedProof } from '../state';\n\ninterface GnarkProofJson {\n    ar: string[];\n    bs: string[][];\n    krs: string[];\n}\n\ntype ProofABC = {\n    a: Uint8Array;\n    b: Uint8Array;\n    c: Uint8Array;\n};\n\nexport const placeholderValidityProof = () => ({\n    a: Array.from({ length: 32 }, (_, i) => i + 1),\n    b: Array.from({ length: 64 }, (_, i) => i + 1),\n    c: Array.from({ length: 32 }, (_, i) => i + 1),\n});\n\nexport const checkValidityProofShape = (proof: CompressedProof) => {\n    if (\n        proof.a.length !== 32 ||\n        proof.b.length !== 64 ||\n        proof.c.length !== 32\n    ) {\n        throw new Error('ValidityProof has invalid shape');\n    }\n};\n\nexport function proofFromJsonStruct(json: GnarkProofJson): ProofABC {\n    const proofAX = deserializeHexStringToBeBytes(json.ar[0]);\n    const proofAY = deserializeHexStringToBeBytes(json.ar[1]);\n    const proofA: Uint8Array = new Uint8Array([...proofAX, ...proofAY]);\n\n    const proofBX0 = deserializeHexStringToBeBytes(json.bs[0][0]);\n    const proofBX1 = deserializeHexStringToBeBytes(json.bs[0][1]);\n    const proofBY0 = deserializeHexStringToBeBytes(json.bs[1][0]);\n    const proofBY1 = deserializeHexStringToBeBytes(json.bs[1][1]);\n    const proofB: Uint8Array = new Uint8Array([\n        ...proofBX0,\n        ...proofBX1,\n        ...proofBY0,\n        ...proofBY1,\n    ]);\n\n    const proofCX = deserializeHexStringToBeBytes(json.krs[0]);\n    const proofCY = deserializeHexStringToBeBytes(json.krs[1]);\n    const proofC: Uint8Array = new Uint8Array([...proofCX, ...proofCY]);\n\n    const proofABC: ProofABC = { a: proofA, b: proofB, c: proofC };\n    return proofABC;\n}\n\n// TODO: add unit test for negation\n// TODO: test if LE BE issue. unit test\nexport function negateAndCompressProof(proof: ProofABC): CompressedProof {\n    const proofA = proof.a;\n    const proofB = proof.b;\n    const proofC = proof.c;\n\n    const aXElement = proofA.slice(0, 32);\n    const aYElement = new BN(proofA.slice(32, 64), 32, 'be');\n\n    /// Negate\n    const proofAIsPositive = yElementIsPositiveG1(aYElement) ? false : true;\n    /// First byte of proofA is the bitmask\n    aXElement[0] = addBitmaskToByte(aXElement[0], proofAIsPositive);\n\n    const bXElement = proofB.slice(0, 64);\n    const bYElement = proofB.slice(64, 128);\n\n    const proofBIsPositive = yElementIsPositiveG2(\n        new BN(bYElement.slice(0, 32), 32, 'be'),\n        new BN(bYElement.slice(32, 64), 32, 'be'),\n    );\n\n    bXElement[0] = addBitmaskToByte(bXElement[0], proofBIsPositive);\n\n    const cXElement = proofC.slice(0, 32);\n    const cYElement = proofC.slice(32, 64);\n    const proofCIsPositive = yElementIsPositiveG1(new BN(cYElement, 32, 'be'));\n    cXElement[0] = addBitmaskToByte(cXElement[0], proofCIsPositive);\n\n    const compressedProof: CompressedProof = {\n        a: Array.from(aXElement),\n        b: Array.from(bXElement),\n        c: Array.from(cXElement),\n    };\n\n    return compressedProof;\n}\n\nfunction deserializeHexStringToBeBytes(hexStr: string): Uint8Array {\n    // Using BN for simpler conversion from hex string to byte array\n    const bn = new BN(\n        hexStr.startsWith('0x') ? hexStr.substring(2) : hexStr,\n        'hex',\n    );\n    return new Uint8Array(bn.toArray('be', 32));\n}\n\nfunction yElementIsPositiveG1(yElement: BN): boolean {\n    return yElement.lte(FIELD_SIZE.sub(yElement));\n}\n\nfunction yElementIsPositiveG2(yElement1: BN, yElement2: BN): boolean {\n    const fieldMidpoint = FIELD_SIZE.div(new BN(2));\n\n    // Compare the first component of the y coordinate\n    if (yElement1.lt(fieldMidpoint)) {\n        return true;\n    } else if (yElement1.gt(fieldMidpoint)) {\n        return false;\n    }\n\n    // If the first component is equal to the midpoint, compare the second component\n    return yElement2.lt(fieldMidpoint);\n}\n// bitmask compatible with solana altbn128 compression syscall and arkworks' implementation\n// https://github.com/arkworks-rs/algebra/blob/master/ff/src/fields/models/fp/mod.rs#L580\n// https://github.com/arkworks-rs/algebra/blob/master/serialize/src/flags.rs#L18\n// fn u8_bitmask(value: u8, inf: bool, neg: bool) -> u8 {\n//     let mut mask = 0;\n//     match self {\n//         inf => mask |= 1 << 6,\n//         neg => mask |= 1 << 7,\n//         _ => (),\n//     }\n//     mask\n// }\nfunction addBitmaskToByte(byte: number, yIsPositive: boolean): number {\n    if (!yIsPositive) {\n        return (byte |= 1 << 7);\n    } else {\n        return byte;\n    }\n}\n\n//@ts-ignore\nif (import.meta.vitest) {\n    //@ts-ignore\n    const { it, expect, describe } = import.meta.vitest;\n\n    // Unit test for addBitmaskToByte function\n    describe('addBitmaskToByte', () => {\n        it('should add a bitmask to the byte if yIsPositive is false', () => {\n            const byte = 0b00000000;\n            const yIsPositive = false;\n            const result = addBitmaskToByte(byte, yIsPositive);\n            expect(result).toBe(0b10000000); // 128 in binary, which is 1 << 7\n        });\n\n        it('should not modify the byte if yIsPositive is true', () => {\n            const byte = 0b00000000;\n            const yIsPositive = true;\n            const result = addBitmaskToByte(byte, yIsPositive);\n            expect(result).toBe(0b00000000);\n        });\n    });\n\n    describe('test prover server', () => {\n        const TEST_JSON = {\n            ar: [\n                '0x22bdaa3187d8fe294925a66fa0165a11bc9e07678fa2fc72402ebfd33d521c69',\n                '0x2d18ff780b69898b4cdd8d7b6ac72d077799399f0f45e52665426456f3903584',\n            ],\n            bs: [\n                [\n                    '0x138cc0962e49f76a701d2871d2799892c9782940095eb0429e979f336d2e162d',\n                    '0x2fe1bfbb15cbfb83d7e00ace23e45f890604003783eaf34affa35e0d6f4822bc',\n                ],\n                [\n                    '0x1a89264f82cc6e8ef1c696bea0b5803c28c0ba6ab61366bcb71e73a4135cae8d',\n                    '0xf778d857b3df01a4100265c9d014ce02d47425f0114685356165fa5ee3f3a26',\n                ],\n            ],\n            krs: [\n                '0x176b6ae9001f66832951e2d43a98a972667447bb1781f534b70cb010270dcdd3',\n                '0xb748d5fac1686db28d94c02250af7eb4f28dfdabc8983305c45bcbc6e163eeb',\n            ],\n        };\n        const COMPRESSED_PROOF_A = [\n            34, 189, 170, 49, 135, 216, 254, 41, 73, 37, 166, 111, 160, 22, 90,\n            17, 188, 158, 7, 103, 143, 162, 252, 114, 64, 46, 191, 211, 61, 82,\n            28, 105,\n        ];\n        const COMPRESSED_PROOF_B = [\n            147, 140, 192, 150, 46, 73, 247, 106, 112, 29, 40, 113, 210, 121,\n            152, 146, 201, 120, 41, 64, 9, 94, 176, 66, 158, 151, 159, 51, 109,\n            46, 22, 45, 47, 225, 191, 187, 21, 203, 251, 131, 215, 224, 10, 206,\n            35, 228, 95, 137, 6, 4, 0, 55, 131, 234, 243, 74, 255, 163, 94, 13,\n            111, 72, 34, 188,\n        ];\n        const COMPRESSED_PROOF_C = [\n            23, 107, 106, 233, 0, 31, 102, 131, 41, 81, 226, 212, 58, 152, 169,\n            114, 102, 116, 71, 187, 23, 129, 245, 52, 183, 12, 176, 16, 39, 13,\n            205, 211,\n        ];\n\n        it('should execute a compressed token mint', async () => {\n            const proof = proofFromJsonStruct(TEST_JSON);\n            const compressedProof = negateAndCompressProof(proof);\n            expect(compressedProof.a).toEqual(COMPRESSED_PROOF_A);\n            expect(compressedProof.b).toEqual(COMPRESSED_PROOF_B);\n            expect(compressedProof.c).toEqual(COMPRESSED_PROOF_C);\n        });\n    });\n    describe('Validity Proof Functions', () => {\n        describe('placeholderValidityProof', () => {\n            it('should create a validity proof with correct shape', () => {\n                const validityProof = placeholderValidityProof();\n                expect(validityProof.a.length).toBe(32);\n                expect(validityProof.b.length).toBe(64);\n                expect(validityProof.c.length).toBe(32);\n            });\n        });\n\n        describe('checkValidityProofShape', () => {\n            it('should not throw an error for valid proof shape', () => {\n                const validProof = {\n                    a: Array.from(new Uint8Array(32)),\n                    b: Array.from(new Uint8Array(64)),\n                    c: Array.from(new Uint8Array(32)),\n                };\n                expect(() => checkValidityProofShape(validProof)).not.toThrow();\n            });\n\n            it('should throw an error for an invalid proof', () => {\n                const invalidProof = {\n                    a: Array.from(new Uint8Array(31)), // incorrect length\n                    b: Array.from(new Uint8Array(64)),\n                    c: Array.from(new Uint8Array(32)),\n                };\n                expect(() => checkValidityProofShape(invalidProof)).toThrow(\n                    'ValidityProof has invalid shape',\n                );\n            });\n        });\n    });\n}\n","/** pipe function */\nexport function pipe<T, R>(\n    initialFunction: (arg: T) => R,\n    ...functions: ((arg: R) => R)[]\n): (initialValue: T) => R {\n    return (initialValue: T): R =>\n        functions.reduce(\n            (currentValue, currentFunction) => currentFunction(currentValue),\n            initialFunction(initialValue),\n        );\n}\n\n//@ts-ignore\nif (import.meta.vitest) {\n    //@ts-ignore\n    const { it, expect, describe } = import.meta.vitest;\n\n    describe('pipe', () => {\n        it('should return the result of applying all fns to the initial value', () => {\n            const addOne = (x: number) => x + 1;\n            const multiplyByTwo = (x: number) => x * 2;\n            const subtractThree = (x: number) => x - 3;\n            const addOneMultiplyByTwoSubtractThree = pipe(\n                addOne,\n                multiplyByTwo,\n                subtractThree,\n            );\n            expect(addOneMultiplyByTwoSubtractThree(5)).toBe(9);\n        });\n    });\n}\n","import {\n    VersionedTransaction,\n    TransactionConfirmationStrategy,\n    SignatureResult,\n    RpcResponseAndContext,\n    Signer,\n    TransactionInstruction,\n    TransactionMessage,\n    ConfirmOptions,\n    TransactionSignature,\n    PublicKey,\n    AddressLookupTableAccount,\n} from '@solana/web3.js';\nimport { Rpc } from '../rpc';\n\n/**\n * Builds a versioned Transaction from instructions.\n *\n * @param instructions          instructions to include\n * @param payerPublicKey        fee payer public key\n * @param blockhash             blockhash to use\n * @param lookupTableAccounts   lookup table accounts to include\n *\n * @return VersionedTransaction\n */\nexport function buildTx(\n    instructions: TransactionInstruction[],\n    payerPublicKey: PublicKey,\n    blockhash: string,\n    lookupTableAccounts?: AddressLookupTableAccount[],\n): VersionedTransaction {\n    const messageV0 = new TransactionMessage({\n        payerKey: payerPublicKey,\n        recentBlockhash: blockhash,\n        instructions,\n    }).compileToV0Message(lookupTableAccounts);\n\n    return new VersionedTransaction(messageV0);\n}\n\n/**\n * Sends a versioned transaction and confirms it.\n *\n * @param rpc               connection to use\n * @param tx                versioned transaction to send\n * @param confirmOptions    confirmation options\n * @param blockHashCtx      blockhash context for confirmation\n *\n * @return TransactionSignature\n */\nexport async function sendAndConfirmTx(\n    rpc: Rpc,\n    tx: VersionedTransaction,\n    confirmOptions?: ConfirmOptions,\n    blockHashCtx?: { blockhash: string; lastValidBlockHeight: number },\n): Promise<TransactionSignature> {\n    const txId = await rpc.sendTransaction(tx, confirmOptions);\n\n    if (!blockHashCtx) blockHashCtx = await rpc.getLatestBlockhash();\n\n    const transactionConfirmationStrategy0: TransactionConfirmationStrategy = {\n        signature: txId,\n        blockhash: blockHashCtx.blockhash,\n        lastValidBlockHeight: blockHashCtx.lastValidBlockHeight,\n    };\n\n    const ctxAndRes = await rpc.confirmTransaction(\n        transactionConfirmationStrategy0,\n        confirmOptions?.commitment || rpc.commitment || 'confirmed',\n    );\n    const slot = ctxAndRes.context.slot;\n    await rpc.confirmTransactionIndexed(slot);\n    return txId;\n}\n\n/**\n * Confirms a transaction with a given txId.\n *\n * @param rpc               connection to use\n * @param txId              transaction signature to confirm\n * @param confirmOptions    confirmation options\n * @param blockHashCtx      blockhash context for confirmation\n * @return SignatureResult\n */\nexport async function confirmTx(\n    rpc: Rpc,\n    txId: string,\n    confirmOptions?: ConfirmOptions,\n    blockHashCtx?: { blockhash: string; lastValidBlockHeight: number },\n): Promise<RpcResponseAndContext<SignatureResult>> {\n    if (!blockHashCtx) blockHashCtx = await rpc.getLatestBlockhash();\n\n    const transactionConfirmationStrategy: TransactionConfirmationStrategy = {\n        signature: txId,\n        blockhash: blockHashCtx.blockhash,\n        lastValidBlockHeight: blockHashCtx.lastValidBlockHeight,\n    };\n    const res = await rpc.confirmTransaction(\n        transactionConfirmationStrategy,\n        confirmOptions?.commitment || rpc.commitment || 'confirmed',\n    );\n    const slot = res.context.slot;\n    await rpc.confirmTransactionIndexed(slot);\n    return res;\n}\n\n/**\n * Builds a versioned Transaction from instructions and signs it.\n *\n * @param instructions          instructions to include in the transaction\n * @param payer                 payer of the transaction\n * @param blockhash             recent blockhash to use in the transaction\n * @param additionalSigners     non-feepayer signers to include in the\n *                              transaction\n * @param lookupTableAccounts   lookup table accounts to include in the\n *                              transaction\n */\nexport function buildAndSignTx(\n    instructions: TransactionInstruction[],\n    payer: Signer,\n    blockhash: string,\n    additionalSigners: Signer[] = [],\n    lookupTableAccounts?: AddressLookupTableAccount[],\n): VersionedTransaction {\n    if (additionalSigners.includes(payer))\n        throw new Error('payer must not be in additionalSigners');\n    const allSigners = [payer, ...additionalSigners];\n\n    const tx = buildTx(\n        instructions,\n        payer.publicKey,\n        blockhash,\n        lookupTableAccounts,\n    );\n\n    tx.sign(allSigners);\n\n    return tx;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { Connection, Keypair, Signer } from '@solana/web3.js';\nimport { confirmTx } from '../utils/send-and-confirm';\nimport { Rpc } from '../rpc';\n\nlet c = 1;\n\nexport const ALICE = getTestKeypair(255);\nexport const BOB = getTestKeypair(254);\nexport const CHARLIE = getTestKeypair(253);\nexport const DAVE = getTestKeypair(252);\n\n/**\n * Create a new account and airdrop lamports to it\n *\n * @param rpc       connection to use\n * @param lamports  amount of lamports to airdrop\n * @param counter   counter to use for generating the keypair.\n *                  If undefined or >255, generates random keypair.\n */\nexport async function newAccountWithLamports(\n    rpc: Rpc,\n    lamports = 1000000000,\n    counter: number | undefined = undefined,\n): Promise<Signer> {\n    /// get random keypair\n    if (counter === undefined || counter > 255) {\n        counter = 256;\n    }\n\n    const account = getTestKeypair(counter);\n    const sig = await rpc.requestAirdrop(account.publicKey, lamports);\n    await confirmTx(rpc, sig);\n    return account;\n}\n\nexport function getConnection(): Connection {\n    const url = 'http://127.0.0.1:8899';\n    const connection = new Connection(url, 'confirmed');\n    return connection;\n}\n\n/**\n * For use in tests.\n * Generate a unique keypair by passing in a counter <255. If no counter\n * is supplied, it uses and increments a global counter.\n * if counter > 255, generates random keypair\n */\nexport function getTestKeypair(\n    counter: number | undefined = undefined,\n): Keypair {\n    if (!counter) {\n        counter = c;\n        c++;\n    }\n    if (counter > 255) {\n        return Keypair.generate();\n    }\n    const seed = new Uint8Array(32);\n    seed[31] = counter; // le\n\n    return Keypair.fromSeed(seed);\n}\n\n//@ts-ignore\nif (import.meta.vitest) {\n    //@ts-ignore\n    const { describe, it, expect } = import.meta.vitest;\n\n    describe('getTestKeypair', () => {\n        it('should generate a keypair with a specific counter', () => {\n            const keypair = getTestKeypair(10);\n            const keypair2 = getTestKeypair(10);\n            expect(keypair).toEqual(keypair2);\n            expect(keypair).toBeInstanceOf(Keypair);\n            expect(keypair.publicKey).toBeDefined();\n            expect(keypair.secretKey).toBeDefined();\n        });\n\n        it('should generate random keypair if counter is greater than 255', () => {\n            const testFn = () => getTestKeypair(256);\n            const kp1 = testFn();\n            const kp2 = testFn();\n            expect(kp1).not.toEqual(kp2);\n        });\n\n        it('should increment the global counter if no counter is provided', () => {\n            const initialKeypair = getTestKeypair();\n            const nextKeypair = getTestKeypair();\n            const nextNextKeypair = getTestKeypair();\n            const nextNextNextKeypair = getTestKeypair(3);\n            expect(initialKeypair).not.toEqual(nextKeypair);\n            expect(nextKeypair).not.toEqual(nextNextKeypair);\n            expect(nextNextKeypair).toEqual(nextNextNextKeypair);\n        });\n    });\n}\n","/**\n * @param targetLamports - Target priority fee in lamports\n * @param computeUnits - Expected compute units used by the transaction\n * @returns microLamports per compute unit (use in\n * `ComputeBudgetProgram.setComputeUnitPrice`)\n */\nexport function calculateComputeUnitPrice(\n    targetLamports: number,\n    computeUnits: number,\n): number {\n    return Math.ceil((targetLamports * 1_000_000) / computeUnits);\n}\n","import { Program, AnchorProvider, setProvider, BN } from '@coral-xyz/anchor';\nimport {\n    PublicKey,\n    Keypair,\n    Connection,\n    TransactionInstruction,\n    SystemProgram,\n} from '@solana/web3.js';\nimport { Buffer } from 'buffer';\n\nimport {\n    IDL,\n    LightSystemProgram as LightSystemProgramIDL,\n} from '../idls/light_system_program';\nimport { useWallet } from '../wallet';\nimport {\n    CompressedAccount,\n    CompressedAccountWithMerkleContext,\n    CompressedProof,\n    InstructionDataInvoke,\n    bn,\n    createCompressedAccount,\n} from '../state';\nimport { packCompressedAccounts, toAccountMetas } from '../instruction';\nimport {\n    defaultStaticAccountsStruct,\n    defaultTestStateTreeAccounts,\n} from '../constants';\nimport {\n    validateSameOwner,\n    validateSufficientBalance,\n} from '../utils/validation';\nimport { packNewAddressParams, NewAddressParams } from '../utils';\n\nexport const sumUpLamports = (\n    accounts: CompressedAccountWithMerkleContext[],\n): BN => {\n    return accounts.reduce(\n        (acc, account) => acc.add(bn(account.lamports)),\n        bn(0),\n    );\n};\n\n/**\n * Create compressed account system transaction params\n */\ntype CreateAccountWithSeedParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * Address params for the new compressed account\n     */\n    newAddressParams: NewAddressParams;\n    newAddress: number[];\n    /**\n     * Recent validity proof proving that there's no existing compressed account\n     * registered with newAccountAddress\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * State tree pubkey. Defaults to a public state tree if unspecified.\n     */\n    outputStateTree?: PublicKey;\n    /**\n     * Public key of the program to assign as the owner of the created account\n     */\n    programId?: PublicKey;\n    /**\n     * Optional input accounts to transfer lamports from into the new compressed\n     * account.\n     */\n    inputCompressedAccounts?: CompressedAccountWithMerkleContext[];\n    /**\n     * Optional input state root indices of 'inputCompressedAccounts'. The\n     * expiry is tied to the 'recentValidityProof'.\n     */\n    inputStateRootIndices?: number[];\n    /**\n     * Optional lamports to transfer into the new compressed account.\n     */\n    lamports?: number | BN;\n};\n\n/**\n * Defines the parameters for the transfer method\n */\ntype TransferParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * The input state to be consumed.\n     */\n    inputCompressedAccounts: CompressedAccountWithMerkleContext[];\n    /**\n     * Recipient address\n     */\n    toAddress: PublicKey;\n    /**\n     * amount of lamports to transfer.\n     */\n    lamports: number | BN;\n    /**\n     * The recent state root indices of the input state. The expiry is tied to\n     * the proof.\n     *\n     * TODO: Add support for passing recent-values after instruction creation.\n     */\n    recentInputStateRootIndices: number[];\n    /**\n     * The recent validity proof for state inclusion of the input state. It\n     * expires after n slots.\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * The state trees that the tx output should be inserted into. This can be a\n     * single PublicKey or an array of PublicKey. Defaults to the 0th state tree\n     * of input state.\n     */\n    outputStateTrees?: PublicKey[] | PublicKey;\n};\n\n/// TODO:\n/// - add option to compress to another owner\n/// - add option to merge with input state\n/**\n * Defines the parameters for the transfer method\n */\ntype CompressParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * address that the lamports are attached to. also defaults to the recipient owner\n     */\n    toAddress: PublicKey;\n    /**\n     * amount of lamports to compress.\n     */\n    lamports: number | BN;\n    /**\n     * The state tree that the tx output should be inserted into. Defaults to a\n     * public state tree if unspecified.\n     */\n    outputStateTree?: PublicKey;\n};\n\n/**\n * Defines the parameters for the transfer method\n */\ntype DecompressParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * The input state to be consumed.\n     */\n    inputCompressedAccounts: CompressedAccountWithMerkleContext[];\n    /**\n     * Recipient address of uncompressed lamports\n     */\n    toAddress: PublicKey;\n    /**\n     * amount of lamports to decompress.\n     */\n    lamports: number | BN;\n    /**\n     * The recent state root indices of the input state. The expiry is tied to\n     * the proof.\n     *\n     * TODO: Add support for passing recent-values after instruction creation.\n     */\n    recentInputStateRootIndices: number[];\n    /**\n     * The recent validity proof for state inclusion of the input state. It\n     * expires after n slots.\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * The state trees that the tx output should be inserted into. This can be a\n     * single PublicKey or an array of PublicKey. Defaults to the 0th state tree\n     * of input state.\n     */\n    outputStateTree?: PublicKey;\n};\n\nconst SOL_POOL_PDA_SEED = Buffer.from('sol_pool_pda');\n\nexport class LightSystemProgram {\n    /**\n     * @internal\n     */\n    constructor() {}\n\n    /**\n     * Public key that identifies the CompressedPda program\n     */\n    static programId: PublicKey = new PublicKey(\n        // TODO: can add check to ensure its consistent with the idl\n        'SySTEM1eSU2p4BGQfQpimFEWWSC1XDFeun3Nqzz3rT7',\n    );\n\n    private static _program: Program<LightSystemProgramIDL> | null = null;\n\n    static get program(): Program<LightSystemProgramIDL> {\n        if (!this._program) {\n            this.initializeProgram();\n        }\n        return this._program!;\n    }\n\n    /**\n     * @internal\n     * Cwct1kQLwJm8Z3HetLu8m4SXkhD6FZ5fXbJQCxTxPnGY\n     *\n     */\n    static deriveCompressedSolPda(): PublicKey {\n        const seeds = [SOL_POOL_PDA_SEED];\n        const [address, _] = PublicKey.findProgramAddressSync(\n            seeds,\n            this.programId,\n        );\n        return address;\n    }\n\n    /**\n     * Initializes the program statically if not already initialized.\n     */\n    private static initializeProgram() {\n        if (!this._program) {\n            const mockKeypair = Keypair.generate();\n            const mockConnection = new Connection(\n                'http://127.0.0.1:8899',\n                'confirmed',\n            );\n            const mockProvider = new AnchorProvider(\n                mockConnection,\n                useWallet(mockKeypair),\n                {\n                    commitment: 'confirmed',\n                    preflightCommitment: 'confirmed',\n                },\n            );\n            setProvider(mockProvider);\n            this._program = new Program(IDL, this.programId, mockProvider);\n        }\n    }\n\n    static createTransferOutputState(\n        inputCompressedAccounts: CompressedAccountWithMerkleContext[],\n        toAddress: PublicKey,\n        lamports: number | BN,\n    ): CompressedAccount[] {\n        lamports = bn(lamports);\n        const inputLamports = sumUpLamports(inputCompressedAccounts);\n        const changeLamports = inputLamports.sub(lamports);\n\n        validateSufficientBalance(changeLamports);\n\n        if (changeLamports.eq(bn(0))) {\n            return [createCompressedAccount(toAddress, lamports)];\n        }\n\n        validateSameOwner(inputCompressedAccounts);\n\n        const outputCompressedAccounts: CompressedAccount[] = [\n            createCompressedAccount(\n                inputCompressedAccounts[0].owner,\n\n                changeLamports,\n            ),\n            createCompressedAccount(toAddress, lamports),\n        ];\n        return outputCompressedAccounts;\n    }\n\n    static createDecompressOutputState(\n        inputCompressedAccounts: CompressedAccountWithMerkleContext[],\n        lamports: number | BN,\n    ): CompressedAccount[] {\n        lamports = bn(lamports);\n        const inputLamports = sumUpLamports(inputCompressedAccounts);\n        const changeLamports = inputLamports.sub(lamports);\n\n        validateSufficientBalance(changeLamports);\n\n        /// lamports gets decompressed\n        if (changeLamports.eq(bn(0))) {\n            return [];\n        }\n\n        validateSameOwner(inputCompressedAccounts);\n\n        const outputCompressedAccounts: CompressedAccount[] = [\n            createCompressedAccount(\n                inputCompressedAccounts[0].owner,\n                changeLamports,\n            ),\n        ];\n        return outputCompressedAccounts;\n    }\n\n    /**\n     * No data by default\n     */\n    static createNewAddressOutputState(\n        address: number[],\n        owner: PublicKey,\n        lamports?: BN | number,\n        inputCompressedAccounts?: CompressedAccountWithMerkleContext[],\n    ): CompressedAccount[] {\n        lamports = bn(lamports ?? 0);\n        const inputLamports = sumUpLamports(inputCompressedAccounts ?? []);\n        const changeLamports = inputLamports.sub(lamports);\n\n        validateSufficientBalance(changeLamports);\n\n        if (changeLamports.eq(bn(0)) || !inputCompressedAccounts) {\n            return [\n                createCompressedAccount(owner, lamports, undefined, address),\n            ];\n        }\n\n        validateSameOwner(inputCompressedAccounts);\n        const outputCompressedAccounts: CompressedAccount[] = [\n            createCompressedAccount(\n                inputCompressedAccounts[0].owner,\n                changeLamports,\n            ),\n            createCompressedAccount(owner, lamports, undefined, address),\n        ];\n        return outputCompressedAccounts;\n    }\n\n    /**\n     * Creates instruction to create compressed account with PDA.\n     * Cannot write data.\n     *\n     * TODO: support transfer of lamports to the new account.\n     */\n    static async createAccount({\n        payer,\n        newAddressParams,\n        newAddress,\n        recentValidityProof,\n        outputStateTree,\n        inputCompressedAccounts,\n        inputStateRootIndices,\n        lamports,\n    }: CreateAccountWithSeedParams): Promise<TransactionInstruction> {\n        const outputCompressedAccounts = this.createNewAddressOutputState(\n            newAddress,\n            payer,\n            lamports,\n            inputCompressedAccounts,\n        );\n        /// Pack accounts\n        const {\n            packedInputCompressedAccounts,\n            packedOutputCompressedAccounts,\n            remainingAccounts: _remainingAccounts,\n        } = packCompressedAccounts(\n            inputCompressedAccounts ?? [],\n            inputStateRootIndices ?? [],\n            outputCompressedAccounts,\n            outputStateTree,\n        );\n\n        const { newAddressParamsPacked, remainingAccounts } =\n            packNewAddressParams([newAddressParams], _remainingAccounts);\n\n        const rawData: InstructionDataInvoke = {\n            proof: recentValidityProof,\n            inputCompressedAccountsWithMerkleContext:\n                packedInputCompressedAccounts,\n            outputCompressedAccounts: packedOutputCompressedAccounts,\n            relayFee: null,\n            newAddressParams: newAddressParamsPacked,\n            compressOrDecompressLamports: null,\n            isCompress: false,\n        };\n\n        /// Encode instruction data\n        const ixData = this.program.coder.types.encode(\n            'InstructionDataInvoke',\n            rawData,\n        );\n\n        /// Build anchor instruction\n        const instruction = await this.program.methods\n            .invoke(ixData)\n            .accounts({\n                ...defaultStaticAccountsStruct(),\n                feePayer: payer,\n                authority: payer,\n                solPoolPda: null,\n                decompressionRecipient: null,\n                systemProgram: SystemProgram.programId,\n            })\n            .remainingAccounts(toAccountMetas(remainingAccounts))\n            .instruction();\n\n        return instruction;\n    }\n\n    /**\n     * Creates a transaction instruction that transfers compressed lamports from\n     * one owner to another.\n     */\n    static async transfer({\n        payer,\n        inputCompressedAccounts,\n        toAddress,\n        lamports,\n        recentInputStateRootIndices,\n        recentValidityProof,\n        outputStateTrees,\n    }: TransferParams): Promise<TransactionInstruction> {\n        /// Create output state\n        const outputCompressedAccounts = this.createTransferOutputState(\n            inputCompressedAccounts,\n            toAddress,\n            lamports,\n        );\n        /// Pack accounts\n        const {\n            packedInputCompressedAccounts,\n            packedOutputCompressedAccounts,\n            remainingAccounts,\n        } = packCompressedAccounts(\n            inputCompressedAccounts,\n            recentInputStateRootIndices,\n            outputCompressedAccounts,\n            outputStateTrees,\n        );\n        /// Encode instruction data\n        const data = this.program.coder.types.encode('InstructionDataInvoke', {\n            proof: recentValidityProof,\n            inputCompressedAccountsWithMerkleContext:\n                packedInputCompressedAccounts,\n            outputCompressedAccounts: packedOutputCompressedAccounts,\n            relayFee: null,\n            /// TODO: here and on-chain: option<newAddressInputs> or similar.\n            newAddressParams: [],\n            compressOrDecompressLamports: null,\n            isCompress: false,\n        });\n\n        /// Build anchor instruction\n        const instruction = await this.program.methods\n            .invoke(data)\n            .accounts({\n                ...defaultStaticAccountsStruct(),\n                feePayer: payer,\n                authority: payer,\n                solPoolPda: null,\n                decompressionRecipient: null,\n                systemProgram: SystemProgram.programId,\n            })\n            .remainingAccounts(toAccountMetas(remainingAccounts))\n            .instruction();\n\n        return instruction;\n    }\n\n    /**\n     * Creates a transaction instruction that transfers compressed lamports from\n     * one owner to another.\n     */\n    // TODO: add support for non-fee-payer owner\n    static async compress({\n        payer,\n        toAddress,\n        lamports,\n        outputStateTree,\n    }: CompressParams): Promise<TransactionInstruction> {\n        /// Create output state\n        lamports = bn(lamports);\n\n        const outputCompressedAccount = createCompressedAccount(\n            toAddress,\n            lamports,\n        );\n\n        /// Pack accounts\n        const {\n            packedInputCompressedAccounts,\n            packedOutputCompressedAccounts,\n            remainingAccounts,\n        } = packCompressedAccounts(\n            [],\n            [],\n            [outputCompressedAccount],\n            outputStateTree,\n        );\n\n        /// Encode instruction data\n        const rawInputs: InstructionDataInvoke = {\n            proof: null,\n            inputCompressedAccountsWithMerkleContext:\n                packedInputCompressedAccounts,\n            outputCompressedAccounts: packedOutputCompressedAccounts,\n            relayFee: null,\n            /// TODO: here and on-chain: option<newAddressInputs> or similar.\n            newAddressParams: [],\n            compressOrDecompressLamports: lamports,\n            isCompress: true,\n        };\n\n        const data = this.program.coder.types.encode(\n            'InstructionDataInvoke',\n            rawInputs,\n        );\n\n        /// Build anchor instruction\n        const instruction = await this.program.methods\n            .invoke(data)\n            .accounts({\n                ...defaultStaticAccountsStruct(),\n                feePayer: payer,\n                authority: payer,\n                solPoolPda: this.deriveCompressedSolPda(),\n                decompressionRecipient: null,\n                systemProgram: SystemProgram.programId,\n            })\n            .remainingAccounts(toAccountMetas(remainingAccounts))\n            .instruction();\n\n        return instruction;\n    }\n\n    /**\n     * Creates a transaction instruction that transfers compressed lamports from\n     * one owner to another.\n     */\n    static async decompress({\n        payer,\n        inputCompressedAccounts,\n        toAddress,\n        lamports,\n        recentInputStateRootIndices,\n        recentValidityProof,\n        outputStateTree,\n    }: DecompressParams): Promise<TransactionInstruction> {\n        /// Create output state\n        lamports = bn(lamports);\n\n        const outputCompressedAccounts = this.createDecompressOutputState(\n            inputCompressedAccounts,\n            lamports,\n        );\n\n        /// Pack accounts\n        const {\n            packedInputCompressedAccounts,\n            packedOutputCompressedAccounts,\n            remainingAccounts,\n        } = packCompressedAccounts(\n            inputCompressedAccounts,\n            recentInputStateRootIndices,\n            outputCompressedAccounts,\n            outputStateTree,\n        );\n        /// Encode instruction data\n        const data = this.program.coder.types.encode('InstructionDataInvoke', {\n            proof: recentValidityProof,\n            inputCompressedAccountsWithMerkleContext:\n                packedInputCompressedAccounts,\n            outputCompressedAccounts: packedOutputCompressedAccounts,\n            relayFee: null,\n            /// TODO: here and on-chain: option<newAddressInputs> or similar.\n            newAddressParams: [],\n            compressOrDecompressLamports: lamports,\n            isCompress: false,\n        });\n\n        /// Build anchor instruction\n        const instruction = await this.program.methods\n            .invoke(data)\n            .accounts({\n                ...defaultStaticAccountsStruct(),\n                feePayer: payer,\n                authority: payer,\n                solPoolPda: this.deriveCompressedSolPda(),\n                decompressionRecipient: toAddress,\n                systemProgram: SystemProgram.programId,\n            })\n            .remainingAccounts(toAccountMetas(remainingAccounts))\n            .instruction();\n\n        return instruction;\n    }\n}\n\n/**\n * Selects the minimal number of compressed SOL accounts for a transfer.\n *\n * 1. Sorts the accounts by amount in descending order\n * 2. Accumulates the amount until it is greater than or equal to the transfer\n *    amount\n */\nexport function selectMinCompressedSolAccountsForTransfer(\n    accounts: CompressedAccountWithMerkleContext[],\n    transferLamports: BN | number,\n): [selectedAccounts: CompressedAccountWithMerkleContext[], total: BN] {\n    let accumulatedLamports = bn(0);\n    transferLamports = bn(transferLamports);\n\n    const selectedAccounts: CompressedAccountWithMerkleContext[] = [];\n\n    accounts.sort((a, b) => b.lamports.cmp(a.lamports));\n\n    for (const account of accounts) {\n        if (accumulatedLamports.gte(bn(transferLamports))) break;\n        accumulatedLamports = accumulatedLamports.add(account.lamports);\n        selectedAccounts.push(account);\n    }\n\n    if (accumulatedLamports.lt(bn(transferLamports))) {\n        throw new Error(\n            `Not enough balance for transfer. Required: ${transferLamports.toString()}, available: ${accumulatedLamports.toString()}`,\n        );\n    }\n\n    return [selectedAccounts, accumulatedLamports];\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\n\nimport { LightSystemProgram } from '../programs';\nimport { Rpc } from '../rpc';\nimport { buildAndSignTx, sendAndConfirmTx } from '../utils';\nimport { BN } from '@coral-xyz/anchor';\nimport { defaultTestStateTreeAccounts } from '../constants';\n\n/**\n * Compress lamports to a solana address\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction and initialization fees\n * @param lamports        Amount of lamports to compress\n * @param toAddress       Address of the recipient compressed account\n * @param outputStateTree Optional output state tree. Defaults to a current shared state tree.\n * @param confirmOptions  Options for confirming the transaction\n *\n * @return Transaction signature\n */\n/// TODO: add multisig support\n/// TODO: add support for payer != owner\nexport async function compress(\n    rpc: Rpc,\n    payer: Signer,\n    lamports: number | BN,\n    toAddress: PublicKey,\n    outputStateTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const ix = await LightSystemProgram.compress({\n        payer: payer.publicKey,\n        toAddress,\n        lamports,\n        outputStateTree,\n    });\n\n    const tx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        [],\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    LightSystemProgram,\n    selectMinCompressedSolAccountsForTransfer,\n} from '../programs';\nimport { Rpc } from '../rpc';\nimport {\n    NewAddressParams,\n    buildAndSignTx,\n    deriveAddress,\n    deriveAddressSeed,\n    sendAndConfirmTx,\n} from '../utils';\nimport { defaultTestStateTreeAccounts } from '../constants';\nimport { bn } from '../state';\nimport { BN } from '@coral-xyz/anchor';\n\n/**\n * Create compressed account with address\n *\n * @param rpc               RPC to use\n * @param payer             Payer of the transaction and initialization fees\n * @param seeds             Seeds to derive the new account address\n * @param programId         Owner of the new account\n * @param addressTree       Optional address tree. Defaults to a current shared\n *                          address tree.\n * @param addressQueue      Optional address queue. Defaults to a current shared\n *                          address queue.\n * @param outputStateTree   Optional output state tree. Defaults to a current\n *                          shared state tree.\n * @param confirmOptions    Options for confirming the transaction\n *\n * @return                  Transaction signature\n */\nexport async function createAccount(\n    rpc: Rpc,\n    payer: Signer,\n    seeds: Uint8Array[],\n    programId: PublicKey,\n    addressTree?: PublicKey,\n    addressQueue?: PublicKey,\n    outputStateTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    addressTree = addressTree ?? defaultTestStateTreeAccounts().addressTree;\n    addressQueue = addressQueue ?? defaultTestStateTreeAccounts().addressQueue;\n\n    const seed = deriveAddressSeed(seeds, programId);\n    const address = deriveAddress(seed, addressTree);\n\n    const proof = await rpc.getValidityProofV0(undefined, [\n        {\n            address: bn(address.toBytes()),\n            tree: addressTree,\n            queue: addressQueue,\n        },\n    ]);\n\n    const params: NewAddressParams = {\n        seed: seed,\n        addressMerkleTreeRootIndex: proof.rootIndices[0],\n        addressMerkleTreePubkey: proof.merkleTrees[0],\n        addressQueuePubkey: proof.nullifierQueues[0],\n    };\n\n    const ix = await LightSystemProgram.createAccount({\n        payer: payer.publicKey,\n        newAddressParams: params,\n        newAddress: Array.from(address.toBytes()),\n        recentValidityProof: proof.compressedProof,\n        programId,\n        outputStateTree,\n    });\n\n    const tx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        [],\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n\n/**\n * Create compressed account with address and lamports\n *\n * @param rpc               RPC to use\n * @param payer             Payer of the transaction and initialization fees\n * @param seeds             Seeds to derive the new account address\n * @param lamports          Number of compressed lamports to initialize the\n *                          account with\n * @param programId         Owner of the new account\n * @param addressTree       Optional address tree. Defaults to a current shared\n *                          address tree.\n * @param addressQueue      Optional address queue. Defaults to a current shared\n *                          address queue.\n * @param outputStateTree   Optional output state tree. Defaults to a current\n *                          shared state tree.\n * @param confirmOptions    Options for confirming the transaction\n *\n * @return                  Transaction signature\n */\n// TODO: add support for payer != user owner\nexport async function createAccountWithLamports(\n    rpc: Rpc,\n    payer: Signer,\n    seeds: Uint8Array[],\n    lamports: number | BN,\n    programId: PublicKey,\n    addressTree?: PublicKey,\n    addressQueue?: PublicKey,\n    outputStateTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    lamports = bn(lamports);\n\n    const compressedAccounts = await rpc.getCompressedAccountsByOwner(\n        payer.publicKey,\n    );\n\n    const [inputAccounts] = selectMinCompressedSolAccountsForTransfer(\n        compressedAccounts.items,\n        lamports,\n    );\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    addressTree = addressTree ?? defaultTestStateTreeAccounts().addressTree;\n    addressQueue = addressQueue ?? defaultTestStateTreeAccounts().addressQueue;\n\n    const seed = deriveAddressSeed(seeds, programId);\n    const address = deriveAddress(seed, addressTree);\n\n    const proof = await rpc.getValidityProof(\n        inputAccounts.map(account => bn(account.hash)),\n        [bn(address.toBytes())],\n    );\n\n    /// TODO(crank): Adapt before supporting addresses in rpc / cranked address trees.\n    /// Currently expects address roots to be consistent with one another and\n    /// static. See test-rpc.ts for more details.\n    const params: NewAddressParams = {\n        seed: seed,\n        addressMerkleTreeRootIndex:\n            proof.rootIndices[proof.rootIndices.length - 1],\n        addressMerkleTreePubkey:\n            proof.merkleTrees[proof.merkleTrees.length - 1],\n        addressQueuePubkey:\n            proof.nullifierQueues[proof.nullifierQueues.length - 1],\n    };\n\n    const ix = await LightSystemProgram.createAccount({\n        payer: payer.publicKey,\n        newAddressParams: params,\n        newAddress: Array.from(address.toBytes()),\n        recentValidityProof: proof.compressedProof,\n        inputCompressedAccounts: inputAccounts,\n        inputStateRootIndices: proof.rootIndices,\n        programId,\n        outputStateTree,\n    });\n\n    const tx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        [],\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { LightSystemProgram, sumUpLamports } from '../programs';\nimport { Rpc } from '../rpc';\nimport { buildAndSignTx, sendAndConfirmTx } from '../utils';\nimport { BN } from '@coral-xyz/anchor';\nimport { CompressedAccountWithMerkleContext, bn } from '../state';\n\n/**\n * Decompress lamports into a solana account\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction and initialization fees\n * @param lamports        Amount of lamports to compress\n * @param toAddress       Address of the recipient compressed account\n * @param outputStateTree Optional output state tree. Defaults to a current shared state tree.\n * @param confirmOptions  Options for confirming the transaction\n *\n * @return Transaction signature\n */\n/// TODO: add multisig support\n/// TODO: add support for payer != owner\nexport async function decompress(\n    rpc: Rpc,\n    payer: Signer,\n    lamports: number | BN,\n    recipient: PublicKey,\n    outputStateTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    /// TODO: use dynamic state tree and nullifier queue\n\n    const userCompressedAccountsWithMerkleContext: CompressedAccountWithMerkleContext[] =\n        (await rpc.getCompressedAccountsByOwner(payer.publicKey)).items;\n\n    lamports = bn(lamports);\n\n    const inputLamports = sumUpLamports(\n        userCompressedAccountsWithMerkleContext,\n    );\n\n    if (lamports.gt(inputLamports)) {\n        throw new Error(\n            `Not enough compressed lamports. Expected ${lamports}, got ${inputLamports}`,\n        );\n    }\n\n    const proof = await rpc.getValidityProof(\n        userCompressedAccountsWithMerkleContext.map(x => bn(x.hash)),\n    );\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const ix = await LightSystemProgram.decompress({\n        payer: payer.publicKey,\n        toAddress: recipient,\n        outputStateTree: outputStateTree,\n        inputCompressedAccounts: userCompressedAccountsWithMerkleContext,\n        recentValidityProof: proof.compressedProof,\n        recentInputStateRootIndices: proof.rootIndices,\n        lamports,\n    });\n\n    const tx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        [],\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import { Signer } from '@solana/web3.js';\n\n/** @internal remove signer from signers if part of signers */\nexport function dedupeSigner(signer: Signer, signers: Signer[]): Signer[] {\n    if (signers.includes(signer)) {\n        return signers.filter(\n            s => s.publicKey.toString() !== signer.publicKey.toString(),\n        );\n    }\n    return signers;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\n\nimport { BN } from '@coral-xyz/anchor';\nimport {\n    LightSystemProgram,\n    selectMinCompressedSolAccountsForTransfer,\n} from '../programs';\nimport { Rpc } from '../rpc';\n\nimport { bn, CompressedAccountWithMerkleContext } from '../state';\nimport { buildAndSignTx, sendAndConfirmTx } from '../utils';\nimport { GetCompressedAccountsByOwnerConfig } from '../rpc-interface';\n\n/**\n * Transfer compressed lamports from one owner to another\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of transaction fees\n * @param lamports       Number of lamports to transfer\n * @param owner          Owner of the compressed lamports\n * @param toAddress      Destination address of the recipient\n * @param merkleTree     State tree account that the compressed lamports should be\n *                       inserted into. Defaults to the default state tree account.\n * @param confirmOptions Options for confirming the transaction\n * @param config         Configuration for fetching compressed accounts\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transfer(\n    rpc: Rpc,\n    payer: Signer,\n    lamports: number | BN,\n    owner: Signer,\n    toAddress: PublicKey,\n    /// TODO: allow multiple\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    let accumulatedLamports = bn(0);\n    const compressedAccounts: CompressedAccountWithMerkleContext[] = [];\n    let cursor: string | undefined;\n    const batchSize = 1000; // Maximum allowed by the API\n    lamports = bn(lamports);\n\n    while (accumulatedLamports.lt(lamports)) {\n        const batchConfig: GetCompressedAccountsByOwnerConfig = {\n            filters: undefined,\n            dataSlice: undefined,\n            cursor,\n            limit: new BN(batchSize),\n        };\n        const batch = await rpc.getCompressedAccountsByOwner(\n            owner.publicKey,\n            batchConfig,\n        );\n\n        for (const account of batch.items) {\n            if (account.lamports.gt(new BN(0))) {\n                compressedAccounts.push(account);\n                accumulatedLamports = accumulatedLamports.add(account.lamports);\n            }\n        }\n\n        cursor = batch.cursor ?? undefined;\n        if (batch.items.length < batchSize || accumulatedLamports.gte(lamports))\n            break;\n    }\n\n    if (accumulatedLamports.lt(lamports)) {\n        throw new Error(\n            `Not enough balance for transfer. Required: ${lamports.toString()}, available: ${accumulatedLamports.toString()}`,\n        );\n    }\n\n    const [inputAccounts] = selectMinCompressedSolAccountsForTransfer(\n        compressedAccounts,\n        lamports,\n    );\n\n    const proof = await rpc.getValidityProof(\n        inputAccounts.map(account => bn(account.hash)),\n    );\n\n    const ix = await LightSystemProgram.transfer({\n        payer: payer.publicKey,\n        inputCompressedAccounts: inputAccounts,\n        toAddress,\n        lamports,\n        recentInputStateRootIndices: proof.rootIndices,\n        recentValidityProof: proof.compressedProof,\n        outputStateTrees: merkleTree,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const signedTx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n    );\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n    return txId;\n}\n","export type AccountCompression = {\n    version: '1.2.0';\n    name: 'account_compression';\n    constants: [\n        {\n            name: 'CPI_AUTHORITY_PDA_SEED';\n            type: 'bytes';\n            value: '[99, 112, 105, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]';\n        },\n        {\n            name: 'GROUP_AUTHORITY_SEED';\n            type: 'bytes';\n            value: '[103, 114, 111, 117, 112, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]';\n        },\n        {\n            name: 'STATE_MERKLE_TREE_HEIGHT';\n            type: 'u64';\n            value: '26';\n        },\n        {\n            name: 'STATE_MERKLE_TREE_CHANGELOG';\n            type: 'u64';\n            value: '1400';\n        },\n        {\n            name: 'STATE_MERKLE_TREE_ROOTS';\n            type: 'u64';\n            value: '2400';\n        },\n        {\n            name: 'STATE_MERKLE_TREE_CANOPY_DEPTH';\n            type: 'u64';\n            value: '10';\n        },\n        {\n            name: 'STATE_NULLIFIER_QUEUE_VALUES';\n            type: 'u16';\n            value: '28_807';\n        },\n        {\n            name: 'STATE_NULLIFIER_QUEUE_SEQUENCE_THRESHOLD';\n            type: 'u64';\n            value: '2400';\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_HEIGHT';\n            type: 'u64';\n            value: '26';\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_CHANGELOG';\n            type: 'u64';\n            value: '1400';\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_ROOTS';\n            type: 'u64';\n            value: '2400';\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_CANOPY_DEPTH';\n            type: 'u64';\n            value: '10';\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_INDEXED_CHANGELOG';\n            type: 'u64';\n            value: '1400';\n        },\n        {\n            name: 'ADDRESS_QUEUE_VALUES';\n            type: 'u16';\n            value: '28_807';\n        },\n        {\n            name: 'ADDRESS_QUEUE_SEQUENCE_THRESHOLD';\n            type: 'u64';\n            value: '2400';\n        },\n        {\n            name: 'NOOP_PUBKEY';\n            type: {\n                array: ['u8', 32];\n            };\n            value: '[11 , 188 , 15 , 192 , 187 , 71 , 202 , 47 , 116 , 196 , 17 , 46 , 148 , 171 , 19 , 207 , 163 , 198 , 52 , 229 , 220 , 23 , 234 , 203 , 3 , 205 , 26 , 35 , 205 , 126 , 120 , 124 ,]';\n        },\n    ];\n    instructions: [\n        {\n            name: 'initializeAddressMerkleTreeAndQueue';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'queue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'index';\n                    type: 'u64';\n                },\n                {\n                    name: 'programOwner';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'forester';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'addressMerkleTreeConfig';\n                    type: {\n                        defined: 'AddressMerkleTreeConfig';\n                    };\n                },\n                {\n                    name: 'addressQueueConfig';\n                    type: {\n                        defined: 'AddressQueueConfig';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'insertAddresses';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['Fee payer pays rollover fee.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'addresses';\n                    type: {\n                        vec: {\n                            array: ['u8', 32];\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'updateAddressMerkleTree';\n            docs: ['Updates the address Merkle tree with a new address.'];\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'queue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'logWrapper';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'changelogIndex';\n                    type: 'u16';\n                },\n                {\n                    name: 'indexedChangelogIndex';\n                    type: 'u16';\n                },\n                {\n                    name: 'value';\n                    type: 'u16';\n                },\n                {\n                    name: 'lowAddressIndex';\n                    type: 'u64';\n                },\n                {\n                    name: 'lowAddressValue';\n                    type: {\n                        array: ['u8', 32];\n                    };\n                },\n                {\n                    name: 'lowAddressNextIndex';\n                    type: 'u64';\n                },\n                {\n                    name: 'lowAddressNextValue';\n                    type: {\n                        array: ['u8', 32];\n                    };\n                },\n                {\n                    name: 'lowAddressProof';\n                    type: {\n                        array: [\n                            {\n                                array: ['u8', 32];\n                            },\n                            16,\n                        ];\n                    };\n                },\n            ];\n        },\n        {\n            name: 'rolloverAddressMerkleTreeAndQueue';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Signer used to receive rollover accounts rentexemption reimbursement.',\n                    ];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'newAddressMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'newQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldAddressMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'initializeGroupAuthority';\n            docs: [\n                'initialize group (a group can be used to give multiple programs access',\n                'to the same Merkle trees by registering the programs to the group)',\n            ];\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'seed';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Seed public key used to derive the group authority.',\n                    ];\n                },\n                {\n                    name: 'groupAuthority';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'authority';\n                    type: 'publicKey';\n                },\n            ];\n        },\n        {\n            name: 'updateGroupAuthority';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'groupAuthority';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'authority';\n                    type: 'publicKey';\n                },\n            ];\n        },\n        {\n            name: 'registerProgramToGroup';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'programToBeRegistered';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'groupAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'deregisterProgram';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'groupAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'closeRecipient';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'initializeStateMerkleTreeAndNullifierQueue';\n            docs: [\n                'Initializes a new Merkle tree from config bytes.',\n                'Index is an optional identifier and not checked by the program.',\n            ];\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'nullifierQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'index';\n                    type: 'u64';\n                },\n                {\n                    name: 'programOwner';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'forester';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'stateMerkleTreeConfig';\n                    type: {\n                        defined: 'StateMerkleTreeConfig';\n                    };\n                },\n                {\n                    name: 'nullifierQueueConfig';\n                    type: {\n                        defined: 'NullifierQueueConfig';\n                    };\n                },\n                {\n                    name: 'additionalBytes';\n                    type: 'u64';\n                },\n            ];\n        },\n        {\n            name: 'appendLeavesToMerkleTrees';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['Fee payer pays rollover fee.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Checked whether instruction is accessed by a registered program or owner = authority.',\n                    ];\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                    docs: [\n                        'Some assumes that the Merkle trees are accessed by a registered program.',\n                        'None assumes that the Merkle trees are accessed by its owner.',\n                    ];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'leaves';\n                    type: {\n                        vec: {\n                            defined: '(u8,[u8;32])';\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'nullifyLeaves';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'logWrapper';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'nullifierQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'changeLogIndices';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'leavesQueueIndices';\n                    type: {\n                        vec: 'u16';\n                    };\n                },\n                {\n                    name: 'leafIndices';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'proofs';\n                    type: {\n                        vec: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'insertIntoNullifierQueues';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['Fee payer pays rollover fee.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'nullifiers';\n                    type: {\n                        vec: {\n                            array: ['u8', 32];\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'rolloverStateMerkleTreeAndNullifierQueue';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Signer used to receive rollover accounts rentexemption reimbursement.',\n                    ];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'newStateMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'newNullifierQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldStateMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldNullifierQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n    ];\n    accounts: [\n        {\n            name: 'registeredProgram';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'registeredProgramId';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'groupAuthorityPda';\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'accessMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        docs: ['Owner of the Merkle tree.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'programOwner';\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'forester';\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ];\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'addressMerkleTreeAccount';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'metadata';\n                        type: {\n                            defined: 'MerkleTreeMetadata';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'groupAuthority';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'authority';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'seed';\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'merkleTreeMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'accessMetadata';\n                        type: {\n                            defined: 'AccessMetadata';\n                        };\n                    },\n                    {\n                        name: 'rolloverMetadata';\n                        type: {\n                            defined: 'RolloverMetadata';\n                        };\n                    },\n                    {\n                        name: 'associatedQueue';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'nextMerkleTree';\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'stateMerkleTreeAccount';\n            docs: [\n                'Concurrent state Merkle tree used for public compressed transactions.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'metadata';\n                        type: {\n                            defined: 'MerkleTreeMetadata';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'queueMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'accessMetadata';\n                        type: {\n                            defined: 'AccessMetadata';\n                        };\n                    },\n                    {\n                        name: 'rolloverMetadata';\n                        type: {\n                            defined: 'RolloverMetadata';\n                        };\n                    },\n                    {\n                        name: 'associatedMerkleTree';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'nextQueue';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'queueType';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'queueAccount';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'metadata';\n                        type: {\n                            defined: 'QueueMetadata';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'rolloverMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'index';\n                        docs: ['Unique index.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverFee';\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverThreshold';\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        docs: ['Tip for maintaining the account.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolledoverSlot';\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'closeThreshold';\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'additionalBytes';\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ];\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n    ];\n    types: [\n        {\n            name: 'AddressMerkleTreeConfig';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'height';\n                        type: 'u32';\n                    },\n                    {\n                        name: 'changelogSize';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rootsSize';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'canopyDepth';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'addressChangelogSize';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'rolloverThreshold';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'closeThreshold';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'StateMerkleTreeConfig';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'height';\n                        type: 'u32';\n                    },\n                    {\n                        name: 'changelogSize';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rootsSize';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'canopyDepth';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'rolloverThreshold';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'closeThreshold';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'NullifierQueueConfig';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'capacity';\n                        type: 'u16';\n                    },\n                    {\n                        name: 'sequenceThreshold';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'QueueType';\n            type: {\n                kind: 'enum';\n                variants: [\n                    {\n                        name: 'NullifierQueue';\n                    },\n                    {\n                        name: 'AddressQueue';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'AddressQueueConfig';\n            type: {\n                kind: 'alias';\n                value: {\n                    defined: 'NullifierQueueConfig';\n                };\n            };\n        },\n    ];\n    errors: [\n        {\n            code: 6000;\n            name: 'IntegerOverflow';\n            msg: 'Integer overflow';\n        },\n        {\n            code: 6001;\n            name: 'InvalidAuthority';\n            msg: 'InvalidAuthority';\n        },\n        {\n            code: 6002;\n            name: 'NumberOfLeavesMismatch';\n            msg: 'Leaves <> remaining accounts mismatch. The number of remaining accounts must match the number of leaves.';\n        },\n        {\n            code: 6003;\n            name: 'InvalidNoopPubkey';\n            msg: 'Provided noop program public key is invalid';\n        },\n        {\n            code: 6004;\n            name: 'NumberOfChangeLogIndicesMismatch';\n            msg: 'Number of change log indices mismatch';\n        },\n        {\n            code: 6005;\n            name: 'NumberOfIndicesMismatch';\n            msg: 'Number of indices mismatch';\n        },\n        {\n            code: 6006;\n            name: 'NumberOfProofsMismatch';\n            msg: 'NumberOfProofsMismatch';\n        },\n        {\n            code: 6007;\n            name: 'InvalidMerkleProof';\n            msg: 'InvalidMerkleProof';\n        },\n        {\n            code: 6008;\n            name: 'LeafNotFound';\n            msg: 'Could not find the leaf in the queue';\n        },\n        {\n            code: 6009;\n            name: 'MerkleTreeAndQueueNotAssociated';\n            msg: 'MerkleTreeAndQueueNotAssociated';\n        },\n        {\n            code: 6010;\n            name: 'MerkleTreeAlreadyRolledOver';\n            msg: 'MerkleTreeAlreadyRolledOver';\n        },\n        {\n            code: 6011;\n            name: 'NotReadyForRollover';\n            msg: 'NotReadyForRollover';\n        },\n        {\n            code: 6012;\n            name: 'RolloverNotConfigured';\n            msg: 'RolloverNotConfigured';\n        },\n        {\n            code: 6013;\n            name: 'NotAllLeavesProcessed';\n            msg: 'NotAllLeavesProcessed';\n        },\n        {\n            code: 6014;\n            name: 'InvalidQueueType';\n            msg: 'InvalidQueueType';\n        },\n        {\n            code: 6015;\n            name: 'InputElementsEmpty';\n            msg: 'InputElementsEmpty';\n        },\n        {\n            code: 6016;\n            name: 'NoLeavesForMerkleTree';\n            msg: 'NoLeavesForMerkleTree';\n        },\n        {\n            code: 6017;\n            name: 'InvalidAccountSize';\n            msg: 'InvalidAccountSize';\n        },\n        {\n            code: 6018;\n            name: 'InsufficientRolloverFee';\n            msg: 'InsufficientRolloverFee';\n        },\n        {\n            code: 6019;\n            name: 'UnsupportedHeight';\n            msg: 'Unsupported Merkle tree height';\n        },\n        {\n            code: 6020;\n            name: 'UnsupportedCanopyDepth';\n            msg: 'Unsupported canopy depth';\n        },\n        {\n            code: 6021;\n            name: 'InvalidSequenceThreshold';\n            msg: 'Invalid sequence threshold';\n        },\n        {\n            code: 6022;\n            name: 'UnsupportedCloseThreshold';\n            msg: 'Unsupported close threshold';\n        },\n        {\n            code: 6023;\n            name: 'InvalidAccountBalance';\n            msg: 'InvalidAccountBalance';\n        },\n        {\n            code: 6024;\n            name: 'UnsupportedAdditionalBytes';\n        },\n        {\n            code: 6025;\n            name: 'InvalidGroup';\n        },\n        {\n            code: 6026;\n            name: 'ProofLengthMismatch';\n        },\n    ];\n};\n\nexport const IDL: AccountCompression = {\n    version: '1.2.0',\n    name: 'account_compression',\n    constants: [\n        {\n            name: 'CPI_AUTHORITY_PDA_SEED',\n            type: 'bytes',\n            value: '[99, 112, 105, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]',\n        },\n        {\n            name: 'GROUP_AUTHORITY_SEED',\n            type: 'bytes',\n            value: '[103, 114, 111, 117, 112, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]',\n        },\n        {\n            name: 'STATE_MERKLE_TREE_HEIGHT',\n            type: 'u64',\n            value: '26',\n        },\n        {\n            name: 'STATE_MERKLE_TREE_CHANGELOG',\n            type: 'u64',\n            value: '1400',\n        },\n        {\n            name: 'STATE_MERKLE_TREE_ROOTS',\n            type: 'u64',\n            value: '2400',\n        },\n        {\n            name: 'STATE_MERKLE_TREE_CANOPY_DEPTH',\n            type: 'u64',\n            value: '10',\n        },\n        {\n            name: 'STATE_NULLIFIER_QUEUE_VALUES',\n            type: 'u16',\n            value: '28_807',\n        },\n        {\n            name: 'STATE_NULLIFIER_QUEUE_SEQUENCE_THRESHOLD',\n            type: 'u64',\n            value: '2400',\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_HEIGHT',\n            type: 'u64',\n            value: '26',\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_CHANGELOG',\n            type: 'u64',\n            value: '1400',\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_ROOTS',\n            type: 'u64',\n            value: '2400',\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_CANOPY_DEPTH',\n            type: 'u64',\n            value: '10',\n        },\n        {\n            name: 'ADDRESS_MERKLE_TREE_INDEXED_CHANGELOG',\n            type: 'u64',\n            value: '1400',\n        },\n        {\n            name: 'ADDRESS_QUEUE_VALUES',\n            type: 'u16',\n            value: '28_807',\n        },\n        {\n            name: 'ADDRESS_QUEUE_SEQUENCE_THRESHOLD',\n            type: 'u64',\n            value: '2400',\n        },\n        {\n            name: 'NOOP_PUBKEY',\n            type: {\n                array: ['u8', 32],\n            },\n            value: '[11 , 188 , 15 , 192 , 187 , 71 , 202 , 47 , 116 , 196 , 17 , 46 , 148 , 171 , 19 , 207 , 163 , 198 , 52 , 229 , 220 , 23 , 234 , 203 , 3 , 205 , 26 , 35 , 205 , 126 , 120 , 124 ,]',\n        },\n    ],\n    instructions: [\n        {\n            name: 'initializeAddressMerkleTreeAndQueue',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'queue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'index',\n                    type: 'u64',\n                },\n                {\n                    name: 'programOwner',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'forester',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'addressMerkleTreeConfig',\n                    type: {\n                        defined: 'AddressMerkleTreeConfig',\n                    },\n                },\n                {\n                    name: 'addressQueueConfig',\n                    type: {\n                        defined: 'AddressQueueConfig',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'insertAddresses',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['Fee payer pays rollover fee.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'addresses',\n                    type: {\n                        vec: {\n                            array: ['u8', 32],\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'updateAddressMerkleTree',\n            docs: ['Updates the address Merkle tree with a new address.'],\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'queue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'logWrapper',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'changelogIndex',\n                    type: 'u16',\n                },\n                {\n                    name: 'indexedChangelogIndex',\n                    type: 'u16',\n                },\n                {\n                    name: 'value',\n                    type: 'u16',\n                },\n                {\n                    name: 'lowAddressIndex',\n                    type: 'u64',\n                },\n                {\n                    name: 'lowAddressValue',\n                    type: {\n                        array: ['u8', 32],\n                    },\n                },\n                {\n                    name: 'lowAddressNextIndex',\n                    type: 'u64',\n                },\n                {\n                    name: 'lowAddressNextValue',\n                    type: {\n                        array: ['u8', 32],\n                    },\n                },\n                {\n                    name: 'lowAddressProof',\n                    type: {\n                        array: [\n                            {\n                                array: ['u8', 32],\n                            },\n                            16,\n                        ],\n                    },\n                },\n            ],\n        },\n        {\n            name: 'rolloverAddressMerkleTreeAndQueue',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Signer used to receive rollover accounts rentexemption reimbursement.',\n                    ],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'newAddressMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'newQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldAddressMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'initializeGroupAuthority',\n            docs: [\n                'initialize group (a group can be used to give multiple programs access',\n                'to the same Merkle trees by registering the programs to the group)',\n            ],\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'seed',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Seed public key used to derive the group authority.',\n                    ],\n                },\n                {\n                    name: 'groupAuthority',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'authority',\n                    type: 'publicKey',\n                },\n            ],\n        },\n        {\n            name: 'updateGroupAuthority',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'groupAuthority',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'authority',\n                    type: 'publicKey',\n                },\n            ],\n        },\n        {\n            name: 'registerProgramToGroup',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'programToBeRegistered',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'groupAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'deregisterProgram',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'groupAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'closeRecipient',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'initializeStateMerkleTreeAndNullifierQueue',\n            docs: [\n                'Initializes a new Merkle tree from config bytes.',\n                'Index is an optional identifier and not checked by the program.',\n            ],\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'nullifierQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'index',\n                    type: 'u64',\n                },\n                {\n                    name: 'programOwner',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'forester',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'stateMerkleTreeConfig',\n                    type: {\n                        defined: 'StateMerkleTreeConfig',\n                    },\n                },\n                {\n                    name: 'nullifierQueueConfig',\n                    type: {\n                        defined: 'NullifierQueueConfig',\n                    },\n                },\n                {\n                    name: 'additionalBytes',\n                    type: 'u64',\n                },\n            ],\n        },\n        {\n            name: 'appendLeavesToMerkleTrees',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['Fee payer pays rollover fee.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Checked whether instruction is accessed by a registered program or owner = authority.',\n                    ],\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                    docs: [\n                        'Some assumes that the Merkle trees are accessed by a registered program.',\n                        'None assumes that the Merkle trees are accessed by its owner.',\n                    ],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'leaves',\n                    type: {\n                        vec: {\n                            defined: '(u8,[u8;32])',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'nullifyLeaves',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'logWrapper',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'nullifierQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'changeLogIndices',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'leavesQueueIndices',\n                    type: {\n                        vec: 'u16',\n                    },\n                },\n                {\n                    name: 'leafIndices',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'proofs',\n                    type: {\n                        vec: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'insertIntoNullifierQueues',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['Fee payer pays rollover fee.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'nullifiers',\n                    type: {\n                        vec: {\n                            array: ['u8', 32],\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'rolloverStateMerkleTreeAndNullifierQueue',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Signer used to receive rollover accounts rentexemption reimbursement.',\n                    ],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'newStateMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'newNullifierQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldStateMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldNullifierQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n    ],\n    accounts: [\n        {\n            name: 'registeredProgram',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'registeredProgramId',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'groupAuthorityPda',\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'accessMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        docs: ['Owner of the Merkle tree.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'programOwner',\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'forester',\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ],\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'addressMerkleTreeAccount',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'metadata',\n                        type: {\n                            defined: 'MerkleTreeMetadata',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'groupAuthority',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'authority',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'seed',\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'merkleTreeMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'accessMetadata',\n                        type: {\n                            defined: 'AccessMetadata',\n                        },\n                    },\n                    {\n                        name: 'rolloverMetadata',\n                        type: {\n                            defined: 'RolloverMetadata',\n                        },\n                    },\n                    {\n                        name: 'associatedQueue',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'nextMerkleTree',\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'stateMerkleTreeAccount',\n            docs: [\n                'Concurrent state Merkle tree used for public compressed transactions.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'metadata',\n                        type: {\n                            defined: 'MerkleTreeMetadata',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'queueMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'accessMetadata',\n                        type: {\n                            defined: 'AccessMetadata',\n                        },\n                    },\n                    {\n                        name: 'rolloverMetadata',\n                        type: {\n                            defined: 'RolloverMetadata',\n                        },\n                    },\n                    {\n                        name: 'associatedMerkleTree',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'nextQueue',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'queueType',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'queueAccount',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'metadata',\n                        type: {\n                            defined: 'QueueMetadata',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'rolloverMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'index',\n                        docs: ['Unique index.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverFee',\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverThreshold',\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        docs: ['Tip for maintaining the account.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolledoverSlot',\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'closeThreshold',\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'additionalBytes',\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ],\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n    ],\n    types: [\n        {\n            name: 'AddressMerkleTreeConfig',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'height',\n                        type: 'u32',\n                    },\n                    {\n                        name: 'changelogSize',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rootsSize',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'canopyDepth',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'addressChangelogSize',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'rolloverThreshold',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'closeThreshold',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'StateMerkleTreeConfig',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'height',\n                        type: 'u32',\n                    },\n                    {\n                        name: 'changelogSize',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rootsSize',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'canopyDepth',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'rolloverThreshold',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'closeThreshold',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'NullifierQueueConfig',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'capacity',\n                        type: 'u16',\n                    },\n                    {\n                        name: 'sequenceThreshold',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'QueueType',\n            type: {\n                kind: 'enum',\n                variants: [\n                    {\n                        name: 'NullifierQueue',\n                    },\n                    {\n                        name: 'AddressQueue',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'AddressQueueConfig',\n            type: {\n                kind: 'alias',\n                value: {\n                    defined: 'NullifierQueueConfig',\n                },\n            },\n        },\n    ],\n    errors: [\n        {\n            code: 6000,\n            name: 'IntegerOverflow',\n            msg: 'Integer overflow',\n        },\n        {\n            code: 6001,\n            name: 'InvalidAuthority',\n            msg: 'InvalidAuthority',\n        },\n        {\n            code: 6002,\n            name: 'NumberOfLeavesMismatch',\n            msg: 'Leaves <> remaining accounts mismatch. The number of remaining accounts must match the number of leaves.',\n        },\n        {\n            code: 6003,\n            name: 'InvalidNoopPubkey',\n            msg: 'Provided noop program public key is invalid',\n        },\n        {\n            code: 6004,\n            name: 'NumberOfChangeLogIndicesMismatch',\n            msg: 'Number of change log indices mismatch',\n        },\n        {\n            code: 6005,\n            name: 'NumberOfIndicesMismatch',\n            msg: 'Number of indices mismatch',\n        },\n        {\n            code: 6006,\n            name: 'NumberOfProofsMismatch',\n            msg: 'NumberOfProofsMismatch',\n        },\n        {\n            code: 6007,\n            name: 'InvalidMerkleProof',\n            msg: 'InvalidMerkleProof',\n        },\n        {\n            code: 6008,\n            name: 'LeafNotFound',\n            msg: 'Could not find the leaf in the queue',\n        },\n        {\n            code: 6009,\n            name: 'MerkleTreeAndQueueNotAssociated',\n            msg: 'MerkleTreeAndQueueNotAssociated',\n        },\n        {\n            code: 6010,\n            name: 'MerkleTreeAlreadyRolledOver',\n            msg: 'MerkleTreeAlreadyRolledOver',\n        },\n        {\n            code: 6011,\n            name: 'NotReadyForRollover',\n            msg: 'NotReadyForRollover',\n        },\n        {\n            code: 6012,\n            name: 'RolloverNotConfigured',\n            msg: 'RolloverNotConfigured',\n        },\n        {\n            code: 6013,\n            name: 'NotAllLeavesProcessed',\n            msg: 'NotAllLeavesProcessed',\n        },\n        {\n            code: 6014,\n            name: 'InvalidQueueType',\n            msg: 'InvalidQueueType',\n        },\n        {\n            code: 6015,\n            name: 'InputElementsEmpty',\n            msg: 'InputElementsEmpty',\n        },\n        {\n            code: 6016,\n            name: 'NoLeavesForMerkleTree',\n            msg: 'NoLeavesForMerkleTree',\n        },\n        {\n            code: 6017,\n            name: 'InvalidAccountSize',\n            msg: 'InvalidAccountSize',\n        },\n        {\n            code: 6018,\n            name: 'InsufficientRolloverFee',\n            msg: 'InsufficientRolloverFee',\n        },\n        {\n            code: 6019,\n            name: 'UnsupportedHeight',\n            msg: 'Unsupported Merkle tree height',\n        },\n        {\n            code: 6020,\n            name: 'UnsupportedCanopyDepth',\n            msg: 'Unsupported canopy depth',\n        },\n        {\n            code: 6021,\n            name: 'InvalidSequenceThreshold',\n            msg: 'Invalid sequence threshold',\n        },\n        {\n            code: 6022,\n            name: 'UnsupportedCloseThreshold',\n            msg: 'Unsupported close threshold',\n        },\n        {\n            code: 6023,\n            name: 'InvalidAccountBalance',\n            msg: 'InvalidAccountBalance',\n        },\n        {\n            code: 6024,\n            name: 'UnsupportedAdditionalBytes',\n        },\n        {\n            code: 6025,\n            name: 'InvalidGroup',\n        },\n        {\n            code: 6026,\n            name: 'ProofLengthMismatch',\n        },\n    ],\n};\n","export type LightRegistry = {\n    version: '1.2.0';\n    name: 'light_registry';\n    constants: [\n        {\n            name: 'FORESTER_SEED';\n            type: 'bytes';\n            value: '[102, 111, 114, 101, 115, 116, 101, 114]';\n        },\n        {\n            name: 'FORESTER_EPOCH_SEED';\n            type: 'bytes';\n            value: '[102, 111, 114, 101, 115, 116, 101, 114, 95, 101, 112, 111, 99, 104]';\n        },\n        {\n            name: 'PROTOCOL_CONFIG_PDA_SEED';\n            type: 'bytes';\n            value: '[97, 117, 116, 104, 111, 114, 105, 116, 121]';\n        },\n    ];\n    instructions: [\n        {\n            name: 'initializeProtocolConfig';\n            docs: [\n                'Initializes the protocol config pda. Can only be called once by the',\n                'program account keypair.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n                {\n                    name: 'protocolConfig';\n                    type: {\n                        defined: 'ProtocolConfig';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'updateProtocolConfig';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'newAuthority';\n                    isMut: false;\n                    isSigner: true;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'protocolConfig';\n                    type: {\n                        option: {\n                            defined: 'ProtocolConfig';\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'registerSystemProgram';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'groupPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'programToBeRegistered';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        '- is signer so that only the program deployer can register a program.',\n                    ];\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n            ];\n        },\n        {\n            name: 'deregisterSystemProgram';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'groupPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n            ];\n        },\n        {\n            name: 'registerForester';\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'foresterPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n                {\n                    name: 'authority';\n                    type: 'publicKey';\n                },\n                {\n                    name: 'config';\n                    type: {\n                        defined: 'ForesterConfig';\n                    };\n                },\n                {\n                    name: 'weight';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'updateForesterPda';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'foresterPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'newAuthority';\n                    isMut: false;\n                    isSigner: true;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'config';\n                    type: {\n                        option: {\n                            defined: 'ForesterConfig';\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'updateForesterPdaWeight';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'foresterPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'newWeight';\n                    type: 'u64';\n                },\n            ];\n        },\n        {\n            name: 'registerForesterEpoch';\n            docs: [\n                'Registers the forester for the epoch.',\n                '1. Only the forester can register herself for the epoch.',\n                '2. Protocol config is copied.',\n                '3. Epoch account is created if needed.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'foresterPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'foresterEpochPda';\n                    isMut: true;\n                    isSigner: false;\n                    docs: [\n                        'Instruction checks that current_epoch is the the current epoch and that',\n                        'the epoch is in registration phase.',\n                    ];\n                },\n                {\n                    name: 'protocolConfig';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'epochPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'epoch';\n                    type: 'u64';\n                },\n            ];\n        },\n        {\n            name: 'finalizeRegistration';\n            docs: [\n                'This transaction can be included as additional instruction in the first',\n                'work instructions during the active phase.',\n                'Registration Period must be over.',\n            ];\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'foresterEpochPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'epochPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'reportWork';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'foresterEpochPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'epochPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'initializeAddressMerkleTree';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Anyone can create new trees just the fees cannot be set arbitrarily.',\n                    ];\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'queue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiContextAccount';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n                {\n                    name: 'programOwner';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'forester';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'merkleTreeConfig';\n                    type: {\n                        defined: 'AddressMerkleTreeConfig';\n                    };\n                },\n                {\n                    name: 'queueConfig';\n                    type: {\n                        defined: 'AddressQueueConfig';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'initializeStateMerkleTree';\n            accounts: [\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                    docs: [\n                        'Anyone can create new trees just the fees cannot be set arbitrarily.',\n                    ];\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'queue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiContextAccount';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n                {\n                    name: 'programOwner';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'forester';\n                    type: {\n                        option: 'publicKey';\n                    };\n                },\n                {\n                    name: 'merkleTreeConfig';\n                    type: {\n                        defined: 'StateMerkleTreeConfig';\n                    };\n                },\n                {\n                    name: 'queueConfig';\n                    type: {\n                        defined: 'NullifierQueueConfig';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'nullify';\n            accounts: [\n                {\n                    name: 'registeredForesterPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'logWrapper';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'nullifierQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n                {\n                    name: 'changeLogIndices';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'leavesQueueIndices';\n                    type: {\n                        vec: 'u16';\n                    };\n                },\n                {\n                    name: 'indices';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'proofs';\n                    type: {\n                        vec: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'updateAddressMerkleTree';\n            accounts: [\n                {\n                    name: 'registeredForesterPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'queue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'logWrapper';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n                {\n                    name: 'changelogIndex';\n                    type: 'u16';\n                },\n                {\n                    name: 'indexedChangelogIndex';\n                    type: 'u16';\n                },\n                {\n                    name: 'value';\n                    type: 'u16';\n                },\n                {\n                    name: 'lowAddressIndex';\n                    type: 'u64';\n                },\n                {\n                    name: 'lowAddressValue';\n                    type: {\n                        array: ['u8', 32];\n                    };\n                },\n                {\n                    name: 'lowAddressNextIndex';\n                    type: 'u64';\n                },\n                {\n                    name: 'lowAddressNextValue';\n                    type: {\n                        array: ['u8', 32];\n                    };\n                },\n                {\n                    name: 'lowAddressProof';\n                    type: {\n                        array: [\n                            {\n                                array: ['u8', 32];\n                            },\n                            16,\n                        ];\n                    };\n                },\n            ];\n        },\n        {\n            name: 'rolloverAddressMerkleTreeAndQueue';\n            accounts: [\n                {\n                    name: 'registeredForesterPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'newMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'newQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n            ];\n        },\n        {\n            name: 'rolloverStateMerkleTreeAndQueue';\n            accounts: [\n                {\n                    name: 'registeredForesterPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'authority';\n                    isMut: true;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'newMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'newQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldMerkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'oldQueue';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiContextAccount';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'protocolConfigPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'bump';\n                    type: 'u8';\n                },\n            ];\n        },\n    ];\n    accounts: [\n        {\n            name: 'epochPda';\n            docs: ['Is used for tallying and rewards calculation'];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'epoch';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'protocolConfig';\n                        type: {\n                            defined: 'ProtocolConfig';\n                        };\n                    },\n                    {\n                        name: 'totalWork';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'registeredWeight';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'foresterEpochPda';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'authority';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'config';\n                        type: {\n                            defined: 'ForesterConfig';\n                        };\n                    },\n                    {\n                        name: 'epoch';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'weight';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'workCounter';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'hasReportedWork';\n                        docs: [\n                            'Work can be reported in an extra round to earn extra performance based',\n                            'rewards.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'foresterIndex';\n                        docs: [\n                            'Start index of the range that determines when the forester is eligible to perform work.',\n                            'End index is forester_start_index + weight',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'epochActivePhaseStartSlot';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'totalEpochWeight';\n                        docs: [\n                            'Total epoch weight is registered weight of the epoch account after',\n                            'registration is concluded and active epoch period starts.',\n                        ];\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'protocolConfig';\n                        type: {\n                            defined: 'ProtocolConfig';\n                        };\n                    },\n                    {\n                        name: 'finalizeCounter';\n                        docs: [\n                            'Incremented every time finalize registration is called.',\n                        ];\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'protocolConfigPda';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'authority';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'bump';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'config';\n                        type: {\n                            defined: 'ProtocolConfig';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'foresterPda';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'authority';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'config';\n                        type: {\n                            defined: 'ForesterConfig';\n                        };\n                    },\n                    {\n                        name: 'activeWeight';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'pendingWeight';\n                        docs: [\n                            'Pending weight which will get active once the next epoch starts.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'currentEpoch';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'lastCompressedForesterEpochPdaHash';\n                        docs: [\n                            'Link to previous compressed forester epoch account hash.',\n                        ];\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'lastRegisteredEpoch';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n    ];\n    types: [\n        {\n            name: 'ProtocolConfig';\n            docs: [\n                'Epoch Phases:',\n                '1. Registration',\n                '2. Active',\n                '3. Report Work',\n                '4. Post (Epoch has ended, and rewards can be claimed.)',\n                '- There is always an active phase in progress, registration and report work',\n                'phases run in parallel to a currently active phase.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'genesisSlot';\n                        docs: [\n                            'Solana slot when the protocol starts operating.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'minWeight';\n                        docs: [\n                            'Minimum weight required for a forester to register to an epoch.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'slotLength';\n                        docs: ['Light protocol slot length.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'registrationPhaseLength';\n                        docs: ['Foresters can register for this phase.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'activePhaseLength';\n                        docs: ['Foresters can perform work in this phase.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'reportWorkPhaseLength';\n                        docs: [\n                            'Foresters can report work to receive performance based rewards in this',\n                            'phase.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'cpiContextSize';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'finalizeCounterLimit';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'placeHolder';\n                        docs: ['Placeholder for future protocol updates.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'placeHolderA';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'placeHolderB';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'placeHolderC';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'placeHolderD';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'placeHolderE';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'placeHolderF';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'ForesterConfig';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'fee';\n                        docs: ['Fee in percentage points.'];\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'EpochState';\n            type: {\n                kind: 'enum';\n                variants: [\n                    {\n                        name: 'Registration';\n                    },\n                    {\n                        name: 'Active';\n                    },\n                    {\n                        name: 'ReportWork';\n                    },\n                    {\n                        name: 'Post';\n                    },\n                    {\n                        name: 'Pre';\n                    },\n                ];\n            };\n        },\n    ];\n    errors: [\n        {\n            code: 6000;\n            name: 'InvalidForester';\n            msg: 'InvalidForester';\n        },\n        {\n            code: 6001;\n            name: 'NotInReportWorkPhase';\n        },\n        {\n            code: 6002;\n            name: 'StakeAccountAlreadySynced';\n        },\n        {\n            code: 6003;\n            name: 'EpochEnded';\n        },\n        {\n            code: 6004;\n            name: 'ForesterNotEligible';\n        },\n        {\n            code: 6005;\n            name: 'NotInRegistrationPeriod';\n        },\n        {\n            code: 6006;\n            name: 'WeightInsuffient';\n        },\n        {\n            code: 6007;\n            name: 'ForesterAlreadyRegistered';\n        },\n        {\n            code: 6008;\n            name: 'InvalidEpochAccount';\n        },\n        {\n            code: 6009;\n            name: 'InvalidEpoch';\n        },\n        {\n            code: 6010;\n            name: 'EpochStillInProgress';\n        },\n        {\n            code: 6011;\n            name: 'NotInActivePhase';\n        },\n        {\n            code: 6012;\n            name: 'ForesterAlreadyReportedWork';\n        },\n        {\n            code: 6013;\n            name: 'InvalidNetworkFee';\n        },\n        {\n            code: 6014;\n            name: 'FinalizeCounterExceeded';\n        },\n        {\n            code: 6015;\n            name: 'CpiContextAccountMissing';\n        },\n        {\n            code: 6016;\n            name: 'ArithmeticUnderflow';\n        },\n        {\n            code: 6017;\n            name: 'RegistrationNotFinalized';\n        },\n        {\n            code: 6018;\n            name: 'CpiContextAccountInvalidDataLen';\n        },\n        {\n            code: 6019;\n            name: 'InvalidConfigUpdate';\n        },\n        {\n            code: 6020;\n            name: 'InvalidSigner';\n        },\n        {\n            code: 6021;\n            name: 'GetLatestRegisterEpochFailed';\n        },\n        {\n            code: 6022;\n            name: 'GetCurrentActiveEpochFailed';\n        },\n        {\n            code: 6023;\n            name: 'ForesterUndefined';\n        },\n        {\n            code: 6024;\n            name: 'ForesterDefined';\n        },\n    ];\n};\n\nexport const IDL: LightRegistry = {\n    version: '1.2.0',\n    name: 'light_registry',\n    constants: [\n        {\n            name: 'FORESTER_SEED',\n            type: 'bytes',\n            value: '[102, 111, 114, 101, 115, 116, 101, 114]',\n        },\n        {\n            name: 'FORESTER_EPOCH_SEED',\n            type: 'bytes',\n            value: '[102, 111, 114, 101, 115, 116, 101, 114, 95, 101, 112, 111, 99, 104]',\n        },\n        {\n            name: 'PROTOCOL_CONFIG_PDA_SEED',\n            type: 'bytes',\n            value: '[97, 117, 116, 104, 111, 114, 105, 116, 121]',\n        },\n    ],\n    instructions: [\n        {\n            name: 'initializeProtocolConfig',\n            docs: [\n                'Initializes the protocol config pda. Can only be called once by the',\n                'program account keypair.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n                {\n                    name: 'protocolConfig',\n                    type: {\n                        defined: 'ProtocolConfig',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'updateProtocolConfig',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'newAuthority',\n                    isMut: false,\n                    isSigner: true,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'protocolConfig',\n                    type: {\n                        option: {\n                            defined: 'ProtocolConfig',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'registerSystemProgram',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'groupPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'programToBeRegistered',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        '- is signer so that only the program deployer can register a program.',\n                    ],\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n            ],\n        },\n        {\n            name: 'deregisterSystemProgram',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'groupPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n            ],\n        },\n        {\n            name: 'registerForester',\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'foresterPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n                {\n                    name: 'authority',\n                    type: 'publicKey',\n                },\n                {\n                    name: 'config',\n                    type: {\n                        defined: 'ForesterConfig',\n                    },\n                },\n                {\n                    name: 'weight',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'updateForesterPda',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'foresterPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'newAuthority',\n                    isMut: false,\n                    isSigner: true,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'config',\n                    type: {\n                        option: {\n                            defined: 'ForesterConfig',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'updateForesterPdaWeight',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'foresterPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'newWeight',\n                    type: 'u64',\n                },\n            ],\n        },\n        {\n            name: 'registerForesterEpoch',\n            docs: [\n                'Registers the forester for the epoch.',\n                '1. Only the forester can register herself for the epoch.',\n                '2. Protocol config is copied.',\n                '3. Epoch account is created if needed.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'foresterPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'foresterEpochPda',\n                    isMut: true,\n                    isSigner: false,\n                    docs: [\n                        'Instruction checks that current_epoch is the the current epoch and that',\n                        'the epoch is in registration phase.',\n                    ],\n                },\n                {\n                    name: 'protocolConfig',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'epochPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'epoch',\n                    type: 'u64',\n                },\n            ],\n        },\n        {\n            name: 'finalizeRegistration',\n            docs: [\n                'This transaction can be included as additional instruction in the first',\n                'work instructions during the active phase.',\n                'Registration Period must be over.',\n            ],\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'foresterEpochPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'epochPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'reportWork',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'foresterEpochPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'epochPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'initializeAddressMerkleTree',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Anyone can create new trees just the fees cannot be set arbitrarily.',\n                    ],\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'queue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiContextAccount',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n                {\n                    name: 'programOwner',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'forester',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'merkleTreeConfig',\n                    type: {\n                        defined: 'AddressMerkleTreeConfig',\n                    },\n                },\n                {\n                    name: 'queueConfig',\n                    type: {\n                        defined: 'AddressQueueConfig',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'initializeStateMerkleTree',\n            accounts: [\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                    docs: [\n                        'Anyone can create new trees just the fees cannot be set arbitrarily.',\n                    ],\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'queue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiContextAccount',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n                {\n                    name: 'programOwner',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'forester',\n                    type: {\n                        option: 'publicKey',\n                    },\n                },\n                {\n                    name: 'merkleTreeConfig',\n                    type: {\n                        defined: 'StateMerkleTreeConfig',\n                    },\n                },\n                {\n                    name: 'queueConfig',\n                    type: {\n                        defined: 'NullifierQueueConfig',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'nullify',\n            accounts: [\n                {\n                    name: 'registeredForesterPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'logWrapper',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'nullifierQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n                {\n                    name: 'changeLogIndices',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'leavesQueueIndices',\n                    type: {\n                        vec: 'u16',\n                    },\n                },\n                {\n                    name: 'indices',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'proofs',\n                    type: {\n                        vec: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'updateAddressMerkleTree',\n            accounts: [\n                {\n                    name: 'registeredForesterPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'queue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'logWrapper',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n                {\n                    name: 'changelogIndex',\n                    type: 'u16',\n                },\n                {\n                    name: 'indexedChangelogIndex',\n                    type: 'u16',\n                },\n                {\n                    name: 'value',\n                    type: 'u16',\n                },\n                {\n                    name: 'lowAddressIndex',\n                    type: 'u64',\n                },\n                {\n                    name: 'lowAddressValue',\n                    type: {\n                        array: ['u8', 32],\n                    },\n                },\n                {\n                    name: 'lowAddressNextIndex',\n                    type: 'u64',\n                },\n                {\n                    name: 'lowAddressNextValue',\n                    type: {\n                        array: ['u8', 32],\n                    },\n                },\n                {\n                    name: 'lowAddressProof',\n                    type: {\n                        array: [\n                            {\n                                array: ['u8', 32],\n                            },\n                            16,\n                        ],\n                    },\n                },\n            ],\n        },\n        {\n            name: 'rolloverAddressMerkleTreeAndQueue',\n            accounts: [\n                {\n                    name: 'registeredForesterPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'newMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'newQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n            ],\n        },\n        {\n            name: 'rolloverStateMerkleTreeAndQueue',\n            accounts: [\n                {\n                    name: 'registeredForesterPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'authority',\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'newMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'newQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldMerkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'oldQueue',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiContextAccount',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'protocolConfigPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'bump',\n                    type: 'u8',\n                },\n            ],\n        },\n    ],\n    accounts: [\n        {\n            name: 'epochPda',\n            docs: ['Is used for tallying and rewards calculation'],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'epoch',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'protocolConfig',\n                        type: {\n                            defined: 'ProtocolConfig',\n                        },\n                    },\n                    {\n                        name: 'totalWork',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'registeredWeight',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'foresterEpochPda',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'authority',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'config',\n                        type: {\n                            defined: 'ForesterConfig',\n                        },\n                    },\n                    {\n                        name: 'epoch',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'weight',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'workCounter',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'hasReportedWork',\n                        docs: [\n                            'Work can be reported in an extra round to earn extra performance based',\n                            'rewards.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'foresterIndex',\n                        docs: [\n                            'Start index of the range that determines when the forester is eligible to perform work.',\n                            'End index is forester_start_index + weight',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'epochActivePhaseStartSlot',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'totalEpochWeight',\n                        docs: [\n                            'Total epoch weight is registered weight of the epoch account after',\n                            'registration is concluded and active epoch period starts.',\n                        ],\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'protocolConfig',\n                        type: {\n                            defined: 'ProtocolConfig',\n                        },\n                    },\n                    {\n                        name: 'finalizeCounter',\n                        docs: [\n                            'Incremented every time finalize registration is called.',\n                        ],\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'protocolConfigPda',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'authority',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'bump',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'config',\n                        type: {\n                            defined: 'ProtocolConfig',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'foresterPda',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'authority',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'config',\n                        type: {\n                            defined: 'ForesterConfig',\n                        },\n                    },\n                    {\n                        name: 'activeWeight',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'pendingWeight',\n                        docs: [\n                            'Pending weight which will get active once the next epoch starts.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'currentEpoch',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'lastCompressedForesterEpochPdaHash',\n                        docs: [\n                            'Link to previous compressed forester epoch account hash.',\n                        ],\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'lastRegisteredEpoch',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n    ],\n    types: [\n        {\n            name: 'ProtocolConfig',\n            docs: [\n                'Epoch Phases:',\n                '1. Registration',\n                '2. Active',\n                '3. Report Work',\n                '4. Post (Epoch has ended, and rewards can be claimed.)',\n                '- There is always an active phase in progress, registration and report work',\n                'phases run in parallel to a currently active phase.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'genesisSlot',\n                        docs: [\n                            'Solana slot when the protocol starts operating.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'minWeight',\n                        docs: [\n                            'Minimum weight required for a forester to register to an epoch.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'slotLength',\n                        docs: ['Light protocol slot length.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'registrationPhaseLength',\n                        docs: ['Foresters can register for this phase.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'activePhaseLength',\n                        docs: ['Foresters can perform work in this phase.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'reportWorkPhaseLength',\n                        docs: [\n                            'Foresters can report work to receive performance based rewards in this',\n                            'phase.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'cpiContextSize',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'finalizeCounterLimit',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'placeHolder',\n                        docs: ['Placeholder for future protocol updates.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'placeHolderA',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'placeHolderB',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'placeHolderC',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'placeHolderD',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'placeHolderE',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'placeHolderF',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'ForesterConfig',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'fee',\n                        docs: ['Fee in percentage points.'],\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'EpochState',\n            type: {\n                kind: 'enum',\n                variants: [\n                    {\n                        name: 'Registration',\n                    },\n                    {\n                        name: 'Active',\n                    },\n                    {\n                        name: 'ReportWork',\n                    },\n                    {\n                        name: 'Post',\n                    },\n                    {\n                        name: 'Pre',\n                    },\n                ],\n            },\n        },\n    ],\n    errors: [\n        {\n            code: 6000,\n            name: 'InvalidForester',\n            msg: 'InvalidForester',\n        },\n        {\n            code: 6001,\n            name: 'NotInReportWorkPhase',\n        },\n        {\n            code: 6002,\n            name: 'StakeAccountAlreadySynced',\n        },\n        {\n            code: 6003,\n            name: 'EpochEnded',\n        },\n        {\n            code: 6004,\n            name: 'ForesterNotEligible',\n        },\n        {\n            code: 6005,\n            name: 'NotInRegistrationPeriod',\n        },\n        {\n            code: 6006,\n            name: 'WeightInsuffient',\n        },\n        {\n            code: 6007,\n            name: 'ForesterAlreadyRegistered',\n        },\n        {\n            code: 6008,\n            name: 'InvalidEpochAccount',\n        },\n        {\n            code: 6009,\n            name: 'InvalidEpoch',\n        },\n        {\n            code: 6010,\n            name: 'EpochStillInProgress',\n        },\n        {\n            code: 6011,\n            name: 'NotInActivePhase',\n        },\n        {\n            code: 6012,\n            name: 'ForesterAlreadyReportedWork',\n        },\n        {\n            code: 6013,\n            name: 'InvalidNetworkFee',\n        },\n        {\n            code: 6014,\n            name: 'FinalizeCounterExceeded',\n        },\n        {\n            code: 6015,\n            name: 'CpiContextAccountMissing',\n        },\n        {\n            code: 6016,\n            name: 'ArithmeticUnderflow',\n        },\n        {\n            code: 6017,\n            name: 'RegistrationNotFinalized',\n        },\n        {\n            code: 6018,\n            name: 'CpiContextAccountInvalidDataLen',\n        },\n        {\n            code: 6019,\n            name: 'InvalidConfigUpdate',\n        },\n        {\n            code: 6020,\n            name: 'InvalidSigner',\n        },\n        {\n            code: 6021,\n            name: 'GetLatestRegisterEpochFailed',\n        },\n        {\n            code: 6022,\n            name: 'GetCurrentActiveEpochFailed',\n        },\n        {\n            code: 6023,\n            name: 'ForesterUndefined',\n        },\n        {\n            code: 6024,\n            name: 'ForesterDefined',\n        },\n    ],\n};\n","export type LightCompressedToken = {\n    version: '1.2.0';\n    name: 'light_compressed_token';\n    instructions: [\n        {\n            name: 'createTokenPool';\n            docs: [\n                'This instruction creates a token pool for a given mint. Every spl mint',\n                'can have one token pool. When a token is compressed the tokens are',\n                'transferrred to the token pool, and their compressed equivalent is',\n                'minted into a Merkle tree.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'mintTo';\n            docs: [\n                'Mints tokens from an spl token mint to a list of compressed accounts.',\n                'Minted tokens are transferred to a pool account owned by the compressed',\n                'token program. The instruction creates one compressed output account for',\n                'every amount and pubkey input pair. A constant amount of lamports can be',\n                'transferred to each output account to enable. A use case to add lamports',\n                'to a compressed token account is to prevent spam. This is the only way',\n                'to add lamports to a compressed token account.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['programs'];\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'solPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'publicKeys';\n                    type: {\n                        vec: 'publicKey';\n                    };\n                },\n                {\n                    name: 'amounts';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'lamports';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'compressSplTokenAccount';\n            docs: [\n                'Compresses the balance of an spl token account sub an optional remaining',\n                'amount. This instruction does not close the spl token account. To close',\n                'the account bundle a close spl account instruction in your transaction.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'owner';\n                    type: 'publicKey';\n                },\n                {\n                    name: 'remainingAmount';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n                {\n                    name: 'cpiContext';\n                    type: {\n                        option: {\n                            defined: 'CompressedCpiContext';\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'transfer';\n            docs: [\n                'Transfers compressed tokens from one account to another. All accounts',\n                'must be of the same mint. Additional spl tokens can be compressed or',\n                'decompressed. In one transaction only compression or decompression is',\n                'possible. Lamports can be transferred alongside tokens. If output token',\n                'accounts specify less lamports than inputs the remaining lamports are',\n                'transferred to an output compressed account. Signer must be owner or',\n                'delegate. If a delegated token account is transferred the delegate is',\n                'not preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'approve';\n            docs: [\n                'Delegates an amount to a delegate. A compressed token account is either',\n                'completely delegated or not. Prior delegates are not preserved. Cannot',\n                'be called by a delegate.',\n                'The instruction creates two output accounts:',\n                '1. one account with delegated amount',\n                '2. one account with remaining(change) amount',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'revoke';\n            docs: [\n                'Revokes a delegation. The instruction merges all inputs into one output',\n                'account. Cannot be called by a delegate. Delegates are not preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'freeze';\n            docs: [\n                'Freezes compressed token accounts. Inputs must not be frozen. Creates as',\n                'many outputs as inputs. Balances and delegates are preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['that this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'thaw';\n            docs: [\n                'Thaws frozen compressed token accounts. Inputs must be frozen. Creates',\n                'as many outputs as inputs. Balances and delegates are preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['that this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'burn';\n            docs: [\n                'Burns compressed tokens and spl tokens from the pool account. Delegates',\n                'can burn tokens. The output compressed token account remains delegated.',\n                'Creates one output compressed token account.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'stubIdlBuild';\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs1';\n                    type: {\n                        defined: 'CompressedTokenInstructionDataTransfer';\n                    };\n                },\n                {\n                    name: 'inputs2';\n                    type: {\n                        defined: 'TokenData';\n                    };\n                },\n            ];\n        },\n    ];\n    types: [\n        {\n            name: 'AccessMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        docs: ['Owner of the Merkle tree.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'programOwner';\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'forester';\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ];\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'AccountState';\n            type: {\n                kind: 'enum';\n                variants: [\n                    {\n                        name: 'Initialized';\n                    },\n                    {\n                        name: 'Frozen';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccount';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'lamports';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'address';\n                        type: {\n                            option: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccountData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'discriminator';\n                        type: {\n                            array: ['u8', 8];\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: 'bytes';\n                    },\n                    {\n                        name: 'dataHash';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedCpiContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'setContext';\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'firstSetContext';\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContextAccountIndex';\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ];\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedProof';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'a';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'b';\n                        type: {\n                            array: ['u8', 64];\n                        };\n                    },\n                    {\n                        name: 'c';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedTokenInstructionDataTransfer';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'mint';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'delegatedTransfer';\n                        docs: [\n                            'Is required if the signer is delegate,',\n                            '-> delegate is authority account,',\n                            'owner = Some(owner) is the owner of the token account.',\n                        ];\n                        type: {\n                            option: {\n                                defined: 'DelegatedTransfer';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputTokenDataWithContext';\n                        type: {\n                            vec: {\n                                defined: 'InputTokenDataWithContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'PackedTokenTransferOutputData';\n                            };\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressAmount';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'lamportsChangeAccountMerkleTreeIndex';\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'DelegatedTransfer';\n            docs: [\n                'Struct to provide the owner when the delegate is signer of the transaction.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'delegateChangeAccountIndex';\n                        docs: [\n                            'Index of change compressed account in output compressed accounts. In',\n                            \"case that the delegate didn't spend the complete delegated compressed\",\n                            'account balance the change compressed account will be delegated to her',\n                            'as well.',\n                        ];\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InputTokenDataWithContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'amount';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'delegateIndex';\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        type: 'u16';\n                    },\n                    {\n                        name: 'lamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvoke';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvokeCpi';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'accessMetadata';\n                        type: {\n                            defined: 'AccessMetadata';\n                        };\n                    },\n                    {\n                        name: 'rolloverMetadata';\n                        type: {\n                            defined: 'RolloverMetadata';\n                        };\n                    },\n                    {\n                        name: 'associatedQueue';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'nextMerkleTree';\n                        type: 'publicKey';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeSequenceNumber';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'pubkey';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'seq';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'NewAddressParamsPacked';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'seed';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'addressQueueAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex';\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ];\n                        type: 'u16';\n                    },\n                    {\n                        name: 'readOnly';\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ];\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'leafIndex';\n                        type: 'u32';\n                    },\n                    {\n                        name: 'queueIndex';\n                        docs: [\n                            'Index of leaf in queue. Placeholder of batched Merkle tree updates',\n                            'currently unimplemented.',\n                        ];\n                        type: {\n                            option: {\n                                defined: 'QueueIndex';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedTokenTransferOutputData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'amount';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'lamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PublicTransactionEvent';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputLeafIndices';\n                        type: {\n                            vec: 'u32';\n                        };\n                    },\n                    {\n                        name: 'sequenceNumbers';\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'pubkeyArray';\n                        type: {\n                            vec: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'message';\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'QueueIndex';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'queueId';\n                        docs: ['Id of queue in queue account.'];\n                        type: 'u8';\n                    },\n                    {\n                        name: 'index';\n                        docs: ['Index of compressed account hash in queue.'];\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'RolloverMetadata';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'index';\n                        docs: ['Unique index.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverFee';\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolloverThreshold';\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'networkFee';\n                        docs: ['Tip for maintaining the account.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'rolledoverSlot';\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'closeThreshold';\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'additionalBytes';\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ];\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'TokenData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'mint';\n                        docs: ['The mint associated with this account'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'owner';\n                        docs: ['The owner of this account.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'amount';\n                        docs: ['The amount of tokens this account holds.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'delegate';\n                        docs: [\n                            'If `delegate` is `Some` then `delegated_amount` represents',\n                            'the amount authorized by the delegate',\n                        ];\n                        type: {\n                            option: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'state';\n                        docs: [\"The account's state\"];\n                        type: {\n                            defined: 'AccountState';\n                        };\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n    ];\n    errors: [\n        {\n            code: 6000;\n            name: 'PublicKeyAmountMissmatch';\n            msg: 'public keys and amounts must be of same length';\n        },\n        {\n            code: 6001;\n            name: 'ComputeInputSumFailed';\n            msg: 'ComputeInputSumFailed';\n        },\n        {\n            code: 6002;\n            name: 'ComputeOutputSumFailed';\n            msg: 'ComputeOutputSumFailed';\n        },\n        {\n            code: 6003;\n            name: 'ComputeCompressSumFailed';\n            msg: 'ComputeCompressSumFailed';\n        },\n        {\n            code: 6004;\n            name: 'ComputeDecompressSumFailed';\n            msg: 'ComputeDecompressSumFailed';\n        },\n        {\n            code: 6005;\n            name: 'SumCheckFailed';\n            msg: 'SumCheckFailed';\n        },\n        {\n            code: 6006;\n            name: 'DecompressRecipientUndefinedForDecompress';\n            msg: 'DecompressRecipientUndefinedForDecompress';\n        },\n        {\n            code: 6007;\n            name: 'CompressedPdaUndefinedForDecompress';\n            msg: 'CompressedPdaUndefinedForDecompress';\n        },\n        {\n            code: 6008;\n            name: 'DeCompressAmountUndefinedForDecompress';\n            msg: 'DeCompressAmountUndefinedForDecompress';\n        },\n        {\n            code: 6009;\n            name: 'CompressedPdaUndefinedForCompress';\n            msg: 'CompressedPdaUndefinedForCompress';\n        },\n        {\n            code: 6010;\n            name: 'DeCompressAmountUndefinedForCompress';\n            msg: 'DeCompressAmountUndefinedForCompress';\n        },\n        {\n            code: 6011;\n            name: 'DelegateSignerCheckFailed';\n            msg: 'DelegateSignerCheckFailed';\n        },\n        {\n            code: 6012;\n            name: 'MintTooLarge';\n            msg: 'Minted amount greater than u64::MAX';\n        },\n        {\n            code: 6013;\n            name: 'SplTokenSupplyMismatch';\n            msg: 'SplTokenSupplyMismatch';\n        },\n        {\n            code: 6014;\n            name: 'HeapMemoryCheckFailed';\n            msg: 'HeapMemoryCheckFailed';\n        },\n        {\n            code: 6015;\n            name: 'InstructionNotCallable';\n            msg: 'The instruction is not callable';\n        },\n        {\n            code: 6016;\n            name: 'ArithmeticUnderflow';\n            msg: 'ArithmeticUnderflow';\n        },\n        {\n            code: 6017;\n            name: 'HashToFieldError';\n            msg: 'HashToFieldError';\n        },\n        {\n            code: 6018;\n            name: 'InvalidAuthorityMint';\n            msg: 'Expected the authority to be also a mint authority';\n        },\n        {\n            code: 6019;\n            name: 'InvalidFreezeAuthority';\n            msg: 'Provided authority is not the freeze authority';\n        },\n        {\n            code: 6020;\n            name: 'InvalidDelegateIndex';\n        },\n        {\n            code: 6021;\n            name: 'TokenPoolPdaUndefined';\n        },\n        {\n            code: 6022;\n            name: 'IsTokenPoolPda';\n            msg: 'Compress or decompress recipient is the same account as the token pool pda.';\n        },\n        {\n            code: 6023;\n            name: 'InvalidTokenPoolPda';\n        },\n        {\n            code: 6024;\n            name: 'NoInputTokenAccountsProvided';\n        },\n        {\n            code: 6025;\n            name: 'NoInputsProvided';\n        },\n        {\n            code: 6026;\n            name: 'MintHasNoFreezeAuthority';\n        },\n        {\n            code: 6027;\n            name: 'MintWithInvalidExtension';\n        },\n        {\n            code: 6028;\n            name: 'InsufficientTokenAccountBalance';\n            msg: 'The token account balance is less than the remaining amount.';\n        },\n    ];\n};\nexport const IDL: LightCompressedToken = {\n    version: '1.2.0',\n    name: 'light_compressed_token',\n    instructions: [\n        {\n            name: 'createTokenPool',\n            docs: [\n                'This instruction creates a token pool for a given mint. Every spl mint',\n                'can have one token pool. When a token is compressed the tokens are',\n                'transferrred to the token pool, and their compressed equivalent is',\n                'minted into a Merkle tree.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'mintTo',\n            docs: [\n                'Mints tokens from an spl token mint to a list of compressed accounts.',\n                'Minted tokens are transferred to a pool account owned by the compressed',\n                'token program. The instruction creates one compressed output account for',\n                'every amount and pubkey input pair. A constant amount of lamports can be',\n                'transferred to each output account to enable. A use case to add lamports',\n                'to a compressed token account is to prevent spam. This is the only way',\n                'to add lamports to a compressed token account.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['programs'],\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'solPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'publicKeys',\n                    type: {\n                        vec: 'publicKey',\n                    },\n                },\n                {\n                    name: 'amounts',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'lamports',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'compressSplTokenAccount',\n            docs: [\n                'Compresses the balance of an spl token account sub an optional remaining',\n                'amount. This instruction does not close the spl token account. To close',\n                'the account bundle a close spl account instruction in your transaction.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'owner',\n                    type: 'publicKey',\n                },\n                {\n                    name: 'remainingAmount',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n                {\n                    name: 'cpiContext',\n                    type: {\n                        option: {\n                            defined: 'CompressedCpiContext',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'transfer',\n            docs: [\n                'Transfers compressed tokens from one account to another. All accounts',\n                'must be of the same mint. Additional spl tokens can be compressed or',\n                'decompressed. In one transaction only compression or decompression is',\n                'possible. Lamports can be transferred alongside tokens. If output token',\n                'accounts specify less lamports than inputs the remaining lamports are',\n                'transferred to an output compressed account. Signer must be owner or',\n                'delegate. If a delegated token account is transferred the delegate is',\n                'not preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'approve',\n            docs: [\n                'Delegates an amount to a delegate. A compressed token account is either',\n                'completely delegated or not. Prior delegates are not preserved. Cannot',\n                'be called by a delegate.',\n                'The instruction creates two output accounts:',\n                '1. one account with delegated amount',\n                '2. one account with remaining(change) amount',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'revoke',\n            docs: [\n                'Revokes a delegation. The instruction merges all inputs into one output',\n                'account. Cannot be called by a delegate. Delegates are not preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'freeze',\n            docs: [\n                'Freezes compressed token accounts. Inputs must not be frozen. Creates as',\n                'many outputs as inputs. Balances and delegates are preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['that this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'thaw',\n            docs: [\n                'Thaws frozen compressed token accounts. Inputs must be frozen. Creates',\n                'as many outputs as inputs. Balances and delegates are preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['that this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'burn',\n            docs: [\n                'Burns compressed tokens and spl tokens from the pool account. Delegates',\n                'can burn tokens. The output compressed token account remains delegated.',\n                'Creates one output compressed token account.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'stubIdlBuild',\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs1',\n                    type: {\n                        defined: 'CompressedTokenInstructionDataTransfer',\n                    },\n                },\n                {\n                    name: 'inputs2',\n                    type: {\n                        defined: 'TokenData',\n                    },\n                },\n            ],\n        },\n    ],\n    types: [\n        {\n            name: 'AccessMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        docs: ['Owner of the Merkle tree.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'programOwner',\n                        docs: [\n                            'Program owner of the Merkle tree. This will be used for program owned Merkle trees.',\n                        ],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'forester',\n                        docs: [\n                            'Optional privileged forester pubkey, can be set for custom Merkle trees',\n                            'without a network fee. Merkle trees without network fees are not',\n                            'forested by light foresters. The variable is not used in the account',\n                            'compression program but the registry program. The registry program',\n                            'implements access control to prevent contention during forester. The',\n                            'forester pubkey specified in this struct can bypass contention checks.',\n                        ],\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'AccountState',\n            type: {\n                kind: 'enum',\n                variants: [\n                    {\n                        name: 'Initialized',\n                    },\n                    {\n                        name: 'Frozen',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccount',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'lamports',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'address',\n                        type: {\n                            option: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccountData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'discriminator',\n                        type: {\n                            array: ['u8', 8],\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: 'bytes',\n                    },\n                    {\n                        name: 'dataHash',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedCpiContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'setContext',\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'firstSetContext',\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContextAccountIndex',\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ],\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedProof',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'a',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'b',\n                        type: {\n                            array: ['u8', 64],\n                        },\n                    },\n                    {\n                        name: 'c',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedTokenInstructionDataTransfer',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'mint',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'delegatedTransfer',\n                        docs: [\n                            'Is required if the signer is delegate,',\n                            '-> delegate is authority account,',\n                            'owner = Some(owner) is the owner of the token account.',\n                        ],\n                        type: {\n                            option: {\n                                defined: 'DelegatedTransfer',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputTokenDataWithContext',\n                        type: {\n                            vec: {\n                                defined: 'InputTokenDataWithContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined: 'PackedTokenTransferOutputData',\n                            },\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressAmount',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'lamportsChangeAccountMerkleTreeIndex',\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'DelegatedTransfer',\n            docs: [\n                'Struct to provide the owner when the delegate is signer of the transaction.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'delegateChangeAccountIndex',\n                        docs: [\n                            'Index of change compressed account in output compressed accounts. In',\n                            \"case that the delegate didn't spend the complete delegated compressed\",\n                            'account balance the change compressed account will be delegated to her',\n                            'as well.',\n                        ],\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InputTokenDataWithContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'amount',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'delegateIndex',\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        type: 'u16',\n                    },\n                    {\n                        name: 'lamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvoke',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvokeCpi',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'accessMetadata',\n                        type: {\n                            defined: 'AccessMetadata',\n                        },\n                    },\n                    {\n                        name: 'rolloverMetadata',\n                        type: {\n                            defined: 'RolloverMetadata',\n                        },\n                    },\n                    {\n                        name: 'associatedQueue',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'nextMerkleTree',\n                        type: 'publicKey',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeSequenceNumber',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'pubkey',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'seq',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'NewAddressParamsPacked',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'seed',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'addressQueueAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex',\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ],\n                        type: 'u16',\n                    },\n                    {\n                        name: 'readOnly',\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ],\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'leafIndex',\n                        type: 'u32',\n                    },\n                    {\n                        name: 'queueIndex',\n                        docs: [\n                            'Index of leaf in queue. Placeholder of batched Merkle tree updates',\n                            'currently unimplemented.',\n                        ],\n                        type: {\n                            option: {\n                                defined: 'QueueIndex',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedTokenTransferOutputData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'amount',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'lamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PublicTransactionEvent',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputLeafIndices',\n                        type: {\n                            vec: 'u32',\n                        },\n                    },\n                    {\n                        name: 'sequenceNumbers',\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'pubkeyArray',\n                        type: {\n                            vec: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'message',\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'QueueIndex',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'queueId',\n                        docs: ['Id of queue in queue account.'],\n                        type: 'u8',\n                    },\n                    {\n                        name: 'index',\n                        docs: ['Index of compressed account hash in queue.'],\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'RolloverMetadata',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'index',\n                        docs: ['Unique index.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverFee',\n                        docs: [\n                            'This fee is used for rent for the next account.',\n                            'It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolloverThreshold',\n                        docs: [\n                            'The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled).',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'networkFee',\n                        docs: ['Tip for maintaining the account.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'rolledoverSlot',\n                        docs: [\n                            'The slot when the account was rolled over, a rolled over account should not be written to.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'closeThreshold',\n                        docs: [\n                            'If current slot is greater than rolledover_slot + close_threshold and',\n                            \"the account is empty it can be closed. No 'close' functionality has been\",\n                            'implemented yet.',\n                        ],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'additionalBytes',\n                        docs: [\n                            'Placeholder for bytes of additional accounts which are tied to the',\n                            'Merkle trees operation and need to be rolled over as well.',\n                        ],\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'TokenData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'mint',\n                        docs: ['The mint associated with this account'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'owner',\n                        docs: ['The owner of this account.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'amount',\n                        docs: ['The amount of tokens this account holds.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'delegate',\n                        docs: [\n                            'If `delegate` is `Some` then `delegated_amount` represents',\n                            'the amount authorized by the delegate',\n                        ],\n                        type: {\n                            option: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'state',\n                        docs: [\"The account's state\"],\n                        type: {\n                            defined: 'AccountState',\n                        },\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    errors: [\n        {\n            code: 6000,\n            name: 'PublicKeyAmountMissmatch',\n            msg: 'public keys and amounts must be of same length',\n        },\n        {\n            code: 6001,\n            name: 'ComputeInputSumFailed',\n            msg: 'ComputeInputSumFailed',\n        },\n        {\n            code: 6002,\n            name: 'ComputeOutputSumFailed',\n            msg: 'ComputeOutputSumFailed',\n        },\n        {\n            code: 6003,\n            name: 'ComputeCompressSumFailed',\n            msg: 'ComputeCompressSumFailed',\n        },\n        {\n            code: 6004,\n            name: 'ComputeDecompressSumFailed',\n            msg: 'ComputeDecompressSumFailed',\n        },\n        {\n            code: 6005,\n            name: 'SumCheckFailed',\n            msg: 'SumCheckFailed',\n        },\n        {\n            code: 6006,\n            name: 'DecompressRecipientUndefinedForDecompress',\n            msg: 'DecompressRecipientUndefinedForDecompress',\n        },\n        {\n            code: 6007,\n            name: 'CompressedPdaUndefinedForDecompress',\n            msg: 'CompressedPdaUndefinedForDecompress',\n        },\n        {\n            code: 6008,\n            name: 'DeCompressAmountUndefinedForDecompress',\n            msg: 'DeCompressAmountUndefinedForDecompress',\n        },\n        {\n            code: 6009,\n            name: 'CompressedPdaUndefinedForCompress',\n            msg: 'CompressedPdaUndefinedForCompress',\n        },\n        {\n            code: 6010,\n            name: 'DeCompressAmountUndefinedForCompress',\n            msg: 'DeCompressAmountUndefinedForCompress',\n        },\n        {\n            code: 6011,\n            name: 'DelegateSignerCheckFailed',\n            msg: 'DelegateSignerCheckFailed',\n        },\n        {\n            code: 6012,\n            name: 'MintTooLarge',\n            msg: 'Minted amount greater than u64::MAX',\n        },\n        {\n            code: 6013,\n            name: 'SplTokenSupplyMismatch',\n            msg: 'SplTokenSupplyMismatch',\n        },\n        {\n            code: 6014,\n            name: 'HeapMemoryCheckFailed',\n            msg: 'HeapMemoryCheckFailed',\n        },\n        {\n            code: 6015,\n            name: 'InstructionNotCallable',\n            msg: 'The instruction is not callable',\n        },\n        {\n            code: 6016,\n            name: 'ArithmeticUnderflow',\n            msg: 'ArithmeticUnderflow',\n        },\n        {\n            code: 6017,\n            name: 'HashToFieldError',\n            msg: 'HashToFieldError',\n        },\n        {\n            code: 6018,\n            name: 'InvalidAuthorityMint',\n            msg: 'Expected the authority to be also a mint authority',\n        },\n        {\n            code: 6019,\n            name: 'InvalidFreezeAuthority',\n            msg: 'Provided authority is not the freeze authority',\n        },\n        {\n            code: 6020,\n            name: 'InvalidDelegateIndex',\n        },\n        {\n            code: 6021,\n            name: 'TokenPoolPdaUndefined',\n        },\n        {\n            code: 6022,\n            name: 'IsTokenPoolPda',\n            msg: 'Compress or decompress recipient is the same account as the token pool pda.',\n        },\n        {\n            code: 6023,\n            name: 'InvalidTokenPoolPda',\n        },\n        {\n            code: 6024,\n            name: 'NoInputTokenAccountsProvided',\n        },\n        {\n            code: 6025,\n            name: 'NoInputsProvided',\n        },\n        {\n            code: 6026,\n            name: 'MintHasNoFreezeAuthority',\n        },\n        {\n            code: 6027,\n            name: 'MintWithInvalidExtension',\n        },\n        {\n            code: 6028,\n            name: 'InsufficientTokenAccountBalance',\n            msg: 'The token account balance is less than the remaining amount.',\n        },\n    ],\n};\n","// TODO: Clean up\nexport enum UtxoErrorCode {\n    NEGATIVE_LAMPORTS = 'NEGATIVE_LAMPORTS',\n    NOT_U64 = 'NOT_U64',\n    BLINDING_EXCEEDS_FIELD_SIZE = 'BLINDING_EXCEEDS_FIELD_SIZE',\n}\n\nexport enum SelectInUtxosErrorCode {\n    FAILED_TO_FIND_UTXO_COMBINATION = 'FAILED_TO_FIND_UTXO_COMBINATION',\n    INVALID_NUMBER_OF_IN_UTXOS = 'INVALID_NUMBER_OF_IN_UTXOS',\n}\n\nexport enum CreateUtxoErrorCode {\n    OWNER_UNDEFINED = 'OWNER_UNDEFINED',\n    INVALID_OUTPUT_UTXO_LENGTH = 'INVALID_OUTPUT_UTXO_LENGTH',\n    UTXO_DATA_UNDEFINED = 'UTXO_DATA_UNDEFINED',\n}\n\nexport enum RpcErrorCode {\n    CONNECTION_UNDEFINED = 'CONNECTION_UNDEFINED',\n    RPC_PUBKEY_UNDEFINED = 'RPC_PUBKEY_UNDEFINED',\n    RPC_METHOD_NOT_IMPLEMENTED = 'RPC_METHOD_NOT_IMPLEMENTED',\n    RPC_INVALID = 'RPC_INVALID',\n}\n\nexport enum LookupTableErrorCode {\n    LOOK_UP_TABLE_UNDEFINED = 'LOOK_UP_TABLE_UNDEFINED',\n    LOOK_UP_TABLE_NOT_INITIALIZED = 'LOOK_UP_TABLE_NOT_INITIALIZED',\n}\n\nexport enum HashErrorCode {\n    NO_POSEIDON_HASHER_PROVIDED = 'NO_POSEIDON_HASHER_PROVIDED',\n}\n\nexport enum ProofErrorCode {\n    INVALID_PROOF = 'INVALID_PROOF',\n    PROOF_INPUT_UNDEFINED = 'PROOF_INPUT_UNDEFINED',\n    PROOF_GENERATION_FAILED = 'PROOF_GENERATION_FAILED',\n}\n\nexport enum MerkleTreeErrorCode {\n    MERKLE_TREE_NOT_INITIALIZED = 'MERKLE_TREE_NOT_INITIALIZED',\n    SOL_MERKLE_TREE_UNDEFINED = 'SOL_MERKLE_TREE_UNDEFINED',\n    MERKLE_TREE_UNDEFINED = 'MERKLE_TREE_UNDEFINED',\n    INPUT_UTXO_NOT_INSERTED_IN_MERKLE_TREE = 'INPUT_UTXO_NOT_INSERTED_IN_MERKLE_TREE',\n    MERKLE_TREE_INDEX_UNDEFINED = 'MERKLE_TREE_INDEX_UNDEFINED',\n    MERKLE_TREE_SET_SPACE_UNDEFINED = 'MERKLE_TREE_SET_SPACE_UNDEFINED',\n}\n\nexport enum UtilsErrorCode {\n    ACCOUNT_NAME_UNDEFINED_IN_IDL = 'ACCOUNT_NAME_UNDEFINED_IN_IDL',\n    PROPERTY_UNDEFINED = 'PROPERTY_UNDEFINED',\n    LOOK_UP_TABLE_CREATION_FAILED = 'LOOK_UP_TABLE_CREATION_FAILED',\n    UNSUPPORTED_ARCHITECTURE = 'UNSUPPORTED_ARCHITECTURE',\n    UNSUPPORTED_PLATFORM = 'UNSUPPORTED_PLATFORM',\n    ACCOUNTS_UNDEFINED = 'ACCOUNTS_UNDEFINED',\n    INVALID_NUMBER = 'INVALID_NUMBER',\n}\n\nclass MetaError extends Error {\n    code: string;\n    functionName: string;\n    codeMessage?: string;\n\n    constructor(code: string, functionName: string, codeMessage?: string) {\n        super(`${code}: ${codeMessage}`);\n        this.code = code;\n        this.functionName = functionName;\n        this.codeMessage = codeMessage;\n    }\n}\n\nexport class UtxoError extends MetaError {}\n\nexport class SelectInUtxosError extends MetaError {}\n\nexport class CreateUtxoError extends MetaError {}\n\nexport class RpcError extends MetaError {}\n\nexport class LookupTableError extends MetaError {}\n\nexport class HashError extends MetaError {}\n\nexport class ProofError extends MetaError {}\n\nexport class MerkleTreeError extends MetaError {}\n\nexport class UtilsError extends MetaError {}\n","import { PublicKey, MemcmpFilter, DataSlice } from '@solana/web3.js';\nimport {\n    type as pick,\n    number,\n    string,\n    array,\n    literal,\n    union,\n    coerce,\n    instance,\n    create,\n    unknown,\n    any,\n    nullable,\n    Struct,\n} from 'superstruct';\nimport {\n    BN254,\n    createBN254,\n    CompressedProof,\n    CompressedAccountWithMerkleContext,\n    MerkleContextWithMerkleProof,\n    bn,\n    TokenData,\n} from './state';\nimport { BN } from '@coral-xyz/anchor';\n\nexport interface LatestNonVotingSignatures {\n    context: { slot: number };\n    value: {\n        items: {\n            signature: string;\n            slot: number;\n            blockTime: number;\n            error: string | null;\n        }[];\n    };\n}\n\nexport interface GetCompressedAccountsByOwnerConfig {\n    filters?: GetCompressedAccountsFilter[];\n    dataSlice?: DataSlice;\n    cursor?: string;\n    limit?: BN;\n}\n\nexport interface CompressedMintTokenHolders {\n    balance: BN;\n    owner: PublicKey;\n}\n\nexport interface LatestNonVotingSignaturesPaginated {\n    context: { slot: number };\n    value: {\n        items: {\n            signature: string;\n            slot: number;\n            blockTime: number;\n        }[];\n        cursor: string | null;\n    };\n}\n\nexport interface SignatureWithMetadata {\n    blockTime: number;\n    signature: string;\n    slot: number;\n}\n\nexport interface HashWithTree {\n    hash: BN254;\n    tree: PublicKey;\n    queue: PublicKey;\n}\n\nexport interface AddressWithTree {\n    address: BN254;\n    tree: PublicKey;\n    queue: PublicKey;\n}\n\nexport interface CompressedTransaction {\n    compressionInfo: {\n        closedAccounts: {\n            account: CompressedAccountWithMerkleContext;\n            maybeTokenData: TokenData | null;\n        }[];\n        openedAccounts: {\n            account: CompressedAccountWithMerkleContext;\n            maybeTokenData: TokenData | null;\n        }[];\n        preTokenBalances?: {\n            owner: PublicKey;\n            mint: PublicKey;\n            amount: BN;\n        }[];\n        postTokenBalances?: {\n            owner: PublicKey;\n            mint: PublicKey;\n            amount: BN;\n        }[];\n    };\n    transaction: any;\n}\n\nexport interface HexBatchInputsForProver {\n    'input-compressed-accounts': HexInputsForProver[];\n}\n\nexport interface HexInputsForProver {\n    root: string;\n    pathIndex: number;\n    pathElements: string[];\n    leaf: string;\n}\n\n// TODO: Rename Compressed -> ValidityProof\nexport type CompressedProofWithContext = {\n    compressedProof: CompressedProof;\n    roots: BN[];\n    rootIndices: number[];\n    leafIndices: number[];\n    leaves: BN[];\n    merkleTrees: PublicKey[];\n    nullifierQueues: PublicKey[];\n};\n\nexport interface GetCompressedTokenAccountsByOwnerOrDelegateOptions {\n    mint?: PublicKey;\n    cursor?: string;\n    limit?: BN;\n}\nexport type TokenBalance = { balance: BN; mint: PublicKey };\n\n/**\n * **Cursor** is a unique identifier for a page of results by which the next page can be fetched.\n *\n * **Limit** is the maximum number of results to return per page.\n */\nexport interface PaginatedOptions {\n    cursor?: string;\n    limit?: BN;\n}\n\n/**\n * Note, DataSizeFilter is currently not available.\n */\nexport type GetCompressedAccountsFilter = MemcmpFilter; // | DataSizeFilter;\n\nexport type GetCompressedAccountConfig = {\n    encoding?: string;\n};\n\nexport type GetCompressedAccountsConfig = {\n    dataSlice: DataSlice;\n    filters?: GetCompressedAccountsFilter[];\n};\n\nexport interface ParsedTokenAccount {\n    compressedAccount: CompressedAccountWithMerkleContext;\n    parsed: TokenData;\n}\n\nexport type WithContext<T> = {\n    /** context */\n    context: {\n        slot: number;\n    };\n    /** response value */\n    value: T;\n};\n\nexport type WithCursor<T> = {\n    /** context */\n    cursor: string | null;\n    /** response value */\n    items: T;\n};\n\n/**\n * @internal\n */\nconst PublicKeyFromString = coerce(\n    instance(PublicKey),\n    string(),\n    value => new PublicKey(value),\n);\n\n/**\n * @internal\n */\nconst ArrayFromString = coerce(instance(Array<number>), string(), value =>\n    Array.from(new PublicKey(value).toBytes()),\n);\n\n/**\n * @internal\n */\nconst BN254FromString = coerce(instance(BN), string(), value => {\n    return createBN254(value, 'base58');\n});\n\nconst BNFromInt = coerce(instance(BN), number(), value => {\n    // Check if the number is safe\n    if (Number.isSafeInteger(value)) {\n        return bn(value);\n    } else {\n        // Convert to string if the number is unsafe\n        return bn(value.toString(), 10);\n    }\n});\n\n/**\n * @internal\n */\nconst Base64EncodedCompressedAccountDataResult = coerce(\n    string(),\n    string(),\n    value => (value === '' ? null : value),\n);\n/**\n * @internal\n */\nexport function createRpcResult<T, U>(result: Struct<T, U>) {\n    return union([\n        pick({\n            jsonrpc: literal('2.0'),\n            id: string(),\n            result,\n        }),\n        pick({\n            jsonrpc: literal('2.0'),\n            id: string(),\n            error: pick({\n                code: unknown(),\n                message: string(),\n                data: nullable(any()),\n            }),\n        }),\n    ]) as Struct<RpcResult<T>, null>;\n}\n\n/**\n * @internal\n */\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nexport function jsonRpcResult<T, U>(schema: Struct<T, U>) {\n    return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n        if ('error' in value) {\n            return value as RpcResultError;\n        } else {\n            return {\n                ...value,\n                result: create(value.result, schema),\n            } as RpcResultSuccess<T>;\n        }\n    }) as Struct<RpcResult<T>, null>;\n}\n\n// Add this type for the context wrapper\nexport type WithRpcContext<T> = {\n    context: {\n        slot: number;\n    };\n    value: T;\n};\n\n/**\n * @internal\n */\nexport function jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n    return jsonRpcResult(\n        pick({\n            context: pick({\n                slot: number(),\n            }),\n            value,\n        }),\n    ) as Struct<RpcResult<WithRpcContext<T>>, null>;\n}\n\n/**\n * @internal\n */\nexport const CompressedAccountResult = pick({\n    address: nullable(ArrayFromString),\n    hash: BN254FromString,\n    data: nullable(\n        pick({\n            data: Base64EncodedCompressedAccountDataResult,\n            dataHash: BN254FromString,\n            discriminator: BNFromInt,\n        }),\n    ),\n    lamports: BNFromInt,\n    owner: PublicKeyFromString,\n    leafIndex: number(),\n    tree: PublicKeyFromString,\n    seq: nullable(BNFromInt),\n    slotCreated: BNFromInt,\n});\n\nexport const TokenDataResult = pick({\n    mint: PublicKeyFromString,\n    owner: PublicKeyFromString,\n    amount: BNFromInt,\n    delegate: nullable(PublicKeyFromString),\n    state: string(),\n});\n\n/**\n * @internal\n */\nexport const CompressedTokenAccountResult = pick({\n    tokenData: TokenDataResult,\n    account: CompressedAccountResult,\n});\n\n/**\n * @internal\n */\nexport const MultipleCompressedAccountsResult = pick({\n    items: array(CompressedAccountResult),\n});\n\n/**\n * @internal\n */\nexport const CompressedAccountsByOwnerResult = pick({\n    items: array(CompressedAccountResult),\n    cursor: nullable(string()),\n});\n\n/**\n * @internal\n */\nexport const CompressedTokenAccountsByOwnerOrDelegateResult = pick({\n    items: array(CompressedTokenAccountResult),\n    cursor: nullable(string()),\n});\n\n/**\n * @internal\n */\nexport const SlotResult = number();\n\n/**\n * @internal\n */\nexport const HealthResult = string();\n\n/**\n * @internal\n */\nexport const LatestNonVotingSignaturesResult = pick({\n    items: array(\n        pick({\n            signature: string(),\n            slot: number(),\n            blockTime: number(),\n            error: nullable(string()),\n        }),\n    ),\n});\n\n/**\n * @internal\n */\nexport const LatestNonVotingSignaturesResultPaginated = pick({\n    items: array(\n        pick({\n            signature: string(),\n            slot: number(),\n            blockTime: number(),\n        }),\n    ),\n    cursor: nullable(string()),\n});\n\n/**\n * @internal\n */\nexport const MerkeProofResult = pick({\n    hash: BN254FromString,\n    leafIndex: number(),\n    merkleTree: PublicKeyFromString,\n    proof: array(BN254FromString),\n    rootSeq: number(),\n    root: BN254FromString,\n});\n\n/**\n * @internal\n */\nexport const NewAddressProofResult = pick({\n    address: BN254FromString,\n    nextIndex: number(),\n    merkleTree: PublicKeyFromString,\n    proof: array(BN254FromString), // this is: merkleProofHashedIndexedElementLeaf\n    rootSeq: number(),\n    root: BN254FromString,\n    lowerRangeAddress: BN254FromString, // this is: leafLowerRangeValue.\n    higherRangeAddress: BN254FromString, // this is: leafHigherRangeValue\n    lowElementLeafIndex: number(), // this is: indexHashedIndexedElementLeaf\n});\n\n/**\n * @internal\n */\nconst CompressedProofResult = pick({\n    a: array(number()),\n    b: array(number()),\n    c: array(number()),\n});\n\n/**\n * @internal\n */\nexport const ValidityProofResult = pick({\n    compressedProof: CompressedProofResult,\n    leafIndices: array(number()),\n    leaves: array(BN254FromString),\n    rootIndices: array(number()),\n    roots: array(BN254FromString),\n    merkleTrees: array(PublicKeyFromString),\n    // TODO: enable nullifierQueues\n    // nullifierQueues: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nexport const MultipleMerkleProofsResult = array(MerkeProofResult);\n\n/**\n * @internal\n */\nexport const BalanceResult = pick({\n    amount: BNFromInt,\n});\n\nexport const NativeBalanceResult = BNFromInt;\n\nexport const TokenBalanceResult = pick({\n    balance: BNFromInt,\n    mint: PublicKeyFromString,\n});\n\nexport const TokenBalanceListResult = pick({\n    tokenBalances: array(TokenBalanceResult),\n    cursor: nullable(string()),\n});\n\nexport const TokenBalanceListResultV2 = pick({\n    items: array(TokenBalanceResult),\n    cursor: nullable(string()),\n});\n\nexport const CompressedMintTokenHoldersResult = pick({\n    cursor: nullable(string()),\n    items: array(\n        pick({\n            balance: BNFromInt,\n            owner: PublicKeyFromString,\n        }),\n    ),\n});\n\nexport const AccountProofResult = pick({\n    hash: array(number()),\n    root: array(number()),\n    proof: array(array(number())),\n});\n\nexport const toUnixTimestamp = (blockTime: string): number => {\n    return new Date(blockTime).getTime();\n};\n\nexport const SignatureListResult = pick({\n    items: array(\n        pick({\n            blockTime: number(),\n            signature: string(),\n            slot: number(),\n        }),\n    ),\n});\n\nexport const SignatureListWithCursorResult = pick({\n    items: array(\n        pick({\n            blockTime: number(),\n            signature: string(),\n            slot: number(),\n        }),\n    ),\n    cursor: nullable(string()),\n});\n\nexport const CompressedTransactionResult = pick({\n    compressionInfo: pick({\n        closedAccounts: array(\n            pick({\n                account: CompressedAccountResult,\n                optionalTokenData: nullable(TokenDataResult),\n            }),\n        ),\n        openedAccounts: array(\n            pick({\n                account: CompressedAccountResult,\n                optionalTokenData: nullable(TokenDataResult),\n            }),\n        ),\n    }),\n    /// TODO: add transaction struct\n    /// https://github.com/solana-labs/solana/blob/27eff8408b7223bb3c4ab70523f8a8dca3ca6645/transaction-status/src/lib.rs#L1061\n    transaction: any(),\n});\n\nexport interface CompressionApiInterface {\n    getCompressedAccount(\n        address?: BN254,\n        hash?: BN254,\n    ): Promise<CompressedAccountWithMerkleContext | null>;\n\n    getCompressedBalance(address?: BN254, hash?: BN254): Promise<BN | null>;\n\n    getCompressedBalanceByOwner(owner: PublicKey): Promise<BN>;\n\n    getCompressedAccountProof(\n        hash: BN254,\n    ): Promise<MerkleContextWithMerkleProof>;\n\n    getMultipleCompressedAccounts(\n        hashes: BN254[],\n    ): Promise<CompressedAccountWithMerkleContext[]>;\n\n    getMultipleCompressedAccountProofs(\n        hashes: BN254[],\n    ): Promise<MerkleContextWithMerkleProof[]>;\n\n    getValidityProof(\n        hashes: BN254[],\n        newAddresses: BN254[],\n    ): Promise<CompressedProofWithContext>;\n\n    getValidityProofV0(\n        hashes: HashWithTree[],\n        newAddresses: AddressWithTree[],\n    ): Promise<CompressedProofWithContext>;\n\n    getValidityProofAndRpcContext(\n        hashes: HashWithTree[],\n        newAddresses: AddressWithTree[],\n    ): Promise<WithContext<CompressedProofWithContext>>;\n\n    getCompressedAccountsByOwner(\n        owner: PublicKey,\n        config?: GetCompressedAccountsByOwnerConfig,\n    ): Promise<WithCursor<CompressedAccountWithMerkleContext[]>>;\n\n    getCompressedMintTokenHolders(\n        mint: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithContext<WithCursor<CompressedMintTokenHolders[]>>>;\n\n    getCompressedTokenAccountsByOwner(\n        publicKey: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<ParsedTokenAccount[]>>;\n\n    getCompressedTokenAccountsByDelegate(\n        delegate: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<ParsedTokenAccount[]>>;\n\n    getCompressedTokenAccountBalance(hash: BN254): Promise<{ amount: BN }>;\n\n    getCompressedTokenBalancesByOwner(\n        publicKey: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<TokenBalance[]>>;\n\n    getCompressedTokenBalancesByOwnerV2(\n        publicKey: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithContext<WithCursor<TokenBalance[]>>>;\n\n    getTransactionWithCompressionInfo(\n        signature: string,\n    ): Promise<CompressedTransaction | null>;\n\n    getCompressionSignaturesForAccount(\n        hash: BN254,\n    ): Promise<SignatureWithMetadata[]>;\n\n    getCompressionSignaturesForAddress(\n        address: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>>;\n\n    getCompressionSignaturesForOwner(\n        owner: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>>;\n\n    getCompressionSignaturesForTokenOwner(\n        owner: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>>;\n\n    getLatestNonVotingSignatures(\n        limit?: number,\n        cursor?: string,\n    ): Promise<LatestNonVotingSignatures>;\n\n    getLatestCompressionSignatures(\n        cursor?: string,\n        limit?: number,\n    ): Promise<LatestNonVotingSignaturesPaginated>;\n\n    getIndexerHealth(): Promise<string>;\n\n    getIndexerSlot(): Promise<number>;\n}\n\n// Public types for consumers\nexport type RpcResultSuccess<T> = {\n    jsonrpc: '2.0';\n    id: string;\n    result: T;\n};\n\nexport type RpcResultError = {\n    jsonrpc: '2.0';\n    id: string;\n    error: {\n        code: unknown;\n        message: string;\n        data?: any;\n    };\n};\n\nexport type RpcResult<T> = RpcResultSuccess<T> | RpcResultError;\n","import {\n    Connection,\n    ConnectionConfig,\n    SolanaJSONRPCError,\n    PublicKey,\n} from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport {\n    BalanceResult,\n    CompressedAccountResult,\n    CompressedAccountsByOwnerResult,\n    CompressedProofWithContext,\n    CompressedTokenAccountsByOwnerOrDelegateResult,\n    CompressedTransaction,\n    CompressedTransactionResult,\n    CompressionApiInterface,\n    GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    HealthResult,\n    HexInputsForProver,\n    MerkeProofResult,\n    MultipleCompressedAccountsResult,\n    NativeBalanceResult,\n    ParsedTokenAccount,\n    SignatureListResult,\n    SignatureListWithCursorResult,\n    SignatureWithMetadata,\n    SlotResult,\n    TokenBalanceListResult,\n    jsonRpcResult,\n    jsonRpcResultAndContext,\n    ValidityProofResult,\n    NewAddressProofResult,\n    LatestNonVotingSignaturesResult,\n    LatestNonVotingSignatures,\n    LatestNonVotingSignaturesResultPaginated,\n    LatestNonVotingSignaturesPaginated,\n    WithContext,\n    GetCompressedAccountsByOwnerConfig,\n    WithCursor,\n    AddressWithTree,\n    HashWithTree,\n    CompressedMintTokenHoldersResult,\n    CompressedMintTokenHolders,\n    TokenBalance,\n    TokenBalanceListResultV2,\n    PaginatedOptions,\n} from './rpc-interface';\nimport {\n    MerkleContextWithMerkleProof,\n    BN254,\n    bn,\n    CompressedAccountWithMerkleContext,\n    encodeBN254toBase58,\n    createCompressedAccountWithMerkleContext,\n    createMerkleContext,\n    TokenData,\n    CompressedProof,\n} from './state';\nimport { array, create, nullable } from 'superstruct';\nimport { defaultTestStateTreeAccounts } from './constants';\nimport { BN } from '@coral-xyz/anchor';\nimport { toCamelCase, toHex } from './utils/conversion';\n\nimport {\n    proofFromJsonStruct,\n    negateAndCompressProof,\n} from './utils/parse-validity-proof';\n\n/** @internal */\nexport function parseAccountData({\n    discriminator,\n    data,\n    dataHash,\n}: {\n    discriminator: BN;\n    data: string;\n    dataHash: BN;\n}) {\n    return {\n        discriminator: discriminator.toArray('le', 8),\n        data: Buffer.from(data, 'base64'),\n        dataHash: dataHash.toArray('le', 32),\n    };\n}\n\n/** @internal */\nasync function getCompressedTokenAccountsByOwnerOrDelegate(\n    rpc: Rpc,\n    ownerOrDelegate: PublicKey,\n    options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    filterByDelegate: boolean = false,\n): Promise<WithCursor<ParsedTokenAccount[]>> {\n    const endpoint = filterByDelegate\n        ? 'getCompressedTokenAccountsByDelegate'\n        : 'getCompressedTokenAccountsByOwner';\n    const propertyToCheck = filterByDelegate ? 'delegate' : 'owner';\n\n    const unsafeRes = await rpcRequest(rpc.compressionApiEndpoint, endpoint, {\n        [propertyToCheck]: ownerOrDelegate.toBase58(),\n        mint: options.mint?.toBase58(),\n        limit: options.limit?.toNumber(),\n        cursor: options.cursor,\n    });\n\n    const res = create(\n        unsafeRes,\n        jsonRpcResultAndContext(CompressedTokenAccountsByOwnerOrDelegateResult),\n    );\n    if ('error' in res) {\n        throw new SolanaJSONRPCError(\n            res.error,\n            `failed to get info for compressed accounts by ${propertyToCheck} ${ownerOrDelegate.toBase58()}`,\n        );\n    }\n    if (res.result.value === null) {\n        throw new Error('not implemented: NULL result');\n    }\n    const accounts: ParsedTokenAccount[] = [];\n\n    res.result.value.items.map(item => {\n        const _account = item.account;\n        const _tokenData = item.tokenData;\n\n        const compressedAccount: CompressedAccountWithMerkleContext =\n            createCompressedAccountWithMerkleContext(\n                createMerkleContext(\n                    _account.tree!,\n                    mockNullifierQueue,\n                    _account.hash.toArray('be', 32),\n                    _account.leafIndex,\n                ),\n                _account.owner,\n                bn(_account.lamports),\n                _account.data ? parseAccountData(_account.data) : undefined,\n                _account.address || undefined,\n            );\n\n        const parsed: TokenData = {\n            mint: _tokenData.mint,\n            owner: _tokenData.owner,\n            amount: _tokenData.amount,\n            delegate: _tokenData.delegate,\n            state: ['uninitialized', 'initialized', 'frozen'].indexOf(\n                _tokenData.state,\n            ),\n            tlv: null,\n        };\n\n        if (\n            parsed[propertyToCheck]?.toBase58() !== ownerOrDelegate.toBase58()\n        ) {\n            throw new Error(\n                `RPC returned token account with ${propertyToCheck} different from requested ${propertyToCheck}`,\n            );\n        }\n\n        accounts.push({\n            compressedAccount,\n            parsed,\n        });\n    });\n    /// TODO: consider custom or different sort. Most recent here.\n    return {\n        items: accounts.sort(\n            (a, b) =>\n                b.compressedAccount.leafIndex - a.compressedAccount.leafIndex,\n        ),\n        cursor: res.result.value.cursor,\n    };\n}\n\n/** @internal */\nfunction buildCompressedAccountWithMaybeTokenData(\n    accountStructWithOptionalTokenData: any,\n): {\n    account: CompressedAccountWithMerkleContext;\n    maybeTokenData: TokenData | null;\n} {\n    const compressedAccountResult = accountStructWithOptionalTokenData.account;\n    const tokenDataResult =\n        accountStructWithOptionalTokenData.optionalTokenData;\n\n    const compressedAccount: CompressedAccountWithMerkleContext =\n        createCompressedAccountWithMerkleContext(\n            createMerkleContext(\n                compressedAccountResult.merkleTree,\n                mockNullifierQueue,\n                compressedAccountResult.hash.toArray('be', 32),\n                compressedAccountResult.leafIndex,\n            ),\n            compressedAccountResult.owner,\n            bn(compressedAccountResult.lamports),\n            compressedAccountResult.data\n                ? parseAccountData(compressedAccountResult.data)\n                : undefined,\n            compressedAccountResult.address || undefined,\n        );\n\n    if (tokenDataResult === null) {\n        return { account: compressedAccount, maybeTokenData: null };\n    }\n\n    const parsed: TokenData = {\n        mint: tokenDataResult.mint,\n        owner: tokenDataResult.owner,\n        amount: tokenDataResult.amount,\n        delegate: tokenDataResult.delegate,\n        state: ['uninitialized', 'initialized', 'frozen'].indexOf(\n            tokenDataResult.state,\n        ),\n        tlv: null,\n    };\n\n    return { account: compressedAccount, maybeTokenData: parsed };\n}\n\n/**\n * Establish a Compression-compatible JSON RPC connection\n *\n * @param endpointOrWeb3JsConnection    endpoint to the solana cluster or\n *                                      Connection object\n * @param compressionApiEndpoint        Endpoint to the compression server\n * @param proverEndpoint                Endpoint to the prover server. defaults\n *                                      to endpoint\n * @param connectionConfig              Optional connection config\n */\nexport function createRpc(\n    endpointOrWeb3JsConnection: string | Connection = 'http://127.0.0.1:8899',\n    compressionApiEndpoint: string = 'http://127.0.0.1:8784',\n    proverEndpoint: string = 'http://127.0.0.1:3001',\n    config?: ConnectionConfig,\n): Rpc {\n    const endpoint =\n        typeof endpointOrWeb3JsConnection === 'string'\n            ? endpointOrWeb3JsConnection\n            : endpointOrWeb3JsConnection.rpcEndpoint;\n    return new Rpc(endpoint, compressionApiEndpoint, proverEndpoint, config);\n}\n\n/** @internal */\nexport const rpcRequest = async (\n    rpcEndpoint: string,\n    method: string,\n    params: any = [],\n    convertToCamelCase = true,\n    debug = false,\n): Promise<any> => {\n    const body = JSON.stringify({\n        jsonrpc: '2.0',\n        id: 'test-account',\n        method: method,\n        params: params,\n    });\n\n    if (debug) {\n        const generateCurlSnippet = () => {\n            const escapedBody = body.replace(/\"/g, '\\\\\"');\n            return `curl -X POST ${rpcEndpoint} \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -d \"${escapedBody}\"`;\n        };\n\n        console.log('Debug: Stack trace:');\n        console.log(new Error().stack);\n        console.log('\\nDebug: curl:');\n        console.log(generateCurlSnippet());\n        console.log('\\n');\n    }\n\n    const response = await fetch(rpcEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: body,\n    });\n\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    if (convertToCamelCase) {\n        const res = await response.json();\n        return toCamelCase(res);\n    }\n    return await response.json();\n};\n\n/** @internal */\nexport const proverRequest = async (\n    proverEndpoint: string,\n    method: 'inclusion' | 'new-address' | 'combined',\n    params: any = [],\n    log = false,\n): Promise<CompressedProof> => {\n    let logMsg: string = '';\n\n    if (log) {\n        logMsg = `Proof generation for method:${method}`;\n        console.time(logMsg);\n    }\n\n    let body;\n    if (method === 'inclusion') {\n        body = JSON.stringify({ 'input-compressed-accounts': params });\n    } else if (method === 'new-address') {\n        body = JSON.stringify({ 'new-addresses': params });\n    } else if (method === 'combined') {\n        body = JSON.stringify({\n            'input-compressed-accounts': params[0],\n            'new-addresses': params[1],\n        });\n    }\n\n    const response = await fetch(`${proverEndpoint}/prove`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: body,\n    });\n\n    if (!response.ok) {\n        throw new Error(`Error fetching proof: ${response.statusText}`);\n    }\n    const data: any = await response.json();\n    const parsed = proofFromJsonStruct(data);\n    const compressedProof = negateAndCompressProof(parsed);\n\n    if (log) console.timeEnd(logMsg);\n\n    return compressedProof;\n};\n\nexport type NonInclusionMerkleProofInputs = {\n    root: BN;\n    value: BN;\n    leaf_lower_range_value: BN;\n    leaf_higher_range_value: BN;\n    nextIndex: BN;\n    merkle_proof_hashed_indexed_element_leaf: BN[];\n    index_hashed_indexed_element_leaf: BN;\n};\n\nexport type MerkleContextWithNewAddressProof = {\n    root: BN;\n    rootIndex: number;\n    value: BN;\n    leafLowerRangeValue: BN;\n    leafHigherRangeValue: BN;\n    nextIndex: BN;\n    merkleProofHashedIndexedElementLeaf: BN[];\n    indexHashedIndexedElementLeaf: BN;\n    merkleTree: PublicKey;\n    nullifierQueue: PublicKey;\n};\n\nexport type NonInclusionJsonStruct = {\n    root: string;\n    value: string;\n    pathIndex: number;\n    pathElements: string[];\n    leafLowerRangeValue: string;\n    leafHigherRangeValue: string;\n    nextIndex: number;\n};\n\nexport function convertMerkleProofsWithContextToHex(\n    merkleProofsWithContext: MerkleContextWithMerkleProof[],\n): HexInputsForProver[] {\n    const inputs: HexInputsForProver[] = [];\n\n    for (let i = 0; i < merkleProofsWithContext.length; i++) {\n        const input: HexInputsForProver = {\n            root: toHex(merkleProofsWithContext[i].root),\n            pathIndex: merkleProofsWithContext[i].leafIndex,\n            pathElements: merkleProofsWithContext[i].merkleProof.map(hex =>\n                toHex(hex),\n            ),\n            leaf: toHex(bn(merkleProofsWithContext[i].hash)),\n        };\n        inputs.push(input);\n    }\n\n    return inputs;\n}\n\nexport function convertNonInclusionMerkleProofInputsToHex(\n    nonInclusionMerkleProofInputs: MerkleContextWithNewAddressProof[],\n): NonInclusionJsonStruct[] {\n    const inputs: NonInclusionJsonStruct[] = [];\n    for (let i = 0; i < nonInclusionMerkleProofInputs.length; i++) {\n        const input: NonInclusionJsonStruct = {\n            root: toHex(nonInclusionMerkleProofInputs[i].root),\n            value: toHex(nonInclusionMerkleProofInputs[i].value),\n            pathIndex:\n                nonInclusionMerkleProofInputs[\n                    i\n                ].indexHashedIndexedElementLeaf.toNumber(),\n            pathElements: nonInclusionMerkleProofInputs[\n                i\n            ].merkleProofHashedIndexedElementLeaf.map(hex => toHex(hex)),\n            nextIndex: nonInclusionMerkleProofInputs[i].nextIndex.toNumber(),\n            leafLowerRangeValue: toHex(\n                nonInclusionMerkleProofInputs[i].leafLowerRangeValue,\n            ),\n            leafHigherRangeValue: toHex(\n                nonInclusionMerkleProofInputs[i].leafHigherRangeValue,\n            ),\n        };\n        inputs.push(input);\n    }\n    return inputs;\n}\n\n/// TODO: replace with dynamic nullifierQueue\nconst mockNullifierQueue = defaultTestStateTreeAccounts().nullifierQueue;\nconst mockAddressQueue = defaultTestStateTreeAccounts().addressQueue;\n\n/**\n *\n */\nexport class Rpc extends Connection implements CompressionApiInterface {\n    compressionApiEndpoint: string;\n    proverEndpoint: string;\n\n    /**\n     * Establish a Compression-compatible JSON RPC connection\n     *\n     * @param endpoint                      Endpoint to the solana cluster\n     * @param compressionApiEndpoint        Endpoint to the compression server\n     * @param proverEndpoint                Endpoint to the prover server.\n     * @param connectionConfig              Optional connection config\n     */\n    constructor(\n        endpoint: string,\n        compressionApiEndpoint: string,\n        proverEndpoint: string,\n        config?: ConnectionConfig,\n    ) {\n        super(endpoint, config || 'confirmed');\n        this.compressionApiEndpoint = compressionApiEndpoint;\n        this.proverEndpoint = proverEndpoint;\n    }\n\n    /**\n     * Fetch the compressed account for the specified account address or hash\n     */\n    async getCompressedAccount(\n        address?: BN254,\n        hash?: BN254,\n    ): Promise<CompressedAccountWithMerkleContext | null> {\n        if (!hash && !address) {\n            throw new Error('Either hash or address must be provided');\n        }\n        if (hash && address) {\n            throw new Error('Only one of hash or address must be provided');\n        }\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedAccount',\n            {\n                hash: hash ? encodeBN254toBase58(hash) : undefined,\n                address: address ? encodeBN254toBase58(address) : undefined,\n            },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(nullable(CompressedAccountResult)),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get info for compressed account ${hash ? hash.toString() : address ? address.toString() : ''}`,\n            );\n        }\n        if (res.result.value === null) {\n            return null;\n        }\n        const item = res.result.value;\n        const account = createCompressedAccountWithMerkleContext(\n            createMerkleContext(\n                item.tree!,\n                mockNullifierQueue,\n                item.hash.toArray('be', 32),\n                item.leafIndex,\n            ),\n            item.owner,\n            bn(item.lamports),\n            item.data ? parseAccountData(item.data) : undefined,\n            item.address || undefined,\n        );\n        return account;\n    }\n\n    /**\n     * Fetch the compressed balance for the specified account address or hash\n     */\n    async getCompressedBalance(address?: BN254, hash?: BN254): Promise<BN> {\n        if (!hash && !address) {\n            throw new Error('Either hash or address must be provided');\n        }\n        if (hash && address) {\n            throw new Error('Only one of hash or address must be provided');\n        }\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedBalance',\n            {\n                hash: hash ? encodeBN254toBase58(hash) : undefined,\n                address: address ? encodeBN254toBase58(address) : undefined,\n            },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(NativeBalanceResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get balance for compressed account ${hash ? hash.toString() : address ? address.toString() : ''}`,\n            );\n        }\n        if (res.result.value === null) {\n            return bn(0);\n        }\n\n        return bn(res.result.value);\n    }\n\n    /// TODO: validate that this is just for sol accounts\n    /**\n     * Fetch the total compressed balance for the specified owner public key\n     */\n    async getCompressedBalanceByOwner(owner: PublicKey): Promise<BN> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedBalanceByOwner',\n            { owner: owner.toBase58() },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(NativeBalanceResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get balance for compressed account ${owner.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            return bn(0);\n        }\n        return bn(res.result.value);\n    }\n\n    /**\n     * Fetch the latest merkle proof for the specified account hash from the\n     * cluster\n     */\n    async getCompressedAccountProof(\n        hash: BN254,\n    ): Promise<MerkleContextWithMerkleProof> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedAccountProof',\n            { hash: encodeBN254toBase58(hash) },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(MerkeProofResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get proof for compressed account ${hash.toString()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get proof for compressed account ${hash.toString()}`,\n            );\n        }\n\n        const value: MerkleContextWithMerkleProof = {\n            hash: res.result.value.hash.toArray('be', 32),\n            merkleTree: res.result.value.merkleTree,\n            leafIndex: res.result.value.leafIndex,\n            merkleProof: res.result.value.proof,\n            nullifierQueue: mockNullifierQueue, // TODO(photon): support nullifierQueue in response.\n            rootIndex: res.result.value.rootSeq % 2400,\n            root: res.result.value.root,\n        };\n        return value;\n    }\n\n    /**\n     * Fetch all the account info for multiple compressed accounts specified by\n     * an array of account hashes\n     */\n    async getMultipleCompressedAccounts(\n        hashes: BN254[],\n    ): Promise<CompressedAccountWithMerkleContext[]> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getMultipleCompressedAccounts',\n            { hashes: hashes.map(hash => encodeBN254toBase58(hash)) },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(MultipleCompressedAccountsResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get info for compressed accounts ${hashes.map(hash => encodeBN254toBase58(hash)).join(', ')}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get info for compressed accounts ${hashes.map(hash => encodeBN254toBase58(hash)).join(', ')}`,\n            );\n        }\n        const accounts: CompressedAccountWithMerkleContext[] = [];\n        res.result.value.items.map(item => {\n            const account = createCompressedAccountWithMerkleContext(\n                createMerkleContext(\n                    item.tree!,\n                    mockNullifierQueue,\n                    item.hash.toArray('be', 32),\n                    item.leafIndex,\n                ),\n                item.owner,\n                bn(item.lamports),\n                item.data ? parseAccountData(item.data) : undefined,\n                item.address || undefined,\n            );\n            accounts.push(account);\n        });\n\n        return accounts.sort((a, b) => b.leafIndex - a.leafIndex);\n    }\n\n    /**\n     * Fetch the latest merkle proofs for multiple compressed accounts specified\n     * by an array account hashes\n     */\n    async getMultipleCompressedAccountProofs(\n        hashes: BN254[],\n    ): Promise<MerkleContextWithMerkleProof[]> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getMultipleCompressedAccountProofs',\n            hashes.map(hash => encodeBN254toBase58(hash)),\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(array(MerkeProofResult)),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get proofs for compressed accounts ${hashes.map(hash => encodeBN254toBase58(hash)).join(', ')}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get proofs for compressed accounts ${hashes.map(hash => encodeBN254toBase58(hash)).join(', ')}`,\n            );\n        }\n\n        const merkleProofs: MerkleContextWithMerkleProof[] = [];\n\n        for (const proof of res.result.value) {\n            const value: MerkleContextWithMerkleProof = {\n                hash: proof.hash.toArray('be', 32),\n                merkleTree: proof.merkleTree,\n                leafIndex: proof.leafIndex,\n                merkleProof: proof.proof,\n                nullifierQueue: mockAddressQueue, // TODO(photon): support nullifierQueue in response.\n                rootIndex: proof.rootSeq % 2400,\n                root: proof.root,\n            };\n            merkleProofs.push(value);\n        }\n        return merkleProofs;\n    }\n\n    /**\n     * Fetch all the compressed accounts owned by the specified public key.\n     * Owner can be a program or user account\n     */\n    async getCompressedAccountsByOwner(\n        owner: PublicKey,\n        config?: GetCompressedAccountsByOwnerConfig | undefined,\n    ): Promise<WithCursor<CompressedAccountWithMerkleContext[]>> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedAccountsByOwner',\n            {\n                owner: owner.toBase58(),\n                filters: config?.filters || [],\n                dataSlice: config?.dataSlice,\n                cursor: config?.cursor,\n                limit: config?.limit?.toNumber(),\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(CompressedAccountsByOwnerResult),\n        );\n\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get info for compressed accounts owned by ${owner.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            return {\n                items: [],\n                cursor: null,\n            };\n        }\n        const accounts: CompressedAccountWithMerkleContext[] = [];\n\n        res.result.value.items.map(item => {\n            const account = createCompressedAccountWithMerkleContext(\n                createMerkleContext(\n                    item.tree!,\n                    mockNullifierQueue,\n                    item.hash.toArray('be', 32),\n                    item.leafIndex,\n                ),\n                item.owner,\n                bn(item.lamports),\n                item.data ? parseAccountData(item.data) : undefined,\n                item.address || undefined,\n            );\n\n            accounts.push(account);\n        });\n\n        return {\n            items: accounts.sort((a, b) => b.leafIndex - a.leafIndex),\n            cursor: res.result.value.cursor,\n        };\n    }\n\n    /**\n     * Fetch all the compressed token accounts owned by the specified public\n     * key. Owner can be a program or user account\n     */\n    async getCompressedTokenAccountsByOwner(\n        owner: PublicKey,\n        options?: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<ParsedTokenAccount[]>> {\n        if (!options) options = {};\n\n        return await getCompressedTokenAccountsByOwnerOrDelegate(\n            this,\n            owner,\n            options,\n            false,\n        );\n    }\n\n    /**\n     * Fetch all the compressed accounts delegated to the specified public key.\n     */\n    async getCompressedTokenAccountsByDelegate(\n        delegate: PublicKey,\n        options?: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<ParsedTokenAccount[]>> {\n        if (!options) options = {};\n\n        return getCompressedTokenAccountsByOwnerOrDelegate(\n            this,\n            delegate,\n            options,\n            true,\n        );\n    }\n\n    /**\n     * Fetch the compressed token balance for the specified account hash\n     */\n    async getCompressedTokenAccountBalance(\n        hash: BN254,\n    ): Promise<{ amount: BN }> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedTokenAccountBalance',\n            { hash: encodeBN254toBase58(hash) },\n        );\n        const res = create(unsafeRes, jsonRpcResultAndContext(BalanceResult));\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get balance for compressed token account ${hash.toString()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get balance for compressed token account ${hash.toString()}`,\n            );\n        }\n\n        return { amount: bn(res.result.value.amount) };\n    }\n\n    /**\n     * @deprecated use {@link getCompressedTokenBalancesByOwnerV2} instead.\n     *\n     * Fetch all the compressed token balances owned by the specified public\n     * key. Can filter by mint. Returns without context.\n     */\n    async getCompressedTokenBalancesByOwner(\n        owner: PublicKey,\n        options?: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<TokenBalance[]>> {\n        if (!options) options = {};\n\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedTokenBalancesByOwner',\n            {\n                owner: owner.toBase58(),\n                mint: options.mint?.toBase58(),\n                limit: options.limit?.toNumber(),\n                cursor: options.cursor,\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(TokenBalanceListResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get compressed token balances for owner ${owner.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get compressed token balances for owner ${owner.toBase58()}`,\n            );\n        }\n\n        const maybeFiltered = options.mint\n            ? res.result.value.tokenBalances.filter(\n                  tokenBalance =>\n                      tokenBalance.mint.toBase58() === options.mint!.toBase58(),\n              )\n            : res.result.value.tokenBalances;\n\n        return {\n            items: maybeFiltered,\n            cursor: res.result.value.cursor,\n        };\n    }\n\n    /**\n     * Fetch the compressed token balances owned by the specified public\n     * key. Paginated. Can filter by mint. Returns with context.\n     */\n    async getCompressedTokenBalancesByOwnerV2(\n        owner: PublicKey,\n        options?: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithContext<WithCursor<TokenBalance[]>>> {\n        if (!options) options = {};\n\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedTokenBalancesByOwnerV2',\n            {\n                owner: owner.toBase58(),\n                mint: options.mint?.toBase58(),\n                limit: options.limit?.toNumber(),\n                cursor: options.cursor,\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(TokenBalanceListResultV2),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get compressed token balances for owner ${owner.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get compressed token balances for owner ${owner.toBase58()}`,\n            );\n        }\n\n        const maybeFiltered = options.mint\n            ? res.result.value.items.filter(\n                  tokenBalance =>\n                      tokenBalance.mint.toBase58() === options.mint!.toBase58(),\n              )\n            : res.result.value.items;\n\n        return {\n            context: res.result.context,\n            value: {\n                items: maybeFiltered,\n                cursor: res.result.value.cursor,\n            },\n        };\n    }\n\n    /**\n     * Returns confirmed compression signatures for transactions involving the specified\n     * account hash forward in time from genesis to the most recent confirmed\n     * block\n     *\n     * @param hash queried account hash\n     */\n    async getCompressionSignaturesForAccount(\n        hash: BN254,\n    ): Promise<SignatureWithMetadata[]> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressionSignaturesForAccount',\n            { hash: encodeBN254toBase58(hash) },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(SignatureListResult),\n        );\n\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get signatures for compressed account ${hash.toString()}`,\n            );\n        }\n        return res.result.value.items;\n    }\n\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster. Return with\n     * CompressionInfo\n     */\n    async getTransactionWithCompressionInfo(\n        signature: string,\n    ): Promise<CompressedTransaction | null> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getTransactionWithCompressionInfo',\n            { signature },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResult(CompressedTransactionResult),\n        );\n\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n        }\n\n        if (res.result.transaction === null) return null;\n\n        const closedAccounts: {\n            account: CompressedAccountWithMerkleContext;\n            maybeTokenData: TokenData | null;\n        }[] = [];\n\n        const openedAccounts: {\n            account: CompressedAccountWithMerkleContext;\n            maybeTokenData: TokenData | null;\n        }[] = [];\n\n        res.result.compressionInfo.closedAccounts.map(item => {\n            closedAccounts.push(buildCompressedAccountWithMaybeTokenData(item));\n        });\n        res.result.compressionInfo.openedAccounts.map(item => {\n            openedAccounts.push(buildCompressedAccountWithMaybeTokenData(item));\n        });\n\n        const calculateTokenBalances = (\n            accounts: Array<{\n                account: CompressedAccountWithMerkleContext;\n                maybeTokenData: TokenData | null;\n            }>,\n        ):\n            | Array<{\n                  owner: PublicKey;\n                  mint: PublicKey;\n                  amount: BN;\n              }>\n            | undefined => {\n            const balances = Object.values(\n                accounts.reduce(\n                    (acc, { maybeTokenData }) => {\n                        if (maybeTokenData) {\n                            const { owner, mint, amount } = maybeTokenData;\n                            const key = `${owner.toBase58()}_${mint.toBase58()}`;\n                            if (key in acc) {\n                                acc[key].amount = acc[key].amount.add(amount);\n                            } else {\n                                acc[key] = { owner, mint, amount };\n                            }\n                        }\n                        return acc;\n                    },\n                    {} as {\n                        [key: string]: {\n                            owner: PublicKey;\n                            mint: PublicKey;\n                            amount: BN;\n                        };\n                    },\n                ),\n            );\n            return balances.length > 0 ? balances : undefined;\n        };\n\n        const preTokenBalances = calculateTokenBalances(closedAccounts);\n        const postTokenBalances = calculateTokenBalances(openedAccounts);\n\n        return {\n            compressionInfo: {\n                closedAccounts,\n                openedAccounts,\n                preTokenBalances,\n                postTokenBalances,\n            },\n            transaction: res.result.transaction,\n        };\n    }\n\n    /**\n     * Returns confirmed signatures for transactions involving the specified\n     * address forward in time from genesis to the most recent confirmed block\n     *\n     * @param address queried compressed account address\n     */\n    async getCompressionSignaturesForAddress(\n        address: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressionSignaturesForAddress',\n            {\n                address: address.toBase58(),\n                cursor: options?.cursor,\n                limit: options?.limit?.toNumber(),\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(SignatureListWithCursorResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get signatures for address ${address.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get signatures for address ${address.toBase58()}`,\n            );\n        }\n\n        return res.result.value;\n    }\n\n    /**\n     * Returns confirmed signatures for compression transactions involving the\n     * specified account owner forward in time from genesis to the\n     * most recent confirmed block\n     *\n     * @param owner queried owner public key\n     */\n    async getCompressionSignaturesForOwner(\n        owner: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressionSignaturesForOwner',\n            {\n                owner: owner.toBase58(),\n                cursor: options?.cursor,\n                limit: options?.limit?.toNumber(),\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(SignatureListWithCursorResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get signatures for owner ${owner.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get signatures for owner ${owner.toBase58()}`,\n            );\n        }\n\n        return res.result.value;\n    }\n\n    /**\n     * Returns confirmed signatures for compression transactions involving the\n     * specified token account owner forward in time from genesis to the most\n     * recent confirmed block\n     */\n    async getCompressionSignaturesForTokenOwner(\n        owner: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressionSignaturesForTokenOwner',\n            {\n                owner: owner.toBase58(),\n                cursor: options?.cursor,\n                limit: options?.limit?.toNumber(),\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(SignatureListWithCursorResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get signatures for owner ${owner.toBase58()}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get signatures for owner ${owner.toBase58()}`,\n            );\n        }\n\n        return res.result.value;\n    }\n\n    /**\n     * Fetch the current indexer health status\n     */\n    async getIndexerHealth(): Promise<string> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getIndexerHealth',\n        );\n        const res = create(unsafeRes, jsonRpcResult(HealthResult));\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(res.error, 'failed to get health');\n        }\n        return res.result;\n    }\n\n    /**\n     * Ensure that the Compression Indexer has already indexed the transaction\n     */\n    async confirmTransactionIndexed(slot: number): Promise<boolean> {\n        const startTime = Date.now();\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const indexerSlot = await this.getIndexerSlot();\n\n            if (indexerSlot >= slot) {\n                return true;\n            }\n            if (Date.now() - startTime > 20000) {\n                // 20 seconds\n                throw new Error(\n                    'Timeout: Indexer slot did not reach the required slot within 20 seconds',\n                );\n            }\n            await new Promise(resolve => setTimeout(resolve, 200));\n        }\n    }\n\n    /**\n     * Fetch the current slot that the node is processing\n     */\n    async getIndexerSlot(): Promise<number> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getIndexerSlot',\n        );\n        const res = create(unsafeRes, jsonRpcResult(SlotResult));\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n        }\n        return res.result;\n    }\n\n    /**\n     * Fetch all the compressed token holders for a given mint. Paginated.\n     */\n    async getCompressedMintTokenHolders(\n        mint: PublicKey,\n        options?: PaginatedOptions,\n    ): Promise<WithContext<WithCursor<CompressedMintTokenHolders[]>>> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getCompressedMintTokenHolders',\n            {\n                mint: mint.toBase58(),\n                cursor: options?.cursor,\n                limit: options?.limit?.toNumber(),\n            },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(CompressedMintTokenHoldersResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get mint token holders',\n            );\n        }\n\n        return res.result;\n    }\n    /**\n     * Fetch the latest compression signatures on the cluster. Results are\n     * paginated.\n     */\n    async getLatestCompressionSignatures(\n        cursor?: string,\n        limit?: number,\n    ): Promise<LatestNonVotingSignaturesPaginated> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getLatestCompressionSignatures',\n            { limit, cursor },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(LatestNonVotingSignaturesResultPaginated),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get latest non-voting signatures',\n            );\n        }\n        return res.result;\n    }\n\n    /**\n     * Fetch all non-voting signatures\n     */\n    async getLatestNonVotingSignatures(\n        limit?: number,\n        cursor?: string,\n    ): Promise<LatestNonVotingSignatures> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getLatestNonVotingSignatures',\n            { limit, cursor },\n        );\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(LatestNonVotingSignaturesResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get latest non-voting signatures',\n            );\n        }\n        return res.result;\n    }\n\n    /**\n     * Fetch the latest address proofs for new unique addresses specified by an\n     * array of addresses.\n     *\n     * the proof states that said address have not yet been created in\n     * respective address tree.\n     * @param addresses Array of BN254 new addresses\n     * @returns Array of validity proofs for new addresses\n     */\n    async getMultipleNewAddressProofs(addresses: BN254[]) {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getMultipleNewAddressProofs',\n            addresses.map(address => encodeBN254toBase58(address)),\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(array(NewAddressProofResult)),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get proofs for new addresses ${addresses.map(address => encodeBN254toBase58(address)).join(', ')}`,\n            );\n        }\n        if (res.result.value === null) {\n            throw new Error(\n                `failed to get proofs for new addresses ${addresses.map(address => encodeBN254toBase58(address)).join(', ')}`,\n            );\n        }\n\n        /// Creates proof for each address\n        const newAddressProofs: MerkleContextWithNewAddressProof[] = [];\n\n        for (const proof of res.result.value) {\n            const _proof: MerkleContextWithNewAddressProof = {\n                root: proof.root,\n                rootIndex: proof.rootSeq % 2400,\n                value: proof.address,\n                leafLowerRangeValue: proof.lowerRangeAddress,\n                leafHigherRangeValue: proof.higherRangeAddress,\n                nextIndex: bn(proof.nextIndex),\n                merkleProofHashedIndexedElementLeaf: proof.proof,\n                indexHashedIndexedElementLeaf: bn(proof.lowElementLeafIndex),\n                merkleTree: proof.merkleTree,\n                nullifierQueue: mockAddressQueue,\n            };\n            newAddressProofs.push(_proof);\n        }\n        return newAddressProofs;\n    }\n\n    /**\n     * Advanced usage of getValidityProof: fetches ZKP directly from a custom\n     * non-rpcprover. Note: This uses the proverEndpoint specified in the\n     * constructor. For normal usage, please use {@link getValidityProof}\n     * instead.\n     *\n     * Fetch the latest validity proof for (1) compressed accounts specified by\n     * an array of account hashes. (2) new unique addresses specified by an\n     * array of addresses.\n     *\n     * Validity proofs prove the presence of compressed accounts in state trees\n     * and the non-existence of addresses in address trees, respectively. They\n     * enable verification without recomputing the merkle proof path, thus\n     * lowering verification and data costs.\n     *\n     * @param hashes        Array of BN254 hashes.\n     * @param newAddresses  Array of BN254 new addresses.\n     * @returns             validity proof with context\n     */\n    async getValidityProofDirect(\n        hashes: BN254[] = [],\n        newAddresses: BN254[] = [],\n    ): Promise<CompressedProofWithContext> {\n        let validityProof: CompressedProofWithContext;\n\n        if (hashes.length === 0 && newAddresses.length === 0) {\n            throw new Error(\n                'Empty input. Provide hashes and/or new addresses.',\n            );\n        } else if (hashes.length > 0 && newAddresses.length === 0) {\n            /// inclusion\n            const merkleProofsWithContext =\n                await this.getMultipleCompressedAccountProofs(hashes);\n            const inputs = convertMerkleProofsWithContextToHex(\n                merkleProofsWithContext,\n            );\n            const compressedProof = await proverRequest(\n                this.proverEndpoint,\n                'inclusion',\n                inputs,\n                false,\n            );\n            validityProof = {\n                compressedProof,\n                roots: merkleProofsWithContext.map(proof => proof.root),\n                rootIndices: merkleProofsWithContext.map(\n                    proof => proof.rootIndex,\n                ),\n                leafIndices: merkleProofsWithContext.map(\n                    proof => proof.leafIndex,\n                ),\n                leaves: merkleProofsWithContext.map(proof => bn(proof.hash)),\n                merkleTrees: merkleProofsWithContext.map(\n                    proof => proof.merkleTree,\n                ),\n                nullifierQueues: merkleProofsWithContext.map(\n                    proof => proof.nullifierQueue,\n                ),\n            };\n        } else if (hashes.length === 0 && newAddresses.length > 0) {\n            /// new-address\n            const newAddressProofs: MerkleContextWithNewAddressProof[] =\n                await this.getMultipleNewAddressProofs(newAddresses);\n\n            const inputs =\n                convertNonInclusionMerkleProofInputsToHex(newAddressProofs);\n\n            const compressedProof = await proverRequest(\n                this.proverEndpoint,\n                'new-address',\n                inputs,\n                false,\n            );\n\n            validityProof = {\n                compressedProof,\n                roots: newAddressProofs.map(proof => proof.root),\n                rootIndices: newAddressProofs.map(proof => proof.rootIndex),\n                leafIndices: newAddressProofs.map(proof =>\n                    proof.nextIndex.toNumber(),\n                ),\n                leaves: newAddressProofs.map(proof => bn(proof.value)),\n                merkleTrees: newAddressProofs.map(proof => proof.merkleTree),\n                nullifierQueues: newAddressProofs.map(\n                    proof => proof.nullifierQueue,\n                ),\n            };\n        } else if (hashes.length > 0 && newAddresses.length > 0) {\n            /// combined\n            const merkleProofsWithContext =\n                await this.getMultipleCompressedAccountProofs(hashes);\n            const inputs = convertMerkleProofsWithContextToHex(\n                merkleProofsWithContext,\n            );\n            const newAddressProofs: MerkleContextWithNewAddressProof[] =\n                await this.getMultipleNewAddressProofs(newAddresses);\n\n            const newAddressInputs =\n                convertNonInclusionMerkleProofInputsToHex(newAddressProofs);\n\n            const compressedProof = await proverRequest(\n                this.proverEndpoint,\n                'combined',\n                [inputs, newAddressInputs],\n                false,\n            );\n\n            validityProof = {\n                compressedProof,\n                roots: merkleProofsWithContext\n                    .map(proof => proof.root)\n                    .concat(newAddressProofs.map(proof => proof.root)),\n                rootIndices: merkleProofsWithContext\n                    .map(proof => proof.rootIndex)\n                    .concat(newAddressProofs.map(proof => proof.rootIndex)),\n                leafIndices: merkleProofsWithContext\n                    .map(proof => proof.leafIndex)\n                    .concat(\n                        newAddressProofs.map(\n                            proof => proof.nextIndex.toNumber(), // TODO: support >32bit\n                        ),\n                    ),\n                leaves: merkleProofsWithContext\n                    .map(proof => bn(proof.hash))\n                    .concat(newAddressProofs.map(proof => bn(proof.value))),\n                merkleTrees: merkleProofsWithContext\n                    .map(proof => proof.merkleTree)\n                    .concat(newAddressProofs.map(proof => proof.merkleTree)),\n                nullifierQueues: merkleProofsWithContext\n                    .map(proof => proof.nullifierQueue)\n                    .concat(\n                        newAddressProofs.map(proof => proof.nullifierQueue),\n                    ),\n            };\n        } else throw new Error('Invalid input');\n\n        return validityProof;\n    }\n\n    /**\n     * Fetch the latest validity proof for (1) compressed accounts specified by\n     * an array of account hashes. (2) new unique addresses specified by an\n     * array of addresses.\n     *\n     * Validity proofs prove the presence of compressed accounts in state trees\n     * and the non-existence of addresses in address trees, respectively. They\n     * enable verification without recomputing the merkle proof path, thus\n     * lowering verification and data costs.\n     *\n     * @param hashes        Array of BN254 hashes.\n     * @param newAddresses  Array of BN254 new addresses.\n     * @returns             validity proof with context\n     */\n    async getValidityProof(\n        hashes: BN254[] = [],\n        newAddresses: BN254[] = [],\n    ): Promise<CompressedProofWithContext> {\n        const defaultAddressTreePublicKey =\n            defaultTestStateTreeAccounts().addressTree;\n        const defaultAddressQueuePublicKey =\n            defaultTestStateTreeAccounts().addressQueue;\n        const defaultStateTreePublicKey =\n            defaultTestStateTreeAccounts().merkleTree;\n        const defaultStateQueuePublicKey =\n            defaultTestStateTreeAccounts().nullifierQueue;\n        const formattedHashes = hashes.map(item => {\n            return {\n                hash: item,\n                tree: defaultStateTreePublicKey,\n                queue: defaultStateQueuePublicKey,\n            };\n        });\n\n        const formattedNewAddresses = newAddresses.map(item => {\n            return {\n                address: item,\n                tree: defaultAddressTreePublicKey,\n                queue: defaultAddressQueuePublicKey,\n            };\n        });\n\n        return this.getValidityProofV0(formattedHashes, formattedNewAddresses);\n    }\n\n    /**\n     * Fetch the latest validity proof for (1) compressed accounts specified by\n     * an array of account hashes. (2) new unique addresses specified by an\n     * array of addresses.\n     *\n     * Validity proofs prove the presence of compressed accounts in state trees\n     * and the non-existence of addresses in address trees, respectively. They\n     * enable verification without recomputing the merkle proof path, thus\n     * lowering verification and data costs.\n     *\n     * @param hashes        Array of { hash: BN254, tree: PublicKey, queue: PublicKey }.\n     * @param newAddresses  Array of { address: BN254, tree: PublicKey, queue: PublicKey }.\n     * @returns             validity proof with context\n     */\n    async getValidityProofV0(\n        hashes: HashWithTree[] = [],\n        newAddresses: AddressWithTree[] = [],\n    ): Promise<CompressedProofWithContext> {\n        const { value } = await this.getValidityProofAndRpcContext(\n            hashes,\n            newAddresses,\n        );\n        return value;\n    }\n\n    /**\n     * Fetch the latest validity proof for (1) compressed accounts specified by\n     * an array of account hashes. (2) new unique addresses specified by an\n     * array of addresses. Returns with context slot.\n     *\n     * Validity proofs prove the presence of compressed accounts in state trees\n     * and the non-existence of addresses in address trees, respectively. They\n     * enable verification without recomputing the merkle proof path, thus\n     * lowering verification and data costs.\n     *\n     * @param hashes        Array of BN254 hashes.\n     * @param newAddresses  Array of BN254 new addresses. Optionally specify the\n     *                      tree and queue for each address. Default to public\n     *                      state tree/queue.\n     * @returns             validity proof with context\n     */\n    async getValidityProofAndRpcContext(\n        hashes: HashWithTree[] = [],\n        newAddresses: AddressWithTree[] = [],\n    ): Promise<WithContext<CompressedProofWithContext>> {\n        const unsafeRes = await rpcRequest(\n            this.compressionApiEndpoint,\n            'getValidityProof',\n            {\n                hashes: hashes.map(({ hash }) => encodeBN254toBase58(hash)),\n                newAddressesWithTrees: newAddresses.map(\n                    ({ address, tree }) => ({\n                        address: encodeBN254toBase58(address),\n                        tree: tree.toBase58(),\n                    }),\n                ),\n            },\n        );\n\n        const res = create(\n            unsafeRes,\n            jsonRpcResultAndContext(ValidityProofResult),\n        );\n        if ('error' in res) {\n            throw new SolanaJSONRPCError(\n                res.error,\n                `failed to get ValidityProof for compressed accounts ${hashes.map(hash => hash.toString())}`,\n            );\n        }\n\n        const result = res.result.value;\n\n        if (result === null) {\n            throw new Error(\n                `failed to get ValidityProof for compressed accounts ${hashes.map(hash => hash.toString())}`,\n            );\n        }\n\n        const value: CompressedProofWithContext = {\n            compressedProof: result.compressedProof,\n            merkleTrees: result.merkleTrees,\n            leafIndices: result.leafIndices,\n            nullifierQueues: [\n                ...hashes.map(({ queue }) => queue),\n                ...newAddresses.map(({ queue }) => queue),\n            ],\n            rootIndices: result.rootIndices,\n            roots: result.roots,\n            leaves: result.leaves,\n        };\n        return { value, context: res.result.context };\n    }\n}\n","import { LightWasm } from '../test-rpc/test-rpc';\nimport { BN } from '@coral-xyz/anchor';\nimport { bn } from '../../state';\nimport { HIGHEST_ADDRESS_PLUS_ONE } from '../../constants';\n\nexport class IndexedElement {\n    public index: number;\n    public value: BN;\n    public nextIndex: number;\n\n    constructor(index: number, value: BN, nextIndex: number) {\n        this.index = index;\n        this.value = value;\n        this.nextIndex = nextIndex;\n    }\n\n    public equals(other: IndexedElement): boolean {\n        return this.value.eq(other.value);\n    }\n\n    public compareTo(other: IndexedElement): number {\n        return this.value.cmp(other.value);\n    }\n\n    public hash(lightWasm: LightWasm, nextValue: BN): Uint8Array {\n        try {\n            const hash = lightWasm.poseidonHash([\n                bn(this.value.toArray('be', 32)).toString(),\n                bn(this.nextIndex).toString(),\n                bn(nextValue.toArray('be', 32)).toString(),\n            ]);\n            return hash;\n        } catch (error) {\n            throw new Error('Hashing failed');\n        }\n    }\n}\n\nexport class IndexedElementBundle {\n    public newLowElement: IndexedElement;\n    public newElement: IndexedElement;\n    public newElementNextValue: BN;\n\n    constructor(\n        newLowElement: IndexedElement,\n        newElement: IndexedElement,\n        newElementNextValue: BN,\n    ) {\n        this.newLowElement = newLowElement;\n        this.newElement = newElement;\n        this.newElementNextValue = newElementNextValue;\n    }\n}\n\n/**\n * This indexed array implementation mirrors the rust implementation of the\n * indexed merkle tree. It stores the elements of the indexed merkle tree.\n */\nexport class IndexedArray {\n    public elements: Array<IndexedElement>;\n    public currentNodeIndex: number;\n    public highestElementIndex: number;\n\n    constructor(\n        elements: Array<IndexedElement>,\n        currentNodeIndex: number,\n        highestElementIndex: number,\n    ) {\n        this.elements = elements;\n        this.currentNodeIndex = currentNodeIndex;\n        this.highestElementIndex = highestElementIndex;\n    }\n\n    public static default(): IndexedArray {\n        return new IndexedArray([new IndexedElement(0, bn(0), 0)], 0, 0);\n    }\n\n    public get(index: number): IndexedElement | undefined {\n        return this.elements[index];\n    }\n\n    public length(): number {\n        return Number(this.currentNodeIndex);\n    }\n\n    public isEmpty(): boolean {\n        return this.currentNodeIndex === 0;\n    }\n\n    public findElement(value: BN): IndexedElement | undefined {\n        return this.elements\n            .slice(0, this.length() + 1)\n            .find(node => node.value === value);\n    }\n\n    public init(): IndexedElementBundle {\n        try {\n            const init_value = HIGHEST_ADDRESS_PLUS_ONE;\n            return this.append(init_value);\n        } catch (error) {\n            throw new Error(`Failed to initialize IndexedArray: ${error}`);\n        }\n    }\n\n    /**\n     * Finds the index of the low element for the given `value` which should not be part of the array.\n     * Low element is the greatest element which still has a lower value than the provided one.\n     * Low elements are used in non-membership proofs.\n     */\n    public findLowElementIndex(value: BN): number | undefined {\n        // Try to find element whose next element is higher than the provided value.\n        for (let i = 0; i <= this.length(); i++) {\n            const node = this.elements[i];\n            if (\n                this.elements[node.nextIndex].value.gt(value) &&\n                node.value.lt(value)\n            ) {\n                return i;\n            } else if (node.value.eq(value)) {\n                throw new Error('Element already exists in the array');\n            }\n        }\n        // If no such element was found, it means that our value is going to be the greatest in the array.\n        // This means that the currently greatest element is going to be the low element of our value.\n        return this.highestElementIndex;\n    }\n\n    /**\n     * Returns the low element for the given value and the next value for that low element.\n     * Low element is the greatest element which still has lower value than the provided one.\n     * Low elements are used in non-membership proofs.\n     */\n    public findLowElement(\n        value: BN,\n    ): [IndexedElement | undefined, BN | undefined] {\n        const lowElementIndex = this.findLowElementIndex(value);\n        if (lowElementIndex === undefined) return [undefined, undefined];\n        const lowElement = this.elements[lowElementIndex];\n        return [lowElement, this.elements[lowElement.nextIndex].value];\n    }\n\n    // /**\n    //  * Returns the index of the low element for the given `value`, which should be the part of the array.\n    //  * Low element is the greatest element which still has lower value than the provided one.\n    //  * Low elements are used in non-membership proofs.\n    //  */\n    // public findLowElementIndexForExistingElement(\n    //     value: BN,\n    // ): number | undefined {\n    //     for (let i = 0; i <= this.length(); i++) {\n    //         const node = this.elements[i];\n    //         if (this.elements[node.nextIndex].value === value) {\n    //             return i;\n    //         }\n    //     }\n    //     return undefined;\n    // }\n\n    /**\n     * Returns the hash of the given element. That hash consists of:\n     * - The value of the given element.\n     * - The `nextIndex` of the given element.\n     * - The value of the element pointed by `nextIndex`.\n     */\n    public hashElement(\n        lightWasm: LightWasm,\n        index: number,\n    ): Uint8Array | undefined {\n        const element = this.elements[index];\n        if (!element) return undefined;\n        const nextElement = this.elements[element.nextIndex];\n        if (!nextElement) return undefined;\n\n        const hash = lightWasm.poseidonHash([\n            bn(element.value.toArray('be', 32)).toString(),\n            bn(element.nextIndex).toString(),\n            bn(nextElement.value.toArray('be', 32)).toString(),\n        ]);\n\n        return hash;\n    }\n\n    /**\n     * Appends a new element with the given value to the indexed array.\n     * It finds the low element index and uses it to append the new element correctly.\n     * @param value The value of the new element to append.\n     * @returns The new element and its low element after insertion.\n     */\n    public append(value: BN): IndexedElementBundle {\n        const lowElementIndex = this.findLowElementIndex(value);\n        if (lowElementIndex === undefined) {\n            throw new Error('Low element index not found.');\n        }\n        return this.appendWithLowElementIndex(lowElementIndex, value);\n    }\n\n    /**\n     * Appends a new element with the given value to the indexed array using a specific low element index.\n     * This method ensures the new element is placed correctly relative to the low element.\n     * @param lowElementIndex The index of the low element.\n     * @param value The value of the new element to append.\n     * @returns The new element and its updated low element.\n     */\n    public appendWithLowElementIndex(\n        lowElementIndex: number,\n        value: BN,\n    ): IndexedElementBundle {\n        const lowElement = this.elements[lowElementIndex];\n\n        if (lowElement.nextIndex === 0) {\n            if (value.lte(lowElement.value)) {\n                throw new Error(\n                    'New element value must be greater than the low element value.',\n                );\n            }\n        } else {\n            const nextElement = this.elements[lowElement.nextIndex];\n\n            if (value.lte(lowElement.value)) {\n                throw new Error(\n                    'New element value must be greater than the low element value.',\n                );\n            }\n\n            if (value.gte(nextElement.value)) {\n                throw new Error(\n                    'New element value must be less than the next element value.',\n                );\n            }\n        }\n\n        const newElementBundle = this.newElementWithLowElementIndex(\n            lowElementIndex,\n            value,\n        );\n\n        // If the old low element wasn't pointing to any element, it means that:\n        //\n        // * It used to be the highest element.\n        // * Our new element, which we are appending, is going the be the\n        //   highest element.\n        //\n        // Therefore, we need to save the new element index as the highest\n        // index.\n        if (lowElement.nextIndex === 0) {\n            this.highestElementIndex = newElementBundle.newElement.index;\n        }\n\n        // Insert new node.\n        this.currentNodeIndex = newElementBundle.newElement.index;\n        this.elements[this.length()] = newElementBundle.newElement;\n\n        // Update low element.\n        this.elements[lowElementIndex] = newElementBundle.newLowElement;\n\n        return newElementBundle;\n    }\n\n    /**\n     * Finds the lowest element in the array.\n     * @returns The lowest element or undefined if the array is empty.\n     */\n    public lowest(): IndexedElement | undefined {\n        return this.elements.length > 0 ? this.elements[0] : undefined;\n    }\n\n    /**\n     * Creates a new element with the specified value and updates the low element index accordingly.\n     * @param lowElementIndex The index of the low element.\n     * @param value The value for the new element.\n     * @returns A bundle containing the new element, the updated low element, and the value of the next element.\n     */\n    public newElementWithLowElementIndex(\n        lowElementIndex: number,\n        value: BN,\n    ): IndexedElementBundle {\n        const newLowElement = this.elements[lowElementIndex];\n\n        const newElementIndex = this.currentNodeIndex + 1;\n        const newElement = new IndexedElement(\n            newElementIndex,\n            value,\n            newLowElement.nextIndex,\n        );\n        newLowElement.nextIndex = newElementIndex;\n\n        const newElementNextValue = this.elements[newElement.nextIndex].value;\n\n        return new IndexedElementBundle(\n            newLowElement,\n            newElement,\n            newElementNextValue,\n        );\n    }\n\n    /**\n     * Creates a new element with the specified value by first finding the appropriate low element index.\n     * @param value The value for the new element.\n     * @returns A bundle containing the new element, the updated low element, and the value of the next element.\n     */\n    public newElement(value: BN): IndexedElementBundle {\n        const lowElementIndex = this.findLowElementIndex(value);\n        if (lowElementIndex === undefined) {\n            throw new Error('Low element index not found.');\n        }\n        return this.newElementWithLowElementIndex(lowElementIndex, value);\n    }\n}\n","import { LightWasm } from '../test-rpc/test-rpc';\n\nexport const DEFAULT_ZERO = '0';\n\n/**\n * @callback hashFunction\n * @param left Left leaf\n * @param right Right leaf\n */\n/**\n * Merkle tree\n */\nexport class MerkleTree {\n    /**\n     * Constructor\n     * @param {number} levels Number of levels in the tree\n     * @param {Array} [elements] Initial elements\n     * @param {Object} options\n     * @param {hashFunction} [options.hashFunction] Function used to hash 2 leaves\n     * @param [options.zeroElement] Value for non-existent leaves\n     */\n    levels: number;\n    capacity: number;\n    zeroElement;\n    _zeros: string[];\n    _layers: string[][];\n    _lightWasm: LightWasm;\n\n    constructor(\n        levels: number,\n        lightWasm: LightWasm,\n        elements: string[] = [],\n        { zeroElement = DEFAULT_ZERO } = {},\n    ) {\n        this.levels = levels;\n        this.capacity = 2 ** levels;\n        this.zeroElement = zeroElement;\n        this._lightWasm = lightWasm;\n        if (elements.length > this.capacity) {\n            throw new Error('Tree is full');\n        }\n        this._zeros = [];\n        this._layers = [];\n        this._layers[0] = elements;\n        this._zeros[0] = this.zeroElement;\n\n        for (let i = 1; i <= levels; i++) {\n            this._zeros[i] = this._lightWasm.poseidonHashString([\n                this._zeros[i - 1],\n                this._zeros[i - 1],\n            ]);\n        }\n        this._rebuild();\n    }\n\n    _rebuild() {\n        for (let level = 1; level <= this.levels; level++) {\n            this._layers[level] = [];\n            for (\n                let i = 0;\n                i < Math.ceil(this._layers[level - 1].length / 2);\n                i++\n            ) {\n                this._layers[level][i] = this._lightWasm.poseidonHashString([\n                    this._layers[level - 1][i * 2],\n                    i * 2 + 1 < this._layers[level - 1].length\n                        ? this._layers[level - 1][i * 2 + 1]\n                        : this._zeros[level - 1],\n                ]);\n            }\n        }\n    }\n\n    /**\n     * Get tree root\n     * @returns {*}\n     */\n    root() {\n        return this._layers[this.levels].length > 0\n            ? this._layers[this.levels][0]\n            : this._zeros[this.levels];\n    }\n\n    /**\n     * Insert new element into the tree\n     * @param element Element to insert\n     */\n\n    insert(element: string) {\n        if (this._layers[0].length >= this.capacity) {\n            throw new Error('Tree is full');\n        }\n        this.update(this._layers[0].length, element);\n    }\n\n    /**\n     * Insert multiple elements into the tree. Tree will be fully rebuilt during this operation.\n     * @param {Array} elements Elements to insert\n     */\n    bulkInsert(elements: string[]) {\n        if (this._layers[0].length + elements.length > this.capacity) {\n            throw new Error('Tree is full');\n        }\n        this._layers[0].push(...elements);\n        this._rebuild();\n    }\n\n    // TODO: update does not work debug\n    /**\n     * Change an element in the tree\n     * @param {number} index Index of element to change\n     * @param element Updated element value\n     */\n    update(index: number, element: string) {\n        // index 0 and 1 and element is the commitment hash\n        if (\n            isNaN(Number(index)) ||\n            index < 0 ||\n            index > this._layers[0].length ||\n            index >= this.capacity\n        ) {\n            throw new Error('Insert index out of bounds: ' + index);\n        }\n        this._layers[0][index] = element;\n        for (let level = 1; level <= this.levels; level++) {\n            index >>= 1;\n            this._layers[level][index] = this._lightWasm.poseidonHashString([\n                this._layers[level - 1][index * 2],\n                index * 2 + 1 < this._layers[level - 1].length\n                    ? this._layers[level - 1][index * 2 + 1]\n                    : this._zeros[level - 1],\n            ]);\n        }\n    }\n\n    /**\n     * Get merkle path to a leaf\n     * @param {number} index Leaf index to generate path for\n     * @returns {{pathElements: number[], pathIndex: number[]}} An object containing adjacent elements and left-right index\n     */\n    path(index: number) {\n        if (\n            isNaN(Number(index)) ||\n            index < 0 ||\n            index >= this._layers[0].length\n        ) {\n            throw new Error('Index out of bounds: ' + index);\n        }\n        const pathElements: string[] = [];\n        const pathIndices: number[] = [];\n        for (let level = 0; level < this.levels; level++) {\n            pathIndices[level] = index % 2;\n            pathElements[level] =\n                (index ^ 1) < this._layers[level].length\n                    ? this._layers[level][index ^ 1]\n                    : this._zeros[level];\n            index >>= 1;\n        }\n        return {\n            pathElements,\n            pathIndices,\n        };\n    }\n\n    /**\n     * Find an element in the tree\n     * @param element An element to find\n     * @param comparator A function that checks leaf value equality\n     * @returns {number} Index if element is found, otherwise -1\n     */\n    indexOf(\n        element: string,\n        comparator: ((element: string, el: string) => boolean) | null = null,\n    ) {\n        if (comparator) {\n            return this._layers[0].findIndex((el: string) =>\n                comparator(element, el),\n            );\n        } else {\n            return this._layers[0].indexOf(element);\n        }\n    }\n\n    /**\n     * Returns a copy of non-zero tree elements\n     * @returns {Object[]}\n     */\n    elements() {\n        return this._layers[0].slice();\n    }\n\n    /**\n     * Serialize entire tree state including intermediate layers into a plain object\n     * Deserializing it back will not require to recompute any hashes\n     * Elements are not converted to a plain type, this is responsibility of the caller\n     */\n    serialize() {\n        return {\n            levels: this.levels,\n            _zeros: this._zeros,\n            _layers: this._layers,\n        };\n    }\n\n    /**\n     * Deserialize data into a MerkleTree instance\n     * Make sure to provide the same hashFunction as was used in the source tree,\n     * otherwise the tree state will be invalid\n     *\n     * @param data\n     * @param hashFunction\n     * @returns {MerkleTree}\n     */\n    static deserialize(\n        data: any,\n        hashFunction: (left: string, right: string) => string,\n    ) {\n        const instance = Object.assign(Object.create(this.prototype), data);\n        instance._hash = hashFunction;\n        instance.capacity = 2 ** instance.levels;\n        instance.zeroElement = instance._zeros[0];\n        return instance;\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst buffer_1 = require(\"buffer\");\nfunction encode(data) {\n    return data.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"0x\");\n}\nexports.encode = encode;\nfunction decode(data) {\n    if (data.indexOf(\"0x\") === 0) {\n        data = data.substr(2);\n    }\n    if (data.length % 2 === 1) {\n        data = \"0\" + data;\n    }\n    let key = data.match(/.{2}/g);\n    if (key === null) {\n        return buffer_1.Buffer.from([]);\n    }\n    return buffer_1.Buffer.from(key.map((byte) => parseInt(byte, 16)));\n}\nexports.decode = decode;\n//# sourceMappingURL=hex.js.map","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isVersionedTransaction = exports.chunks = exports.isBrowser = void 0;\n/**\n * Returns true if being run inside a web browser,\n * false if in a Node process or electron app.\n */\nexports.isBrowser = process.env.ANCHOR_BROWSER ||\n    (typeof window !== \"undefined\" && !((_a = window.process) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(\"type\")));\n/**\n * Splits an array into chunks\n *\n * @param array Array of objects to chunk.\n * @param size The max size of a chunk.\n * @returns A two dimensional array where each T[] length is < the provided size.\n */\nfunction chunks(array, size) {\n    return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\nexports.chunks = chunks;\n/**\n * Check if a transaction object is a VersionedTransaction or not\n *\n * @param tx\n * @returns bool\n */\nconst isVersionedTransaction = (tx) => {\n    return \"version\" in tx;\n};\nexports.isVersionedTransaction = isVersionedTransaction;\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = exports.decode = void 0;\nconst common_1 = require(\"../common\");\nfunction decode(array) {\n    const decoder = common_1.isBrowser\n        ? new TextDecoder(\"utf-8\") // Browser https://caniuse.com/textencoder.\n        : new (require(\"util\").TextDecoder)(\"utf-8\"); // Node.\n    return decoder.decode(array);\n}\nexports.decode = decode;\nfunction encode(input) {\n    const encoder = common_1.isBrowser\n        ? new TextEncoder() // Browser.\n        : new (require(\"util\").TextEncoder)(\"utf-8\"); // Node.\n    return encoder.encode(input);\n}\nexports.encode = encode;\n//# sourceMappingURL=utf8.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst bs58_1 = __importDefault(require(\"bs58\"));\nfunction encode(data) {\n    return bs58_1.default.encode(data);\n}\nexports.encode = encode;\nfunction decode(data) {\n    return bs58_1.default.decode(data);\n}\nexports.decode = decode;\n//# sourceMappingURL=bs58.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst buffer_1 = require(\"buffer\");\nfunction encode(data) {\n    return data.toString(\"base64\");\n}\nexports.encode = encode;\nfunction decode(data) {\n    return buffer_1.Buffer.from(data, \"base64\");\n}\nexports.decode = decode;\n//# sourceMappingURL=base64.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = exports.bs58 = exports.utf8 = exports.hex = void 0;\nexports.hex = __importStar(require(\"./hex.js\"));\nexports.utf8 = __importStar(require(\"./utf8.js\"));\nexports.bs58 = __importStar(require(\"./bs58.js\"));\nexports.base64 = __importStar(require(\"./base64.js\"));\n//# sourceMappingURL=index.js.map","import {\n    ParsedMessageAccount,\n    ParsedTransactionWithMeta,\n} from '@solana/web3.js';\nimport { bs58 } from '@coral-xyz/anchor/dist/cjs/utils/bytes';\nimport { defaultStaticAccountsStruct } from '../../constants';\nimport { LightSystemProgram } from '../../programs';\nimport { Rpc } from '../../rpc';\nimport { PublicTransactionEvent } from '../../state';\n\ntype Deserializer<T> = (data: Buffer, tx: ParsedTransactionWithMeta) => T;\n\n/**\n * @internal\n * Returns newest first.\n *\n * */\nexport async function getParsedEvents(\n    rpc: Rpc,\n): Promise<PublicTransactionEvent[]> {\n    const { noopProgram, accountCompressionProgram } =\n        defaultStaticAccountsStruct();\n\n    /// Get raw transactions\n    const signatures = (\n        await rpc.getConfirmedSignaturesForAddress2(\n            accountCompressionProgram,\n            undefined,\n            'confirmed',\n        )\n    ).map(s => s.signature);\n    const txs = await rpc.getParsedTransactions(signatures, {\n        maxSupportedTransactionVersion: 0,\n        commitment: 'confirmed',\n    });\n\n    /// Filter by NOOP program\n    const transactionEvents = txs.filter(\n        (tx: ParsedTransactionWithMeta | null) => {\n            if (!tx) {\n                return false;\n            }\n            const accountKeys = tx.transaction.message.accountKeys;\n\n            const hasSplNoopAddress = accountKeys.some(\n                (item: ParsedMessageAccount) => {\n                    const itemStr =\n                        typeof item === 'string'\n                            ? item\n                            : item.pubkey.toBase58();\n                    return itemStr === noopProgram.toBase58();\n                },\n            );\n\n            return hasSplNoopAddress;\n        },\n    );\n\n    /// Parse events\n    const parsedEvents = parseEvents(\n        transactionEvents,\n        parsePublicTransactionEventWithIdl,\n    );\n\n    return parsedEvents;\n}\n\nexport const parseEvents = <T>(\n    indexerEventsTransactions: (ParsedTransactionWithMeta | null)[],\n    deserializeFn: Deserializer<T>,\n): NonNullable<T>[] => {\n    const { noopProgram } = defaultStaticAccountsStruct();\n\n    const transactions: NonNullable<T>[] = [];\n    indexerEventsTransactions.forEach(tx => {\n        if (\n            !tx ||\n            !tx.meta ||\n            tx.meta.err ||\n            !tx.meta.innerInstructions ||\n            tx.meta.innerInstructions.length <= 0\n        ) {\n            return;\n        }\n\n        /// We only care about the very last inner instruction as it contains the\n        /// PublicTransactionEvent\n        tx.meta.innerInstructions.forEach(ix => {\n            if (ix.instructions.length > 0) {\n                const ixInner = ix.instructions[ix.instructions.length - 1];\n                // Type guard for partially parsed web3js types.\n                if (\n                    'data' in ixInner &&\n                    ixInner.data &&\n                    ixInner.programId.toBase58() === noopProgram.toBase58()\n                ) {\n                    const data = bs58.decode(ixInner.data);\n\n                    const decodedEvent = deserializeFn(Buffer.from(data), tx);\n\n                    if (decodedEvent !== null && decodedEvent !== undefined) {\n                        transactions.push(decodedEvent as NonNullable<T>);\n                    }\n                }\n            }\n        });\n    });\n\n    return transactions;\n};\n\n// TODO: make it type safe. have to reimplement the types from the IDL.\nexport const parsePublicTransactionEventWithIdl = (\n    data: Buffer,\n): PublicTransactionEvent | null => {\n    const numericData = Buffer.from(data.map(byte => byte));\n\n    try {\n        return LightSystemProgram.program.coder.types.decode(\n            'PublicTransactionEvent',\n            numericData,\n        );\n    } catch (error) {\n        console.error('Error deserializing event:', error);\n        return null;\n    }\n};\n","import { PublicKey } from '@solana/web3.js';\n\nimport { BN } from '@coral-xyz/anchor';\nimport { getParsedEvents } from './get-parsed-events';\nimport { defaultTestStateTreeAccounts } from '../../constants';\nimport { Rpc } from '../../rpc';\nimport {\n    CompressedAccountWithMerkleContext,\n    bn,\n    MerkleContext,\n    createCompressedAccountWithMerkleContext,\n} from '../../state';\n\nexport async function getCompressedAccountsByOwnerTest(\n    rpc: Rpc,\n    owner: PublicKey,\n) {\n    const unspentAccounts = await getCompressedAccountsForTest(rpc);\n    const byOwner = unspentAccounts.filter(acc => acc.owner.equals(owner));\n    return byOwner;\n}\n\nexport async function getCompressedAccountByHashTest(\n    rpc: Rpc,\n    hash: BN,\n): Promise<CompressedAccountWithMerkleContext | undefined> {\n    const unspentAccounts = await getCompressedAccountsForTest(rpc);\n    return unspentAccounts.find(acc => bn(acc.hash).eq(hash));\n}\n\nexport async function getMultipleCompressedAccountsByHashTest(\n    rpc: Rpc,\n    hashes: BN[],\n): Promise<CompressedAccountWithMerkleContext[]> {\n    const unspentAccounts = await getCompressedAccountsForTest(rpc);\n    return unspentAccounts\n        .filter(acc => hashes.some(hash => bn(acc.hash).eq(hash)))\n        .sort((a, b) => b.leafIndex - a.leafIndex);\n}\n\n/// Returns all unspent compressed accounts\nasync function getCompressedAccountsForTest(rpc: Rpc) {\n    const events = (await getParsedEvents(rpc)).reverse();\n    const allOutputAccounts: CompressedAccountWithMerkleContext[] = [];\n    const allInputAccountHashes: BN[] = [];\n\n    for (const event of events) {\n        for (\n            let index = 0;\n            index < event.outputCompressedAccounts.length;\n            index++\n        ) {\n            const account = event.outputCompressedAccounts[index];\n            const merkleContext: MerkleContext = {\n                merkleTree: defaultTestStateTreeAccounts().merkleTree,\n                nullifierQueue: defaultTestStateTreeAccounts().nullifierQueue,\n                hash: event.outputCompressedAccountHashes[index],\n                leafIndex: event.outputLeafIndices[index],\n            };\n            const withCtx: CompressedAccountWithMerkleContext =\n                createCompressedAccountWithMerkleContext(\n                    merkleContext,\n                    account.compressedAccount.owner,\n                    account.compressedAccount.lamports,\n                    account.compressedAccount.data ?? undefined,\n                    account.compressedAccount.address ?? undefined,\n                );\n            allOutputAccounts.push(withCtx);\n        }\n        for (\n            let index = 0;\n            index < event.inputCompressedAccountHashes.length;\n            index++\n        ) {\n            const hash = event.inputCompressedAccountHashes[index];\n            allInputAccountHashes.push(bn(hash));\n        }\n    }\n\n    const unspentAccounts = allOutputAccounts.filter(\n        account =>\n            !allInputAccountHashes.some(hash => hash.eq(bn(account.hash))),\n    );\n    unspentAccounts.sort((a, b) => b.leafIndex - a.leafIndex);\n\n    return unspentAccounts;\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getParsedEvents } from './get-parsed-events';\nimport { BN, BorshCoder } from '@coral-xyz/anchor';\n\nimport { IDL } from '../../idls/light_compressed_token';\nimport { defaultTestStateTreeAccounts } from '../../constants';\nimport { Rpc } from '../../rpc';\nimport { ParsedTokenAccount, WithCursor } from '../../rpc-interface';\nimport {\n    CompressedAccount,\n    PublicTransactionEvent,\n    MerkleContext,\n    createCompressedAccountWithMerkleContext,\n    bn,\n} from '../../state';\n\nconst tokenProgramId: PublicKey = new PublicKey(\n    // TODO: can add check to ensure its consistent with the idl\n    'cTokenmWW8bLPjZEBAUgYy3zKxQZW6VKi7bqNFEVv3m',\n);\n\ntype TokenData = {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: BN;\n    delegate: PublicKey | null;\n    state: number;\n    tlv: Buffer | null;\n};\n\nexport type EventWithParsedTokenTlvData = {\n    inputCompressedAccountHashes: number[][];\n    outputCompressedAccounts: ParsedTokenAccount[];\n};\n/**\n * Manually parse the compressed token layout for a given compressed account.\n * @param compressedAccount - The compressed account\n * @returns The parsed token data\n */\nexport function parseTokenLayoutWithIdl(\n    compressedAccount: CompressedAccount,\n    programId: PublicKey = tokenProgramId,\n): TokenData | null {\n    if (compressedAccount.data === null) return null;\n\n    const { data } = compressedAccount.data;\n\n    if (data.length === 0) return null;\n    if (compressedAccount.owner.toBase58() !== programId.toBase58()) {\n        throw new Error(\n            `Invalid owner ${compressedAccount.owner.toBase58()} for token layout`,\n        );\n    }\n    const decodedLayout = new BorshCoder(IDL).types.decode(\n        'TokenData',\n        Buffer.from(data),\n    );\n\n    return decodedLayout;\n}\n\n/**\n * parse compressed accounts of an event with token layout\n * @internal\n * TODO: refactor\n */\nasync function parseEventWithTokenTlvData(\n    event: PublicTransactionEvent,\n): Promise<EventWithParsedTokenTlvData> {\n    const pubkeyArray = event.pubkeyArray;\n\n    const outputHashes = event.outputCompressedAccountHashes;\n    const outputCompressedAccountsWithParsedTokenData: ParsedTokenAccount[] =\n        event.outputCompressedAccounts.map((compressedAccount, i) => {\n            const merkleContext: MerkleContext = {\n                merkleTree:\n                    pubkeyArray[\n                        event.outputCompressedAccounts[i].merkleTreeIndex\n                    ],\n                nullifierQueue:\n                    // FIXME: fix make dynamic\n                    defaultTestStateTreeAccounts().nullifierQueue,\n                hash: outputHashes[i],\n                leafIndex: event.outputLeafIndices[i],\n            };\n\n            if (!compressedAccount.compressedAccount.data)\n                throw new Error('No data');\n\n            const parsedData = parseTokenLayoutWithIdl(\n                compressedAccount.compressedAccount,\n            );\n\n            if (!parsedData) throw new Error('Invalid token data');\n\n            const withMerkleContext = createCompressedAccountWithMerkleContext(\n                merkleContext,\n                compressedAccount.compressedAccount.owner,\n                compressedAccount.compressedAccount.lamports,\n                compressedAccount.compressedAccount.data,\n                compressedAccount.compressedAccount.address ?? undefined,\n            );\n            return {\n                compressedAccount: withMerkleContext,\n                parsed: parsedData,\n            };\n        });\n\n    return {\n        inputCompressedAccountHashes: event.inputCompressedAccountHashes,\n        outputCompressedAccounts: outputCompressedAccountsWithParsedTokenData,\n    };\n}\n\n/**\n * Retrieves all compressed token accounts for a given mint and owner.\n *\n * Note: This function is intended for testing purposes only. For production, use rpc.getCompressedTokenAccounts.\n *\n * @param events    Public transaction events\n * @param owner     PublicKey of the token owner\n * @param mint      PublicKey of the token mint\n */\nexport async function getCompressedTokenAccounts(\n    events: PublicTransactionEvent[],\n): Promise<ParsedTokenAccount[]> {\n    const eventsWithParsedTokenTlvData: EventWithParsedTokenTlvData[] =\n        await Promise.all(\n            events.map(event => parseEventWithTokenTlvData(event)),\n        );\n\n    /// strip spent compressed accounts if an output compressed account of tx n is\n    /// an input compressed account of tx n+m, it is spent\n    const allOutCompressedAccounts = eventsWithParsedTokenTlvData.flatMap(\n        event => event.outputCompressedAccounts,\n    );\n    const allInCompressedAccountHashes = eventsWithParsedTokenTlvData.flatMap(\n        event => event.inputCompressedAccountHashes,\n    );\n    const unspentCompressedAccounts = allOutCompressedAccounts.filter(\n        outputCompressedAccount =>\n            !allInCompressedAccountHashes.some(hash => {\n                return (\n                    JSON.stringify(hash) ===\n                    JSON.stringify(\n                        outputCompressedAccount.compressedAccount.hash,\n                    )\n                );\n            }),\n    );\n\n    return unspentCompressedAccounts;\n}\n\n/** @internal */\nexport async function getCompressedTokenAccountsByOwnerTest(\n    rpc: Rpc,\n    owner: PublicKey,\n    mint: PublicKey,\n): Promise<WithCursor<ParsedTokenAccount[]>> {\n    const events = await getParsedEvents(rpc);\n\n    const compressedTokenAccounts = await getCompressedTokenAccounts(events);\n\n    const accounts = compressedTokenAccounts.filter(\n        acc => acc.parsed.owner.equals(owner) && acc.parsed.mint.equals(mint),\n    );\n    return {\n        items: accounts.sort(\n            (a, b) =>\n                b.compressedAccount.leafIndex - a.compressedAccount.leafIndex,\n        ),\n        cursor: null,\n    };\n}\n\nexport async function getCompressedTokenAccountsByDelegateTest(\n    rpc: Rpc,\n    delegate: PublicKey,\n    mint: PublicKey,\n): Promise<WithCursor<ParsedTokenAccount[]>> {\n    const events = await getParsedEvents(rpc);\n\n    const compressedTokenAccounts = await getCompressedTokenAccounts(events);\n    return {\n        items: compressedTokenAccounts.filter(\n            acc =>\n                acc.parsed.delegate?.equals(delegate) &&\n                acc.parsed.mint.equals(mint),\n        ),\n        cursor: null,\n    };\n}\n\nexport async function getCompressedTokenAccountByHashTest(\n    rpc: Rpc,\n    hash: BN,\n): Promise<ParsedTokenAccount> {\n    const events = await getParsedEvents(rpc);\n\n    const compressedTokenAccounts = await getCompressedTokenAccounts(events);\n\n    const filtered = compressedTokenAccounts.filter(acc =>\n        bn(acc.compressedAccount.hash).eq(hash),\n    );\n    if (filtered.length === 0) {\n        throw new Error('No compressed account found');\n    }\n    return filtered[0];\n}\n","import { Connection, ConnectionConfig, PublicKey } from '@solana/web3.js';\nimport { BN } from '@coral-xyz/anchor';\nimport {\n    getCompressedAccountByHashTest,\n    getCompressedAccountsByOwnerTest,\n    getMultipleCompressedAccountsByHashTest,\n} from './get-compressed-accounts';\nimport {\n    getCompressedTokenAccountByHashTest,\n    getCompressedTokenAccountsByDelegateTest,\n    getCompressedTokenAccountsByOwnerTest,\n} from './get-compressed-token-accounts';\n\nimport { MerkleTree } from '../merkle-tree/merkle-tree';\nimport { getParsedEvents } from './get-parsed-events';\nimport { defaultTestStateTreeAccounts } from '../../constants';\nimport {\n    AddressWithTree,\n    CompressedMintTokenHolders,\n    CompressedTransaction,\n    GetCompressedAccountsByOwnerConfig,\n    PaginatedOptions,\n    HashWithTree,\n    LatestNonVotingSignatures,\n    LatestNonVotingSignaturesPaginated,\n    SignatureWithMetadata,\n    WithContext,\n    WithCursor,\n} from '../../rpc-interface';\nimport {\n    CompressedProofWithContext,\n    CompressionApiInterface,\n    GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ParsedTokenAccount,\n    TokenBalance,\n} from '../../rpc-interface';\nimport {\n    BN254,\n    CompressedAccountWithMerkleContext,\n    MerkleContextWithMerkleProof,\n    PublicTransactionEvent,\n    bn,\n} from '../../state';\nimport { IndexedArray } from '../merkle-tree';\nimport {\n    MerkleContextWithNewAddressProof,\n    convertMerkleProofsWithContextToHex,\n    convertNonInclusionMerkleProofInputsToHex,\n    proverRequest,\n} from '../../rpc';\n\nexport interface TestRpcConfig {\n    /**\n     * Address of the state tree to index. Default: public default test state\n     * tree.\n     */\n    merkleTreeAddress?: PublicKey;\n    /**\n     * Nullifier queue associated with merkleTreeAddress\n     */\n    nullifierQueueAddress?: PublicKey;\n    /**\n     * Depth of state tree. Defaults to the public default test state tree depth\n     */\n    depth?: number;\n    /**\n     * Log proof generation time\n     */\n    log?: boolean;\n    /**\n     * Address of the address tree to index. Default: public default test\n     * address tree.\n     */\n    addressTreeAddress?: PublicKey;\n    /**\n     * Address queue associated with addressTreeAddress\n     */\n    addressQueueAddress?: PublicKey;\n}\n\nexport interface LightWasm {\n    blakeHash(input: string | Uint8Array, hashLength: number): Uint8Array;\n    poseidonHash(input: string[] | BN[]): Uint8Array;\n    poseidonHashString(input: string[] | BN[]): string;\n    poseidonHashBN(input: string[] | BN[]): BN;\n}\n\n/**\n * Returns a mock RPC instance for use in unit tests.\n *\n * @param lightWasm               Wasm hasher instance.\n * @param endpoint                RPC endpoint URL. Defaults to\n *                                'http://127.0.0.1:8899'.\n * @param proverEndpoint          Prover server endpoint URL. Defaults to\n *                                'http://localhost:3001'.\n * @param merkleTreeAddress       Address of the merkle tree to index. Defaults\n *                                to the public default test state tree.\n * @param nullifierQueueAddress   Optional address of the associated nullifier\n *                                queue.\n * @param depth                   Depth of the merkle tree.\n * @param log                     Log proof generation time.\n */\nexport async function getTestRpc(\n    lightWasm: LightWasm,\n    endpoint: string = 'http://127.0.0.1:8899',\n    compressionApiEndpoint: string = 'http://127.0.0.1:8784',\n    proverEndpoint: string = 'http://127.0.0.1:3001',\n    merkleTreeAddress?: PublicKey,\n    nullifierQueueAddress?: PublicKey,\n    depth?: number,\n    log = false,\n) {\n    const defaultAccounts = defaultTestStateTreeAccounts();\n\n    return new TestRpc(\n        endpoint,\n        lightWasm,\n        compressionApiEndpoint,\n        proverEndpoint,\n        undefined,\n        {\n            merkleTreeAddress: merkleTreeAddress || defaultAccounts.merkleTree,\n            nullifierQueueAddress:\n                nullifierQueueAddress || defaultAccounts.nullifierQueue,\n            depth: depth || defaultAccounts.merkleTreeHeight,\n            log,\n        },\n    );\n}\n/**\n * Simple mock rpc for unit tests that simulates the compression rpc interface.\n * Fetches, parses events and builds merkletree on-demand, i.e. it does not persist state.\n * Constraints:\n * - Can only index 1 merkletree\n * - Can only index up to 1000 transactions\n *\n * For advanced testing use photon: https://github.com/helius-labs/photon\n */\nexport class TestRpc extends Connection implements CompressionApiInterface {\n    compressionApiEndpoint: string;\n    proverEndpoint: string;\n    merkleTreeAddress: PublicKey;\n    nullifierQueueAddress: PublicKey;\n    addressTreeAddress: PublicKey;\n    addressQueueAddress: PublicKey;\n    lightWasm: LightWasm;\n    depth: number;\n    log = false;\n\n    /**\n     * Establish a Compression-compatible JSON RPC mock-connection\n     *\n     * @param endpoint                  endpoint to the solana cluster (use for\n     *                                  localnet only)\n     * @param hasher                    light wasm hasher instance\n     * @param compressionApiEndpoint    Endpoint to the compression server.\n     * @param proverEndpoint            Endpoint to the prover server. defaults\n     *                                  to endpoint\n     * @param connectionConfig          Optional connection config\n     * @param testRpcConfig             Config for the mock rpc\n     */\n    constructor(\n        endpoint: string,\n        hasher: LightWasm,\n        compressionApiEndpoint: string,\n        proverEndpoint: string,\n        connectionConfig?: ConnectionConfig,\n        testRpcConfig?: TestRpcConfig,\n    ) {\n        super(endpoint, connectionConfig || 'confirmed');\n        this.compressionApiEndpoint = compressionApiEndpoint;\n        this.proverEndpoint = proverEndpoint;\n\n        const {\n            merkleTreeAddress,\n            nullifierQueueAddress,\n            depth,\n            log,\n            addressTreeAddress,\n            addressQueueAddress,\n        } = testRpcConfig ?? {};\n\n        const {\n            merkleTree,\n            nullifierQueue,\n            merkleTreeHeight,\n            addressQueue,\n            addressTree,\n        } = defaultTestStateTreeAccounts();\n\n        this.lightWasm = hasher;\n        this.merkleTreeAddress = merkleTreeAddress ?? merkleTree;\n        this.nullifierQueueAddress = nullifierQueueAddress ?? nullifierQueue;\n        this.addressTreeAddress = addressTreeAddress ?? addressTree;\n        this.addressQueueAddress = addressQueueAddress ?? addressQueue;\n        this.depth = depth ?? merkleTreeHeight;\n        this.log = log ?? false;\n    }\n\n    /**\n     * Fetch the compressed account for the specified account hash\n     */\n    async getCompressedAccount(\n        address?: BN254,\n        hash?: BN254,\n    ): Promise<CompressedAccountWithMerkleContext | null> {\n        if (address) {\n            throw new Error('address is not supported in test-rpc');\n        }\n        if (!hash) {\n            throw new Error('hash is required');\n        }\n        const account = await getCompressedAccountByHashTest(this, hash);\n        return account ?? null;\n    }\n\n    /**\n     * Fetch the compressed balance for the specified account hash\n     */\n    async getCompressedBalance(address?: BN254, hash?: BN254): Promise<BN> {\n        if (address) {\n            throw new Error('address is not supported in test-rpc');\n        }\n        if (!hash) {\n            throw new Error('hash is required');\n        }\n        const account = await getCompressedAccountByHashTest(this, hash);\n        if (!account) {\n            throw new Error('Account not found');\n        }\n        return bn(account.lamports);\n    }\n\n    /**\n     * Fetch the total compressed balance for the specified owner public key\n     */\n    async getCompressedBalanceByOwner(owner: PublicKey): Promise<BN> {\n        const accounts = await this.getCompressedAccountsByOwner(owner);\n        return accounts.items.reduce(\n            (acc, account) => acc.add(account.lamports),\n            bn(0),\n        );\n    }\n\n    /**\n     * Fetch the latest merkle proof for the specified account hash from the\n     * cluster\n     */\n    async getCompressedAccountProof(\n        hash: BN254,\n    ): Promise<MerkleContextWithMerkleProof> {\n        const proofs = await this.getMultipleCompressedAccountProofs([hash]);\n        return proofs[0];\n    }\n\n    /**\n     * Fetch all the account info for multiple compressed accounts specified by\n     * an array of account hashes\n     */\n    async getMultipleCompressedAccounts(\n        hashes: BN254[],\n    ): Promise<CompressedAccountWithMerkleContext[]> {\n        return await getMultipleCompressedAccountsByHashTest(this, hashes);\n    }\n    /**\n     * Ensure that the Compression Indexer has already indexed the transaction\n     */\n    async confirmTransactionIndexed(_slot: number): Promise<boolean> {\n        return true;\n    }\n    /**\n     * Fetch the latest merkle proofs for multiple compressed accounts specified\n     * by an array account hashes\n     */\n    async getMultipleCompressedAccountProofs(\n        hashes: BN254[],\n    ): Promise<MerkleContextWithMerkleProof[]> {\n        /// Build tree\n        const events: PublicTransactionEvent[] = await getParsedEvents(\n            this,\n        ).then(events => events.reverse());\n        const allLeaves: number[][] = [];\n        const allLeafIndices: number[] = [];\n        for (const event of events) {\n            for (\n                let index = 0;\n                index < event.outputCompressedAccounts.length;\n                index++\n            ) {\n                const hash = event.outputCompressedAccountHashes[index];\n\n                allLeaves.push(hash);\n                allLeafIndices.push(event.outputLeafIndices[index]);\n            }\n        }\n        const tree = new MerkleTree(\n            this.depth,\n            this.lightWasm,\n            allLeaves.map(leaf => bn(leaf).toString()),\n        );\n\n        /// create merkle proofs and assemble return type\n        const merkleProofs: MerkleContextWithMerkleProof[] = [];\n\n        for (let i = 0; i < hashes.length; i++) {\n            const leafIndex = tree.indexOf(hashes[i].toString());\n            const pathElements = tree.path(leafIndex).pathElements;\n            const bnPathElements = pathElements.map(value => bn(value));\n            const root = bn(tree.root());\n            const merkleProof: MerkleContextWithMerkleProof = {\n                hash: hashes[i].toArray('be', 32),\n                merkleTree: this.merkleTreeAddress,\n                leafIndex: leafIndex,\n                merkleProof: bnPathElements,\n                nullifierQueue: this.nullifierQueueAddress,\n                rootIndex: allLeaves.length,\n                root: root,\n            };\n            merkleProofs.push(merkleProof);\n        }\n\n        /// Validate\n        merkleProofs.forEach((proof, index) => {\n            const leafIndex = proof.leafIndex;\n            const computedHash = tree.elements()[leafIndex];\n            const hashArr = bn(computedHash).toArray('be', 32);\n            if (!hashArr.every((val, index) => val === proof.hash[index])) {\n                throw new Error(\n                    `Mismatch at index ${index}: expected ${proof.hash.toString()}, got ${hashArr.toString()}`,\n                );\n            }\n        });\n\n        return merkleProofs;\n    }\n\n    /**\n     * Fetch all the compressed accounts owned by the specified public key.\n     * Owner can be a program or user account\n     */\n    async getCompressedAccountsByOwner(\n        owner: PublicKey,\n        _config?: GetCompressedAccountsByOwnerConfig,\n    ): Promise<WithCursor<CompressedAccountWithMerkleContext[]>> {\n        // TODO(swen): revisit\n        // if (_config) {\n        //     throw new Error(\n        //         'dataSlice or filters are not supported in test-rpc. Please use rpc.ts instead.',\n        //     );\n        // }\n\n        const accounts = await getCompressedAccountsByOwnerTest(this, owner);\n        return {\n            items: accounts,\n            cursor: null,\n        };\n    }\n\n    /**\n     * Fetch the latest compression signatures on the cluster. Results are\n     * paginated.\n     */\n    async getLatestCompressionSignatures(\n        _cursor?: string,\n        _limit?: number,\n    ): Promise<LatestNonVotingSignaturesPaginated> {\n        throw new Error(\n            'getLatestNonVotingSignaturesWithContext not supported in test-rpc',\n        );\n    }\n    /**\n     * Fetch the latest non-voting signatures on the cluster. Results are\n     * not paginated.\n     */\n    async getLatestNonVotingSignatures(\n        _limit?: number,\n    ): Promise<LatestNonVotingSignatures> {\n        throw new Error(\n            'getLatestNonVotingSignaturesWithContext not supported in test-rpc',\n        );\n    }\n    /**\n     * Fetch all the compressed token accounts owned by the specified public\n     * key. Owner can be a program or user account\n     */\n    async getCompressedTokenAccountsByOwner(\n        owner: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<ParsedTokenAccount[]>> {\n        return await getCompressedTokenAccountsByOwnerTest(\n            this,\n            owner,\n            options!.mint!,\n        );\n    }\n\n    /**\n     * Fetch all the compressed accounts delegated to the specified public key.\n     */\n    async getCompressedTokenAccountsByDelegate(\n        delegate: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<ParsedTokenAccount[]>> {\n        return await getCompressedTokenAccountsByDelegateTest(\n            this,\n            delegate,\n            options.mint!,\n        );\n    }\n\n    /**\n     * Fetch the compressed token balance for the specified account hash\n     */\n    async getCompressedTokenAccountBalance(\n        hash: BN254,\n    ): Promise<{ amount: BN }> {\n        const account = await getCompressedTokenAccountByHashTest(this, hash);\n        return { amount: bn(account.parsed.amount) };\n    }\n\n    /**\n     * @deprecated use {@link getCompressedTokenBalancesByOwnerV2}.\n     * Fetch all the compressed token balances owned by the specified public\n     * key. Can filter by mint.\n     */\n    async getCompressedTokenBalancesByOwner(\n        publicKey: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithCursor<{ balance: BN; mint: PublicKey }[]>> {\n        const accounts = await getCompressedTokenAccountsByOwnerTest(\n            this,\n            publicKey,\n            options.mint!,\n        );\n        return {\n            items: accounts.items.map(account => ({\n                balance: bn(account.parsed.amount),\n                mint: account.parsed.mint,\n            })),\n            cursor: null,\n        };\n    }\n\n    /**\n     * Fetch all the compressed token balances owned by the specified public\n     * key. Can filter by mint. Uses context.\n     */\n    async getCompressedTokenBalancesByOwnerV2(\n        publicKey: PublicKey,\n        options: GetCompressedTokenAccountsByOwnerOrDelegateOptions,\n    ): Promise<WithContext<WithCursor<TokenBalance[]>>> {\n        const accounts = await getCompressedTokenAccountsByOwnerTest(\n            this,\n            publicKey,\n            options.mint!,\n        );\n        return {\n            context: { slot: 1 },\n            value: {\n                items: accounts.items.map(account => ({\n                    balance: bn(account.parsed.amount),\n                    mint: account.parsed.mint,\n                })),\n                cursor: null,\n            },\n        };\n    }\n\n    /**\n     * Returns confirmed signatures for transactions involving the specified\n     * account hash forward in time from genesis to the most recent confirmed\n     * block\n     *\n     * @param hash queried account hash\n     */\n    async getCompressionSignaturesForAccount(\n        _hash: BN254,\n    ): Promise<SignatureWithMetadata[]> {\n        throw new Error(\n            'getCompressionSignaturesForAccount not implemented in test-rpc',\n        );\n    }\n\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster. Return with\n     * CompressionInfo\n     */\n    async getTransactionWithCompressionInfo(\n        _signature: string,\n    ): Promise<CompressedTransaction | null> {\n        throw new Error('getCompressedTransaction not implemented in test-rpc');\n    }\n\n    /**\n     * Returns confirmed signatures for transactions involving the specified\n     * address forward in time from genesis to the most recent confirmed\n     * block\n     *\n     * @param address queried compressed account address\n     */\n    async getCompressionSignaturesForAddress(\n        _address: PublicKey,\n        _options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>> {\n        throw new Error('getSignaturesForAddress3 not implemented');\n    }\n\n    /**\n     * Returns confirmed signatures for compression transactions involving the\n     * specified account owner forward in time from genesis to the\n     * most recent confirmed block\n     *\n     * @param owner queried owner public key\n     */\n    async getCompressionSignaturesForOwner(\n        _owner: PublicKey,\n        _options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>> {\n        throw new Error('getSignaturesForOwner not implemented');\n    }\n\n    /**\n     * Returns confirmed signatures for compression transactions involving the\n     * specified token account owner forward in time from genesis to the most\n     * recent confirmed block\n     */\n    async getCompressionSignaturesForTokenOwner(\n        _owner: PublicKey,\n        _options?: PaginatedOptions,\n    ): Promise<WithCursor<SignatureWithMetadata[]>> {\n        throw new Error('getSignaturesForTokenOwner not implemented');\n    }\n\n    /**\n     * Fetch the current indexer health status\n     */\n    async getIndexerHealth(): Promise<string> {\n        return 'ok';\n    }\n\n    /**\n     * Fetch the current slot that the node is processing\n     */\n    async getIndexerSlot(): Promise<number> {\n        return 1;\n    }\n\n    /**\n     * Fetch the latest address proofs for new unique addresses specified by an\n     * array of addresses.\n     *\n     * the proof states that said address have not yet been created in respective address tree.\n     * @param addresses Array of BN254 new addresses\n     * @returns Array of validity proofs for new addresses\n     */\n    async getMultipleNewAddressProofs(addresses: BN254[]) {\n        /// Build tree\n        const indexedArray = IndexedArray.default();\n        const allAddresses: BN[] = [];\n        indexedArray.init();\n        const hashes: BN[] = [];\n        // TODO(crank): add support for cranked address tree in 'allAddresses'.\n        // The Merkle tree root doesnt actually advance beyond init() unless we\n        // start emptying the address queue.\n        for (let i = 0; i < allAddresses.length; i++) {\n            indexedArray.append(bn(allAddresses[i]));\n        }\n        for (let i = 0; i < indexedArray.elements.length; i++) {\n            const hash = indexedArray.hashElement(this.lightWasm, i);\n            hashes.push(bn(hash!));\n        }\n        const tree = new MerkleTree(\n            this.depth,\n            this.lightWasm,\n            hashes.map(hash => bn(hash).toString()),\n        );\n\n        /// Creates proof for each address\n        const newAddressProofs: MerkleContextWithNewAddressProof[] = [];\n\n        for (let i = 0; i < addresses.length; i++) {\n            const [lowElement] = indexedArray.findLowElement(addresses[i]);\n            if (!lowElement) throw new Error('Address not found');\n\n            const leafIndex = lowElement.index;\n\n            const pathElements: string[] = tree.path(leafIndex).pathElements;\n            const bnPathElements = pathElements.map(value => bn(value));\n\n            const higherRangeValue = indexedArray.get(\n                lowElement.nextIndex,\n            )!.value;\n            const root = bn(tree.root());\n\n            const proof: MerkleContextWithNewAddressProof = {\n                root,\n                rootIndex: 3,\n                value: addresses[i],\n                leafLowerRangeValue: lowElement.value,\n                leafHigherRangeValue: higherRangeValue,\n                nextIndex: bn(lowElement.nextIndex),\n                merkleProofHashedIndexedElementLeaf: bnPathElements,\n                indexHashedIndexedElementLeaf: bn(lowElement.index),\n                merkleTree: this.addressTreeAddress,\n                nullifierQueue: this.addressQueueAddress,\n            };\n            newAddressProofs.push(proof);\n        }\n        return newAddressProofs;\n    }\n\n    async getCompressedMintTokenHolders(\n        _mint: PublicKey,\n        _options?: PaginatedOptions,\n    ): Promise<WithContext<WithCursor<CompressedMintTokenHolders[]>>> {\n        throw new Error(\n            'getCompressedMintTokenHolders not implemented in test-rpc',\n        );\n    }\n\n    /**\n     * Advanced usage of getValidityProof: fetches ZKP directly from a custom\n     * non-rpcprover. Note: This uses the proverEndpoint specified in the\n     * constructor. For normal usage, please use {@link getValidityProof}\n     * instead.\n     *\n     * Note: Use RPC class for forested trees. TestRpc is only for custom\n     * testing purposes.\n     */\n    async getValidityProofDirect(\n        hashes: BN254[] = [],\n        newAddresses: BN254[] = [],\n    ): Promise<CompressedProofWithContext> {\n        return this.getValidityProof(hashes, newAddresses);\n    }\n    /**\n     * @deprecated This method is not available for TestRpc. Please use\n     * {@link getValidityProof} instead.\n     */\n    async getValidityProofAndRpcContext(\n        hashes: HashWithTree[] = [],\n        newAddresses: AddressWithTree[] = [],\n    ): Promise<WithContext<CompressedProofWithContext>> {\n        if (newAddresses.some(address => !(address instanceof BN))) {\n            throw new Error('AddressWithTree is not supported in test-rpc');\n        }\n        return {\n            value: await this.getValidityProofV0(hashes, newAddresses),\n            context: { slot: 1 },\n        };\n    }\n    /**\n     * Fetch the latest validity proof for (1) compressed accounts specified by\n     * an array of account hashes. (2) new unique addresses specified by an\n     * array of addresses.\n     *\n     * Validity proofs prove the presence of compressed accounts in state trees\n     * and the non-existence of addresses in address trees, respectively. They\n     * enable verification without recomputing the merkle proof path, thus\n     * lowering verification and data costs.\n     *\n     * @param hashes        Array of BN254 hashes.\n     * @param newAddresses  Array of BN254 new addresses.\n     * @returns             validity proof with context\n     */\n    async getValidityProof(\n        hashes: BN254[] = [],\n        newAddresses: BN254[] = [],\n    ): Promise<CompressedProofWithContext> {\n        if (newAddresses.some(address => !(address instanceof BN))) {\n            throw new Error('AddressWithTree is not supported in test-rpc');\n        }\n        let validityProof: CompressedProofWithContext;\n\n        if (hashes.length === 0 && newAddresses.length === 0) {\n            throw new Error(\n                'Empty input. Provide hashes and/or new addresses.',\n            );\n        } else if (hashes.length > 0 && newAddresses.length === 0) {\n            /// inclusion\n            const merkleProofsWithContext =\n                await this.getMultipleCompressedAccountProofs(hashes);\n            const inputs = convertMerkleProofsWithContextToHex(\n                merkleProofsWithContext,\n            );\n            const compressedProof = await proverRequest(\n                this.proverEndpoint,\n                'inclusion',\n                inputs,\n                this.log,\n            );\n            validityProof = {\n                compressedProof,\n                roots: merkleProofsWithContext.map(proof => proof.root),\n                rootIndices: merkleProofsWithContext.map(\n                    proof => proof.rootIndex,\n                ),\n                leafIndices: merkleProofsWithContext.map(\n                    proof => proof.leafIndex,\n                ),\n                leaves: merkleProofsWithContext.map(proof => bn(proof.hash)),\n                merkleTrees: merkleProofsWithContext.map(\n                    proof => proof.merkleTree,\n                ),\n                nullifierQueues: merkleProofsWithContext.map(\n                    proof => proof.nullifierQueue,\n                ),\n            };\n        } else if (hashes.length === 0 && newAddresses.length > 0) {\n            /// new-address\n            const newAddressProofs: MerkleContextWithNewAddressProof[] =\n                await this.getMultipleNewAddressProofs(newAddresses);\n\n            const inputs =\n                convertNonInclusionMerkleProofInputsToHex(newAddressProofs);\n\n            const compressedProof = await proverRequest(\n                this.proverEndpoint,\n                'new-address',\n                inputs,\n                this.log,\n            );\n\n            validityProof = {\n                compressedProof,\n                roots: newAddressProofs.map(proof => proof.root),\n                // TODO(crank): make dynamic to enable forester support in\n                // test-rpc.ts. Currently this is a static root because the\n                // address tree doesn't advance.\n                rootIndices: newAddressProofs.map(_ => 3),\n                leafIndices: newAddressProofs.map(\n                    proof => proof.indexHashedIndexedElementLeaf.toNumber(), // TODO: support >32bit\n                ),\n                leaves: newAddressProofs.map(proof => bn(proof.value)),\n                merkleTrees: newAddressProofs.map(proof => proof.merkleTree),\n                nullifierQueues: newAddressProofs.map(\n                    proof => proof.nullifierQueue,\n                ),\n            };\n        } else if (hashes.length > 0 && newAddresses.length > 0) {\n            /// combined\n            const merkleProofsWithContext =\n                await this.getMultipleCompressedAccountProofs(hashes);\n            const inputs = convertMerkleProofsWithContextToHex(\n                merkleProofsWithContext,\n            );\n            const newAddressProofs: MerkleContextWithNewAddressProof[] =\n                await this.getMultipleNewAddressProofs(newAddresses);\n\n            const newAddressInputs =\n                convertNonInclusionMerkleProofInputsToHex(newAddressProofs);\n\n            const compressedProof = await proverRequest(\n                this.proverEndpoint,\n                'combined',\n                [inputs, newAddressInputs],\n                this.log,\n            );\n\n            validityProof = {\n                compressedProof,\n                roots: merkleProofsWithContext\n                    .map(proof => proof.root)\n                    .concat(newAddressProofs.map(proof => proof.root)),\n                rootIndices: merkleProofsWithContext\n                    .map(proof => proof.rootIndex)\n                    // TODO(crank): make dynamic to enable forester support in\n                    // test-rpc.ts. Currently this is a static root because the\n                    // address tree doesn't advance.\n                    .concat(newAddressProofs.map(_ => 3)),\n                leafIndices: merkleProofsWithContext\n                    .map(proof => proof.leafIndex)\n                    .concat(\n                        newAddressProofs.map(\n                            proof =>\n                                proof.indexHashedIndexedElementLeaf.toNumber(), // TODO: support >32bit\n                        ),\n                    ),\n                leaves: merkleProofsWithContext\n                    .map(proof => bn(proof.hash))\n                    .concat(newAddressProofs.map(proof => bn(proof.value))),\n                merkleTrees: merkleProofsWithContext\n                    .map(proof => proof.merkleTree)\n                    .concat(newAddressProofs.map(proof => proof.merkleTree)),\n                nullifierQueues: merkleProofsWithContext\n                    .map(proof => proof.nullifierQueue)\n                    .concat(\n                        newAddressProofs.map(proof => proof.nullifierQueue),\n                    ),\n            };\n        } else throw new Error('Invalid input');\n\n        return validityProof;\n    }\n\n    async getValidityProofV0(\n        hashes: HashWithTree[] = [],\n        newAddresses: AddressWithTree[] = [],\n    ): Promise<CompressedProofWithContext> {\n        /// TODO(swen): add support for custom trees\n        return this.getValidityProof(\n            hashes.map(hash => hash.hash),\n            newAddresses.map(address => address.address),\n        );\n    }\n}\n"],"names":["IDL","sendAndConfirmTransaction","Connection","BN","PublicKey","Buffer","_a","require$$0","bs58","encode","decode","bs58.decode","bs58.encode","bytes","abytes","Keypair","TransactionMessage","VersionedTransaction","AnchorProvider","setProvider","Program","SystemProgram","ComputeBudgetProgram","UtxoErrorCode","SelectInUtxosErrorCode","CreateUtxoErrorCode","RpcErrorCode","LookupTableErrorCode","HashErrorCode","ProofErrorCode","MerkleTreeErrorCode","UtilsErrorCode","coerce","instance","string","number","union","pick","literal","unknown","nullable","any","create","array","SolanaJSONRPCError","buffer_1","this","require$$1","require$$2","require$$3","BorshCoder"],"mappings":"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","x_google_ignoreList":[4,5,6,7,8,11,12,13,14,40,41,42,43,44,45]}