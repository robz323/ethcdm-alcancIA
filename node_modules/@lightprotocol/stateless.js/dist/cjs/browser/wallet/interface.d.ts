import { Commitment, Connection, Keypair, VersionedTransaction } from '@solana/web3.js';
import { PublicKey, Transaction } from '@solana/web3.js';
export type InclusionProofPublicInputs = {
    root: string;
    leaf: string;
};
export type InclusionProofPrivateInputs = {
    merkleProof: string[];
    leaf: string;
    leafIndex: string;
};
export type InclusionProofInputs = (InclusionProofPublicInputs & InclusionProofPrivateInputs)[];
export declare class Wallet {
    _publicKey: PublicKey;
    _keypair: Keypair;
    _connection: Connection;
    _url: string;
    _commitment: Commitment;
    constructor(keypair: Keypair, url: string, commitment: Commitment);
    signTransaction: (tx: any) => Promise<any>;
    sendTransaction: (transaction: VersionedTransaction) => Promise<string>;
    signAllTransactions: <T extends Transaction | VersionedTransaction>(transactions: T[]) => Promise<T[]>;
    signMessage: (message: Uint8Array) => Promise<Uint8Array>;
    sendAndConfirmTransaction: (transaction: Transaction, signers?: never[]) => Promise<any>;
}
