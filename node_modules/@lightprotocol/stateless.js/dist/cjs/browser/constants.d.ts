import { BN } from '@coral-xyz/anchor';
import { ConfirmOptions, PublicKey } from '@solana/web3.js';
export declare const FIELD_SIZE: BN;
export declare const HIGHEST_ADDRESS_PLUS_ONE: BN;
export declare const noopProgram = "noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV";
export declare const lightProgram = "SySTEM1eSU2p4BGQfQpimFEWWSC1XDFeun3Nqzz3rT7";
export declare const accountCompressionProgram = "compr6CUsB5m2jS4Y3831ztGSTnDpnKJTKS95d64XVq";
export declare const getRegisteredProgramPda: () => PublicKey;
export declare const getAccountCompressionAuthority: () => PublicKey;
export declare const defaultStaticAccounts: () => PublicKey[];
export declare const defaultStaticAccountsStruct: () => {
    registeredProgramPda: PublicKey;
    noopProgram: PublicKey;
    accountCompressionProgram: PublicKey;
    accountCompressionAuthority: PublicKey;
    cpiSignatureAccount: null;
};
export declare const defaultTestStateTreeAccounts: () => {
    nullifierQueue: PublicKey;
    merkleTree: PublicKey;
    merkleTreeHeight: number;
    addressTree: PublicKey;
    addressQueue: PublicKey;
};
export declare const nullifierQueuePubkey = "nfq1NvQDJ2GEgnS8zt9prAe8rjjpAW1zFkrvZoBR148";
export declare const merkletreePubkey = "smt1NamzXdq4AMqS2fS2F1i5KTYPZRhoHgWx38d8WsT";
export declare const addressTree = "amt1Ayt45jfbdw5YSo7iz6WZxUmnZsQTYXy82hVwyC2";
export declare const addressQueue = "aq1S9z4reTSQAdgWHGD2zDaS39sjGrAxbR31vxJ2F4F";
export declare const confirmConfig: ConfirmOptions;
export declare const DEFAULT_MERKLE_TREE_HEIGHT = 26;
export declare const DEFAULT_MERKLE_TREE_ROOTS = 2800;
/** Threshold (per asset) at which new in-UTXOs get merged, in order to reduce UTXO pool size */
export declare const UTXO_MERGE_THRESHOLD = 20;
export declare const UTXO_MERGE_MAXIMUM = 10;
/**
 * Treshold after which the currently used transaction Merkle tree is switched
 * to the next one
 */
export declare const TRANSACTION_MERKLE_TREE_ROLLOVER_THRESHOLD: BN;
/**
 * Fee to provide continous funding for the state Merkle tree.
 * Once the state Merkle tree is at 95% capacity the accumulated fees
 * will be used to fund the next state Merkle tree with the same parameters.
 *
 * Is charged per output compressed account.
 */
export declare const STATE_MERKLE_TREE_ROLLOVER_FEE: BN;
/**
 * Fee to provide continous funding for the address queue and address Merkle tree.
 * Once the address Merkle tree is at 95% capacity the accumulated fees
 * will be used to fund the next address queue and address tree with the same parameters.
 *
 * Is charged per newly created address.
 */
export declare const ADDRESS_QUEUE_ROLLOVER_FEE: BN;
/**
 * Is charged if the transaction nullifies at least one compressed account.
 */
export declare const STATE_MERKLE_TREE_NETWORK_FEE: BN;
/**
 * Is charged if the transaction creates at least one address.
 */
export declare const ADDRESS_TREE_NETWORK_FEE: BN;
