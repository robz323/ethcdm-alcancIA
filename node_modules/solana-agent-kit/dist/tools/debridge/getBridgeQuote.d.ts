import { deBridgeOrderInput, deBridgeOrderResponse } from "../../types";
/**
 * Get a quote for bridging tokens between chains AND build the transaction.
 * This endpoint returns both the quote and transaction data needed for execution.
 *
 * @param params Required parameters for building a bridge transaction
 * @param params.srcChainId Source chain ID (e.g., "1" for Ethereum)
 * @param params.srcChainTokenIn Source token address (use "0x0000000000000000000000000000000000000000" for native tokens on EVM)
 * @param params.srcChainTokenInAmount Amount of source tokens to bridge (in smallest units)
 * @param params.dstChainId Destination chain ID (e.g., "7565164" for Solana)
 * @param params.dstChainTokenOut Destination token address
 * @param params.dstChainTokenOutRecipient Recipient address on destination chain
 * @param params.slippage Optional slippage tolerance in percentage (e.g., 0.5 for 0.5%)
 * @returns Quote information and transaction data
 */
export declare function getBridgeQuote(params: deBridgeOrderInput): Promise<deBridgeOrderResponse>;
//# sourceMappingURL=getBridgeQuote.d.ts.map