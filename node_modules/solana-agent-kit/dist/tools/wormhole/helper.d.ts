import { ChainAddress, ChainContext, Network, Signer, Wormhole, Chain, TokenId } from "@wormhole-foundation/sdk";
/**
 * Interface representing a signer for a specific blockchain
 *
 * @template N - Network type (Mainnet, Testnet, Devnet)
 * @template C - Chain type (Solana, Ethereum, etc.)
 *
 * @property {ChainContext<N, C>} chain - The chain context
 * @property {Signer<N, C>} signer - The signer for the chain
 * @property {ChainAddress<C>} address - The address of the signer
 */
export interface SignerStuff<N extends Network, C extends Chain> {
    chain: ChainContext<N, C>;
    signer: Signer<N, C>;
    address: ChainAddress<C>;
}
/**
 * Creates a signer for a specific blockchain
 *
 * This function handles the creation of signers for different blockchain platforms
 * (Solana, EVM, Sui, Aptos) using private keys from environment variables.
 *
 * @template N - Network type (Mainnet, Testnet, Devnet)
 * @template C - Chain type (Solana, Ethereum, etc.)
 *
 * @param {ChainContext<N, C>} chain - The chain context
 * @param {bigint} [gasLimit] - Optional gas limit for EVM chains
 *
 * @returns {Promise<SignerStuff<N, C>>} The signer, chain context, and address
 * @throws {Error} If the platform is not supported or if required environment variables are missing
 */
export declare function getSigner<N extends Network, C extends Chain>(chain: ChainContext<N, C>, gasLimit?: bigint): Promise<{
    chain: ChainContext<N, C>;
    signer: Signer<N, C>;
    address: ChainAddress<C>;
}>;
export declare function getTokenDecimals<N extends "Mainnet" | "Testnet" | "Devnet">(wh: Wormhole<N>, token: TokenId, sendChain: ChainContext<N, any>): Promise<number>;
//# sourceMappingURL=helper.d.ts.map