"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cctpTransfer = void 0;
const sdk_1 = require("@wormhole-foundation/sdk");
const evm_1 = __importDefault(require("@wormhole-foundation/sdk/evm"));
const solana_1 = __importDefault(require("@wormhole-foundation/sdk/solana"));
const sui_1 = __importDefault(require("@wormhole-foundation/sdk/sui"));
const aptos_1 = __importDefault(require("@wormhole-foundation/sdk/aptos"));
const helper_1 = require("./helper");
// Main USDC transfer function using Circle's CCTP
/**
 * Executes a USDC transfer across different blockchains using Circle's Cross-Chain Transfer Protocol (CCTP)
 * via the Wormhole bridge infrastructure.
 *
 * @param input - Object containing transfer details (destination chain, amount, network)
 * @returns Object with transfer status and transaction details or error information
 */
const cctpTransfer = async (input) => {
    const { destinationChain, transferAmount, network = "Mainnet" } = input;
    const sourceChain = "Solana"; // Source chain is fixed to Solana
    const automatic = false; // Manual attestation mode (not using automatic relayers)
    const nativeGasAmount = 0; // No native gas provided for automatic transfers
    try {
        // Initialize the Wormhole SDK with supported blockchain adapters
        const wh = await (0, sdk_1.wormhole)(network, [evm_1.default, solana_1.default, sui_1.default, aptos_1.default]);
        // Get chain context objects for source and destination chains
        const sendChain = wh.getChain(sourceChain);
        const rcvChain = wh.getChain(destinationChain);
        // Retrieve wallet signers for both chains
        const src = await (0, helper_1.getSigner)(sendChain);
        const dst = await (0, helper_1.getSigner)(rcvChain);
        // Parse the transfer amount to the correct decimal precision (USDC uses 6 decimals)
        const amt = sdk_1.amount.units(sdk_1.amount.parse(transferAmount, 6));
        // Calculate native gas amount for automatic transfers (if enabled)
        // Currently not used as automatic is set to false
        const nativeGas = automatic && nativeGasAmount
            ? sdk_1.amount.units(sdk_1.amount.parse(nativeGasAmount, 6))
            : 0n;
        // Create a USDC transfer object with the specified parameters
        const xfer = await wh.circleTransfer(amt, src.address, dst.address, automatic, undefined, // No payload - optional data that can be attached to the transfer
        nativeGas);
        // Get a cost estimate for the transfer (fees, gas, etc.)
        const quote = await sdk_1.CircleTransfer.quoteTransfer(src.chain, dst.chain, xfer.transfer);
        // Initiate the transfer on the source chain
        const srcTxids = await xfer.initiateTransfer(src.signer);
        // For automatic transfers, the relay would handle attestation and completion
        // Since we're using manual mode, we need to handle these steps ourselves
        // Wait for the Circle attestation (proof that the tokens were locked on source chain)
        // Timeout after 60 seconds if no attestation is received
        const attestIds = await xfer.fetchAttestation(60000);
        // Complete the transfer on the destination chain using the attestation
        const dstTxids = await xfer.completeTransfer(dst.signer);
        // Return a success response with all relevant transaction details
        return {
            success: true,
            status: "Completed",
            sourceChain: sourceChain,
            destinationChain: destinationChain,
            amount: transferAmount,
            sourceTransaction: srcTxids,
            attestation: attestIds,
            destinationTransaction: dstTxids,
            automatic: false,
        };
    }
    catch (error) {
        // Handle any errors that occur during the transfer process
        return {
            success: false,
            error: error instanceof Error ? error.message : String(error),
        };
    }
};
exports.cctpTransfer = cctpTransfer;
//# sourceMappingURL=cctpTransfer.js.map