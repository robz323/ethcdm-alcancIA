"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
const web3_js_1 = require("@solana/web3.js");
const tools_1 = require("../../tools");
const decimal_js_1 = __importDefault(require("decimal.js"));
const openOrcaCenteredPositionWithLiquidityAction = {
    name: "OPEN_ORCA_CENTERED_POSITION_WITH_LIQUIDITY_ACTION",
    description: "Open a new Orca whirlpool position with liquidity centered around the current price. This function opens a new liquidity position in an Orca whirlpool with the provided liquidity amount centered around the current price.",
    similes: [
        "open orca liquidity position",
        "open orca whirlpool position",
        "open orca liquidity pool",
        "open new orca liquidity position",
        "open centered orca liquidity position",
    ],
    examples: [
        [
            {
                input: {
                    whirlpoolAddress: "EPjasdf...",
                    priceOffsetBps: 500,
                    inputTokenMint: "EPjasdf...",
                    inputAmount: 100.0,
                },
                output: {
                    status: "success",
                    signature: "12Erx...",
                    message: "Centered liquidity position opened successfully",
                },
                explanation: "Open a USDC/SOL whirlpool position",
            },
        ],
    ],
    schema: zod_1.z.object({
        whirlpoolAddress: zod_1.z
            .string()
            .describe("The address of the Orca whirlpool to open a position in"),
        priceOffsetBps: zod_1.z
            .number()
            .positive()
            .min(100)
            .describe("The price offset in basis points for the new position"),
        inputTokenMint: zod_1.z
            .string()
            .describe("The mint address of the token to deposit"),
        inputAmount: zod_1.z
            .number()
            .positive()
            .describe("The amount of the token to deposit"),
    }),
    handler: async (agent, input) => {
        try {
            const [whirlpoolAddress, inputTokenMint, priceOffsetBps, inputAmount] = [
                new web3_js_1.PublicKey(input.whirlpoolAddress),
                new web3_js_1.PublicKey(input.inputTokenMint),
                input.priceOffsetBps,
                new decimal_js_1.default(input.inputAmount),
            ];
            const signature = await (0, tools_1.orcaOpenCenteredPositionWithLiquidity)(agent, whirlpoolAddress, priceOffsetBps, inputTokenMint, inputAmount);
            return {
                status: "success",
                signature,
                message: "Centered liquidity position opened successfully",
            };
        }
        catch (e) {
            return {
                status: "error",
                // @ts-expect-error - TS doesn't know that `e` has a `message` property
                message: `Failed to open centered Orca whirlpool position: ${e.message}`,
            };
        }
    },
};
exports.default = openOrcaCenteredPositionWithLiquidityAction;
//# sourceMappingURL=openOrcaCenteredPositionWithLiquidity.js.map