"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
const mergeTokensAction = {
    name: "SOLUTIOFI_MERGE_TOKENS",
    description: "Merge multiple tokens into one using SolutioFi",
    similes: [
        "merge tokens",
        "combine tokens",
        "swap tokens",
        "merge tokens with solutiofi",
        "swap multiple tokens for one",
        "convert tokens into a single asset",
        "merge SPL tokens",
        "swap tokens into one",
        "combine assets into one token",
        "convert multiple tokens into one",
        "swap multiple assets into a single token",
        "combine token holdings",
        "exchange tokens for a unified asset",
        "aggregate tokens into one",
    ],
    examples: [
        [
            {
                input: {
                    inputAssets: [
                        { mint: "mint1", amount: "100" },
                        { mint: "mint2", amount: "200" },
                    ],
                    outputMint: "outputMint123",
                    priorityFee: "fast",
                },
                output: {
                    status: "success",
                    message: "Successfully merged tokens",
                    result: { transaction: "tx_signature" },
                },
                explanation: "Merge multiple tokens into one output token",
            },
        ],
    ],
    schema: zod_1.z.object({
        inputAssets: zod_1.z
            .array(zod_1.z.object({
            mint: zod_1.z.string(),
            amount: zod_1.z.string(),
        }))
            .describe("Array of input assets to merge"),
        outputMint: zod_1.z.string().describe("Output token mint address"),
        priorityFee: zod_1.z
            .enum(["fast", "turbo", "ultra"])
            .describe("Transaction priority level"),
    }),
    handler: async (agent, input) => {
        try {
            const { inputAssets, outputMint, priorityFee } = input;
            const result = await agent.mergeTokens(inputAssets, outputMint, priorityFee);
            return {
                status: "success",
                result,
                message: "Successfully merged tokens",
            };
        }
        catch (error) {
            return {
                status: "error",
                message: `Failed to merge tokens: ${error.message}`,
                code: error.code || "MERGE_TOKENS_ERROR",
            };
        }
    },
};
exports.default = mergeTokensAction;
//# sourceMappingURL=mergeTokens.js.map