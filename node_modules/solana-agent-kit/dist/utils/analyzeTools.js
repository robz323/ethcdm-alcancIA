"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeToolTokens = analyzeToolTokens;
const tiktoken_1 = require("tiktoken");
const index_1 = require("../index");
const dotenv = __importStar(require("dotenv"));
const index_2 = require("../actions/index");
const index_3 = require("../langchain/index");
const index_4 = require("../vercel-ai/index");
dotenv.config();
function calculateActionTokens(action, enc) {
    // You can customize how you want to weigh or encode the action
    const description = action.description || "";
    const schema = JSON.stringify(action.schema || {});
    const similes = action.similes || [];
    const descTokens = enc.encode(description).length;
    const schemaTokens = enc.encode(schema).length;
    const similesTokens = similes.reduce((acc, simile) => {
        return acc + enc.encode(simile).length;
    }, 0);
    return descTokens + schemaTokens + similesTokens;
}
function calculateLangchainTokens(tool, enc) {
    // For Langchain, maybe you only want to encode the description
    // or possibly there's a manifest or advanced schema. Adjust to suit your needs.
    const description = tool.description || "";
    const schema = JSON.stringify(tool.schema || {});
    const descTokens = enc.encode(description).length;
    const schemaTokens = enc.encode(schema).length;
    return descTokens + schemaTokens;
}
function calculateVercelTokens(tool, enc) {
    // @ts-expect-error for some reason, the description is not expected to exist
    const description = tool.description || "";
    // @ts-expect-error for some reason, the schema is not expected to exist
    const schemaStr = JSON.stringify(tool.schema || {});
    const parameters = JSON.stringify(tool.parameters || {});
    const descTokens = enc.encode(description).length;
    const schemaTokens = enc.encode(schemaStr).length;
    const parametersTokens = enc.encode(parameters).length;
    return descTokens + schemaTokens + parametersTokens;
}
async function analyzeToolTokens(modelName = "gpt-4o", includeLangchain = false) {
    const enc = (0, tiktoken_1.encoding_for_model)(modelName);
    const solanaAgentKit = new index_1.SolanaAgentKit(process.env.SOLANA_PRIVATE_KEY || "", process.env.RPC_URL || "", { OPENAI_API_KEY: process.env.OPENAI_API_KEY || "" });
    // Unify tools by name
    const toolMap = new Map();
    // Only load Langchain tools if flag is set
    if (includeLangchain) {
        const langchainTools = (0, index_3.createSolanaTools)(solanaAgentKit);
        langchainTools.forEach((tool) => {
            toolMap.set(tool.name, {
                action: undefined,
                langchain: tool,
                vercel: undefined,
            });
        });
    }
    else {
        const vercelTools = (0, index_4.createSolanaTools)(solanaAgentKit);
        Object.keys(index_2.ACTIONS).forEach((toolName) => {
            toolMap.set(toolName, {
                action: index_2.ACTIONS[toolName],
                langchain: undefined,
                vercel: vercelTools[toolName],
            });
        });
    }
    const analysis = [];
    for (const [name, implementations] of toolMap) {
        const entry = {
            name,
            actionTokens: 0,
            langchainTokens: 0,
            vercelTokens: 0,
            totalTokens: 0,
        };
        // 1) Action tokens
        if (implementations.action) {
            entry.actionTokens = calculateActionTokens(implementations.action, enc);
        }
        // 2) Langchain tokens
        if (implementations.langchain) {
            entry.langchainTokens = calculateLangchainTokens(implementations.langchain, enc);
        }
        // 3) Vercel AI tokens
        if (implementations.vercel) {
            entry.vercelTokens = calculateVercelTokens(implementations.vercel, enc);
        }
        // Update total calculation to exclude Langchain if not included
        if (includeLangchain) {
            entry.totalTokens = entry.langchainTokens;
        }
        else {
            entry.totalTokens = entry.actionTokens + entry.vercelTokens;
        }
        analysis.push(entry);
    }
    // Sort by total tokens descending
    const sorted = analysis.sort((a, b) => b.totalTokens - a.totalTokens);
    // Print final table
    console.log("\nCross-Implementation Tool Token Analysis:");
    if (includeLangchain) {
        console.table(sorted.map((t) => ({
            Name: t.name,
            "Langchain Tokens": t.langchainTokens,
        })));
    }
    else {
        console.table(sorted.map((t) => ({
            Name: t.name,
            "Action Tokens": t.actionTokens,
            "Vercel AI Tokens": t.vercelTokens,
        })));
    }
    // Print category totals
    const totals = sorted.reduce((acc, t) => ({
        action: acc.action + t.actionTokens,
        langchain: acc.langchain + t.langchainTokens,
        vercel: acc.vercel + t.vercelTokens,
        total: acc.total + t.totalTokens,
    }), { action: 0, langchain: 0, vercel: 0, total: 0 });
    console.log("\nCategory Totals:");
    if (includeLangchain) {
        console.table([
            {
                "Langchain Total": totals.langchain,
                "Grand Total": totals.total,
            },
        ]);
    }
    else {
        console.table([
            {
                "Action Total": totals.action,
                "Vercel Total": totals.vercel,
                "Grand Total": totals.total,
            },
        ]);
    }
    enc.free();
    return sorted;
}
// Update standalone execution to accept CLI flag
if (require.main === module) {
    const includeLangchain = process.argv.includes("--langchain");
    analyzeToolTokens("gpt-4o", includeLangchain).catch((err) => {
        console.error(err);
        process.exit(1);
    });
}
//# sourceMappingURL=analyzeTools.js.map