"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckDebridgeStatusTool = void 0;
const tools_1 = require("langchain/tools");
class CheckDebridgeStatusTool extends tools_1.Tool {
    constructor(solanaKit) {
        super();
        this.solanaKit = solanaKit;
        this.name = "check_bridge_status";
        this.description = `This tool checks the status of a bridge transaction.

  Inputs (input is a JSON string):
  txHashOrOrderId: string, eg "0x1234abcd..." or "3Dq8kH5oeN..." - Transaction hash (0x-prefixed for EVM) or Solana Signature to check (required)`;
    }
    async _call(input) {
        try {
            const { txHashOrOrderId } = JSON.parse(input);
            if (!txHashOrOrderId) {
                throw new Error("Missing txHashOrOrderId in input");
            }
            const result = await this.solanaKit.checkDebridgeTransactionStatus(txHashOrOrderId);
            return JSON.stringify({
                status: "success",
                message: "Successfully retrieved bridge order status",
                data: result,
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.CheckDebridgeStatusTool = CheckDebridgeStatusTool;
//# sourceMappingURL=check_bridge_status.js.map