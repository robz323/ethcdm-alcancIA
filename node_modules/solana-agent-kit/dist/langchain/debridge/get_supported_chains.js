"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetDebridgeSupportedChainsTool = void 0;
const tools_1 = require("langchain/tools");
class GetDebridgeSupportedChainsTool extends tools_1.Tool {
    constructor(solanaKit) {
        super();
        this.solanaKit = solanaKit;
        this.name = "get_supported_chains";
        this.description = `This tool gets a list of chains supported by the deBridge DLN protocol.

  Inputs: No input required`;
    }
    async _call(_input) {
        try {
            const result = await this.solanaKit.getDebridgeSupportedChains();
            return JSON.stringify({
                status: "success",
                message: "Successfully retrieved supported chains",
                data: result,
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.GetDebridgeSupportedChainsTool = GetDebridgeSupportedChainsTool;
//# sourceMappingURL=get_supported_chains.js.map