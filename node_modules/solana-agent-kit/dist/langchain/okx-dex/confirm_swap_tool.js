"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOKXDexConfirmSwapTool = createOKXDexConfirmSwapTool;
exports.setPendingSwap = setPendingSwap;
exports.clearPendingSwap = clearPendingSwap;
const execute_swap_1 = require("../../tools/okx-dex/execute_swap");
const tools_1 = require("@langchain/core/tools");
const zod_1 = require("zod");
// This would typically store the pending swap in memory or in a database
let pendingSwap = null;
/**
 * Creates a LangChain tool to confirm swaps on OKX DEX
 * @param agent SolanaAgentKit instance
 * @returns DynamicStructuredTool for confirming swaps
 */
function createOKXDexConfirmSwapTool(agent) {
    return new tools_1.DynamicStructuredTool({
        name: "confirm_okx_dex_swap",
        description: "Confirms and executes a pending token swap on OKX DEX",
        schema: zod_1.z.object({}),
        func: async () => {
            try {
                if (!pendingSwap) {
                    return JSON.stringify({
                        status: "error",
                        message: "No pending swap to confirm",
                    });
                }
                const { fromTokenAddress, toTokenAddress, amount, slippage, autoSlippage, maxAutoSlippageBps, userWalletAddress, } = pendingSwap;
                const result = await (0, execute_swap_1.executeSwap)(agent, fromTokenAddress, toTokenAddress, amount, slippage, autoSlippage, maxAutoSlippageBps, userWalletAddress);
                // Clear the pending swap
                pendingSwap = null;
                return JSON.stringify(result);
            }
            catch (error) {
                return JSON.stringify({
                    status: "error",
                    message: error.message || "Failed to confirm swap",
                });
            }
        },
    });
}
/**
 * Set a pending swap to be confirmed later
 * @param swap Swap details
 */
function setPendingSwap(swap) {
    pendingSwap = swap;
}
/**
 * Clear any pending swap
 */
function clearPendingSwap() {
    pendingSwap = null;
}
//# sourceMappingURL=confirm_swap_tool.js.map