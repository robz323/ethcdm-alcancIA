"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOKXDexExecuteSwapTool = createOKXDexExecuteSwapTool;
const execute_swap_1 = require("../../tools/okx-dex/execute_swap");
const tools_1 = require("@langchain/core/tools");
const zod_1 = require("zod");
/**
 * Creates a LangChain tool to execute swaps on OKX DEX
 * @param agent SolanaAgentKit instance
 * @returns DynamicStructuredTool for executing swaps
 */
function createOKXDexExecuteSwapTool(agent) {
    return new tools_1.DynamicStructuredTool({
        name: "execute_okx_dex_swap",
        description: "Executes a token swap on OKX DEX",
        schema: zod_1.z.object({
            fromTokenAddress: zod_1.z.string().describe("Source token address"),
            toTokenAddress: zod_1.z.string().describe("Target token address"),
            amount: zod_1.z.string().describe("Amount to swap in base units"),
            slippage: zod_1.z
                .string()
                .optional()
                .describe("Slippage tolerance (default: 0.5%)"),
            autoSlippage: zod_1.z
                .boolean()
                .optional()
                .describe("Use auto slippage (default: false)"),
            maxAutoSlippageBps: zod_1.z
                .string()
                .optional()
                .describe("Maximum auto slippage in basis points (default: 100 = 1%)"),
            userWalletAddress: zod_1.z
                .string()
                .optional()
                .describe("User wallet address (default: agent's wallet address)"),
        }),
        func: async ({ fromTokenAddress, toTokenAddress, amount, slippage = "0.5", autoSlippage = false, maxAutoSlippageBps = "100", userWalletAddress, }) => {
            try {
                const result = await (0, execute_swap_1.executeSwap)(agent, fromTokenAddress, toTokenAddress, amount, slippage, autoSlippage, maxAutoSlippageBps, userWalletAddress);
                return JSON.stringify(result);
            }
            catch (error) {
                return JSON.stringify({
                    status: "error",
                    message: error.message || "Failed to execute swap",
                });
            }
        },
    });
}
//# sourceMappingURL=execute_swap_tool.js.map