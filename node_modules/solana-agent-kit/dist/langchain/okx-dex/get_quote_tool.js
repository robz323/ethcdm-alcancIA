"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOKXDexGetQuoteTool = createOKXDexGetQuoteTool;
const get_quote_1 = require("../../tools/okx-dex/get_quote");
const tools_1 = require("@langchain/core/tools");
const zod_1 = require("zod");
/**
 * Creates a LangChain tool to get OKX DEX quote
 * @param agent SolanaAgentKit instance
 * @returns DynamicStructuredTool for getting quotes
 */
function createOKXDexGetQuoteTool(agent) {
    return new tools_1.DynamicStructuredTool({
        name: "get_okx_dex_quote",
        description: "Gets a quote for swapping tokens on OKX DEX",
        schema: zod_1.z.object({
            fromTokenAddress: zod_1.z.string().describe("Source token address"),
            toTokenAddress: zod_1.z.string().describe("Target token address"),
            amount: zod_1.z.string().describe("Amount to swap in base units"),
            slippage: zod_1.z
                .string()
                .optional()
                .describe("Slippage tolerance (default: 0.5%)"),
        }),
        func: async ({ fromTokenAddress, toTokenAddress, amount, slippage = "0.5", }) => {
            try {
                const result = await (0, get_quote_1.getQuote)(agent, fromTokenAddress, toTokenAddress, amount, slippage);
                return JSON.stringify(result);
            }
            catch (error) {
                return JSON.stringify({
                    status: "error",
                    message: error.message || "Failed to get quote",
                });
            }
        },
    });
}
//# sourceMappingURL=get_quote_tool.js.map