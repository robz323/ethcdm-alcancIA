"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CctpTransferTool = void 0;
const tools_1 = require("@langchain/core/tools");
class CctpTransferTool extends tools_1.Tool {
    constructor(solanaKit) {
        super();
        this.solanaKit = solanaKit;
        this.name = "cctpTransfer";
        this.description = `Transfer USDC from Solana to another chain.

  Inputs (input is a JSON string):
  - destinationChain: string, eg "Ethereum" or "BaseSepolia"
  - transferAmount: string, eg "1"
  - network: string, eg "Mainnet" or "Testnet"
  `;
    }
    async _call(input) {
        try {
            const parsedInput = JSON.parse(input);
            const result = await this.solanaKit.cctpTransfer(parsedInput);
            return JSON.stringify({
                status: "success",
                message: "USDC transferred successfully",
                result,
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
            });
        }
    }
}
exports.CctpTransferTool = CctpTransferTool;
//# sourceMappingURL=cctpTransfer.js.map