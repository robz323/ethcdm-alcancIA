"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaFluxbeamCreatePoolTool = void 0;
const web3_js_1 = require("@solana/web3.js");
const tools_1 = require("langchain/tools");
class SolanaFluxbeamCreatePoolTool extends tools_1.Tool {
    constructor(solanaKit) {
        super();
        this.solanaKit = solanaKit;
        this.name = "fluxbeam_create_pool";
        this.description = `This tool can be used to create a new token pool using FluxBeam.

  Inputs (input is a JSON string):
  token_a: string, eg "So11111111111111111111111111111111111111112" (required)
  token_a_amount: number, eg 100 or 0.1 (required)
  token_b: string, eg "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263" (required)
  token_b_amount: number, eg 200 or 0.2 (required)`;
    }
    async _call(input) {
        try {
            const parsedInput = JSON.parse(input);
            const signature = await this.solanaKit.fluxbeamCreatePool(new web3_js_1.PublicKey(parsedInput.token_a), parsedInput.token_a_amount, new web3_js_1.PublicKey(parsedInput.token_b), parsedInput.token_b_amount);
            return JSON.stringify({
                status: "success",
                message: "Token pool created successfully",
                transaction: signature,
                token_a: parsedInput.token_a,
                token_a_amount: parsedInput.token_a_amount,
                token_b: parsedInput.token_b,
                token_b_amount: parsedInput.token_b_amount,
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.SolanaFluxbeamCreatePoolTool = SolanaFluxbeamCreatePoolTool;
//# sourceMappingURL=create_pool.js.map