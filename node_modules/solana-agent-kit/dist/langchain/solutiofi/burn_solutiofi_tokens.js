"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaBurnTokensTool = void 0;
const tools_1 = require("langchain/tools");
class SolanaBurnTokensTool extends tools_1.Tool {
    constructor(solanaKit) {
        super();
        this.solanaKit = solanaKit;
        this.name = "burn_solutiofi_tokens";
        this.description = `Burn tokens using SolutioFi protocol.
  
  Inputs (JSON string):
  - mints: string, mint ids of tokens to burn (required).
  `;
    }
    async _call(input) {
        try {
            const parsedInput = JSON.parse(input);
            if (!Array.isArray(parsedInput.mints) ||
                parsedInput.mints.some((mint) => typeof mint !== "string")) {
                throw new Error("mints must be an array of valid string addresses.");
            }
            const { mints } = parsedInput;
            const transactions = await this.solanaKit.burnTokens(mints);
            return JSON.stringify({
                status: "success",
                transactions,
            });
        }
        catch (error) {
            return JSON.stringify({ status: "error", message: error.message });
        }
    }
}
exports.SolanaBurnTokensTool = SolanaBurnTokensTool;
//# sourceMappingURL=burn_solutiofi_tokens.js.map