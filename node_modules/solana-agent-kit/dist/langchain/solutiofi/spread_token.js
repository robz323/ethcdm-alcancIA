"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaSpreadTokenTool = void 0;
const tools_1 = require("langchain/tools");
class SolanaSpreadTokenTool extends tools_1.Tool {
    constructor(solanaKit) {
        super();
        this.solanaKit = solanaKit;
        this.name = "spread_token";
        this.description = `Spread token using SolutioFi protocol.

  Inputs (input is a JSON string):
  - owner: string, the wallet address of the owner (required)
  - inputAsset: string, the asset to be distributed (required)
    - mint: string, the mint address of the input token (required)
    - inputAmount: string, the amount of the input token (required)
    - slippage: string, slippage percentage allowed (required)
    - onlyDirectRoutes: boolean, whether to use only direct swap routes (required)
  - targetTokens: string, an array of target tokens and their distribution percentages (required)
    - mint: string, the mint address of the target token (required)
    - percentage: number, the percentage of the input amount to allocate (required)
  - priorityFee: string, priority level for the transaction, allowed values: "fast", "normal", "slow" (required)`;
    }
    async _call(input) {
        try {
            const { inputAsset, targetTokens, priorityFee } = JSON.parse(input);
            const result = await this.solanaKit.spreadToken(inputAsset, targetTokens, priorityFee);
            return JSON.stringify({
                status: "success",
                result,
            });
        }
        catch (error) {
            return JSON.stringify({ status: "error", message: error.message });
        }
    }
}
exports.SolanaSpreadTokenTool = SolanaSpreadTokenTool;
//# sourceMappingURL=spread_token.js.map