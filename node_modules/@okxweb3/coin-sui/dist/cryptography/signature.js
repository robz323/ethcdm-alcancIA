"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromSerializedSignature = exports.toSerializedSignature = exports.SIGNATURE_FLAG_TO_SCHEME = exports.SIGNATURE_SCHEME_TO_FLAG = void 0;
const bcs_1 = require("../bcs");
const ed25519_publickey_1 = require("./ed25519-publickey");
exports.SIGNATURE_SCHEME_TO_FLAG = {
    ED25519: 0x00,
    Secp256k1: 0x01,
};
exports.SIGNATURE_FLAG_TO_SCHEME = {
    0x00: 'ED25519',
    0x01: 'Secp256k1',
};
function toSerializedSignature({ signature, signatureScheme, pubKey, }) {
    const serializedSignature = new Uint8Array(1 + signature.length + pubKey.toBytes().length);
    serializedSignature.set([exports.SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);
    serializedSignature.set(signature, 1);
    serializedSignature.set(pubKey.toBytes(), 1 + signature.length);
    return (0, bcs_1.toB64)(serializedSignature);
}
exports.toSerializedSignature = toSerializedSignature;
function fromSerializedSignature(serializedSignature) {
    const bytes = (0, bcs_1.fromB64)(serializedSignature);
    const signatureScheme = exports.SIGNATURE_FLAG_TO_SCHEME[bytes[0]];
    const PublicKey = ed25519_publickey_1.Ed25519PublicKey;
    const signature = bytes.slice(1, bytes.length - PublicKey.SIZE);
    const pubkeyBytes = bytes.slice(1 + signature.length);
    const pubKey = new PublicKey(pubkeyBytes);
    return {
        signatureScheme,
        signature,
        pubKey,
    };
}
exports.fromSerializedSignature = fromSerializedSignature;
//# sourceMappingURL=signature.js.map