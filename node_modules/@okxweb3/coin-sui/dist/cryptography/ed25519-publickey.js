"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519PublicKey = void 0;
const crypto_lib_1 = require("@okxweb3/crypto-lib");
const bcs_1 = require("../bcs");
const publickey_1 = require("./publickey");
const signature_1 = require("./signature");
const types_1 = require("../types");
const PUBLIC_KEY_SIZE = 32;
class Ed25519PublicKey {
    constructor(value) {
        if (typeof value === 'string') {
            this.data = (0, bcs_1.fromB64)(value);
        }
        else if (value instanceof Uint8Array) {
            this.data = value;
        }
        else {
            this.data = Uint8Array.from(value);
        }
        if (this.data.length !== PUBLIC_KEY_SIZE) {
            throw new Error(`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);
        }
    }
    equals(publicKey) {
        return (0, publickey_1.bytesEqual)(this.toBytes(), publicKey.toBytes());
    }
    toBase64() {
        return (0, bcs_1.toB64)(this.toBytes());
    }
    toBytes() {
        return this.data;
    }
    toString() {
        return this.toBase64();
    }
    toSuiAddress() {
        let tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);
        tmp.set([signature_1.SIGNATURE_SCHEME_TO_FLAG['ED25519']]);
        tmp.set(this.toBytes(), 1);
        return (0, types_1.normalizeSuiAddress)(crypto_lib_1.base.toHex(crypto_lib_1.base.blake2b(tmp, { dkLen: 32 })).slice(0, types_1.SUI_ADDRESS_LENGTH * 2));
    }
}
exports.Ed25519PublicKey = Ed25519PublicKey;
Ed25519PublicKey.SIZE = PUBLIC_KEY_SIZE;
//# sourceMappingURL=ed25519-publickey.js.map