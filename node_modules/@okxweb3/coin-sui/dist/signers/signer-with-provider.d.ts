import { TransactionBlock } from '../builder';
import { SerializedSignature } from '../cryptography/signature';
import { SuiAddress } from '../types';
import { Signer } from './signer';
import { SignedTransaction } from './types';
export declare abstract class SignerWithProvider implements Signer {
    abstract getAddress(): Promise<SuiAddress>;
    abstract signData(data: Uint8Array): Promise<SerializedSignature>;
    constructor();
    signMessage(input: {
        message: Uint8Array;
    }): Promise<string>;
    signTransactionBlock(input: {
        transactionBlock: Uint8Array | TransactionBlock;
    }): Promise<SignedTransaction>;
}
