"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerWithProvider = void 0;
const bcs_1 = require("../bcs");
const builder_1 = require("../builder");
const types_1 = require("../types");
const intent_1 = require("../utils/intent");
const TransactionBlockData_1 = require("../builder/TransactionBlockData");
class SignerWithProvider {
    constructor() {
    }
    async signMessage(input) {
        let r = types_1.bcs.ser('vector<u8>', input.message).toBytes();
        const signature = await this.signData((0, intent_1.messageWithIntent)(intent_1.IntentScope.PersonalMessage, r));
        return signature;
    }
    async signTransactionBlock(input) {
        let transactionBlockBytes;
        if (builder_1.TransactionBlock.is(input.transactionBlock)) {
            input.transactionBlock.setSenderIfNotSet(await this.getAddress());
            transactionBlockBytes = await input.transactionBlock.build({});
        }
        else if (input.transactionBlock instanceof Uint8Array) {
            transactionBlockBytes = input.transactionBlock;
        }
        else {
            throw new Error('Unknown transaction format');
        }
        const intentMessage = (0, intent_1.messageWithIntent)(intent_1.IntentScope.TransactionData, transactionBlockBytes);
        const signature = await this.signData(intentMessage);
        return {
            transactionBlockBytes: (0, bcs_1.toB64)(transactionBlockBytes),
            hash: TransactionBlockData_1.TransactionBlockDataBuilder.getDigestFromBytes(transactionBlockBytes),
            signature,
        };
    }
}
exports.SignerWithProvider = SignerWithProvider;
//# sourceMappingURL=signer-with-provider.js.map