import { BCS } from '../bcs';
import { SuiObjectRef } from './objects';
export type SharedObjectRef = {
    objectId: string;
    initialSharedVersion: number | string;
    mutable: boolean;
};
export type ObjectArg = {
    ImmOrOwned: SuiObjectRef;
} | {
    Shared: SharedObjectRef;
};
export type PureArg = {
    Pure: ArrayLike<number>;
};
export declare function isPureArg(arg: any): arg is PureArg;
export type CallArg = PureArg | {
    Object: ObjectArg;
};
export type StructTag = {
    address: string;
    module: string;
    name: string;
    typeParams: TypeTag[];
};
export type TypeTag = {
    bool: null;
} | {
    u8: null;
} | {
    u64: null;
} | {
    u128: null;
} | {
    address: null;
} | {
    signer: null;
} | {
    vector: TypeTag;
} | {
    struct: StructTag;
} | {
    u16: null;
} | {
    u32: null;
} | {
    u256: null;
};
export type GasData = {
    payment: SuiObjectRef[];
    owner: string;
    price: number;
    budget: number;
};
export type TransactionExpiration = {
    None: null;
} | {
    Epoch: number;
};
declare const bcs: BCS;
export { bcs };
