"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSuiObjectId = exports.normalizeSuiAddress = exports.isValidSuiObjectId = exports.isValidSuiAddress = exports.SUI_ADDRESS_LENGTH = exports.isValidTransactionDigest = exports.SuiJsonValue = exports.ObjectOwner = exports.SequenceNumber = exports.SuiAddress = exports.ObjectId = exports.TransactionEventDigest = exports.TransactionEffectsDigest = exports.TransactionDigest = void 0;
const superstruct_1 = require("superstruct");
const bcs_1 = require("../bcs");
exports.TransactionDigest = (0, superstruct_1.string)();
exports.TransactionEffectsDigest = (0, superstruct_1.string)();
exports.TransactionEventDigest = (0, superstruct_1.string)();
exports.ObjectId = (0, superstruct_1.string)();
exports.SuiAddress = (0, superstruct_1.string)();
exports.SequenceNumber = (0, superstruct_1.number)();
exports.ObjectOwner = (0, superstruct_1.union)([
    (0, superstruct_1.object)({
        AddressOwner: exports.SuiAddress,
    }),
    (0, superstruct_1.object)({
        ObjectOwner: exports.SuiAddress,
    }),
    (0, superstruct_1.object)({
        Shared: (0, superstruct_1.object)({
            initial_shared_version: (0, superstruct_1.number)(),
        }),
    }),
    (0, superstruct_1.literal)('Immutable'),
]);
exports.SuiJsonValue = (0, superstruct_1.define)('SuiJsonValue', () => true);
const TX_DIGEST_LENGTH = 32;
function isValidTransactionDigest(value) {
    try {
        const buffer = (0, bcs_1.fromB58)(value);
        return buffer.length === TX_DIGEST_LENGTH;
    }
    catch (e) {
        return false;
    }
}
exports.isValidTransactionDigest = isValidTransactionDigest;
exports.SUI_ADDRESS_LENGTH = 32;
function isValidSuiAddress(value) {
    return isHex(value) && getHexByteLength(value) === exports.SUI_ADDRESS_LENGTH;
}
exports.isValidSuiAddress = isValidSuiAddress;
function isValidSuiObjectId(value) {
    return isValidSuiAddress(value);
}
exports.isValidSuiObjectId = isValidSuiObjectId;
function normalizeSuiAddress(value, forceAdd0x = false) {
    let address = value.toLowerCase();
    if (!forceAdd0x && address.startsWith('0x')) {
        address = address.slice(2);
    }
    return `0x${address.padStart(exports.SUI_ADDRESS_LENGTH * 2, '0')}`;
}
exports.normalizeSuiAddress = normalizeSuiAddress;
function normalizeSuiObjectId(value, forceAdd0x = false) {
    return normalizeSuiAddress(value, forceAdd0x);
}
exports.normalizeSuiObjectId = normalizeSuiObjectId;
function isHex(value) {
    return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
}
function getHexByteLength(value) {
    return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
}
//# sourceMappingURL=common.js.map