"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginatedObjectsResponse = exports.CheckpointedObjectId = exports.getMovePackageContent = exports.hasPublicTransfer = exports.getMoveObject = exports.getObjectFields = exports.getMoveObjectType = exports.isImmutableObject = exports.isSharedObject = exports.getSharedObjectInitialVersion = exports.getObjectDisplay = exports.getObjectOwner = exports.getObjectPreviousTransactionDigest = exports.getObjectType = exports.isSuiObjectResponse = exports.getObjectVersion = exports.getObjectId = exports.getObjectReference = exports.getObjectNotExistsResponse = exports.getObjectDeletedResponse = exports.getSuiObjectData = exports.SuiObjectResponse = exports.SuiObjectResponseError = exports.GetOwnedObjectsResponse = exports.ObjectStatus = exports.SuiObjectDataOptions = exports.SuiObjectData = exports.ObjectDigest = exports.MIST_PER_SUI = exports.SuiRawData = exports.SuiRawMovePackage = exports.SuiRawMoveObject = exports.SuiParsedData = exports.SuiMovePackage = exports.SuiMoveObject = exports.MovePackageContent = exports.ObjectContentFields = exports.SuiObjectInfo = exports.SuiGasData = exports.SuiObjectRef = exports.ObjectType = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
exports.ObjectType = (0, superstruct_1.union)([(0, superstruct_1.string)(), (0, superstruct_1.literal)('package')]);
exports.SuiObjectRef = (0, superstruct_1.object)({
    digest: common_1.TransactionDigest,
    objectId: (0, superstruct_1.string)(),
    version: (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]),
});
exports.SuiGasData = (0, superstruct_1.object)({
    payment: (0, superstruct_1.array)(exports.SuiObjectRef),
    owner: (0, superstruct_1.string)(),
    price: (0, superstruct_1.number)(),
    budget: (0, superstruct_1.number)(),
});
exports.SuiObjectInfo = (0, superstruct_1.assign)(exports.SuiObjectRef, (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
    owner: common_1.ObjectOwner,
    previousTransaction: common_1.TransactionDigest,
}));
exports.ObjectContentFields = (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.any)());
exports.MovePackageContent = (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.string)());
exports.SuiMoveObject = (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
    fields: exports.ObjectContentFields,
    hasPublicTransfer: (0, superstruct_1.boolean)(),
});
exports.SuiMovePackage = (0, superstruct_1.object)({
    disassembled: exports.MovePackageContent,
});
exports.SuiParsedData = (0, superstruct_1.union)([
    (0, superstruct_1.assign)(exports.SuiMoveObject, (0, superstruct_1.object)({ dataType: (0, superstruct_1.literal)('moveObject') })),
    (0, superstruct_1.assign)(exports.SuiMovePackage, (0, superstruct_1.object)({ dataType: (0, superstruct_1.literal)('package') })),
]);
exports.SuiRawMoveObject = (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
    hasPublicTransfer: (0, superstruct_1.boolean)(),
    version: common_1.SequenceNumber,
    bcsBytes: (0, superstruct_1.array)((0, superstruct_1.number)()),
});
exports.SuiRawMovePackage = (0, superstruct_1.object)({
    id: common_1.ObjectId,
    moduleMap: (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.string)()),
});
exports.SuiRawData = (0, superstruct_1.union)([
    (0, superstruct_1.assign)(exports.SuiMoveObject, (0, superstruct_1.object)({ dataType: (0, superstruct_1.literal)('moveObject') })),
    (0, superstruct_1.assign)(exports.SuiRawMovePackage, (0, superstruct_1.object)({ dataType: (0, superstruct_1.literal)('package') })),
]);
exports.MIST_PER_SUI = BigInt(1000000000);
exports.ObjectDigest = (0, superstruct_1.string)();
exports.SuiObjectData = (0, superstruct_1.object)({
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
    digest: exports.ObjectDigest,
    type: (0, superstruct_1.optional)((0, superstruct_1.string)()),
    content: (0, superstruct_1.optional)(exports.SuiParsedData),
    bcs: (0, superstruct_1.optional)(exports.SuiRawData),
    owner: (0, superstruct_1.optional)(common_1.ObjectOwner),
    previousTransaction: (0, superstruct_1.optional)(common_1.TransactionDigest),
    storageRebate: (0, superstruct_1.optional)((0, superstruct_1.number)()),
    display: (0, superstruct_1.optional)((0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.string)())),
});
exports.SuiObjectDataOptions = (0, superstruct_1.object)({
    showType: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    showContent: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    showBcs: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    showOwner: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    showPreviousTransaction: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    showStorageRebate: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    showDisplay: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
});
exports.ObjectStatus = (0, superstruct_1.union)([
    (0, superstruct_1.literal)('Exists'),
    (0, superstruct_1.literal)('NotExists'),
    (0, superstruct_1.literal)('Deleted'),
]);
exports.GetOwnedObjectsResponse = (0, superstruct_1.array)(exports.SuiObjectInfo);
exports.SuiObjectResponseError = (0, superstruct_1.object)({
    tag: (0, superstruct_1.string)(),
    object_id: (0, superstruct_1.optional)(common_1.ObjectId),
    version: (0, superstruct_1.optional)(common_1.SequenceNumber),
    digest: (0, superstruct_1.optional)(exports.ObjectDigest),
});
exports.SuiObjectResponse = (0, superstruct_1.object)({
    data: (0, superstruct_1.optional)(exports.SuiObjectData),
    error: (0, superstruct_1.optional)(exports.SuiObjectResponseError),
});
function getSuiObjectData(resp) {
    return resp.data;
}
exports.getSuiObjectData = getSuiObjectData;
function getObjectDeletedResponse(resp) {
    if (resp.error &&
        'object_id' in resp.error &&
        'version' in resp.error &&
        'digest' in resp.error) {
        const error = resp.error;
        return {
            objectId: error.object_id,
            version: error.version,
            digest: error.digest,
        };
    }
    return undefined;
}
exports.getObjectDeletedResponse = getObjectDeletedResponse;
function getObjectNotExistsResponse(resp) {
    if (resp.error &&
        'object_id' in resp.error &&
        !('version' in resp.error) &&
        !('digest' in resp.error)) {
        return resp.error.object_id;
    }
    return undefined;
}
exports.getObjectNotExistsResponse = getObjectNotExistsResponse;
function getObjectReference(resp) {
    if ('reference' in resp) {
        return resp.reference;
    }
    const exists = getSuiObjectData(resp);
    if (exists) {
        return {
            objectId: exists.objectId,
            version: exists.version,
            digest: exists.digest,
        };
    }
    return getObjectDeletedResponse(resp);
}
exports.getObjectReference = getObjectReference;
function getObjectId(data) {
    if ('objectId' in data) {
        return data.objectId;
    }
    return (getObjectReference(data)?.objectId ??
        getObjectNotExistsResponse(data));
}
exports.getObjectId = getObjectId;
function getObjectVersion(data) {
    if ('version' in data) {
        return data.version;
    }
    return getObjectReference(data)?.version;
}
exports.getObjectVersion = getObjectVersion;
function isSuiObjectResponse(resp) {
    return resp.data !== undefined;
}
exports.isSuiObjectResponse = isSuiObjectResponse;
function getObjectType(resp) {
    const data = isSuiObjectResponse(resp) ? resp.data : resp;
    if (!data?.type && 'data' in resp) {
        if (data?.content?.dataType === 'package') {
            return 'package';
        }
        return getMoveObjectType(resp);
    }
    return data?.type;
}
exports.getObjectType = getObjectType;
function getObjectPreviousTransactionDigest(resp) {
    return getSuiObjectData(resp)?.previousTransaction;
}
exports.getObjectPreviousTransactionDigest = getObjectPreviousTransactionDigest;
function getObjectOwner(resp) {
    if ((0, superstruct_1.is)(resp, common_1.ObjectOwner)) {
        return resp;
    }
    return getSuiObjectData(resp)?.owner;
}
exports.getObjectOwner = getObjectOwner;
function getObjectDisplay(resp) {
    return getSuiObjectData(resp)?.display;
}
exports.getObjectDisplay = getObjectDisplay;
function getSharedObjectInitialVersion(resp) {
    const owner = getObjectOwner(resp);
    if (typeof owner === 'object' && 'Shared' in owner) {
        return owner.Shared.initial_shared_version;
    }
    else {
        return undefined;
    }
}
exports.getSharedObjectInitialVersion = getSharedObjectInitialVersion;
function isSharedObject(resp) {
    const owner = getObjectOwner(resp);
    return typeof owner === 'object' && 'Shared' in owner;
}
exports.isSharedObject = isSharedObject;
function isImmutableObject(resp) {
    const owner = getObjectOwner(resp);
    return owner === 'Immutable';
}
exports.isImmutableObject = isImmutableObject;
function getMoveObjectType(resp) {
    return getMoveObject(resp)?.type;
}
exports.getMoveObjectType = getMoveObjectType;
function getObjectFields(resp) {
    if ('fields' in resp) {
        return resp.fields;
    }
    return getMoveObject(resp)?.fields;
}
exports.getObjectFields = getObjectFields;
function isSuiObjectDataWithContent(data) {
    return data.content !== undefined;
}
function getMoveObject(data) {
    const suiObject = 'data' in data ? getSuiObjectData(data) : data;
    if (!suiObject ||
        !isSuiObjectDataWithContent(suiObject) ||
        suiObject.content.dataType !== 'moveObject') {
        return undefined;
    }
    return suiObject.content;
}
exports.getMoveObject = getMoveObject;
function hasPublicTransfer(data) {
    return getMoveObject(data)?.hasPublicTransfer ?? false;
}
exports.hasPublicTransfer = hasPublicTransfer;
function getMovePackageContent(data) {
    if ('disassembled' in data) {
        return data.disassembled;
    }
    const suiObject = getSuiObjectData(data);
    if (suiObject?.content?.dataType !== 'package') {
        return undefined;
    }
    return suiObject.content.disassembled;
}
exports.getMovePackageContent = getMovePackageContent;
exports.CheckpointedObjectId = (0, superstruct_1.object)({
    objectId: common_1.ObjectId,
    atCheckpoint: (0, superstruct_1.optional)((0, superstruct_1.number)()),
});
exports.PaginatedObjectsResponse = (0, superstruct_1.object)({
    data: (0, superstruct_1.array)(exports.SuiObjectResponse),
    nextCursor: (0, superstruct_1.optional)(exports.CheckpointedObjectId),
    hasNextPage: (0, superstruct_1.boolean)(),
});
//# sourceMappingURL=objects.js.map