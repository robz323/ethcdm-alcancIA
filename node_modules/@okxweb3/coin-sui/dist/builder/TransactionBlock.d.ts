import { ObjectId, SuiObjectRef } from '../types';
import { Transactions, TransactionArgument, TransactionType } from './Transactions';
import { ObjectCallArg } from './Inputs';
import { TransactionExpiration } from './TransactionBlockData';
type TransactionResult = TransactionArgument & TransactionArgument[];
declare const TRANSACTION_BRAND: unique symbol;
interface BuildOptions {
    onlyTransactionKind?: boolean;
}
export declare class TransactionBlock {
    #private;
    static is(obj: unknown): obj is TransactionBlock;
    static fromKind(serialized: string | Uint8Array): TransactionBlock;
    static from(serialized: string | Uint8Array): TransactionBlock;
    static get Transactions(): {
        MoveCall(input: Omit<{
            arguments: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MoveCall";
            typeArguments: string[];
            target: `${string}::${string}::${string}`;
        }, "arguments" | "kind" | "typeArguments"> & {
            arguments?: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[] | undefined;
            typeArguments?: string[] | undefined;
        }): {
            arguments: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MoveCall";
            typeArguments: string[];
            target: `${string}::${string}::${string}`;
        };
        TransferObjects(objects: ({
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[], address: {
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }): {
            address: {
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            objects: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "TransferObjects";
        };
        SplitCoins(coin: {
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }, amounts: ({
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]): {
            kind: "SplitCoins";
            coin: {
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            amounts: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
        };
        MergeCoins(destination: {
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }, sources: ({
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]): {
            kind: "MergeCoins";
            destination: {
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            sources: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
        };
        Publish(modules: number[][], dependencies: string[]): {
            kind: "Publish";
            dependencies: string[];
            modules: number[][];
        };
        MakeMoveVec({ type, objects, }: Omit<{
            objects: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MakeMoveVec";
            type?: {
                None: null;
            } | {
                Some: string;
            } | undefined;
        }, "type" | "kind"> & {
            type?: string | undefined;
        }): {
            objects: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MakeMoveVec";
            type?: {
                None: null;
            } | {
                Some: string;
            } | undefined;
        };
    };
    static get Inputs(): {
        Pure(data: unknown, type?: string | undefined): {
            Pure: number[];
        };
        ObjectRef(ref: {
            objectId: string;
            version: string | number;
            digest: string;
        }): {
            Object: {
                ImmOrOwned: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            } | {
                Shared: {
                    objectId: string;
                    initialSharedVersion: string | number;
                    mutable: boolean;
                };
            };
        };
        SharedObjectRef(ref: import("../types").SharedObjectRef): {
            Object: {
                ImmOrOwned: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            } | {
                Shared: {
                    objectId: string;
                    initialSharedVersion: string | number;
                    mutable: boolean;
                };
            };
        };
    };
    setSender(sender: string): void;
    setSenderIfNotSet(sender: string): void;
    setExpiration(expiration?: TransactionExpiration): void;
    setGasPrice(price: number | bigint): void;
    setGasBudget(budget: number | bigint): void;
    setGasOwner(owner: string): void;
    setGasPayment(payments: SuiObjectRef[]): void;
    get blockData(): {
        version: 1;
        transactions: ({
            arguments: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MoveCall";
            typeArguments: string[];
            target: `${string}::${string}::${string}`;
        } | {
            address: {
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            objects: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "TransferObjects";
        } | {
            kind: "SplitCoins";
            coin: {
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            amounts: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
        } | {
            kind: "MergeCoins";
            destination: {
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            sources: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
        } | {
            objects: ({
                kind: "Input";
                index: number;
                value?: any;
                type?: "object" | "pure" | undefined;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MakeMoveVec";
            type?: {
                None: null;
            } | {
                Some: string;
            } | undefined;
        } | {
            kind: "Publish";
            dependencies: string[];
            modules: number[][];
        })[];
        inputs: {
            kind: "Input";
            index: number;
            value?: any;
            type?: "object" | "pure" | undefined;
        }[];
        gasConfig: {
            payment?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            owner?: string | undefined;
            price?: string | undefined;
            budget?: string | undefined;
        };
        sender?: string | undefined;
        expiration?: {
            Epoch: number;
        } | {
            None: true | null;
        } | null | undefined;
    };
    get [TRANSACTION_BRAND](): boolean;
    constructor(transaction?: TransactionBlock);
    get gas(): TransactionArgument;
    object(value: ObjectId | ObjectCallArg): {
        kind: "Input";
        index: number;
        value?: any;
        type?: "object" | "pure" | undefined;
    };
    pure(value: unknown, type?: string): {
        kind: "Input";
        index: number;
        value?: any;
        type?: "object" | "pure" | undefined;
    };
    add(transaction: TransactionType): TransactionResult;
    splitCoins(...args: Parameters<(typeof Transactions)['SplitCoins']>): TransactionResult;
    mergeCoins(...args: Parameters<(typeof Transactions)['MergeCoins']>): TransactionResult;
    publish(...args: Parameters<(typeof Transactions)['Publish']>): TransactionResult;
    moveCall(...args: Parameters<(typeof Transactions)['MoveCall']>): TransactionResult;
    transferObjects(...args: Parameters<(typeof Transactions)['TransferObjects']>): TransactionResult;
    makeMoveVec(...args: Parameters<(typeof Transactions)['MakeMoveVec']>): TransactionResult;
    serialize(): string;
    build({ onlyTransactionKind, }?: BuildOptions): Promise<Uint8Array>;
    getDigest({}?: {}): Promise<string>;
}
export {};
