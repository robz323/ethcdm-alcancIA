{"version":3,"sources":["../../src/ethers/networks.ts","../../src/chains.ts","../../src/ethers/providers.ts","../../src/ethers/types.ts","../../src/invariant.ts","../../src/ethers/getDefaultProvider.ts","../../src/ethers/chains.ts","../../src/constants.ts","../../src/ethers/accounts.ts","../../src/ethers/typechain/factories/index.ts","../../src/ethers/typechain/factories/BasicErc20__factory.ts","../../src/ethers/typechain/factories/BasicErc721__factory.ts","../../src/ethers/typechain/factories/Erc20Factory__factory.ts","../../src/ethers/typechain/factories/Erc721Factory__factory.ts"],"names":["assert","Network","NetworkPlugin","testnet","LensNetworkPlugin","_LensNetworkPlugin","contracts","assertLensContractsNetworkPlugin","plugin","networkFactoryFrom","chain","network","zksync","LensNetworkProvider","ProviderType","serializedTransaction","_","Provider","BrowserProvider","InvariantError","invariant","condition","message","getDefaultProvider","chains_exports","__export","toBeHex","nativeCurrency","defineAddEthereumChainParameter","EventLog","factories_exports","BasicErc20__factory","BasicErc721__factory","Erc20Factory__factory","Erc721Factory__factory","Contract","Interface","_abi","address","runner","Adapter","Base","params","chainId","contract","receipt","eventLog","log","decodedLog","Wallet","provider","Signer","_Signer","signer","lensProvider","zkSigner"],"mappings":"0FAAA,OAAS,UAAAA,EAAQ,WAAAC,EAAS,iBAAAC,MAAqB,SCwBxC,IAAMC,EAA2B,CACtC,GAAI,MACJ,KAAM,uBACN,QAAS,uBACT,OAAQ,+BACR,iBAAkB,2CAClB,QAAS,GACT,UAAW,CACT,WAAY,6CACZ,aAAc,6CACd,cAAe,6CACf,KAAM,6CACN,OAAQ,4CACV,CACF,ED/BO,IAAMC,EAAN,MAAMC,UAA0BH,CAAc,CAC1C,UAET,YAAYI,EAA8B,CACxC,MAAMD,EAAkB,IAAI,EAC5B,KAAK,UAAYC,CACnB,CAGS,OAAuB,CAC9B,OAAO,IAAID,EAAkB,KAAK,SAAS,CAC7C,CAGA,OAAO,KAAO,4BAChB,EAKO,SAASE,EACdC,EACqC,CACrCR,EACEQ,GAAQ,OAASJ,EAAkB,KACnC,kBAAkBA,EAAkB,IAAI,aACxC,eACF,CACF,CAEA,SAASK,EAAmBC,EAAwB,CAClD,MAAO,IAAM,CACX,IAAMC,EAAU,IAAIV,EAAQS,EAAM,KAAMA,EAAM,EAAE,EAChD,OAAAC,EAAQ,aAAa,IAAIP,EAAkBM,EAAM,SAAS,CAAC,EACpDC,CACT,CACF,CAGA,CAACR,CAAO,EAAE,QAASO,GAAUT,EAAQ,SAASS,EAAM,GAAID,EAAmBC,CAAK,CAAC,CAAC,EE7ClF,UAAYE,MAAY,gBAgBxB,SAASC,EACPC,EACA,CACA,OAAO,cAAuBA,CAAa,CAQzC,MAAM,qCACJC,EACoC,CACpC,OAAO,KAAK,KAAK,2CAA4C,CAC3DA,CACF,CAAC,CACH,CAKA,OAAO,mBAAmBC,EAAmB,CAC3C,MAAM,IAAI,MAAM,kEAAkE,CACpF,CACF,CACF,CAOO,IAAMC,EAAN,cAAuBJ,EAA2B,UAAQ,CAAE,CAcjE,qCACEE,EACoC,CACpC,OAAO,MAAM,qCAAqCA,CAAqB,CACzE,CACF,EAUaG,EAAN,cAA8BL,EAA2B,iBAAe,CAAE,CAc/E,qCACEE,EACoC,CACpC,OAAO,MAAM,qCAAqCA,CAAqB,CACzE,CACF,ECzFO,IAAKd,OACVA,IAAA,QAAU,KAAV,UACAA,IAAA,QAAUE,EAAQ,IAAlB,UAFUF,OAAA,ICNL,IAAMkB,EAAN,cAA6B,KAAM,CACxC,KAAO,gBACT,EASO,SAASC,EAAUC,EAAoBC,EAAoC,CAChF,GAAI,CAACD,EACH,MAAM,IAAIF,EAAeG,CAAO,CAEpC,CCAO,SAASC,EAAmBZ,EAA4B,CAC7D,OAAQA,EAAS,CACf,KAAKV,EAAQ,QACX,OAAO,IAAIgB,EAASd,EAAQ,MAAM,EAEpC,SACEiB,EAAU,GAAO,uBAAuB,CAC5C,CACF,CC1BA,IAAAI,EAAA,GAAAC,EAAAD,EAAA,aAAArB,IAAA,OAAS,WAAAuB,MAAe,eCGjB,IAAMC,EAAiB,CAC5B,KAAM,cACN,OAAQ,QACR,SAAU,EACZ,EDDA,SAASC,EAAgClB,EAA0D,CACjG,MAAO,CACL,QAASgB,EAAQhB,EAAM,EAAE,EACzB,UAAWA,EAAM,KACjB,eAAAiB,EACA,QAAS,CAACjB,EAAM,MAAM,EACtB,kBAAmB,CAACA,EAAM,gBAAgB,CAC5C,CACF,CAIO,IAAMP,EAAwByB,EAAuCzB,CAAO,EElBnF,OAAiB,UAAAH,EAAQ,YAAA6B,EAAU,WAAA5B,MAAe,SAClD,UAAYW,MAAY,gBCDxB,IAAAkB,EAAA,GAAAL,EAAAK,EAAA,yBAAAC,EAAA,yBAAAC,EAAA,0BAAAC,EAAA,2BAAAC,ICIA,OAAS,YAAAC,EAAU,aAAAC,MAAsC,SAGzD,IAAMC,EAAO,CACX,CACE,OAAQ,CACN,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,OACN,KAAM,QACR,EACA,CACE,aAAc,SACd,KAAM,SACN,KAAM,QACR,CACF,EACA,aAAc,gCACd,KAAM,SACN,KAAM,OACR,CACF,EACA,gBAAiB,aACjB,KAAM,aACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,QACd,KAAM,GACN,KAAM,OACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,kBACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,aACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,OACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,OACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,SACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,WACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,eACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,CACF,EAEaN,EAAN,KAA0B,CAC/B,OAAgB,IAAMM,EACtB,OAAO,iBAAuC,CAC5C,OAAO,IAAID,EAAUC,CAAI,CAC3B,CACA,OAAO,QAAQC,EAAiBC,EAA4C,CAC1E,OAAO,IAAIJ,EAASG,EAASD,EAAME,CAAM,CAC3C,CACF,EChZA,OAAS,YAAAJ,EAAU,aAAAC,MAAsC,SAGzD,IAAMC,EAAO,CACX,CACE,OAAQ,CACN,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,OACN,KAAM,QACR,EACA,CACE,aAAc,SACd,KAAM,SACN,KAAM,QACR,CACF,EACA,aAAc,iCACd,KAAM,SACN,KAAM,OACR,CACF,EACA,gBAAiB,aACjB,KAAM,aACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,OACd,KAAM,WACN,KAAM,MACR,CACF,EACA,KAAM,iBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,aACN,KAAM,SACR,CACF,EACA,KAAM,sBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,OACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,MACN,KAAM,QACR,CACF,EACA,KAAM,WACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,QACd,KAAM,OACN,KAAM,OACR,CACF,EACA,KAAM,mBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,OACd,KAAM,WACN,KAAM,MACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,cACN,KAAM,QACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,SACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,WACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,eACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,CACF,EAEaL,EAAN,KAA2B,CAChC,OAAgB,IAAMK,EACtB,OAAO,iBAAwC,CAC7C,OAAO,IAAID,EAAUC,CAAI,CAC3B,CACA,OAAO,QAAQC,EAAiBC,EAA6C,CAC3E,OAAO,IAAIJ,EAASG,EAASD,EAAME,CAAM,CAC3C,CACF,ECzfA,OAAS,YAAAJ,GAAU,aAAAC,OAAsC,SAGzD,IAAMC,EAAO,CACX,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,QACd,KAAM,UACN,KAAM,OACR,CACF,EACA,KAAM,cACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,SACd,KAAM,OACN,KAAM,QACR,EACA,CACE,QAAS,GACT,aAAc,SACd,KAAM,SACN,KAAM,QACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,CACF,EACA,KAAM,eACN,KAAM,OACR,EACA,CACE,OAAQ,CACN,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,OACN,KAAM,QACR,EACA,CACE,aAAc,SACd,KAAM,SACN,KAAM,QACR,CACF,EACA,aAAc,gCACd,KAAM,SACN,KAAM,OACR,CACF,EACA,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,YACN,QAAS,CACP,CACE,aAAc,wBACd,KAAM,GACN,KAAM,WACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,aACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,KAAM,SACN,QAAS,CACP,CACE,aAAc,sBACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,CACF,EAEaJ,EAAN,KAA4B,CACjC,OAAgB,IAAMI,EACtB,OAAO,iBAAyC,CAC9C,OAAO,IAAID,GAAUC,CAAI,CAC3B,CACA,OAAO,QACLC,EACAC,EACc,CACd,OAAO,IAAIJ,GAASG,EAASD,EAAME,CAAM,CAC3C,CACF,EC1NA,OAAS,YAAAJ,GAAU,aAAAC,OAAsC,SAGzD,IAAMC,EAAO,CACX,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,QACd,KAAM,UACN,KAAM,OACR,CACF,EACA,KAAM,cACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,SACd,KAAM,OACN,KAAM,QACR,EACA,CACE,QAAS,GACT,aAAc,SACd,KAAM,SACN,KAAM,QACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,CACF,EACA,KAAM,eACN,KAAM,OACR,EACA,CACE,OAAQ,CACN,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,OACN,KAAM,QACR,EACA,CACE,aAAc,SACd,KAAM,SACN,KAAM,QACR,CACF,EACA,aAAc,iCACd,KAAM,SACN,KAAM,OACR,CACF,EACA,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,YACN,QAAS,CACP,CACE,aAAc,yBACd,KAAM,GACN,KAAM,WACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,aACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,KAAM,SACN,QAAS,CACP,CACE,aAAc,uBACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,CACF,EAEaH,EAAN,KAA6B,CAClC,OAAgB,IAAMG,EACtB,OAAO,iBAA0C,CAC/C,OAAO,IAAID,GAAUC,CAAI,CAC3B,CACA,OAAO,QACLC,EACAC,EACe,CACf,OAAO,IAAIJ,GAASG,EAASD,EAAME,CAAM,CAC3C,CACF,EL5LA,SAASC,EAA+CC,EAAa,CACnE,OAAO,cAAiCA,CAAK,CAO3C,MAAM,yBAAyBC,EAA2C,CACxE,GAAM,CAAE,QAAAC,CAAQ,EAAI,MAAM,KAAK,YAAY,EAAE,WAAW,EAElDnC,EAASP,EAAQ,KAAK0C,CAAO,GAAG,UAAUvC,EAAkB,IAAI,EAEtEG,EAAiCC,CAAM,EAEvC,IAAMoC,EAAWd,EAAU,sBAAsB,QAC/CtB,EAAO,UAAU,aACjB,KAAK,UAAU,CACjB,EAIMqC,EAAU,MAFL,MAAMD,EAAS,YAAYF,CAAM,GAEnB,KAAK,EAE9B1C,EAAO6C,IAAY,KAAM,qBAAsB,eAAe,EAE9D,IAAMC,EAAWD,EAAQ,KAAK,KAAME,GAAQA,EAAI,UAAYvC,EAAO,UAAU,YAAY,EAEzFR,EAAO8C,aAAoBjB,EAAU,sBAAuB,eAAe,EAE3E,IAAMmB,EAAaJ,EAAS,UAAU,SAASE,CAAQ,EAEvD,OAAA9C,EAAOgD,GAAY,OAAS,eAAgB,oBAAqB,eAAe,EAEzEA,EAAW,KAAK,YACzB,CAOA,MAAM,0BAA0BN,EAA4C,CAC1E,GAAM,CAAE,QAAAC,CAAQ,EAAI,MAAM,KAAK,YAAY,EAAE,WAAW,EAElDnC,EAASP,EAAQ,KAAK0C,CAAO,GAAG,UAAUvC,EAAkB,IAAI,EAEtEG,EAAiCC,CAAM,EAEvC,IAAMoC,EAAWd,EAAU,uBAAuB,QAChDtB,EAAO,UAAU,cACjB,KAAK,UAAU,CACjB,EAIMqC,EAAU,MAFL,MAAMD,EAAS,YAAYF,CAAM,GAEnB,KAAK,EAE9B1C,EAAO6C,IAAY,KAAM,qBAAsB,eAAe,EAE9D,IAAMC,EAAWD,EAAQ,KAAK,KAAME,GAAQA,EAAI,UAAYvC,EAAO,UAAU,aAAa,EAE1FR,EAAO8C,aAAoBjB,EAAU,sBAAuB,eAAe,EAE3E,IAAMmB,EAAaJ,EAAS,UAAU,SAASE,CAAQ,EAEvD,OAAA9C,EAAOgD,GAAY,OAAS,eAAgB,oBAAqB,eAAe,EAEzEA,EAAW,KAAK,YACzB,CACF,CACF,CAOO,IAAMC,EAAN,cAAqBT,EAAe,QAAM,CAAE,CAoBxC,yBAAyBE,EAA2C,CAC3E,OAAO,MAAM,yBAAyBA,CAAM,CAC9C,CAqBS,0BAA0BA,EAA4C,CAC7E,OAAO,MAAM,0BAA0BA,CAAM,CAC/C,CAmBS,QAAQQ,EAAoB,CACnC,OAAO,MAAM,QAAQA,CAAQ,CAC/B,CACF,EAQaC,EAAN,MAAMC,UAAeZ,EAAe,QAAM,CAAE,CA2BxC,yBAAyBE,EAA2C,CAC3E,OAAO,MAAM,yBAAyBA,CAAM,CAC9C,CA4BS,0BAA0BA,EAA4C,CAC7E,OAAO,MAAM,0BAA0BA,CAAM,CAC/C,CA2BA,OAAgB,KACdW,EAGAV,EACAW,EACQ,CACR,IAAMC,EAAW,MAAM,KAAKF,EAAQV,EAASW,CAAY,EACzD,OAAO,OAAO,eAAeC,EAAUH,EAAO,SAAS,CACzD,CACF","sourcesContent":["import { assert, Network, NetworkPlugin } from 'ethers';\n\nimport { ChainDefinition, DeployedContracts, testnet } from '../chains';\n\n/**\n * @internal\n */\nexport class LensNetworkPlugin extends NetworkPlugin {\n  readonly contracts: DeployedContracts;\n\n  constructor(contracts: DeployedContracts) {\n    super(LensNetworkPlugin.name);\n    this.contracts = contracts;\n  }\n\n  // quite important although poorly documented\n  override clone(): NetworkPlugin {\n    return new LensNetworkPlugin(this.contracts);\n  }\n\n  // https://docs.ethers.org/v6/api/providers/#NetworkPlugin-name\n  static name = 'xyz.lens.network.contracts';\n}\n\n/**\n * @internal\n */\nexport function assertLensContractsNetworkPlugin(\n  plugin: NetworkPlugin | null,\n): asserts plugin is LensNetworkPlugin {\n  assert(\n    plugin?.name === LensNetworkPlugin.name,\n    `Network plugin ${LensNetworkPlugin.name} not found`,\n    'UNKNOWN_ERROR',\n  );\n}\n\nfunction networkFactoryFrom(chain: ChainDefinition) {\n  return () => {\n    const network = new Network(chain.name, chain.id);\n    network.attachPlugin(new LensNetworkPlugin(chain.contracts));\n    return network;\n  };\n}\n\n// TODO: add other Lens Network chains once available\n[testnet].forEach((chain) => Network.register(chain.id, networkFactoryFrom(chain)));\n","export type DeployedContracts = {\n  // well known\n  multicall3: `0x${string}`;\n  WETH: `0x${string}`;\n  WGRASS: `0x${string}`;\n\n  // lens specific\n  erc20Factory: `0x${string}`;\n  erc721Factory: `0x${string}`;\n};\n\nexport type ChainDefinition = {\n  id: number;\n  name: string;\n  network: string;\n  rpcUrl: string;\n  blockExplorerUrl: string;\n  testnet: boolean;\n  contracts: DeployedContracts;\n};\n\n/**\n * The Lens Testnet Network.\n */\nexport const testnet: ChainDefinition = {\n  id: 37111,\n  name: 'Lens Testnet Network',\n  network: 'lens-testnet-network',\n  rpcUrl: 'https://rpc.testnet.lens.dev',\n  blockExplorerUrl: 'https://block-explorer.testnet.lens.dev/',\n  testnet: true,\n  contracts: {\n    multicall3: '0x8A44EDE8a6843a997bC0Cc4659e4dB1Da8f91116',\n    erc20Factory: '0x44D3f533C370C9Ed8cfbe2d77b4440DC74959508',\n    erc721Factory: '0x1299E25078d91f3aE5ff8A44DEbc7f25b2A1f314',\n    WETH: '0xaA91D645D7a6C1aeaa5988e0547267B77d33fe16',\n    WGRASS: '0x1CfDf7a1F0C2A4eAe5f3C3eA8e3eBd4f8F2fEe4A',\n  },\n};\n","import { JsonRpcPayload, ethers, JsonRpcError, JsonRpcResult } from 'ethers';\nimport * as zksync from 'zksync-ethers';\n\nimport { SendRawTransactionDetails } from './types';\nimport { ContractCreationAddresses, TokenTxHistoryRequest, TxHistoryRequest } from '../types';\n\nexport type { ContractCreationAddresses, TxHistoryRequest, TokenTxHistoryRequest };\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = object> = new (...args: any[]) => T;\n\ntype BaseLensNetworkProvider = ethers.JsonRpcApiProvider & {\n  _send(\n    payload: JsonRpcPayload | Array<JsonRpcPayload>,\n  ): Promise<Array<JsonRpcResult | JsonRpcError>>;\n};\n\nfunction LensNetworkProvider<TBase extends Constructor<BaseLensNetworkProvider>>(\n  ProviderType: TBase,\n) {\n  return class Provider extends ProviderType {\n    /**\n     * Executes a transaction and returns its hash, storage logs, and events that would have\n     * been generated if the transaction had already been included in the block.\n     *\n     * @param serializedTransaction - The serialized transaction to send.\n     * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash, storage logs, and events. {@link SendRawTransactionDetails}\n     */\n    async sendRawTransactionWithDetailedOutput(\n      serializedTransaction: string,\n    ): Promise<SendRawTransactionDetails> {\n      return this.send('zks_sendRawTransactionWithDetailedOutput', [\n        serializedTransaction,\n      ]) as Promise<SendRawTransactionDetails>;\n    }\n    /**\n     * @deprecated Use `getDefaultProvider` from `@lens-network/sdk/ethers` instead.\n     * @internal\n     */\n    static getDefaultProvider(_: unknown): TBase {\n      throw new Error(`Use 'getDefaultProvider' from '@lens-network/sdk/ethers' instead`);\n    }\n  };\n}\n\n/**\n * A `Provider` extends {@link zksync.Provider} and over time it will include additional features for interacting with the Lens Network.\n *\n * It supports RPC methods within the `zks` and namespaces.\n */\nexport class Provider extends LensNetworkProvider(zksync.Provider) {\n  /**\n   * @inheritDoc\n   *\n   * @example\n   * ```ts\n   * import { Provider, Network } from '@lens-network/sdk/ethers';\n   *\n   * const provider = getDefaultProvider(Network.Testnet);\n   *\n   * const signedTransaction = '0x02f8500182031180…';\n   * const result = await provider.sendRawTransactionWithDetailedOutput(signedTransaction);\n   * ```\n   */\n  sendRawTransactionWithDetailedOutput(\n    serializedTransaction: string,\n  ): Promise<SendRawTransactionDetails> {\n    return super.sendRawTransactionWithDetailedOutput(serializedTransaction);\n  }\n}\n\n/**\n * A `BrowserProvider` extends {@link zksync.BrowserProvider} and includes additional features for interacting with the Lens Network.\n *\n * It supports RPC methods within the `zks` and `lens` namespaces.\n *\n * This provider is designed for frontend use in a browser environment and integration for browser wallets\n * (e.g., MetaMask, WalletConnect).\n */\nexport class BrowserProvider extends LensNetworkProvider(zksync.BrowserProvider) {\n  /**\n   * @inheritDoc\n   *\n   * @example\n   * ```ts\n   * import { BrowserProvider } from '@lens-network/sdk/ethers';\n   *\n   * const provider = new BrowserProvider(window.ethereum);\n   *\n   * const signedTransaction = '0x02f8500182031180…';\n   * const result = await provider.sendRawTransactionWithDetailedOutput(signedTransaction);\n   * ```\n   */\n  sendRawTransactionWithDetailedOutput(\n    serializedTransaction: string,\n  ): Promise<SendRawTransactionDetails> {\n    return super.sendRawTransactionWithDetailedOutput(serializedTransaction);\n  }\n}\n","import { DeployedContracts, testnet } from '../chains';\nimport { PagingResult } from '../types';\n\nexport type { SecondsSinceEpoch, TimeDirection } from '../types';\nexport type { DeployedContracts, PagingResult };\n\n/**\n * Network types.\n */\nexport enum Network {\n  Mainnet = NaN,\n  Testnet = testnet.id,\n}\n\nexport type StorageEntry = {\n  address: string;\n  key: string;\n  writtenValue: string;\n};\n\nexport type OptimisticLog = {\n  /**\n   *  The transaction hash for the transaction the log occurred in.\n   */\n  transactionHash: string;\n  /**\n   *  The address of the contract that emitted this log.\n   */\n  address: string;\n  /**\n   *  The data emitted with this log.\n   */\n  data: string;\n  /**\n   *  The topics emitted with this log.\n   */\n  topics: ReadonlyArray<string>;\n  /**\n   * The batch number on L1.\n   * */\n  readonly l1BatchNumber: null | number;\n  /**\n   * No block hash for optimistic logs.\n   */\n  readonly blockHash: null;\n  /**\n   * No block number for optimistic logs.\n   */\n  readonly blockNumber: null;\n  /**\n   * No log index for optimistic logs.\n   */\n  readonly logIndex: null;\n  /**\n   * No transaction index for optimistic logs.\n   */\n  readonly transactionIndex: null;\n  /**\n   * Never removed.\n   */\n  readonly removed: false;\n};\n\nexport type SendRawTransactionDetails = {\n  transactionHash: string;\n  storageLogs: StorageEntry[];\n  events: OptimisticLog[];\n};\n\nexport type TxHistoryItem = {\n  /**\n   * The transaction hash.\n   */\n  hash: string;\n  to: string;\n  from: string;\n  transactionIndex: string;\n  input: string;\n  value: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  cumulativeGasUsed: string;\n  fee: string;\n  nonce: string;\n  confirmations: string;\n  blockNumber: string;\n  blockHash: string;\n  /**\n   * Timestamp in seconds since the Unix epoch.\n   */\n  timeStamp: string;\n  commitTxHash: string | null;\n  proveTxHash: string | null;\n  executeTxHash: string | null;\n  isL1Originated: string;\n  l1BatchNumber: string;\n  contractAddress: string | null;\n  isError: string;\n  txreceipt_status: string;\n  methodId: string;\n  functionName: string;\n  type: string;\n};\n\nexport type TxHistoryResponse = PagingResult<TxHistoryItem>;\n\nexport type ContractsCreationResult = {\n  contractAddress: string;\n  contractCreator: string;\n  txHash: string;\n};\n\nexport type ContractCreationResponse = ReadonlyArray<ContractsCreationResult>;\n\nexport type TokenInfoResult = {\n  contractAddress: string;\n  tokenName: string;\n  symbol: string;\n  tokenDecimal: number;\n  tokenPriceUSD: string | null;\n  liquidity: string | null;\n  l1Address: string | null;\n  iconURL: string | null;\n};\n\nexport type TokenTxHistoryItem = {\n  hash: string;\n  to: string;\n  from: string;\n  transactionIndex: string;\n  input: string;\n  value: string | null;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  cumulativeGasUsed: string;\n  fee: string;\n  nonce: string;\n  confirmations: string;\n  blockNumber: string;\n  blockHash: string;\n  l1BatchNumber: string;\n  timeStamp: string;\n  contractAddress: string;\n  tokenID: string | null;\n  tokenName: string | null;\n  tokenSymbol: string | null;\n  tokenDecimal: string | null;\n  transactionType: string;\n};\n\nexport type TokenTxHistoryResponse = PagingResult<TokenTxHistoryItem>;\n","/**\n * An error that occurs when a task violates a logical condition that is assumed to be true at all times.\n */\nexport class InvariantError extends Error {\n  name = 'InvariantError' as const;\n}\n\n/**\n * Asserts that the given condition is truthy\n * @internal\n *\n * @param condition - Either truthy or falsy value\n * @param message - An error message\n */\nexport function invariant(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n","import { Provider } from './providers';\nimport { Network } from './types';\nimport { testnet } from '../chains';\nimport { invariant } from '../invariant';\n\n/**\n * Returns a default provider for the `network`.\n *\n * If `network` is a string that begins with `\"http:\"` or `\"https:\"`,\n * a `Provider` is returned connected to that URL.\n *\n * @example\n * ```ts\n * import { getDefaultProvider, Network } from '@lens-network/sdk/ethers';\n *\n * const provider = getDefaultProvider(Network.Testnet); // Lens Network testnet (L2)\n * ```\n */\nexport function getDefaultProvider(network: Network): Provider {\n  switch (network) {\n    case Network.Testnet:\n      return new Provider(testnet.rpcUrl);\n\n    case Network.Mainnet:\n      invariant(false, 'Network supported yet');\n  }\n}\n","import { toBeHex } from 'ethers/utils';\n\nimport * as chains from '../chains';\nimport { nativeCurrency } from '../constants';\nimport { AddEthereumChainParameter } from '../types';\n\nfunction defineAddEthereumChainParameter(chain: chains.ChainDefinition): AddEthereumChainParameter {\n  return {\n    chainId: toBeHex(chain.id),\n    chainName: chain.name,\n    nativeCurrency,\n    rpcUrls: [chain.rpcUrl],\n    blockExplorerUrls: [chain.blockExplorerUrl],\n  };\n}\n\nexport type { AddEthereumChainParameter };\n\nexport const testnet = /*#__PURE__*/ defineAddEthereumChainParameter(chains.testnet);\n","/**\n * The native currency of the Lens Network.\n */\nexport const nativeCurrency = {\n  name: 'Grass Token',\n  symbol: 'GRASS',\n  decimals: 18,\n} as const;\n","import { ethers, assert, EventLog, Network } from 'ethers';\nimport * as zksync from 'zksync-ethers';\n\nimport { assertLensContractsNetworkPlugin, LensNetworkPlugin } from './networks';\nimport { Provider } from './providers';\nimport { factories } from './typechain';\n\nexport type Erc20TokenParams = {\n  initialOwner: string;\n  initialSupply: ethers.BigNumberish;\n  name: string;\n  symbol: string;\n};\n\nexport type Erc721TokenParams = {\n  initialOwner: string;\n  maxSupply: ethers.BigNumberish;\n  name: string;\n  symbol: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = object> = new (...args: any[]) => T;\n\ntype L2TxSender = {\n  sendTransaction(tx: ethers.TransactionRequest): Promise<ethers.TransactionResponse>;\n\n  getAddress(): Promise<string>;\n\n  _signerL2(): ethers.Signer;\n\n  _providerL2(): zksync.Provider;\n};\n\nfunction Adapter<TBase extends Constructor<L2TxSender>>(Base: TBase) {\n  return class LensNetworkAdapter extends Base {\n    /**\n     * Create an ERC-20 contract with the given parameters.\n     *\n     * @params params - The parameters to create the ERC-20 contract.\n     * @returns The ERC-20 contract address.\n     */\n    async experimental_createErc20(params: Erc20TokenParams): Promise<string> {\n      const { chainId } = await this._providerL2().getNetwork();\n\n      const plugin = Network.from(chainId)?.getPlugin(LensNetworkPlugin.name);\n\n      assertLensContractsNetworkPlugin(plugin);\n\n      const contract = factories.Erc20Factory__factory.connect(\n        plugin.contracts.erc20Factory,\n        this._signerL2(),\n      );\n\n      const tx = await contract.createToken(params);\n\n      const receipt = await tx.wait();\n\n      assert(receipt !== null, 'Transaction failed', 'NETWORK_ERROR');\n\n      const eventLog = receipt.logs.find((log) => log.address === plugin.contracts.erc20Factory);\n\n      assert(eventLog instanceof EventLog, 'Event log not found', 'NETWORK_ERROR');\n\n      const decodedLog = contract.interface.parseLog(eventLog);\n\n      assert(decodedLog?.name === 'TokenCreated', 'Token not created', 'NETWORK_ERROR');\n\n      return decodedLog.args.tokenAddress as string;\n    }\n    /**\n     * Create an ERC-721 contract with the given parameters.\n     *\n     * @params params - The parameters to create the ERC-721 contract.\n     * @returns The ERC-721 contract address.\n     */\n    async experimental_createErc721(params: Erc721TokenParams): Promise<string> {\n      const { chainId } = await this._providerL2().getNetwork();\n\n      const plugin = Network.from(chainId)?.getPlugin(LensNetworkPlugin.name);\n\n      assertLensContractsNetworkPlugin(plugin);\n\n      const contract = factories.Erc721Factory__factory.connect(\n        plugin.contracts.erc721Factory,\n        this._signerL2(),\n      );\n\n      const tx = await contract.createToken(params);\n\n      const receipt = await tx.wait();\n\n      assert(receipt !== null, 'Transaction failed', 'NETWORK_ERROR');\n\n      const eventLog = receipt.logs.find((log) => log.address === plugin.contracts.erc721Factory);\n\n      assert(eventLog instanceof EventLog, 'Event log not found', 'NETWORK_ERROR');\n\n      const decodedLog = contract.interface.parseLog(eventLog);\n\n      assert(decodedLog?.name === 'TokenCreated', 'Token not created', 'NETWORK_ERROR');\n\n      return decodedLog.args.tokenAddress as string;\n    }\n  };\n}\n\n/**\n * A `Wallet` is an extension of {@link zksync.Wallet} with additional features for interacting with Lens Network.\n * It facilitates bridging assets between different networks.\n * All transactions must originate from the address corresponding to the provided private key.\n */\nexport class Wallet extends Adapter(zksync.Wallet) {\n  /**\n   * @inheritdoc\n   *\n   * @example\n   * ```ts\n   * import { getDefaultProvider, Network, Wallet } from '@lens-network/sdk/ethers';\n   *\n   * const provider = getDefaultProvider(Network.Testnet);\n   *\n   * const wallet = new Wallet(process.env.PRIVATE_KEY, provider);\n   *\n   * const address = await wallet.experimental_createErc20({\n   *   initialOwner: wallet.address,\n   *   initialSupply: 100_000_000_000_000_000_000n,\n   *   name: 'SDK Test Token',\n   *   symbol: 'SDK',\n   * });\n   * ```\n   */\n  override experimental_createErc20(params: Erc20TokenParams): Promise<string> {\n    return super.experimental_createErc20(params);\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @example\n   * ```ts\n   * import { getDefaultProvider, Network, Wallet } from '@lens-network/sdk/ethers';\n   *\n   * const provider = getDefaultProvider(Network.Testnet);\n   *\n   * const wallet = new Wallet(process.env.PRIVATE_KEY, provider);\n   *\n   * const address = await wallet.createErc721({\n   *   initialOwner: wallet.address,\n   *   maxSupply: 100,\n   *   name: 'My Collection',\n   *   symbol: 'SDK',\n   * });\n   * ```\n   */\n  override experimental_createErc721(params: Erc721TokenParams): Promise<string> {\n    return super.experimental_createErc721(params);\n  }\n\n  /**\n   * Connects to the Lens Network using `provider`.\n   *\n   * @param provider The provider instance for connecting to an L2 network.\n   *\n   * @see {@link connectToL1} in order to connect to L1 network.\n   *\n   * @example\n   * ```ts\n   * import { getDefaultProvider, Network, Wallet } from '@lens-network/sdk/ethers';\n   *\n   * const unconnectedWallet = new Wallet(process.env.PRIVATE_KEY,\n   *\n   * const provider = getDefaultProvider(Network.Testnet);\n   * const wallet = unconnectedWallet.connect(provider);\n   * ```\n   */\n  override connect(provider: Provider) {\n    return super.connect(provider);\n  }\n}\n\n/**\n * A `Signer` is designed for frontend use with browser wallet injection (e.g., MetaMask),\n * providing only Lens Network (L2) operations.\n *\n * @see {@link zksync.L1Signer} for L1 operations.\n */\nexport class Signer extends Adapter(zksync.Signer) {\n  /**\n   * @inheritdoc\n   *\n   * @example\n   * ```ts\n   * import { BrowserProvider, getDefaultProvider, Network } from '@lens-network/sdk/ethers';\n   *\n   * const browserProvider = new BrowserProvider(window.ethereum);\n   * const lensProvider = getDefaultProvider(Network.Testnet);\n   *\n   * const network = await browserProvider.getNetwork();\n   *\n   * const signer = Signer.from(\n   *   await browserProvider.getSigner(),\n   *   Number(network.chainId),\n   *   lensProvider,\n   * );\n   *\n   * const address = await signer.experimental_createErc20({\n   *   initialOwner: signer.address,\n   *   initialSupply: 100_000_000_000_000_000_000n,\n   *   name: 'SDK Test Token',\n   *   symbol: 'SDK',\n   * });\n   * ```\n   */\n  override experimental_createErc20(params: Erc20TokenParams): Promise<string> {\n    return super.experimental_createErc20(params);\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @example\n   * ```ts\n   * import { BrowserProvider, getDefaultProvider, Network } from '@lens-network/sdk/ethers';\n   *\n   * const browserProvider = new BrowserProvider(window.ethereum);\n   * const lensProvider = getDefaultProvider(Network.Testnet);\n   *\n   * const network = await browserProvider.getNetwork();\n   *\n   * const signer = Signer.from(\n   *   await browserProvider.getSigner(),\n   *   Number(network.chainId),\n   *   lensProvider,\n   * );\n   *\n   * const address = await signer.experimental_createErc721({\n   *   initialOwner: signer.address,\n   *   maxSupply: 100,\n   *   name: 'My Collection',\n   *   symbol: 'SDK',\n   * });\n   * ```\n   */\n  override experimental_createErc721(params: Erc721TokenParams): Promise<string> {\n    return super.experimental_createErc721(params);\n  }\n\n  /**\n   * Creates a new Singer with provided `signer` and `chainId`.\n   *\n   * @param signer The signer from browser wallet.\n   * @param chainId The chain ID of the network.\n   * @param lensProvider The provider instance for connecting to the Lens Network. If not provided,\n   * the methods from the `zks` and `lens` namespace are not supported, and interaction with them\n   * will result in an error.\n   *\n   * @example\n   * ```ts\n   * import { BrowserProvider, getDefaultProvider, Network } from '@lens-network/sdk/ethers';\n   *\n   * const browserProvider = new BrowserProvider(window.ethereum);\n   * const lensProvider = getDefaultProvider(Network.Testnet);\n   *\n   * const network = await browserProvider.getNetwork();\n   *\n   * const signer = Signer.from(\n   *   await browserProvider.getSigner(),\n   *   Number(network.chainId),\n   *   lensProvider,\n   * );\n   * ```\n   */\n  static override from(\n    signer: ethers.JsonRpcSigner & {\n      provider: Provider;\n    },\n    chainId: number,\n    lensProvider?: Provider,\n  ): Signer {\n    const zkSigner = super.from(signer, chainId, lensProvider);\n    return Object.setPrototypeOf(zkSigner, Signer.prototype) as Signer;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { BasicErc20__factory } from \"./BasicErc20__factory\";\nexport { BasicErc721__factory } from \"./BasicErc721__factory\";\nexport { Erc20Factory__factory } from \"./Erc20Factory__factory\";\nexport { Erc721Factory__factory } from \"./Erc721Factory__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type { BasicErc20, BasicErc20Interface } from \"../BasicErc20\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"initialOwner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"initialSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct BasicErc20.TokenParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"revision\",\n    outputs: [\n      {\n        internalType: \"uint16\",\n        name: \"\",\n        type: \"uint16\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BasicErc20__factory {\n  static readonly abi = _abi;\n  static createInterface(): BasicErc20Interface {\n    return new Interface(_abi) as BasicErc20Interface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): BasicErc20 {\n    return new Contract(address, _abi, runner) as unknown as BasicErc20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type { BasicErc721, BasicErc721Interface } from \"../BasicErc721\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"initialOwner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct BasicErc721.TokenParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_fromTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_toTokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"BatchMetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maxSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"revision\",\n    outputs: [\n      {\n        internalType: \"uint16\",\n        name: \"\",\n        type: \"uint16\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"uri\",\n        type: \"string\",\n      },\n    ],\n    name: \"safeMint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BasicErc721__factory {\n  static readonly abi = _abi;\n  static createInterface(): BasicErc721Interface {\n    return new Interface(_abi) as BasicErc721Interface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): BasicErc721 {\n    return new Contract(address, _abi, runner) as unknown as BasicErc721;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type { Erc20Factory, Erc20FactoryInterface } from \"../Erc20Factory\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"initialSupply\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"initialOwner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"initialSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct BasicErc20.TokenParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"createToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTokens\",\n    outputs: [\n      {\n        internalType: \"contract BasicErc20[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"initialOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"revision\",\n    outputs: [\n      {\n        internalType: \"uint16\",\n        name: \"\",\n        type: \"uint16\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokens\",\n    outputs: [\n      {\n        internalType: \"contract BasicErc20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class Erc20Factory__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc20FactoryInterface {\n    return new Interface(_abi) as Erc20FactoryInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): Erc20Factory {\n    return new Contract(address, _abi, runner) as unknown as Erc20Factory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type { Erc721Factory, Erc721FactoryInterface } from \"../Erc721Factory\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"maxSupply\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"initialOwner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct BasicErc721.TokenParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"createToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTokens\",\n    outputs: [\n      {\n        internalType: \"contract BasicErc721[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"initialOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"revision\",\n    outputs: [\n      {\n        internalType: \"uint16\",\n        name: \"\",\n        type: \"uint16\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokens\",\n    outputs: [\n      {\n        internalType: \"contract BasicErc721\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class Erc721Factory__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc721FactoryInterface {\n    return new Interface(_abi) as Erc721FactoryInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): Erc721Factory {\n    return new Contract(address, _abi, runner) as unknown as Erc721Factory;\n  }\n}\n"]}