{"version":3,"sources":["../../src/viem/actions/sendRawTransactionWithDetailedOutput.ts","../../src/viem/chains.ts","../../src/chains.ts","../../src/constants.ts","../../src/viem/decorators.ts"],"names":["sendRawTransactionWithDetailedOutput","client","serializedTransaction","chains_exports","__export","testnet","defineChain","chainConfig","nativeCurrency","defineViemChain","chain","walletActions","params"],"mappings":"0FA2CA,eAAsBA,EAIpBC,EACA,CAAE,sBAAAC,CAAsB,EACiC,CACzD,OAAOD,EAAO,QACZ,CACE,OAAQ,2CACR,OAAQ,CAACC,CAAqB,CAChC,EACA,CAAE,WAAY,CAAE,CAClB,CACF,CCzDA,IAAAC,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAKA,OAAS,eAAAC,MAAmB,aAC5B,OAAS,eAAAC,MAAmB,cCkBrB,IAAMF,EAA2B,CACtC,GAAI,MACJ,KAAM,uBACN,QAAS,uBACT,OAAQ,+BACR,iBAAkB,2CAClB,QAAS,GACT,UAAW,CACT,WAAY,6CACZ,aAAc,6CACd,cAAe,6CACf,KAAM,6CACN,OAAQ,4CACV,CACF,ECnCO,IAAMG,EAAiB,CAC5B,KAAM,cACN,OAAQ,QACR,SAAU,EACZ,EFiBA,SAASC,EAAgBC,EAAiD,CACxE,OAAOJ,EAAY,CACjB,GAAGC,EACH,GAAIG,EAAM,GACV,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,eAAgBF,EAChB,QAAS,CACP,QAAS,CACP,KAAM,CAACE,EAAM,MAAM,CACrB,CACF,EACA,eAAgB,CACd,QAAS,CACP,KAAM,GAAGA,EAAM,IAAI,YACnB,IAAKA,EAAM,gBACb,CACF,EACA,UAAW,CACT,KAAM,CACJ,QAASA,EAAM,UAAU,IAC3B,EACA,OAAQ,CACN,QAASA,EAAM,UAAU,MAC3B,EACA,WAAY,CACV,QAASA,EAAM,UAAU,UAC3B,EACA,aAAc,CACZ,QAASA,EAAM,UAAU,YAC3B,EACA,cAAe,CACb,QAASA,EAAM,UAAU,aAC3B,CACF,EACA,QAASA,EAAM,QACf,KAAM,CAQJ,mBAAoB,EACtB,CACF,CAAC,CACH,CAEO,IAAML,EAAwBI,EAAuBJ,CAAO,EG+B5D,SAASM,GAAgB,CAC9B,OAIEV,IACmB,CAGnB,qCAAuCW,GACrCZ,EAAqCC,EAAQW,CAAM,CACvD,EACF","sourcesContent":["import { Account, Chain, Client, Transport } from 'viem';\nimport { type SendRawTransactionErrorType, type SendRawTransactionParameters } from 'viem/actions';\n\nimport { PublicLensNetworkRpcSchema, SendRawTransactionDetails } from '../types';\n\nexport type {\n  SendRawTransactionErrorType,\n  SendRawTransactionParameters,\n  SendRawTransactionDetails,\n};\n\nexport type SendRawTransactionWithDetailedOutputParameters = SendRawTransactionParameters;\n\nexport type SendRawTransactionWithDetailedOutputReturnType = SendRawTransactionDetails;\n\nexport type SendRawTransactionWithDetailedOutputErrorType = SendRawTransactionErrorType;\n\n/**\n * Executes a transaction and returns its hash, storage logs, and events that would have\n * been generated if the transaction had already been included in the block.\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionWithDetailedOutputParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash, storage logs, and events. {@link SendRawTransactionWithDetailedOutputReturnType}\n *\n * @example\n * ```ts\n * import { createWalletClient, Hex, http, privateKeyToAccount } from 'viem';\n * import { chains, sendRawTransactionWithDetailedOutput } from '@lens-network/sdk/viem';\n *\n * const account = privateKeyToAccount(process.env.PRIVATE_KEY as Hex);\n *\n * const walletClient = createWalletClient({\n *   account,\n *   chain: chains.testnet,\n *   transport: http(),\n * });\n *\n * const result = await sendRawTransactionWithDetailedOutput(client, {\n *   serializedTransaction: '0x02f8500182031180…',\n * });\n * ```\n */\nexport async function sendRawTransactionWithDetailedOutput<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount, PublicLensNetworkRpcSchema>,\n  { serializedTransaction }: SendRawTransactionWithDetailedOutputParameters,\n): Promise<SendRawTransactionWithDetailedOutputReturnType> {\n  return client.request(\n    {\n      method: 'zks_sendRawTransactionWithDetailedOutput',\n      params: [serializedTransaction],\n    },\n    { retryCount: 0 },\n  );\n}\n","/**\n * TODO: Move these definitions under `viem/chains` once stable.\n */\nimport { Chain, ChainContract } from 'viem';\nimport { Assign, Prettify } from 'viem/chains';\nimport { defineChain } from 'viem/utils';\nimport { chainConfig } from 'viem/zksync';\n\nimport * as chains from '../chains';\nimport { nativeCurrency } from '../constants';\n\nexport type LensNetworkChain = Prettify<\n  Assign<\n    Chain,\n    {\n      contracts: {\n        multicall3: ChainContract;\n        erc20Factory: ChainContract;\n        erc721Factory: ChainContract;\n      };\n    }\n  >\n>;\n\nfunction defineViemChain(chain: chains.ChainDefinition): LensNetworkChain {\n  return defineChain({\n    ...chainConfig,\n    id: chain.id,\n    name: chain.name,\n    network: chain.network,\n    nativeCurrency: nativeCurrency,\n    rpcUrls: {\n      default: {\n        http: [chain.rpcUrl],\n      },\n    },\n    blockExplorers: {\n      default: {\n        name: `${chain.name} Explorer`,\n        url: chain.blockExplorerUrl,\n      },\n    },\n    contracts: {\n      WETH: {\n        address: chain.contracts.WETH\n      },\n      WGRASS: {\n        address: chain.contracts.WGRASS\n      },\n      multicall3: {\n        address: chain.contracts.multicall3,\n      },\n      erc20Factory: {\n        address: chain.contracts.erc20Factory,\n      },\n      erc721Factory: {\n        address: chain.contracts.erc721Factory,\n      },\n    },\n    testnet: chain.testnet,\n    fees: {\n      /**\n       * Ensures walletClient.prepareTransactionRequest() does not\n       * call eth_maxPriorityFeePerGas which is not supported by\n       * many Wallets (i.e., MetaMask).\n       *\n       * This is safe because of the nature of gas on zkSync Validium.\n       */\n      estimateFeesPerGas: 0n,\n    },\n  });\n}\n\nexport const testnet = /*#__PURE__*/ defineViemChain(chains.testnet);\n","export type DeployedContracts = {\n  // well known\n  multicall3: `0x${string}`;\n  WETH: `0x${string}`;\n  WGRASS: `0x${string}`;\n\n  // lens specific\n  erc20Factory: `0x${string}`;\n  erc721Factory: `0x${string}`;\n};\n\nexport type ChainDefinition = {\n  id: number;\n  name: string;\n  network: string;\n  rpcUrl: string;\n  blockExplorerUrl: string;\n  testnet: boolean;\n  contracts: DeployedContracts;\n};\n\n/**\n * The Lens Testnet Network.\n */\nexport const testnet: ChainDefinition = {\n  id: 37111,\n  name: 'Lens Testnet Network',\n  network: 'lens-testnet-network',\n  rpcUrl: 'https://rpc.testnet.lens.dev',\n  blockExplorerUrl: 'https://block-explorer.testnet.lens.dev/',\n  testnet: true,\n  contracts: {\n    multicall3: '0x8A44EDE8a6843a997bC0Cc4659e4dB1Da8f91116',\n    erc20Factory: '0x44D3f533C370C9Ed8cfbe2d77b4440DC74959508',\n    erc721Factory: '0x1299E25078d91f3aE5ff8A44DEbc7f25b2A1f314',\n    WETH: '0xaA91D645D7a6C1aeaa5988e0547267B77d33fe16',\n    WGRASS: '0x1CfDf7a1F0C2A4eAe5f3C3eA8e3eBd4f8F2fEe4A',\n  },\n};\n","/**\n * The native currency of the Lens Network.\n */\nexport const nativeCurrency = {\n  name: 'Grass Token',\n  symbol: 'GRASS',\n  decimals: 18,\n} as const;\n","import { Account, Client, Transport } from 'viem';\n\nimport {\n  sendRawTransactionWithDetailedOutput,\n  type SendRawTransactionWithDetailedOutputParameters,\n  type SendRawTransactionWithDetailedOutputReturnType,\n} from './actions/sendRawTransactionWithDetailedOutput';\nimport { LensNetworkChain } from './chains';\n\n\nexport type WalletActions = {\n  /**\n   * Create an ERC-20 contract with the given parameters.\n   *\n   * @param client - Client to use\n   * @param parameters - {@link CreateErc20Parameters}\n   * @returns The newly created ERC-20 contract address. {@link CreateErc20ReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createWalletClient, Hex, http, privateKeyToAccount } from 'viem';\n   * import { chains, walletActions } from '@lens-network/sdk/viem';\n   *\n   * const account = privateKeyToAccount(process.env.PRIVATE_KEY as Hex);\n   *\n   * export const walletClient = createWalletClient({\n   *   account,\n   *   chain: chains.testnet,\n   *   transport: http(),\n   * }).extend(walletActions());\n   *\n   * const tokenAddress = await client.createErc20({\n   *   initialOwner: account.address,\n   *   initialSupply: 100_000_000_000_000_000_000n,\n   *   name: 'SDK Test Token',\n   *   symbol: 'SDK',\n   * });\n   *\n   * // tokenAddress: 0x…\n   * ```\n   */\n  // createErc20: (params: CreateErc20Parameters) => Promise<CreateErc20ReturnType>;\n  /**\n   * Create an ERC-721 contract with the given parameters.\n   *\n   * @param client - Client to use\n   * @param parameters - {@link CreateErc20Parameters}\n   * @returns The newly created ERC-721 contract address. {@link CreateErc20ReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createWalletClient, Hex, http, privateKeyToAccount } from 'viem';\n   * import { chains, walletActions } from '@lens-network/sdk/viem';\n   *\n   * const account = privateKeyToAccount(process.env.PRIVATE_KEY as Hex);\n   *\n   * export const walletClient = createWalletClient({\n   *   account,\n   *   chain: chains.testnet,\n   *   transport: http(),\n   * }).extend(walletActions());\n   *\n   * const tokenAddress = await client.createErc721({\n   *   initialOwner: account.address,\n   *   maxSupply: 100n,\n   *   name: 'My collection',\n   *   symbol: 'SDK',\n   * });\n   *\n   * // tokenAddress: 0x…\n   * ```\n   */\n  // createErc721: (params: CreateErc721Parameters) => Promise<CreateErc721ReturnType>;\n\n  /**\n   * Executes a transaction and returns its hash, storage logs, and events that would have\n   * been generated if the transaction had already been included in the block.\n   *\n   * @param params - {@link SendRawTransactionWithDetailedOutputParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash, storage logs, and events. {@link SendRawTransactionWithDetailedOutputReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createWalletClient, Hex, http, privateKeyToAccount } from 'viem';\n   * import { chains, walletActions } from '@lens-network/sdk/viem';\n   *\n   * const account = privateKeyToAccount(process.env.PRIVATE_KEY as Hex);\n   *\n   * export const walletClient = createWalletClient({\n   *   account,\n   *   chain: chains.testnet,\n   *   transport: http(),\n   * }).extend(walletActions());\n   *\n   * const result = await client.sendRawTransactionWithDetailedOutput({\n   *   serializedTransaction: '0x02f8500182031180…',\n   * });\n   * ```\n   */\n  sendRawTransactionWithDetailedOutput: (\n    params: SendRawTransactionWithDetailedOutputParameters,\n  ) => Promise<SendRawTransactionWithDetailedOutputReturnType>;\n};\n\nexport function walletActions() {\n  return <\n    TChain extends LensNetworkChain = LensNetworkChain,\n    TAccount extends Account | undefined = Account | undefined,\n  >(\n    client: Client<Transport, TChain, TAccount>,\n  ): WalletActions => ({\n    // createErc20: (params) => createErc20(client, params),\n    // createErc721: (params) => createErc721(client, params),\n    sendRawTransactionWithDetailedOutput: (params) =>\n      sendRawTransactionWithDetailedOutput(client, params),\n  });\n}\n"]}