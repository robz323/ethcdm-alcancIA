"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareEip712 = void 0;
const constants_js_1 = require("../constants.js");
const index_js_1 = require("../classes/index.js");
const networks_1 = require("@injectivelabs/networks");
const index_js_2 = require("./mocks/index.js");
const prepareEip712 = ({ messages, gas = constants_js_1.DEFAULT_GAS_LIMIT, network = networks_1.Network.Mainnet, injectiveAddress = index_js_2.mockFactory.injectiveAddress, ethereumAddress = index_js_2.mockFactory.ethereumAddress, endpoints = {}, accountNumber = 1, sequence = 1, timeoutHeight = 999_999_999, memo = '', }) => {
    const chainInfo = (0, networks_1.getNetworkInfo)(network);
    const actualEndpoints = { ...(0, networks_1.getNetworkEndpoints)(network), ...endpoints };
    const msgs = Array.isArray(messages) ? messages : [messages];
    const web3Msgs = msgs.map((msg) => msg.toWeb3());
    const { tx, eip712 } = index_js_2.mockFactory.eip712Tx({
        ...chainInfo,
        accountNumber,
        sequence,
        timeoutHeight,
        memo,
    });
    const eip712Args = {
        msgs,
        fee: {
            amount: [
                {
                    denom: 'inj',
                    amount: new index_js_1.BigNumberInBase(gas.toString())
                        .times(constants_js_1.DEFAULT_GAS_PRICE)
                        .toFixed(),
                },
            ],
            gas: gas.toString(),
            payer: injectiveAddress,
        },
        tx: {
            ...tx,
            sequence: sequence.toString(),
            timeoutHeight: timeoutHeight.toString(),
            accountNumber: accountNumber.toString(),
        },
        ethereumChainId: eip712.ethereumChainId,
    };
    const prepareEip712Request = {
        ...eip712,
        chainId: eip712.ethereumChainId,
        message: web3Msgs,
        gasLimit: gas,
        address: ethereumAddress,
    };
    return { endpoints: actualEndpoints, eip712Args, prepareEip712Request };
};
exports.prepareEip712 = prepareEip712;
