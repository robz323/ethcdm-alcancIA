"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStdFee = exports.getStdFeeFromString = exports.getDefaultStdFee = exports.getStdFeeFromObject = exports.getStdFeeForToken = exports.splitArrayToChunks = exports.splitArrayToChunksThrow = exports.awaitForAll = exports.awaitAll = exports.sleep = void 0;
const constants_js_1 = require("./constants.js");
const BigNumberInBase_js_1 = __importDefault(require("./classes/BigNumber/BigNumberInBase.js"));
const BigNumberInWei_js_1 = __importDefault(require("./classes/BigNumber/BigNumberInWei.js"));
const sleep = (timeout) => new Promise((resolve) => setTimeout(resolve, timeout));
exports.sleep = sleep;
/**
 * When we want to execute the promises in batch
 */
const awaitAll = async (array, callback) => await Promise.all(array.map(async (item) => await callback(item)));
exports.awaitAll = awaitAll;
/**
 * When we want to execute the promises one by one
 * and not all in batch as with await Promise.all()
 */
const awaitForAll = async (array, callback) => {
    const result = [];
    for (let i = 0; i < array.length; i += 1) {
        try {
            result.push(await callback(array[i]));
        }
        catch (e) {
            //
        }
    }
    return result;
};
exports.awaitForAll = awaitForAll;
const splitArrayToChunksThrow = ({ array, chunkSize, filter, }) => {
    const chunks = [];
    const chunkSizeInNumber = Number(chunkSize);
    if (isNaN(chunkSizeInNumber)) {
        throw new Error('Invalid chunk size, must be a valid number');
    }
    for (let i = 0; i < array.length; i += chunkSizeInNumber) {
        const chunk = array.slice(i, i + chunkSizeInNumber);
        if (filter) {
            chunks.push(chunk.filter(filter));
        }
        else {
            chunks.push(chunk);
        }
    }
    return chunks;
};
exports.splitArrayToChunksThrow = splitArrayToChunksThrow;
const splitArrayToChunks = ({ array, chunkSize, filter, }) => {
    try {
        return (0, exports.splitArrayToChunksThrow)({ array, chunkSize, filter });
    }
    catch (e) {
        return [array];
    }
};
exports.splitArrayToChunks = splitArrayToChunks;
const getStdFeeForToken = (token = { denom: 'inj', decimals: 18 }, gasPrice, gasLimit) => {
    const gasPriceInBase = gasPrice || new BigNumberInWei_js_1.default(constants_js_1.DEFAULT_GAS_PRICE).toBase();
    const gasPriceScaled = new BigNumberInBase_js_1.default(gasPriceInBase)
        .toWei(token.decimals)
        .toFixed(0);
    const gasNormalized = new BigNumberInBase_js_1.default(gasLimit || constants_js_1.DEFAULT_GAS_LIMIT).toFixed(0);
    return {
        amount: [
            {
                denom: token.denom,
                amount: new BigNumberInBase_js_1.default(gasPriceScaled)
                    .times(gasNormalized)
                    .toFixed(),
            },
        ],
        gas: gasNormalized,
    };
};
exports.getStdFeeForToken = getStdFeeForToken;
const getStdFeeFromObject = (args) => {
    if (!args) {
        return constants_js_1.DEFAULT_STD_FEE;
    }
    const { gas = constants_js_1.DEFAULT_GAS_LIMIT.toString(), gasPrice = constants_js_1.DEFAULT_GAS_PRICE, payer, granter, feePayer, } = args;
    const gasNormalized = new BigNumberInBase_js_1.default(gas).toFixed(0);
    const gasPriceNormalized = new BigNumberInBase_js_1.default(gasPrice).toFixed(0);
    return {
        amount: [
            {
                denom: 'inj',
                amount: new BigNumberInBase_js_1.default(gasNormalized)
                    .times(gasPriceNormalized)
                    .toFixed(),
            },
        ],
        gas: new BigNumberInBase_js_1.default(gasNormalized).toFixed(),
        payer /** for Web3Gateway fee delegation */,
        granter,
        feePayer,
    };
};
exports.getStdFeeFromObject = getStdFeeFromObject;
const getDefaultStdFee = () => constants_js_1.DEFAULT_STD_FEE;
exports.getDefaultStdFee = getDefaultStdFee;
const getStdFeeFromString = (gasPrice) => {
    const matchResult = gasPrice.match(/^([0-9.]+)([a-zA-Z][a-zA-Z0-9/:._-]*)$/);
    if (!matchResult) {
        throw new Error('Invalid gas price string');
    }
    const [_, amount] = matchResult;
    const gas = new BigNumberInBase_js_1.default(amount)
        .toWei()
        .dividedBy(constants_js_1.DEFAULT_GAS_PRICE)
        .toFixed(0);
    return (0, exports.getStdFeeFromObject)({ gas, gasPrice: constants_js_1.DEFAULT_GAS_PRICE });
};
exports.getStdFeeFromString = getStdFeeFromString;
const getStdFee = (args) => {
    if (!args) {
        return constants_js_1.DEFAULT_STD_FEE;
    }
    if (typeof args === 'string') {
        return (0, exports.getStdFeeFromString)(args);
    }
    return (0, exports.getStdFeeFromObject)({ ...args });
};
exports.getStdFee = getStdFee;
