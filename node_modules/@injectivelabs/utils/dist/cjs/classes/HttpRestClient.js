"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const exceptions_1 = require("@injectivelabs/exceptions");
const http_status_codes_1 = require("http-status-codes");
const HttpClient_js_1 = __importDefault(require("./HttpClient.js"));
const getErrorMessage = (error, endpoint) => {
    if (!error.response) {
        return `The request to ${endpoint} has failed.`;
    }
    return error.response.data
        ? error.response.data.message || error.response.data
        : error.response.statusText;
};
/**
 * @hidden
 */
class HttpRestClient {
    client;
    endpoint;
    constructor(endpoint, options = {}) {
        this.client = new HttpClient_js_1.default(endpoint, options);
        this.endpoint = endpoint;
    }
    setConfig(config) {
        this.client.setConfig(config);
        return this;
    }
    async get(endpoint, params = {}) {
        try {
            return await this.client.get(endpoint, params);
        }
        catch (e) {
            const error = e;
            if (axios_1.default.isAxiosError(error)) {
                if (error.code === 'ECONNABORTED') {
                    throw new exceptions_1.HttpRequestException(new Error(error.message), {
                        code: http_status_codes_1.StatusCodes.REQUEST_TOO_LONG,
                        context: endpoint,
                    });
                }
                const message = getErrorMessage(error, endpoint);
                throw new exceptions_1.HttpRequestException(new Error(message), {
                    context: endpoint,
                    code: error.response
                        ? error.response.status
                        : http_status_codes_1.StatusCodes.BAD_REQUEST,
                });
            }
            throw new exceptions_1.HttpRequestException(new Error(error.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: endpoint,
            });
        }
    }
    async retry(httpCall, retries = 3, delay = 1000) {
        const retryHttpCall = async (attempt = 1) => {
            try {
                return (await httpCall());
            }
            catch (e) {
                if (e instanceof exceptions_1.HttpRequestException) {
                    if (e.code === http_status_codes_1.StatusCodes.REQUEST_TOO_LONG) {
                        throw e;
                    }
                }
                if (attempt >= retries) {
                    throw e;
                }
                return new Promise((resolve) => setTimeout(() => resolve(retryHttpCall(attempt + 1)), delay * attempt));
            }
        };
        return retryHttpCall();
    }
    async post(endpoint, params = {}) {
        try {
            return await this.client.post(endpoint, params);
        }
        catch (e) {
            const error = e;
            if (axios_1.default.isAxiosError(error)) {
                if (error.code === 'ECONNABORTED') {
                    throw new exceptions_1.HttpRequestException(new Error(error.message), {
                        code: http_status_codes_1.StatusCodes.REQUEST_TOO_LONG,
                        method: exceptions_1.HttpRequestMethod.Post,
                    });
                }
                const message = getErrorMessage(error, endpoint);
                throw new exceptions_1.HttpRequestException(new Error(message), {
                    code: error.response
                        ? error.response.status
                        : http_status_codes_1.StatusCodes.BAD_REQUEST,
                    context: endpoint,
                    contextModule: exceptions_1.HttpRequestMethod.Post,
                });
            }
            throw new exceptions_1.HttpRequestException(new Error(error.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: endpoint,
                contextModule: exceptions_1.HttpRequestMethod.Post,
            });
        }
    }
}
exports.default = HttpRestClient;
