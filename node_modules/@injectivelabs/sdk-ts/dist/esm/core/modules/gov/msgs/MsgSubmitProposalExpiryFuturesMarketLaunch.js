import { GoogleProtobufAny, CosmosGovV1Beta1Tx, CosmosBaseV1Beta1Coin, InjectiveOracleV1Beta1Oracle, InjectiveExchangeV1Beta1Proposal, } from '@injectivelabs/core-proto-ts';
import snakecaseKeys from 'snakecase-keys';
import { MsgBase } from '../../MsgBase.js';
import { amountToCosmosSdkDecAmount, numberToCosmosSdkDecString, } from '../../../../utils/numbers.js';
const createExpiryFuturesMarketLaunch = (params) => {
    const content = InjectiveExchangeV1Beta1Proposal.ExpiryFuturesMarketLaunchProposal.create();
    content.title = params.market.title;
    content.description = params.market.description;
    content.ticker = params.market.ticker;
    content.quoteDenom = params.market.quoteDenom;
    content.oracleBase = params.market.oracleBase;
    content.oracleQuote = params.market.oracleQuote;
    content.oracleScaleFactor = params.market.oracleScaleFactor;
    content.oracleType = params.market.oracleType;
    content.expiry = params.market.expiry.toString();
    content.initialMarginRatio = params.market.initialMarginRatio;
    content.maintenanceMarginRatio = params.market.maintenanceMarginRatio;
    content.makerFeeRate = params.market.makerFeeRate;
    content.takerFeeRate = params.market.takerFeeRate;
    content.minPriceTickSize = params.market.minPriceTickSize;
    content.minQuantityTickSize = params.market.minQuantityTickSize;
    content.minNotional = params.market.minNotional;
    if (params.market.adminInfo) {
        const adminInfo = InjectiveExchangeV1Beta1Proposal.AdminInfo.create();
        adminInfo.admin = params.market.adminInfo.admin;
        adminInfo.adminPermissions = params.market.adminInfo.adminPermissions;
        content.adminInfo = adminInfo;
    }
    return InjectiveExchangeV1Beta1Proposal.ExpiryFuturesMarketLaunchProposal.fromPartial(content);
};
/**
 * @category Messages
 */
export default class MsgSubmitProposalExpiryFuturesMarketLaunch extends MsgBase {
    static fromJSON(params) {
        return new MsgSubmitProposalExpiryFuturesMarketLaunch(params);
    }
    toProto() {
        const { params: initialParams } = this;
        const params = {
            ...initialParams,
            market: {
                ...initialParams.market,
                initialMarginRatio: amountToCosmosSdkDecAmount(initialParams.market.initialMarginRatio).toFixed(),
                maintenanceMarginRatio: amountToCosmosSdkDecAmount(initialParams.market.maintenanceMarginRatio).toFixed(),
                makerFeeRate: amountToCosmosSdkDecAmount(initialParams.market.makerFeeRate).toFixed(),
                takerFeeRate: amountToCosmosSdkDecAmount(initialParams.market.takerFeeRate).toFixed(),
                minQuantityTickSize: amountToCosmosSdkDecAmount(initialParams.market.minQuantityTickSize).toFixed(),
                minNotional: amountToCosmosSdkDecAmount(initialParams.market.minNotional).toFixed(),
            },
        };
        const depositParams = CosmosBaseV1Beta1Coin.Coin.create();
        depositParams.denom = params.deposit.denom;
        depositParams.amount = params.deposit.amount;
        const contentAny = GoogleProtobufAny.Any.create();
        contentAny.typeUrl =
            '/injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal';
        contentAny.value =
            InjectiveExchangeV1Beta1Proposal.ExpiryFuturesMarketLaunchProposal.encode(createExpiryFuturesMarketLaunch(params)).finish();
        const message = CosmosGovV1Beta1Tx.MsgSubmitProposal.create();
        message.content = contentAny;
        message.initialDeposit = [depositParams];
        message.proposer = params.proposer;
        return CosmosGovV1Beta1Tx.MsgSubmitProposal.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/cosmos.gov.v1beta1.MsgSubmitProposal',
            ...proto,
        };
    }
    toAmino() {
        const { params } = this;
        const content = createExpiryFuturesMarketLaunch(params);
        const messageWithProposalType = snakecaseKeys({
            content: {
                type: 'exchange/ExpiryFuturesMarketLaunchProposal',
                value: content,
            },
            initial_deposit: [
                {
                    denom: params.deposit.denom,
                    amount: params.deposit.amount,
                },
            ],
            proposer: params.proposer,
        });
        return {
            type: 'cosmos-sdk/MsgSubmitProposal',
            value: messageWithProposalType,
        };
    }
    toWeb3Gw() {
        const amino = this.toAmino();
        const { value } = amino;
        const messageWithProposalType = {
            ...value,
            content: {
                '@type': '/injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal',
                ...value.content.value,
            },
        };
        return {
            '@type': '/cosmos.gov.v1beta1.MsgSubmitProposal',
            ...messageWithProposalType,
        };
    }
    toEip712() {
        const { params } = this;
        const amino = this.toAmino();
        const { value, type } = amino;
        const messageAdjusted = {
            ...value,
            content: {
                type: 'exchange/ExpiryFuturesMarketLaunchProposal',
                value: {
                    ...value.content.value,
                    initial_margin_ratio: amountToCosmosSdkDecAmount(params.market.initialMarginRatio).toFixed(),
                    maintenance_margin_ratio: amountToCosmosSdkDecAmount(params.market.maintenanceMarginRatio).toFixed(),
                    maker_fee_rate: amountToCosmosSdkDecAmount(params.market.makerFeeRate).toFixed(),
                    taker_fee_rate: amountToCosmosSdkDecAmount(params.market.takerFeeRate).toFixed(),
                    min_price_tick_size: amountToCosmosSdkDecAmount(params.market.minPriceTickSize).toFixed(),
                    min_notional: amountToCosmosSdkDecAmount(params.market.minNotional).toFixed(),
                    min_quantity_tick_size: amountToCosmosSdkDecAmount(params.market.minQuantityTickSize).toFixed(),
                },
            },
        };
        return {
            type,
            value: messageAdjusted,
        };
    }
    toEip712V2() {
        const { params } = this;
        const web3gw = this.toWeb3Gw();
        const content = web3gw.content;
        const messageAdjusted = {
            ...web3gw,
            content: {
                ...content,
                oracle_type: InjectiveOracleV1Beta1Oracle.oracleTypeToJSON(content.oracle_type),
                initial_margin_ratio: numberToCosmosSdkDecString(params.market.initialMarginRatio),
                maintenance_margin_ratio: numberToCosmosSdkDecString(params.market.maintenanceMarginRatio),
                maker_fee_rate: numberToCosmosSdkDecString(params.market.makerFeeRate),
                taker_fee_rate: numberToCosmosSdkDecString(params.market.takerFeeRate),
                min_price_tick_size: numberToCosmosSdkDecString(params.market.minPriceTickSize),
                min_notional: numberToCosmosSdkDecString(params.market.minNotional),
                min_quantity_tick_size: numberToCosmosSdkDecString(params.market.minQuantityTickSize),
                admin_info: content.admin_info || null,
            },
        };
        return messageAdjusted;
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.gov.v1beta1.MsgSubmitProposal',
            message: proto,
        };
    }
    toBinary() {
        return CosmosGovV1Beta1Tx.MsgSubmitProposal.encode(this.toProto()).finish();
    }
}
