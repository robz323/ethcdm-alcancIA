import snakecaseKeys from 'snakecase-keys';
import { CosmosGovV1Tx, GoogleProtobufAny, CosmosBaseV1Beta1Coin, } from '@injectivelabs/core-proto-ts';
import { MsgBase } from '../../MsgBase.js';
/**
 * @category Messages
 */
export default class MsgSubmitGenericProposal extends MsgBase {
    static fromJSON(params) {
        return new MsgSubmitGenericProposal(params);
    }
    toProto() {
        const { params } = this;
        const depositParams = CosmosBaseV1Beta1Coin.Coin.create();
        depositParams.denom = params.deposit.denom;
        depositParams.amount = params.deposit.amount;
        const message = CosmosGovV1Tx.MsgSubmitProposal.create();
        message.messages = params.messages.map((msg) => {
            const contentAny = GoogleProtobufAny.Any.create();
            contentAny.typeUrl = msg.toDirectSign().type;
            contentAny.value = msg.toBinary();
            return contentAny;
        });
        message.initialDeposit = [depositParams];
        message.proposer = params.proposer;
        message.metadata = params.metadata || '';
        message.title = params.title;
        message.summary = params.summary;
        message.expedited = params.expedited || false;
        return CosmosGovV1Tx.MsgSubmitProposal.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/cosmos.gov.v1.MsgSubmitProposal',
            ...proto,
        };
    }
    toAmino() {
        const { params } = this;
        const proto = this.toProto();
        const messageWithProposalType = snakecaseKeys({
            ...proto,
            messages: params.messages.map((msg) => msg.toAmino()),
        });
        return {
            type: 'cosmos-sdk/v1/MsgSubmitProposal',
            value: messageWithProposalType,
        };
    }
    toWeb3Gw() {
        const { params } = this;
        const amino = this.toAmino();
        const messageWithProposalType = {
            ...amino.value,
            messages: params.messages.map((msg) => msg.toWeb3Gw()),
        };
        return {
            '@type': '/cosmos.gov.v1.MsgSubmitProposal',
            ...messageWithProposalType,
        };
    }
    toEip712() {
        const { type, value } = this.toAmino();
        const messageAdjusted = { ...value };
        if (!messageAdjusted.expedited) {
            delete messageAdjusted.expedited;
        }
        return {
            type,
            value: messageAdjusted,
        };
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.gov.v1.MsgSubmitProposal',
            message: proto,
        };
    }
    toBinary() {
        return CosmosGovV1Tx.MsgSubmitProposal.encode(this.toProto()).finish();
    }
}
