import { dataToExecData, ExecArgBase, } from '../ExecArgBase.js';
import { StrategyType, } from '../types.js';
/**
 * @category Contract Exec Arguments
 */
/** @deprecated */
export default class ExecArgCreateSpotGridStrategy extends ExecArgBase {
    static fromJSON(params) {
        return new ExecArgCreateSpotGridStrategy(params);
    }
    toData() {
        const { params } = this;
        const trailingBounds = params.trailingArithmetic
            ? {
                upper_trailing_bound: params.trailingArithmetic.upperTrailing,
                lower_trailing_bound: params.trailingArithmetic.lowerTrailing,
            }
            : undefined;
        const strategyType = params.trailingArithmetic && trailingBounds
            ? params.trailingArithmetic.lpMode
                ? { trailing_arithmetic_l_p: trailingBounds }
                : { trailing_arithmetic: trailingBounds }
            : params.strategyType ?? StrategyType.Arithmetic;
        return {
            subaccount_id: params.subaccountId,
            levels: params.levels,
            bounds: [params.lowerBound, params.upperBound],
            slippage: params.slippage,
            exit_type: params.exitType,
            stop_loss: params.stopLoss
                ? {
                    exit_type: params.stopLoss.exitType,
                    exit_price: params.stopLoss.exitPrice,
                }
                : undefined,
            take_profit: params.takeProfit
                ? {
                    exit_type: params.takeProfit.exitType,
                    exit_price: params.takeProfit.exitPrice,
                }
                : undefined,
            strategy_type: strategyType,
            ...(params.feeRecipient && {
                fee_recipient: params.feeRecipient,
            }),
        };
    }
    toExecData() {
        return dataToExecData('create_strategy', this.toData());
    }
}
