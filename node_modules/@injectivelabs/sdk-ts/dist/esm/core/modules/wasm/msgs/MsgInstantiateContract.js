import { fromUtf8 } from '../../../../utils/utf8.js';
import { MsgBase } from '../../MsgBase.js';
import snakecaseKeys from 'snakecase-keys';
import { CosmwasmWasmV1Tx, CosmosBaseV1Beta1Coin, } from '@injectivelabs/core-proto-ts';
import { GeneralException } from '@injectivelabs/exceptions';
/**
 * @category Messages
 */
export default class MsgInstantiateContract extends MsgBase {
    static fromJSON(params) {
        return new MsgInstantiateContract(params);
    }
    toProto() {
        const { params } = this;
        const message = CosmwasmWasmV1Tx.MsgInstantiateContract.create();
        message.sender = params.sender;
        message.admin = params.admin;
        message.codeId = params.codeId.toString();
        message.label = params.label;
        message.msg = fromUtf8(JSON.stringify(params.msg));
        if (params.amount) {
            const funds = CosmosBaseV1Beta1Coin.Coin.create();
            funds.denom = params.amount.denom;
            funds.amount = params.amount.amount;
            message.funds = [funds];
        }
        return CosmwasmWasmV1Tx.MsgInstantiateContract.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/cosmwasm.wasm.v1.MsgInstantiateContract',
            ...proto,
        };
    }
    toAmino() {
        const proto = this.toProto();
        const message = {
            ...snakecaseKeys(proto),
        };
        return {
            type: 'wasm/MsgInstantiateContract',
            value: message,
        };
    }
    toWeb3Gw() {
        const amino = this.toAmino();
        const { value } = amino;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgInstantiateContract',
            ...value,
        };
    }
    toEip712() {
        throw new GeneralException(new Error('EIP712_v1 is not supported for MsgInstantiateContract. Please use EIP712_v2'));
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmwasm.wasm.v1.MsgInstantiateContract',
            message: proto,
        };
    }
    toBinary() {
        return CosmwasmWasmV1Tx.MsgInstantiateContract.encode(this.toProto()).finish();
    }
}
