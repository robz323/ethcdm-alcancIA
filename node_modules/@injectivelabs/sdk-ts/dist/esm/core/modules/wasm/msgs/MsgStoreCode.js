import { fromUtf8 } from '../../../../utils/utf8.js';
import { MsgBase } from '../../MsgBase.js';
import { toPascalCase } from '@injectivelabs/utils';
import snakecaseKeys from 'snakecase-keys';
import { CosmwasmWasmV1Tx, CosmwasmWasmV1Types, } from '@injectivelabs/core-proto-ts';
import { GeneralException } from '@injectivelabs/exceptions';
/**
 * @category Messages
 */
export default class MsgStoreCode extends MsgBase {
    static fromJSON(params) {
        return new MsgStoreCode(params);
    }
    toProto() {
        const { params } = this;
        const message = CosmwasmWasmV1Tx.MsgStoreCode.create();
        message.sender = params.sender;
        message.wasmByteCode =
            typeof params.wasmBytes === 'string'
                ? fromUtf8(params.wasmBytes)
                : params.wasmBytes;
        if (params.instantiatePermission) {
            const accessConfig = CosmwasmWasmV1Types.AccessConfig.create();
            accessConfig.permission = params.instantiatePermission.permission;
            accessConfig.addresses = params.instantiatePermission.addresses;
            message.instantiatePermission = accessConfig;
        }
        return CosmwasmWasmV1Tx.MsgStoreCode.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/cosmwasm.wasm.v1.MsgStoreCode',
            ...proto,
        };
    }
    toAmino() {
        const proto = this.toProto();
        const message = {
            ...snakecaseKeys(proto),
            wasm_byte_code: Buffer.from(proto.wasmByteCode).toString('base64'),
            instantiate_permission: proto.instantiatePermission
                ? {
                    permission: toPascalCase(CosmwasmWasmV1Types.accessTypeToJSON(proto.instantiatePermission.permission).replace('ACCESS_TYPE_', '')),
                    addresses: proto.instantiatePermission.addresses || [],
                }
                : undefined,
        };
        return {
            type: 'wasm/MsgStoreCode',
            value: { ...message },
        };
    }
    toWeb3Gw() {
        const amino = this.toAmino();
        const { value } = amino;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgStoreCode',
            ...value,
        };
    }
    toEip712() {
        throw new GeneralException(new Error('EIP712_v1 is not supported for MsgStoreCode. Please use EIP712_v2'));
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmwasm.wasm.v1.MsgStoreCode',
            message: proto,
        };
    }
    toBinary() {
        return CosmwasmWasmV1Tx.MsgStoreCode.encode(this.toProto()).finish();
    }
}
