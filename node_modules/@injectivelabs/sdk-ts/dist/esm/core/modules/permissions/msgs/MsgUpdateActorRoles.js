import snakecaseKeys from 'snakecase-keys';
import { InjectivePermissionsV1Beta1Tx, InjectivePermissionsV1Beta1Permissions, } from '@injectivelabs/core-proto-ts';
import { MsgBase } from '../../MsgBase.js';
/**
 * @category Messages
 */
export default class MsgUpdateActorRoles extends MsgBase {
    static fromJSON(params) {
        return new MsgUpdateActorRoles(params);
    }
    toProto() {
        const { params } = this;
        const message = InjectivePermissionsV1Beta1Tx.MsgUpdateActorRoles.create();
        message.sender = params.sender;
        message.denom = params.denom;
        const roleActorsToAdd = params.roleActorsToAdd.map((roleActors) => {
            const actor = InjectivePermissionsV1Beta1Permissions.RoleActors.create();
            actor.role = roleActors.role;
            actor.actors = roleActors.actors;
            return actor;
        }) || [];
        message.roleActorsToAdd = roleActorsToAdd;
        const roleActorsToRevoke = params.roleActorsToRevoke.map((roleActors) => {
            const actor = InjectivePermissionsV1Beta1Permissions.RoleActors.create();
            actor.role = roleActors.role;
            actor.actors = roleActors.actors;
            return actor;
        }) || [];
        message.roleActorsToRevoke = roleActorsToRevoke;
        return InjectivePermissionsV1Beta1Tx.MsgUpdateActorRoles.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/injective.permissions.v1beta1.MsgUpdateActorRoles',
            ...proto,
        };
    }
    toAmino() {
        const proto = this.toProto();
        const message = {
            ...snakecaseKeys(proto),
        };
        return {
            type: 'permissions/MsgUpdateActorRoles',
            value: message,
        };
    }
    toWeb3Gw() {
        const amino = this.toAmino();
        const { value } = amino;
        return {
            '@type': '/injective.permissions.v1beta1.MsgUpdateActorRoles',
            ...value,
        };
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.permissions.v1beta1.MsgUpdateActorRoles',
            message: proto,
        };
    }
    toBinary() {
        return InjectivePermissionsV1Beta1Tx.MsgUpdateActorRoles.encode(this.toProto()).finish();
    }
}
