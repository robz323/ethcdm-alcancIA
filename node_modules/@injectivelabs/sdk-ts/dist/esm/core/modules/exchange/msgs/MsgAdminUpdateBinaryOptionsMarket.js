import { InjectiveExchangeV1Beta1Tx, InjectiveExchangeV1Beta1Exchange, } from '@injectivelabs/core-proto-ts';
import { MsgBase } from '../../MsgBase.js';
import snakecaseKeys from 'snakecase-keys';
import { amountToCosmosSdkDecAmount, numberToCosmosSdkDecString, } from '../../../../utils/numbers.js';
const createMessage = (params) => {
    const message = InjectiveExchangeV1Beta1Tx.MsgAdminUpdateBinaryOptionsMarket.create();
    message.sender = params.sender;
    message.marketId = params.marketId;
    message.settlementPrice = params.settlementPrice;
    message.expirationTimestamp = params.expirationTimestamp;
    message.settlementTimestamp = params.settlementTimestamp;
    message.status = params.status;
    return InjectiveExchangeV1Beta1Tx.MsgAdminUpdateBinaryOptionsMarket.fromPartial(message);
};
/**
 * @category Messages
 */
export default class MsgAdminUpdateBinaryOptionsMarket extends MsgBase {
    static fromJSON(params) {
        return new MsgAdminUpdateBinaryOptionsMarket(params);
    }
    toProto() {
        const { params: initialParams } = this;
        const params = {
            ...initialParams,
            settlementPrice: amountToCosmosSdkDecAmount(initialParams.settlementPrice).toFixed(),
        };
        return createMessage(params);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket',
            ...proto,
        };
    }
    toAmino() {
        const { params } = this;
        const message = {
            ...snakecaseKeys(createMessage(params)),
        };
        return {
            type: 'exchange/MsgAdminUpdateBinaryOptionsMarket',
            value: message,
        };
    }
    toWeb3Gw() {
        const amino = this.toAmino();
        const { value } = amino;
        return {
            '@type': '/injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket',
            ...value,
        };
    }
    toEip712() {
        const amino = this.toAmino();
        const { type, value } = amino;
        const messageAdjusted = {
            ...value,
            settlement_price: amountToCosmosSdkDecAmount(value.settlement_price).toFixed(),
        };
        return {
            type,
            value: messageAdjusted,
        };
    }
    toEip712V2() {
        const { params } = this;
        const web3gw = this.toWeb3Gw();
        const messageAdjusted = {
            ...web3gw,
            settlement_price: numberToCosmosSdkDecString(params.settlementPrice),
            status: InjectiveExchangeV1Beta1Exchange.marketStatusToJSON(params.status),
        };
        return messageAdjusted;
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket',
            message: proto,
        };
    }
    toBinary() {
        return InjectiveExchangeV1Beta1Tx.MsgAdminUpdateBinaryOptionsMarket.encode(this.toProto()).finish();
    }
}
