"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_proto_ts_1 = require("@injectivelabs/core-proto-ts");
const Base_js_1 = require("./Base.js");
/**
 * @category Contract Exec Arguments
 */
class ContractExecutionAuthorization extends Base_js_1.BaseAuthorization {
    static fromJSON(params) {
        return new ContractExecutionAuthorization(params);
    }
    toAny() {
        const { params } = this;
        const authorization = core_proto_ts_1.CosmwasmWasmV1Authz.ContractExecutionAuthorization.create();
        const grant = core_proto_ts_1.CosmwasmWasmV1Authz.ContractGrant.create();
        grant.contract = params.contract;
        if (params.limit) {
            if (params.limit.maxCalls && params.limit.amounts) {
                const limit = core_proto_ts_1.CosmwasmWasmV1Authz.CombinedLimit.create();
                limit.callsRemaining = params.limit.maxCalls.toString();
                limit.amounts = params.limit.amounts;
                const any = core_proto_ts_1.GoogleProtobufAny.Any.create();
                any.typeUrl = '/cosmwasm.wasm.v1.CombinedLimit';
                any.value = core_proto_ts_1.CosmwasmWasmV1Authz.CombinedLimit.encode(limit).finish();
                grant.limit = any;
            }
            else if (params.limit.maxCalls) {
                const limit = core_proto_ts_1.CosmwasmWasmV1Authz.MaxCallsLimit.create();
                limit.remaining = params.limit.maxCalls.toString();
                const any = core_proto_ts_1.GoogleProtobufAny.Any.create();
                any.typeUrl = '/cosmwasm.wasm.v1.MaxCallsLimit';
                any.value = core_proto_ts_1.CosmwasmWasmV1Authz.MaxCallsLimit.encode(limit).finish();
                grant.limit = any;
            }
            else if (params.limit.amounts) {
                const limit = core_proto_ts_1.CosmwasmWasmV1Authz.MaxFundsLimit.create();
                limit.amounts = params.limit.amounts;
                const any = core_proto_ts_1.GoogleProtobufAny.Any.create();
                any.typeUrl = '/cosmwasm.wasm.v1.MaxFundsLimit';
                any.value = core_proto_ts_1.CosmwasmWasmV1Authz.MaxFundsLimit.encode(limit).finish();
                grant.limit = any;
            }
        }
        if (params.filter) {
            const filter = core_proto_ts_1.CosmwasmWasmV1Authz.AcceptedMessageKeysFilter.create();
            filter.keys = params.filter.acceptedMessagesKeys;
            const any = core_proto_ts_1.GoogleProtobufAny.Any.create();
            any.typeUrl = '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter';
            any.value =
                core_proto_ts_1.CosmwasmWasmV1Authz.AcceptedMessageKeysFilter.encode(filter).finish();
            grant.filter = any;
        }
        else {
            const filter = core_proto_ts_1.CosmwasmWasmV1Authz.AllowAllMessagesFilter.create();
            const any = core_proto_ts_1.GoogleProtobufAny.Any.create();
            any.typeUrl = '/cosmwasm.wasm.v1.AllowAllMessagesFilter';
            any.value =
                core_proto_ts_1.CosmwasmWasmV1Authz.AllowAllMessagesFilter.encode(filter).finish();
            grant.filter = any;
        }
        authorization.grants = [grant];
        const any = core_proto_ts_1.GoogleProtobufAny.Any.create();
        any.typeUrl = '/cosmwasm.wasm.v1.ContractExecutionAuthorization';
        any.value =
            core_proto_ts_1.CosmwasmWasmV1Authz.ContractExecutionAuthorization.encode(authorization).finish();
        return any;
    }
    toProto() {
        const authorization = core_proto_ts_1.CosmwasmWasmV1Authz.ContractExecutionAuthorization.decode(this.toAny().value);
        return authorization;
    }
    toAmino() {
        const { params } = this;
        const grant = {};
        grant.contract = params.contract;
        if (params.limit) {
            if (params.limit.maxCalls && params.limit.amounts) {
                grant.limit = {
                    type: 'wasm/CombinedLimit',
                    calls_remaining: params.limit.maxCalls.toString(),
                    amounts: params.limit.amounts,
                };
            }
            else if (params.limit.maxCalls) {
                grant.limit = {
                    type: 'wasm/MaxCallsLimit',
                    remaining: params.limit.maxCalls.toString(),
                };
            }
            else if (params.limit.amounts) {
                grant.limit = {
                    type: 'wasm/MaxFundsLimit',
                    amounts: params.limit.amounts,
                };
            }
        }
        if (params.filter) {
            grant.filter = {
                type: 'wasm/AcceptedMessageKeysFilter',
                keys: params.filter.acceptedMessagesKeys,
            };
        }
        else {
            grant.filter = {
                type: 'wasm/AllowAllMessagesFilter',
            };
        }
        return {
            type: 'wasm/ContractExecutionAuthorization',
            grants: [grant],
        };
    }
    toWeb3() {
        const { params } = this;
        const grant = {};
        grant.contract = params.contract;
        if (params.limit) {
            if (params.limit.maxCalls && params.limit.amounts) {
                grant.limit = {
                    '@type': '/cosmwasm.wasm.v1.CombinedLimit',
                    calls_remaining: params.limit.maxCalls.toString(),
                    amounts: params.limit.amounts,
                };
            }
            else if (params.limit.maxCalls) {
                grant.limit = {
                    '@type': '/cosmwasm.wasm.v1.MaxCallsLimit',
                    remaining: params.limit.maxCalls.toString(),
                };
            }
            else if (params.limit.amounts) {
                grant.limit = {
                    '@type': '/cosmwasm.wasm.v1.MaxFundsLimit',
                    amounts: params.limit.amounts,
                };
            }
        }
        if (params.filter) {
            grant.filter = {
                '@type': '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter',
                keys: params.filter.acceptedMessagesKeys,
            };
        }
        else {
            grant.filter = {
                '@type': '/cosmwasm.wasm.v1.AllowAllMessagesFilter',
            };
        }
        return {
            '@type': '/cosmwasm.wasm.v1.ContractExecutionAuthorization',
            grants: [grant],
        };
    }
}
exports.default = ContractExecutionAuthorization;
