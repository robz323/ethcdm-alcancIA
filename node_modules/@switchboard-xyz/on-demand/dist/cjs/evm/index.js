"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchRandomness = exports.fetchResults = exports.fetchResult = exports.getQueue = exports.getDefaultGuardianQueue = exports.getDefaultQueue = exports.getDefaultDevnetGuardianQueue = exports.getDefaultDevnetQueue = exports.getAttestation = exports.getUpdate = exports.getFeedUpdateWithContext = exports.getFeedUpdateData = exports.simulateFeed = exports.createJob = exports.message = void 0;
const index_js_1 = require("../accounts/index.js");
const index_js_2 = require("../utils/index.js");
const message_js_1 = require("./message.js");
const nodewallet_js_1 = __importDefault(require("@coral-xyz/anchor-30/dist/cjs/nodewallet.js"));
exports.message = __importStar(require("./message.js"));
const anchor = __importStar(require("@coral-xyz/anchor-30"));
const common_1 = require("@switchboard-xyz/common");
const bs58 = __importStar(require("bs58"));
/**
 * Get an oracle job from object definition
 * @param params the job parameters
 * @returns
 */
function createJob(params) {
    return common_1.OracleJob.fromObject(params);
}
exports.createJob = createJob;
/**
 * Get the feed update data for a particular feed
 * @dev - this function is heavily rate limited
 * @param params the feed update parameters
 * @param queue the queue account
 * @returns the feed simulation result and feed id
 */
function simulateFeed(params, queue) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const gateway = (_a = params.gateway) !== null && _a !== void 0 ? _a : (yield queue.fetchGateway());
        const result = (yield gateway.fetchSignatures(Object.assign(Object.assign({}, params), { useTimestamp: true, recentHash: bs58.encode(Buffer.from((_b = params.recentHash) !== null && _b !== void 0 ? _b : "0".repeat(64), "hex")) }))).responses[0];
        return {
            result: new common_1.Big(result.success_value).div(new common_1.Big(10).pow(18)).toNumber(),
            feedId: result.feed_hash,
            response: result,
        };
    });
}
exports.simulateFeed = simulateFeed;
/**
 * Get the feed update data for a particular feed
 * @param params the feed update parameters
 * @param queue the queue account
 * @returns the feed update data, the byte arrays that need to be sent to the target chain
 */
function getFeedUpdateData(params, queue) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield getFeedUpdateWithContext(params, queue)).responses.map((r) => r.encoded);
    });
}
exports.getFeedUpdateData = getFeedUpdateData;
/**
 * Get the feed update data for a particular feed
 * @param params the feed update parameters
 * @param queue the queue account
 * @returns the feed update data with context (numeric result data, oracle response, AND encoded response)
 */
function getFeedUpdateWithContext(params, queue) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        // Set the blockhash
        const blockhash = (_a = params.recentHash) !== null && _a !== void 0 ? _a : "0".repeat(64);
        // if we just want the time feed, return
        if (params.jobs.length === 0) {
            {
                return {
                    responses: [],
                    failures: [],
                };
            }
        }
        // Get the Feed Update if the feed exists
        // Setup the updates array
        const updates = yield getUpdate(Object.assign(Object.assign({}, params), { recentHash: blockhash }), queue);
        return updates;
    });
}
exports.getFeedUpdateWithContext = getFeedUpdateWithContext;
/**
 * Get the update message for the EVM for a particular feed
 * This is useful for feeds that have already been created on chain
 * @param params - FeedUpdateCommonOptions: Parameters for the upsert message
 * @param queue - Queue: The queue account
 * @returns - Promise<string> - The update message as a hex string
 */
function getUpdate(params, queue) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        if (!params.recentHash) {
            params.recentHash = "0".repeat(64);
        }
        // slice if the recentHash starts with 0x
        if (params.recentHash.startsWith("0x")) {
            params.recentHash = params.recentHash.slice(2);
        }
        const gateway = (_a = params.gateway) !== null && _a !== void 0 ? _a : (yield queue.fetchGateway());
        const { responses, failures } = yield gateway.fetchSignatures(Object.assign(Object.assign({}, params), { useTimestamp: true, recentHash: bs58.encode(Buffer.from(params.recentHash, "hex")) }));
        const response = [];
        for (const result of responses) {
            if (!result.success_value) {
                failures.push(result.failure_error.toString());
                continue;
            }
            // Decode from Base64 to a Buffer
            const signatureBuffer = new Uint8Array(Buffer.from(result.signature, "base64"));
            // Assuming each component (r and s) is 32 bytes long
            const r = Buffer.from(signatureBuffer.slice(0, 32)).toString("hex");
            const s = Buffer.from(signatureBuffer.slice(32, 64)).toString("hex");
            const v = result.recovery_id;
            // Create the upsert message
            const updateString = (0, message_js_1.createUpdateHexString)({
                discriminator: 1,
                feedId: (_b = params.aggregatorId) !== null && _b !== void 0 ? _b : result.feed_hash.toString(),
                result: result.success_value.toString(),
                blockNumber: (_d = (_c = params.blockNumber) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : "0",
                timestamp: (_e = result.timestamp) === null || _e === void 0 ? void 0 : _e.toString(),
                r,
                s,
                v,
            });
            // Add the response to the array
            const res = {
                feedId: result.feed_hash,
                result: new common_1.Big(result.success_value).div(new common_1.Big(10).pow(18)).toNumber(),
                encoded: updateString,
                response: result,
            };
            // Add the response to the array
            response.push(res);
        }
        // Sort the response by timestamp, ascending
        response.sort((a, b) => a.response.timestamp - b.response.timestamp);
        // Return the response
        return {
            responses: response,
            failures,
        };
    });
}
exports.getUpdate = getUpdate;
/**
 * Get attestation for a particular oracle on a particular queue
 * @param options - AttestationOptions: Options for the attestation
 * @returns - Promise<string> - The attestation as a hex string
 */
function getAttestation(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { guardianQueue, recentHash, queueId, oracleId, gateway, blockNumber } = options;
        const gatewayAccount = gateway !== null && gateway !== void 0 ? gateway : (yield guardianQueue.fetchGateway());
        const chainHash = recentHash.startsWith("0x")
            ? recentHash.slice(2)
            : recentHash;
        const attestation = yield gatewayAccount.fetchBridgingMessage({
            chainHash,
            queuePubkey: queueId,
            oraclePubkey: oracleId,
        });
        if (!options.recentHash) {
            options.recentHash = "0".repeat(64);
        }
        // slice if the recentHash starts with 0x
        if (options.recentHash.startsWith("0x")) {
            options.recentHash = options.recentHash.slice(2);
        }
        // Decode from Base64 to a Buffer
        const signatureBuffer = new Uint8Array(Buffer.from(attestation.signature, "base64"));
        // Assuming each component (r and s) is 32 bytes long
        const r = Buffer.from(signatureBuffer.slice(0, 32)).toString("hex");
        const s = Buffer.from(signatureBuffer.slice(32, 64)).toString("hex");
        const v = attestation.recovery_id;
        // Create the attestation bassed on message contents (it'll either be v0 or ordinary)
        if (attestation.oracle_ed25519_enclave_signer) {
            const hexString = (0, message_js_1.createV0AttestationHexString)({
                discriminator: 2,
                oracleId,
                queueId,
                ed25519Key: attestation.oracle_ed25519_enclave_signer,
                secp256k1Key: attestation.oracle_secp256k1_enclave_signer,
                r,
                s,
                v,
                mrEnclave: attestation.mr_enclave,
                blockNumber: blockNumber.toString(),
            });
            return {
                oracleId,
                queueId,
                guardian: attestation.guardian,
                encoded: hexString,
                response: attestation,
            };
        }
        else if (attestation.timestamp) {
            const hexString = (0, message_js_1.createAttestationHexString)({
                discriminator: 2,
                oracleId,
                queueId,
                secp256k1Key: attestation.oracle_secp256k1_enclave_signer,
                timestamp: attestation.timestamp.toString(),
                mrEnclave: attestation.mr_enclave,
                r,
                s,
                v,
                blockNumber: blockNumber.toString(),
                guardianId: attestation.guardian,
            });
            return {
                oracleId: attestation.oracle,
                queueId: attestation.queue,
                guardian: attestation.guardian,
                encoded: hexString,
                response: attestation,
            };
        }
        else {
            throw new Error("Invalid attestation response");
        }
    });
}
exports.getAttestation = getAttestation;
/**
 * Get the default devnet queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default devnet queue
 */
function getDefaultDevnetQueue() {
    return __awaiter(this, arguments, void 0, function* (solanaRPCUrl = "https://api.devnet.solana.com") {
        return getQueue(solanaRPCUrl, index_js_2.ON_DEMAND_DEVNET_PID.toString(), index_js_2.ON_DEMAND_DEVNET_QUEUE.toString());
    });
}
exports.getDefaultDevnetQueue = getDefaultDevnetQueue;
/**
 * Get the default devnet guardian queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default devnet guardian queue
 */
function getDefaultDevnetGuardianQueue() {
    return __awaiter(this, arguments, void 0, function* (solanaRPCUrl = "https://api.devnet.solana.com") {
        return getQueue(solanaRPCUrl, index_js_2.ON_DEMAND_DEVNET_PID.toString(), index_js_2.ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString());
    });
}
exports.getDefaultDevnetGuardianQueue = getDefaultDevnetGuardianQueue;
/**
 * Get the default queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default queue
 * @NOTE - SWITCHBOARD PID AND QUEUE PUBKEY ARE WRONG
 */
function getDefaultQueue() {
    return __awaiter(this, arguments, void 0, function* (solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
        return getQueue(solanaRPCUrl, index_js_2.ON_DEMAND_MAINNET_PID.toString(), index_js_2.ON_DEMAND_MAINNET_QUEUE.toString());
    });
}
exports.getDefaultQueue = getDefaultQueue;
/**
 * Get the default guardian queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default guardian queue
 * @NOTE - SWITCHBOARD PID AND GUARDIAN QUEUE PUBKEY ARE WRONG
 */
function getDefaultGuardianQueue() {
    return __awaiter(this, arguments, void 0, function* (solanaRPCUrl = "https://api.mainnet-beta.solana.com") {
        return getQueue(solanaRPCUrl, index_js_2.ON_DEMAND_MAINNET_PID.toString(), index_js_2.ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString());
    });
}
exports.getDefaultGuardianQueue = getDefaultGuardianQueue;
/**
 * Get the queue for the Switchboard program
 * @param solanaRPCUrl - string: The Solana RPC URL
 * @param switchboardProgramId - string: The Switchboard program ID
 * @param queueAddress - string: The queue address
 * @returns - Promise<Queue> - The queue
 */
function getQueue(solanaRPCUrl, switchboardProgramId, queueAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const { PublicKey, Keypair, Connection } = anchor.web3;
        const wallet = new nodewallet_js_1.default(new Keypair());
        const connection = new Connection(solanaRPCUrl, "confirmed");
        const PID = new PublicKey(switchboardProgramId);
        const queue = new PublicKey(queueAddress);
        const provider = new anchor.AnchorProvider(connection, wallet, {});
        const idl = (yield anchor.Program.fetchIdl(PID, provider));
        const program = new anchor.Program(idl, provider);
        const queueAccount = new index_js_1.Queue(program, queue);
        return queueAccount;
    });
}
exports.getQueue = getQueue;
/**
 * Crossbar API for EVM
 */
/**
 * Fetch result from the Switchboard API
 * @param param0 The parameters to fetch results
 * @returns
 */
function fetchResult(_a) {
    return __awaiter(this, arguments, void 0, function* ({ feedId, chainId, crossbarUrl, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians, }) {
        if (!crossbarUrl) {
            crossbarUrl = "https://crossbar.switchboard.xyz";
        }
        return Object.assign({ feedId }, (yield fetchUpdateData(crossbarUrl, chainId.toString(), feedId, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians)));
    });
}
exports.fetchResult = fetchResult;
/**
 * Fetch results from the Switchboard API
 * @param param0 The parameters to fetch results
 * @returns
 */
function fetchResults(_a) {
    return __awaiter(this, arguments, void 0, function* ({ feedIds, chainId, crossbarUrl, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians, }) {
        if (!crossbarUrl) {
            crossbarUrl = "https://crossbar.switchboard.xyz";
        }
        const responses = yield Promise.all(feedIds.map((feedId) => {
            return fetchUpdateData(crossbarUrl, chainId.toString(), feedId, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians);
        }));
        return responses.map((response, index) => {
            return Object.assign({ feedId: feedIds[index] }, response);
        });
    });
}
exports.fetchResults = fetchResults;
/**
 * Fetch data to settle randomness
 * @param param0 The parameters to fetch randomness
 * @returns
 */
function fetchRandomness(_a) {
    return __awaiter(this, arguments, void 0, function* ({ chainId, crossbarUrl, randomnessId, timestamp, minStalenessSeconds, }) {
        if (!crossbarUrl) {
            crossbarUrl = "https://crossbar.switchboard.xyz";
        }
        return fetchRandomnessData(crossbarUrl, chainId.toString(), randomnessId, timestamp, minStalenessSeconds);
    });
}
exports.fetchRandomness = fetchRandomness;
/**
 * Fetch update data from the Switchboard API
 * @param crossbarUrl The Crossbar URL
 * @param chainId The chain ID
 * @param feedId The feed ID
 * @param minResponses Minimum number of responses
 * @param maxVariance Maximum variance
 * @param numSignatures Number of signatures
 * @param syncOracles Sync oracles
 * @param syncGuardians Sync guardians
 * @param gateway Gateway
 * @returns
 */
function fetchUpdateData(crossbarUrl_1, chainId_1, feedId_1) {
    return __awaiter(this, arguments, void 0, function* (crossbarUrl, chainId, feedId, minResponses = 1, maxVariance = 1e9, numSignatures = 1, syncOracles = true, syncGuardians = true, gateway) {
        const cleanedCrossbarUrl = crossbarUrl.endsWith("/")
            ? crossbarUrl.slice(0, -1)
            : crossbarUrl;
        const url = new URL(`${cleanedCrossbarUrl}/updates/evm/${chainId}/${feedId}`);
        // Add query parameters to the URL
        if (minResponses !== undefined) {
            url.searchParams.append("minResponses", minResponses.toString());
        }
        if (maxVariance !== undefined) {
            url.searchParams.append("maxVariance", maxVariance.toString());
        }
        if (numSignatures !== undefined) {
            url.searchParams.append("numSignatures", numSignatures.toString());
        }
        if (syncOracles !== undefined) {
            url.searchParams.append("syncOracles", syncOracles.toString());
        }
        if (syncGuardians !== undefined) {
            url.searchParams.append("syncGuardians", syncGuardians.toString());
        }
        if (gateway !== undefined) {
            url.searchParams.append("gateway", gateway);
        }
        try {
            const response = yield fetch(url.toString(), {
                method: "GET",
            });
            if (!response.ok) {
                throw new Error(`Error fetching data: ${response.statusText}`);
            }
            const data = yield response.json();
            return data;
        }
        catch (error) {
            console.error("Error fetching feed data:", error);
            throw error;
        }
    });
}
/**
 * Fetch randomness data from the Switchboard API
 * @param chainId The chain ID
 * @param randomnessId The randomness ID configured on-chain
 * @param timestamp The timestamp that the randomness was configured at
 * @param minStalenessSeconds The minimum staleness of the data in seconds
 * @returns
 */
function fetchRandomnessData(crossbarUrl, chainId, randomnessId, timestamp, minStalenessSeconds) {
    return __awaiter(this, void 0, void 0, function* () {
        const cleanedCrossbarUrl = crossbarUrl.endsWith("/")
            ? crossbarUrl.slice(0, -1)
            : crossbarUrl;
        const url = new URL(`${cleanedCrossbarUrl}/randomness/evm/${chainId}/${randomnessId}`);
        // Add query parameters to the URL
        if (timestamp !== undefined) {
            url.searchParams.append("timestamp", timestamp.toString());
        }
        if (minStalenessSeconds !== undefined) {
            url.searchParams.append("minStalenessSeconds", minStalenessSeconds.toString());
        }
        try {
            const response = yield fetch(url.toString(), {
                method: "GET",
            });
            if (!response.ok) {
                throw new Error(`Error fetching data: ${response.statusText}`);
            }
            const data = yield response.json();
            return data;
        }
        catch (error) {
            console.error("Error fetching randomness data:", error);
            throw error;
        }
    });
}
//# sourceMappingURL=index.js.map