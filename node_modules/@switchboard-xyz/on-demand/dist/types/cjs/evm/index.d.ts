import { Queue } from "../accounts/index.js";
import type { BridgeEnclaveResponse, FeedEvalResponse, Gateway } from "../oracle-interfaces/index.js";
export * as message from "./message.js";
import { OracleJob } from "@switchboard-xyz/common";
export interface FeedUpdateCommonOptions {
    jobs: OracleJob[];
    numSignatures?: number;
    maxVariance?: number;
    minResponses?: number;
    recentHash?: string;
    aggregatorId?: string;
    blockNumber?: number;
    gateway?: Gateway;
}
export type FeedUpdateParams = FeedUpdateCommonOptions;
export interface AttestationOptions {
    guardianQueue: Queue;
    recentHash: string;
    blockNumber: number;
    queueId: string;
    oracleId: string;
    gateway?: Gateway;
}
export interface FeedSimulateResult {
    result: number;
    feedId: string;
    response: FeedEvalResponse;
}
export interface FeedUpdateResult {
    feedId: string;
    result: number;
    encoded: string;
    response: FeedEvalResponse;
}
export interface AttestationResult {
    oracleId: string;
    queueId: string;
    guardian: string;
    encoded: string;
    response: BridgeEnclaveResponse;
}
export interface FetchFeedResponse {
    results: FeedEvalResponse[];
    encoded: string[];
}
export interface FetchResultResponse extends FetchFeedResponse {
    feedId: string;
}
export interface FetchResultsArgs {
    feedIds: string[];
    chainId: number;
    crossbarUrl?: string;
    minResponses?: number;
    maxVariance?: number;
    numSignatures?: number;
    syncOracles?: boolean;
    syncGuardians?: boolean;
    gateway?: string;
}
export interface FetchResultArgs {
    feedId: string;
    chainId: number;
    crossbarUrl?: string;
    minResponses?: number;
    maxVariance?: number;
    numSignatures?: number;
    syncOracles?: boolean;
    syncGuardians?: boolean;
    gateway?: string;
}
export interface FetchRandomnessArgs {
    chainId: number;
    crossbarUrl: string;
    randomnessId: string;
    timestamp?: number;
    minStalenessSeconds?: number;
}
/**
 * Get an oracle job from object definition
 * @param params the job parameters
 * @returns
 */
export declare function createJob(params: {
    tasks: any;
}): OracleJob;
/**
 * Get the feed update data for a particular feed
 * @dev - this function is heavily rate limited
 * @param params the feed update parameters
 * @param queue the queue account
 * @returns the feed simulation result and feed id
 */
export declare function simulateFeed(params: FeedUpdateParams, queue: Queue): Promise<FeedSimulateResult>;
/**
 * Get the feed update data for a particular feed
 * @param params the feed update parameters
 * @param queue the queue account
 * @returns the feed update data, the byte arrays that need to be sent to the target chain
 */
export declare function getFeedUpdateData(params: FeedUpdateParams, queue: Queue): Promise<string[]>;
/**
 * Get the feed update data for a particular feed
 * @param params the feed update parameters
 * @param queue the queue account
 * @returns the feed update data with context (numeric result data, oracle response, AND encoded response)
 */
export declare function getFeedUpdateWithContext(params: FeedUpdateParams, queue: Queue): Promise<{
    responses: FeedUpdateResult[];
    failures: string[];
}>;
/**
 * Get the update message for the EVM for a particular feed
 * This is useful for feeds that have already been created on chain
 * @param params - FeedUpdateCommonOptions: Parameters for the upsert message
 * @param queue - Queue: The queue account
 * @returns - Promise<string> - The update message as a hex string
 */
export declare function getUpdate(params: FeedUpdateCommonOptions, queue: Queue): Promise<{
    responses: FeedUpdateResult[];
    failures: string[];
}>;
/**
 * Get attestation for a particular oracle on a particular queue
 * @param options - AttestationOptions: Options for the attestation
 * @returns - Promise<string> - The attestation as a hex string
 */
export declare function getAttestation(options: AttestationOptions): Promise<AttestationResult>;
/**
 * Get the default devnet queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default devnet queue
 */
export declare function getDefaultDevnetQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the default devnet guardian queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default devnet guardian queue
 */
export declare function getDefaultDevnetGuardianQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the default queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default queue
 * @NOTE - SWITCHBOARD PID AND QUEUE PUBKEY ARE WRONG
 */
export declare function getDefaultQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the default guardian queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default guardian queue
 * @NOTE - SWITCHBOARD PID AND GUARDIAN QUEUE PUBKEY ARE WRONG
 */
export declare function getDefaultGuardianQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the queue for the Switchboard program
 * @param solanaRPCUrl - string: The Solana RPC URL
 * @param switchboardProgramId - string: The Switchboard program ID
 * @param queueAddress - string: The queue address
 * @returns - Promise<Queue> - The queue
 */
export declare function getQueue(solanaRPCUrl: string, switchboardProgramId: string, queueAddress: string): Promise<Queue>;
/**
 * Crossbar API for EVM
 */
/**
 * Fetch result from the Switchboard API
 * @param param0 The parameters to fetch results
 * @returns
 */
export declare function fetchResult({ feedId, chainId, crossbarUrl, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians, }: FetchResultArgs): Promise<FetchResultResponse>;
/**
 * Fetch results from the Switchboard API
 * @param param0 The parameters to fetch results
 * @returns
 */
export declare function fetchResults({ feedIds, chainId, crossbarUrl, minResponses, maxVariance, numSignatures, syncOracles, syncGuardians, }: FetchResultsArgs): Promise<FetchResultResponse[]>;
/**
 * Fetch data to settle randomness
 * @param param0 The parameters to fetch randomness
 * @returns
 */
export declare function fetchRandomness({ chainId, crossbarUrl, randomnessId, timestamp, minStalenessSeconds, }: FetchRandomnessArgs): Promise<{
    encoded: string;
    response: {
        signature: string;
        recovery_id: number;
        value: string;
    };
}>;
//# sourceMappingURL=index.d.ts.map