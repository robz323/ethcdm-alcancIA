export * from "./TypescriptUtils.js";
import type { PullFeed } from "../accounts/pullFeed.js";
import { Queue } from "../accounts/queue.js";
import * as anchor from "@coral-xyz/anchor-30";
import type { AddressLookupTableAccount } from "@solana/web3.js";
import { Connection, PublicKey } from "@solana/web3.js";
import type { IOracleJob } from "@switchboard-xyz/common";
type Account = {
    pubkey: PublicKey;
    loadLookupTable: () => Promise<AddressLookupTableAccount>;
};
export declare function createLoadLookupTables(): (accounts: Account[]) => Promise<AddressLookupTableAccount[]>;
export declare const loadLookupTables: (accounts: Account[]) => Promise<AddressLookupTableAccount[]>;
export declare const ON_DEMAND_MAINNET_PID: anchor.web3.PublicKey;
export declare const ON_DEMAND_MAINNET_GUARDIAN_QUEUE: anchor.web3.PublicKey;
export declare const ON_DEMAND_MAINNET_QUEUE: anchor.web3.PublicKey;
export declare const ON_DEMAND_DEVNET_PID: anchor.web3.PublicKey;
export declare const ON_DEMAND_DEVNET_GUARDIAN_QUEUE: anchor.web3.PublicKey;
export declare const ON_DEMAND_DEVNET_QUEUE: anchor.web3.PublicKey;
/**
 * Check if the connection is to the mainnet
 * @param connection - Connection: The connection
 * @returns - Promise<boolean> - Whether the connection is to the mainnet
 */
export declare function isMainnetConnection(connection: Connection): Promise<boolean>;
/**
 * Get the program ID for the Switchboard program based on the connection
 * @param connection - Connection: The connection
 * @returns - Promise<PublicKey> - The program ID
 */
export declare function getProgramId(connection: Connection): Promise<PublicKey>;
/**
 * Get the default devnet queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default devnet queue
 */
export declare function getDefaultDevnetQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the default devnet guardian queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default devnet guardian queue
 */
export declare function getDefaultDevnetGuardianQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the default queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default queue
 * @NOTE - SWITCHBOARD PID AND QUEUE PUBKEY ARE WRONG
 */
export declare function getDefaultQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the default guardian queue for the Switchboard program
 * @param solanaRPCUrl - (optional) string: The Solana RPC URL
 * @returns - Promise<Queue> - The default guardian queue
 * @NOTE - SWITCHBOARD PID AND GUARDIAN QUEUE PUBKEY ARE WRONG
 */
export declare function getDefaultGuardianQueue(solanaRPCUrl?: string): Promise<Queue>;
/**
 * Get the queue for the Switchboard program
 * @param solanaRPCUrl - string: The Solana RPC URL
 * @param switchboardProgramId - string: The Switchboard program ID
 * @param queueAddress - string: The queue address
 * @returns - Promise<Queue> - The queue
 */
export declare function getQueue(solanaRPCUrl: string, switchboardProgramId: string, queueAddress: string): Promise<Queue>;
/**
 * Get the unique LUT keys for the queue, all oracles in the queue, and all feeds
 * provided
 * @param queue - Queue: The queue
 * @param feeds - PullFeed[]: The feeds
 * @returns - Promise<PublicKey[]>: The unique LUT keys
 */
export declare function fetchAllLutKeys(queue: Queue, feeds: PullFeed[]): Promise<PublicKey[]>;
/**
 *
 * @param queue Queue pubkey as base58 string
 * @param jobs Array of jobs to store (Oracle Jobs Object)
 * @param crossbarUrl
 * @returns
 */
export declare function storeFeed(queue: string, jobs: IOracleJob[], crossbarUrl?: string): Promise<{
    cid: string;
    feedHash: string;
    queueHex: string;
}>;
export declare function getAssociatedTokenAddress(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, programId?: anchor.web3.PublicKey, associatedTokenProgramId?: anchor.web3.PublicKey): Promise<PublicKey>;
export declare function getAssociatedTokenAddressSync(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, programId?: anchor.web3.PublicKey, associatedTokenProgramId?: anchor.web3.PublicKey): PublicKey;
export declare const TOKEN_PROGRAM_ID: anchor.web3.PublicKey;
/** Address of the SPL Token 2022 program */
export declare const TOKEN_2022_PROGRAM_ID: anchor.web3.PublicKey;
/** Address of the SPL Associated Token Account program */
export declare const ASSOCIATED_TOKEN_PROGRAM_ID: anchor.web3.PublicKey;
/** Address of the special mint for wrapped native SOL in spl-token */
export declare const NATIVE_MINT: anchor.web3.PublicKey;
/** Address of the special mint for wrapped native SOL in spl-token-2022 */
export declare const NATIVE_MINT_2022: anchor.web3.PublicKey;
//# sourceMappingURL=index.d.ts.map