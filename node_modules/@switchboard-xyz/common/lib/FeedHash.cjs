"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedHash = void 0;
const index_js_1 = require("./index.cjs");
const js_sha256_1 = require("js-sha256");
class FeedHash {
    /**
     *  Disable object instantiation.
     */
    constructor() { }
    /**
     *  Validate that a provided string is indeed a valid feed hash.
     *
     *  To be a valid feed hash, the string should be a hex string that is 64 characters in length.
     *
     *  @returns the transformed feed hash (hex value) if valid.
     */
    static validate(feedHash) {
        // Make the feed hash lower case and remove the optional '0x' prefix if necessary.
        const transformed = (() => {
            const lowerCase = feedHash.toLowerCase();
            return lowerCase.startsWith("0x") ? lowerCase.substring(2) : lowerCase;
        })();
        // Validate that the result is 64 characters long and lower-case hex.
        if (/^[a-f0-9]{64}$/.test(transformed))
            return transformed;
        throw new Error(`FeedHash.validate failed: ${feedHash}`);
    }
    /**
     *  After validating {@linkcode feedHash}, return it as a {@linkcode Buffer}.
     *
     *  @returns Buffer
     */
    static serialize(feedHash) {
        const validated = FeedHash.validate(feedHash);
        return Buffer.from(validated, "hex");
    }
    /**
     *  Given a feed definition (a list of jobs), produce the associated feed hash and return it as a
     *  buffer.
     */
    static compute(queue, jobs) {
        const hasher = js_sha256_1.sha256.create();
        hasher.update(queue);
        jobs.forEach((job) => {
            hasher.update(index_js_1.OracleJob.encodeDelimited(job).finish());
        });
        return Buffer.from(hasher.digest());
    }
    /**
     *  Validate that {@linkcode feedHash} is ok and try to fetch a verified feed definition for it.
     *
     *  @returns VerifiedFeed
     *  @throws If {@linkcode feedHash} is invalid or if there is no associated verified feed data.
     */
    static async fetchVerified(feedHash) {
        const validated = FeedHash.validate(feedHash);
        if (!validated)
            throw new Error("`feedHash` parameter is invalid.");
        // TODO: implement this function when we have a centralized place to load verified feeds from.
        throw new Error("NotImplemented");
    }
}
exports.FeedHash = FeedHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmVlZEhhc2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRmVlZEhhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQXdEO0FBRXhELHlDQUFtQztBQXFCbkMsTUFBYSxRQUFRO0lBQ25COztPQUVHO0lBQ0gsZ0JBQXVCLENBQUM7SUFDeEI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFnQjtRQUM5QixrRkFBa0Y7UUFDbEYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDeEIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pDLE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDTCxxRUFBcUU7UUFDckUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQUUsT0FBTyxXQUFXLENBQUM7UUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBZ0I7UUFDL0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWEsRUFBRSxJQUFrQjtRQUM5QyxNQUFNLE1BQU0sR0FBRyxrQkFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQWUsRUFBRSxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFnQjtRQUN6QyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBRXBFLDhGQUE4RjtRQUM5RixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBekRELDRCQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgSU9yYWNsZUpvYiwgT3JhY2xlSm9iIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSBcImpzLXNoYTI1NlwiO1xuXG50eXBlIFZlcmlmaWVkRmVlZCA9IHtcbiAgLyoqXG4gICAqICBVVEMgdGltZXN0YW1wIG9mIHRoZSB2ZXJpZmljYXRpb24uXG4gICAqL1xuICB2ZXJpZmllZEF0OiBudW1iZXI7XG4gIC8qKlxuICAgKiAgVGhlIHdhbGxldCB0aGF0IHZlcmlmaWVkIHRoaXMgZmVlZCBkZWZpbml0aW9uLlxuICAgKi9cbiAgdmVyaWZpZXI6IHN0cmluZztcbiAgLyoqXG4gICAqICBUaGUgYWRkcmVzcyBvZiB0aGUgcXVldWUgdGhhdCB0aGUgZmVlZCB3YXMgdmVyaWZpZWQgb24uXG4gICAqL1xuICBxdWV1ZUFkZHJlc3M6IHN0cmluZztcbiAgLyoqXG4gICAqICBUaGUgam9icyBvZiB0aGlzIGZlZWQgZGVmaW5pdGlvbi5cbiAgICovXG4gIGpvYnM6IElPcmFjbGVKb2JbXTtcbn07XG5cbmV4cG9ydCBjbGFzcyBGZWVkSGFzaCB7XG4gIC8qKlxuICAgKiAgRGlzYWJsZSBvYmplY3QgaW5zdGFudGlhdGlvbi5cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuICAvKipcbiAgICogIFZhbGlkYXRlIHRoYXQgYSBwcm92aWRlZCBzdHJpbmcgaXMgaW5kZWVkIGEgdmFsaWQgZmVlZCBoYXNoLlxuICAgKlxuICAgKiAgVG8gYmUgYSB2YWxpZCBmZWVkIGhhc2gsIHRoZSBzdHJpbmcgc2hvdWxkIGJlIGEgaGV4IHN0cmluZyB0aGF0IGlzIDY0IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgKlxuICAgKiAgQHJldHVybnMgdGhlIHRyYW5zZm9ybWVkIGZlZWQgaGFzaCAoaGV4IHZhbHVlKSBpZiB2YWxpZC5cbiAgICovXG4gIHN0YXRpYyB2YWxpZGF0ZShmZWVkSGFzaDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBNYWtlIHRoZSBmZWVkIGhhc2ggbG93ZXIgY2FzZSBhbmQgcmVtb3ZlIHRoZSBvcHRpb25hbCAnMHgnIHByZWZpeCBpZiBuZWNlc3NhcnkuXG4gICAgY29uc3QgdHJhbnNmb3JtZWQgPSAoKCkgPT4ge1xuICAgICAgY29uc3QgbG93ZXJDYXNlID0gZmVlZEhhc2gudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBsb3dlckNhc2Uuc3RhcnRzV2l0aChcIjB4XCIpID8gbG93ZXJDYXNlLnN1YnN0cmluZygyKSA6IGxvd2VyQ2FzZTtcbiAgICB9KSgpO1xuICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIHJlc3VsdCBpcyA2NCBjaGFyYWN0ZXJzIGxvbmcgYW5kIGxvd2VyLWNhc2UgaGV4LlxuICAgIGlmICgvXlthLWYwLTldezY0fSQvLnRlc3QodHJhbnNmb3JtZWQpKSByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGZWVkSGFzaC52YWxpZGF0ZSBmYWlsZWQ6ICR7ZmVlZEhhc2h9YCk7XG4gIH1cbiAgLyoqXG4gICAqICBBZnRlciB2YWxpZGF0aW5nIHtAbGlua2NvZGUgZmVlZEhhc2h9LCByZXR1cm4gaXQgYXMgYSB7QGxpbmtjb2RlIEJ1ZmZlcn0uXG4gICAqXG4gICAqICBAcmV0dXJucyBCdWZmZXJcbiAgICovXG4gIHN0YXRpYyBzZXJpYWxpemUoZmVlZEhhc2g6IHN0cmluZyk6IEJ1ZmZlciB7XG4gICAgY29uc3QgdmFsaWRhdGVkID0gRmVlZEhhc2gudmFsaWRhdGUoZmVlZEhhc2gpO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWxpZGF0ZWQsIFwiaGV4XCIpO1xuICB9XG4gIC8qKlxuICAgKiAgR2l2ZW4gYSBmZWVkIGRlZmluaXRpb24gKGEgbGlzdCBvZiBqb2JzKSwgcHJvZHVjZSB0aGUgYXNzb2NpYXRlZCBmZWVkIGhhc2ggYW5kIHJldHVybiBpdCBhcyBhXG4gICAqICBidWZmZXIuXG4gICAqL1xuICBzdGF0aWMgY29tcHV0ZShxdWV1ZTogQnVmZmVyLCBqb2JzOiBJT3JhY2xlSm9iW10pOiBCdWZmZXIge1xuICAgIGNvbnN0IGhhc2hlciA9IHNoYTI1Ni5jcmVhdGUoKTtcbiAgICBoYXNoZXIudXBkYXRlKHF1ZXVlKTtcbiAgICBqb2JzLmZvckVhY2goKGpvYjogSU9yYWNsZUpvYikgPT4ge1xuICAgICAgaGFzaGVyLnVwZGF0ZShPcmFjbGVKb2IuZW5jb2RlRGVsaW1pdGVkKGpvYikuZmluaXNoKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShoYXNoZXIuZGlnZXN0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqICBWYWxpZGF0ZSB0aGF0IHtAbGlua2NvZGUgZmVlZEhhc2h9IGlzIG9rIGFuZCB0cnkgdG8gZmV0Y2ggYSB2ZXJpZmllZCBmZWVkIGRlZmluaXRpb24gZm9yIGl0LlxuICAgKlxuICAgKiAgQHJldHVybnMgVmVyaWZpZWRGZWVkXG4gICAqICBAdGhyb3dzIElmIHtAbGlua2NvZGUgZmVlZEhhc2h9IGlzIGludmFsaWQgb3IgaWYgdGhlcmUgaXMgbm8gYXNzb2NpYXRlZCB2ZXJpZmllZCBmZWVkIGRhdGEuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZmV0Y2hWZXJpZmllZChmZWVkSGFzaDogc3RyaW5nKTogUHJvbWlzZTxWZXJpZmllZEZlZWQ+IHtcbiAgICBjb25zdCB2YWxpZGF0ZWQgPSBGZWVkSGFzaC52YWxpZGF0ZShmZWVkSGFzaCk7XG4gICAgaWYgKCF2YWxpZGF0ZWQpIHRocm93IG5ldyBFcnJvcihcImBmZWVkSGFzaGAgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXG4gICAgLy8gVE9ETzogaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSBoYXZlIGEgY2VudHJhbGl6ZWQgcGxhY2UgdG8gbG9hZCB2ZXJpZmllZCBmZWVkcyBmcm9tLlxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdEltcGxlbWVudGVkXCIpO1xuICB9XG59XG4iXX0=