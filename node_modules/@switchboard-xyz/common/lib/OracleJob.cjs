"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeOracleJob = serializeOracleJob;
exports.deserializeOracleJob = deserializeOracleJob;
exports.base64EncodeOracleJob = base64EncodeOracleJob;
exports.simulateOracleJobs = simulateOracleJobs;
const protos_js_1 = require("./protos.cjs");
const big_js_1 = require("big.js");
/**
 * Serialize a stringified OracleJob and replace any json comments
 * @param job - Stringified OracleJob or object with an array of Switchboard tasks defined
 * @throws {String}
 * @returns {OracleJob }
 */
function serializeOracleJob(job) {
    if (!job) {
        throw new Error(`No job to serialize`);
    }
    let jobObj;
    if (typeof job === "string") {
        const parsedFileString = job
            // replace all json comments https://regex101.com/r/B8WkuX/1
            .replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/g, "");
        jobObj = protos_js_1.OracleJob.fromObject(JSON.parse(parsedFileString));
    }
    else {
        if (!("tasks" in job) || !Array.isArray(job.tasks)) {
            throw new Error(`OracleJob is missing the 'tasks' property`);
        }
        if (job.tasks.length === 0) {
            throw new Error(`OracleJob has no tasks defined`);
        }
        jobObj = protos_js_1.OracleJob.fromObject(job);
    }
    try {
        const err = protos_js_1.OracleJob.verify(jobObj);
        if (err !== null) {
            throw new Error(err);
        }
        return protos_js_1.OracleJob.create(jobObj);
    }
    catch (error) {
        throw new Error(`failed to serialize oracle job: ${error}`);
    }
}
/**
 * Deserialize an OracleJob from on-chain data
 * @param jobData - Serialized OracleJob data
 * @returns {OracleJob}
 */
function deserializeOracleJob(jobData) {
    return protos_js_1.OracleJob.decodeDelimited(jobData);
}
function base64EncodeOracleJob(job) {
    const serialized = serializeOracleJob(job);
    const encoded = protos_js_1.OracleJob.encodeDelimited(serialized).finish();
    return Buffer.from(encoded).toString("base64");
}
/**
 * Make an Http request to the task-runner endpoint to simulate an OracleJob result
 * @param jobs - array of {@type OracleJob} to run
 * @param network - the task simulator network to use
 * @returns the task simulator response
 */
async function simulateOracleJobs(jobs, network = "mainnet-beta") {
    const response = await fetch("https://task.switchboard.xyz/simulate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            jobs: jobs.map((j) => j.toJSON()),
            cluster: network,
        }),
    });
    if (!response.ok) {
        throw new Error(`Failed to simulate job definition, Status=${response.status}`);
    }
    const payload = await response.json();
    return {
        results: payload.results.map((r) => new big_js_1.Big(r)),
        result: new big_js_1.Big(payload.result),
        taskRunnerVersion: payload.task_runner_version,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JhY2xlSm9iLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL09yYWNsZUpvYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLGdEQWdDQztBQU9ELG9EQUVDO0FBRUQsc0RBTUM7QUF5QkQsZ0RBNkJDO0FBakhELDJDQUF3QztBQUV4QyxtQ0FBNkI7QUFFN0I7Ozs7O0dBS0c7QUFDSCxTQUFnQixrQkFBa0IsQ0FDaEMsR0FBOEM7SUFFOUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLE1BQWtCLENBQUM7SUFDdkIsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUM1QixNQUFNLGdCQUFnQixHQUFHLEdBQUc7WUFDMUIsNERBQTREO2FBQzNELE9BQU8sQ0FBQyxxQ0FBcUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0RCxNQUFNLEdBQUcscUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztTQUFNLENBQUM7UUFDTixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBQ0QsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNELE1BQU0sR0FBRyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxHQUFHLEdBQUcscUJBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QixDQUFDO1FBQ0QsT0FBTyxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztBQUNILENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQUMsT0FBNEI7SUFDL0QsT0FBTyxxQkFBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsU0FBZ0IscUJBQXFCLENBQ25DLEdBQThDO0lBRTlDLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sT0FBTyxHQUFHLHFCQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQy9ELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQW1CRDs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxrQkFBa0IsQ0FDdEMsSUFBc0IsRUFDdEIsVUFBZ0MsY0FBYztJQUU5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRTtRQUNwRSxNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtRQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLE9BQU8sRUFBRSxPQUFPO1NBQ2pCLENBQUM7S0FDSCxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkNBQTZDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FDL0QsQ0FBQztJQUNKLENBQUM7SUFDRCxNQUFNLE9BQU8sR0FJVCxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUUxQixPQUFPO1FBQ0wsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLFlBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxNQUFNLEVBQUUsSUFBSSxZQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUMvQixpQkFBaUIsRUFBRSxPQUFPLENBQUMsbUJBQW1CO0tBQy9DLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJT3JhY2xlSm9iIH0gZnJvbSBcIi4vcHJvdG9zLmpzXCI7XG5pbXBvcnQgeyBPcmFjbGVKb2IgfSBmcm9tIFwiLi9wcm90b3MuanNcIjtcblxuaW1wb3J0IHsgQmlnIH0gZnJvbSBcImJpZy5qc1wiO1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIHN0cmluZ2lmaWVkIE9yYWNsZUpvYiBhbmQgcmVwbGFjZSBhbnkganNvbiBjb21tZW50c1xuICogQHBhcmFtIGpvYiAtIFN0cmluZ2lmaWVkIE9yYWNsZUpvYiBvciBvYmplY3Qgd2l0aCBhbiBhcnJheSBvZiBTd2l0Y2hib2FyZCB0YXNrcyBkZWZpbmVkXG4gKiBAdGhyb3dzIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7T3JhY2xlSm9iIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZU9yYWNsZUpvYihcbiAgam9iOiBzdHJpbmcgfCBJT3JhY2xlSm9iIHwgUmVjb3JkPHN0cmluZywgYW55PlxuKTogT3JhY2xlSm9iIHtcbiAgaWYgKCFqb2IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGpvYiB0byBzZXJpYWxpemVgKTtcbiAgfVxuXG4gIGxldCBqb2JPYmo6IElPcmFjbGVKb2I7XG4gIGlmICh0eXBlb2Ygam9iID09PSBcInN0cmluZ1wiKSB7XG4gICAgY29uc3QgcGFyc2VkRmlsZVN0cmluZyA9IGpvYlxuICAgICAgLy8gcmVwbGFjZSBhbGwganNvbiBjb21tZW50cyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL0I4V2t1WC8xXG4gICAgICAucmVwbGFjZSgvXFwvXFwqW1xcc1xcU10qP1xcKlxcL3woW15cXFxcOl18XilcXC9cXC8uKiQvZywgXCJcIik7XG4gICAgam9iT2JqID0gT3JhY2xlSm9iLmZyb21PYmplY3QoSlNPTi5wYXJzZShwYXJzZWRGaWxlU3RyaW5nKSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCEoXCJ0YXNrc1wiIGluIGpvYikgfHwgIUFycmF5LmlzQXJyYXkoam9iLnRhc2tzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPcmFjbGVKb2IgaXMgbWlzc2luZyB0aGUgJ3Rhc2tzJyBwcm9wZXJ0eWApO1xuICAgIH1cbiAgICBpZiAoam9iLnRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPcmFjbGVKb2IgaGFzIG5vIHRhc2tzIGRlZmluZWRgKTtcbiAgICB9XG4gICAgam9iT2JqID0gT3JhY2xlSm9iLmZyb21PYmplY3Qoam9iKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgZXJyID0gT3JhY2xlSm9iLnZlcmlmeShqb2JPYmopO1xuICAgIGlmIChlcnIgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gT3JhY2xlSm9iLmNyZWF0ZShqb2JPYmopO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgZmFpbGVkIHRvIHNlcmlhbGl6ZSBvcmFjbGUgam9iOiAke2Vycm9yfWApO1xuICB9XG59XG5cbi8qKlxuICogRGVzZXJpYWxpemUgYW4gT3JhY2xlSm9iIGZyb20gb24tY2hhaW4gZGF0YVxuICogQHBhcmFtIGpvYkRhdGEgLSBTZXJpYWxpemVkIE9yYWNsZUpvYiBkYXRhXG4gKiBAcmV0dXJucyB7T3JhY2xlSm9ifVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVPcmFjbGVKb2Ioam9iRGF0YTogQnVmZmVyIHwgVWludDhBcnJheSk6IE9yYWNsZUpvYiB7XG4gIHJldHVybiBPcmFjbGVKb2IuZGVjb2RlRGVsaW1pdGVkKGpvYkRhdGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZTY0RW5jb2RlT3JhY2xlSm9iKFxuICBqb2I6IHN0cmluZyB8IElPcmFjbGVKb2IgfCBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4pIHtcbiAgY29uc3Qgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZU9yYWNsZUpvYihqb2IpO1xuICBjb25zdCBlbmNvZGVkID0gT3JhY2xlSm9iLmVuY29kZURlbGltaXRlZChzZXJpYWxpemVkKS5maW5pc2goKTtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGVuY29kZWQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuXG5leHBvcnQgdHlwZSBUYXNrU2ltdWxhdG9yTmV0d29yayA9IFwiZGV2bmV0XCIgfCBcIm1haW5uZXQtYmV0YVwiO1xuXG5leHBvcnQgdHlwZSBUYXNrUnVubmVyUmVzcG9uc2UgPSBUYXNrUnVubmVyRXJyb3IgfCBUYXNrUnVubmVyU3VjY2VzcztcblxuZXhwb3J0IHR5cGUgVGFza1J1bm5lck1ldGEgPSB7XG4gIHRhc2tSdW5uZXJWZXJzaW9uOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBUYXNrUnVubmVyRXJyb3IgPSBUYXNrUnVubmVyTWV0YSAmIHtcbiAgZXJyb3I6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFRhc2tSdW5uZXJTdWNjZXNzID0gVGFza1J1bm5lck1ldGEgJiB7XG4gIHJlc3VsdHM6IEFycmF5PEJpZz47XG4gIHJlc3VsdDogQmlnO1xufTtcblxuLyoqXG4gKiBNYWtlIGFuIEh0dHAgcmVxdWVzdCB0byB0aGUgdGFzay1ydW5uZXIgZW5kcG9pbnQgdG8gc2ltdWxhdGUgYW4gT3JhY2xlSm9iIHJlc3VsdFxuICogQHBhcmFtIGpvYnMgLSBhcnJheSBvZiB7QHR5cGUgT3JhY2xlSm9ifSB0byBydW5cbiAqIEBwYXJhbSBuZXR3b3JrIC0gdGhlIHRhc2sgc2ltdWxhdG9yIG5ldHdvcmsgdG8gdXNlXG4gKiBAcmV0dXJucyB0aGUgdGFzayBzaW11bGF0b3IgcmVzcG9uc2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpbXVsYXRlT3JhY2xlSm9icyhcbiAgam9iczogQXJyYXk8T3JhY2xlSm9iPixcbiAgbmV0d29yazogVGFza1NpbXVsYXRvck5ldHdvcmsgPSBcIm1haW5uZXQtYmV0YVwiXG4pOiBQcm9taXNlPFRhc2tSdW5uZXJSZXNwb25zZT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly90YXNrLnN3aXRjaGJvYXJkLnh5ei9zaW11bGF0ZVwiLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgam9iczogam9icy5tYXAoKGopID0+IGoudG9KU09OKCkpLFxuICAgICAgY2x1c3RlcjogbmV0d29yayxcbiAgICB9KSxcbiAgfSk7XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gc2ltdWxhdGUgam9iIGRlZmluaXRpb24sIFN0YXR1cz0ke3Jlc3BvbnNlLnN0YXR1c31gXG4gICAgKTtcbiAgfVxuICBjb25zdCBwYXlsb2FkOiB7XG4gICAgcmVzdWx0czogQXJyYXk8c3RyaW5nPjtcbiAgICByZXN1bHQ6IHN0cmluZztcbiAgICB0YXNrX3J1bm5lcl92ZXJzaW9uOiBzdHJpbmc7XG4gIH0gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHRzOiBwYXlsb2FkLnJlc3VsdHMubWFwKChyKSA9PiBuZXcgQmlnKHIpKSxcbiAgICByZXN1bHQ6IG5ldyBCaWcocGF5bG9hZC5yZXN1bHQpLFxuICAgIHRhc2tSdW5uZXJWZXJzaW9uOiBwYXlsb2FkLnRhc2tfcnVubmVyX3ZlcnNpb24sXG4gIH07XG59XG4iXX0=