"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeoutError = exports.sleep = void 0;
exports.assertFulfilled = assertFulfilled;
exports.promiseWithTimeout = promiseWithTimeout;
/** Sleep for a given number of milliseconds
 * @param ms number of milliseconds to sleep for
 * @return a promise that resolves when the sleep interval has elapsed
 */
const sleep = (ms) => new Promise((s) => setTimeout(s, ms));
exports.sleep = sleep;
/**
 * Typescript assertion that a promise was successfully fulfilled
 *
 * Usage
 * ```ts
 * const promises: PromiseSettledResult<any> = await Promise.allSettled([..somePromises]);
 * const resolvedPromises: PromiseFulfilledResult<any> = promises.filter(assertFulfilled);
 * ```
 */
function assertFulfilled(item) {
    return item.status === "fulfilled";
}
class TimeoutError extends Error {
    ms;
    constructor(ms, msg) {
        super(`TimeoutError: ${msg ?? `timed out after ${Math.round(ms / 1000).toFixed(3)} seconds`}`);
        this.ms = ms;
        Object.setPrototypeOf(this, TimeoutError.prototype);
    }
}
exports.TimeoutError = TimeoutError;
/** Returns a promise that resolves successfully if returned before the given timeout has elapsed.
 * @param ms the number of milliseconds before the promise expires
 * @param promise the promise(s) to wait for
 * @param timeoutError the error to throw if the promise expires
 * @return the promise result
 */
async function promiseWithTimeout(ms, promise, timeoutError) {
    const promises = Array.isArray(promise) ? promise : [promise];
    // create a promise that rejects in N milliseconds
    const timeout = new Promise((_, reject) => {
        setTimeout(() => {
            // for (const p of promises) {
            //   if ("unref" in p && typeof p.unref === "function") {
            //     p.unref();
            //   }
            // }
            reject(new TimeoutError(ms, timeoutError));
        }, ms).unref(); // dont hold up closing NodeJS process if this is the only timer scheduled
    });
    return Promise.race([...promises, timeout]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvYXN5bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBZ0JBLDBDQUlDO0FBbUJELGdEQW9CQztBQTNERDs7O0dBR0c7QUFDSSxNQUFNLEtBQUssR0FBRyxDQUFDLEVBQVUsRUFBZ0IsRUFBRSxDQUNoRCxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRDNCLFFBQUEsS0FBSyxTQUNzQjtBQUV4Qzs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLGVBQWUsQ0FDN0IsSUFBNkI7SUFFN0IsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBYSxZQUFhLFNBQVEsS0FBSztJQUNoQjtJQUFyQixZQUFxQixFQUFVLEVBQUUsR0FBWTtRQUMzQyxLQUFLLENBQ0gsaUJBQ0UsR0FBRyxJQUFJLG1CQUFtQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQzVELEVBQUUsQ0FDSCxDQUFDO1FBTGlCLE9BQUUsR0FBRixFQUFFLENBQVE7UUFNN0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQVRELG9DQVNDO0FBRUQ7Ozs7O0dBS0c7QUFDSSxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLEVBQVUsRUFDVixPQUF1QyxFQUN2QyxZQUFxQjtJQUVyQixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUQsa0RBQWtEO0lBQ2xELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQy9DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCw4QkFBOEI7WUFDOUIseURBQXlEO1lBQ3pELGlCQUFpQjtZQUNqQixNQUFNO1lBQ04sSUFBSTtZQUNKLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQywwRUFBMEU7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUksQ0FBQyxHQUFHLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogU2xlZXAgZm9yIGEgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIG1zIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gc2xlZXAgZm9yXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNsZWVwIGludGVydmFsIGhhcyBlbGFwc2VkXG4gKi9cbmV4cG9ydCBjb25zdCBzbGVlcCA9IChtczogbnVtYmVyKTogUHJvbWlzZTxhbnk+ID0+XG4gIG5ldyBQcm9taXNlKChzKSA9PiBzZXRUaW1lb3V0KHMsIG1zKSk7XG5cbi8qKlxuICogVHlwZXNjcmlwdCBhc3NlcnRpb24gdGhhdCBhIHByb21pc2Ugd2FzIHN1Y2Nlc3NmdWxseSBmdWxmaWxsZWRcbiAqXG4gKiBVc2FnZVxuICogYGBgdHNcbiAqIGNvbnN0IHByb21pc2VzOiBQcm9taXNlU2V0dGxlZFJlc3VsdDxhbnk+ID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFsuLnNvbWVQcm9taXNlc10pO1xuICogY29uc3QgcmVzb2x2ZWRQcm9taXNlczogUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxhbnk+ID0gcHJvbWlzZXMuZmlsdGVyKGFzc2VydEZ1bGZpbGxlZCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZ1bGZpbGxlZDxUPihcbiAgaXRlbTogUHJvbWlzZVNldHRsZWRSZXN1bHQ8VD5cbik6IGl0ZW0gaXMgUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxUPiB7XG4gIHJldHVybiBpdGVtLnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIjtcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgbXM6IG51bWJlciwgbXNnPzogc3RyaW5nKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGltZW91dEVycm9yOiAke1xuICAgICAgICBtc2cgPz8gYHRpbWVkIG91dCBhZnRlciAke01hdGgucm91bmQobXMgLyAxMDAwKS50b0ZpeGVkKDMpfSBzZWNvbmRzYFxuICAgICAgfWBcbiAgICApO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUaW1lb3V0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG4vKiogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBzdWNjZXNzZnVsbHkgaWYgcmV0dXJuZWQgYmVmb3JlIHRoZSBnaXZlbiB0aW1lb3V0IGhhcyBlbGFwc2VkLlxuICogQHBhcmFtIG1zIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJlZm9yZSB0aGUgcHJvbWlzZSBleHBpcmVzXG4gKiBAcGFyYW0gcHJvbWlzZSB0aGUgcHJvbWlzZShzKSB0byB3YWl0IGZvclxuICogQHBhcmFtIHRpbWVvdXRFcnJvciB0aGUgZXJyb3IgdG8gdGhyb3cgaWYgdGhlIHByb21pc2UgZXhwaXJlc1xuICogQHJldHVybiB0aGUgcHJvbWlzZSByZXN1bHRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb21pc2VXaXRoVGltZW91dDxUPihcbiAgbXM6IG51bWJlcixcbiAgcHJvbWlzZTogUHJvbWlzZTxUPiB8IEFycmF5PFByb21pc2U8VD4+LFxuICB0aW1lb3V0RXJyb3I/OiBzdHJpbmdcbik6IFByb21pc2U8VD4ge1xuICBjb25zdCBwcm9taXNlcyA9IEFycmF5LmlzQXJyYXkocHJvbWlzZSkgPyBwcm9taXNlIDogW3Byb21pc2VdO1xuXG4gIC8vIGNyZWF0ZSBhIHByb21pc2UgdGhhdCByZWplY3RzIGluIE4gbWlsbGlzZWNvbmRzXG4gIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZTxuZXZlcj4oKF8sIHJlamVjdCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gZm9yIChjb25zdCBwIG9mIHByb21pc2VzKSB7XG4gICAgICAvLyAgIGlmIChcInVucmVmXCIgaW4gcCAmJiB0eXBlb2YgcC51bnJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyAgICAgcC51bnJlZigpO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9XG4gICAgICByZWplY3QobmV3IFRpbWVvdXRFcnJvcihtcywgdGltZW91dEVycm9yKSk7XG4gICAgfSwgbXMpLnVucmVmKCk7IC8vIGRvbnQgaG9sZCB1cCBjbG9zaW5nIE5vZGVKUyBwcm9jZXNzIGlmIHRoaXMgaXMgdGhlIG9ubHkgdGltZXIgc2NoZWR1bGVkXG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2U8VD4oWy4uLnByb21pc2VzLCB0aW1lb3V0XSk7XG59XG4iXX0=