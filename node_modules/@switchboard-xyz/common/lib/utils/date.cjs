"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toDateString = toDateString;
exports.BNtoDateString = BNtoDateString;
exports.toDateTimeString = toDateTimeString;
exports.BNtoDateTimeString = BNtoDateTimeString;
const padTime = (number_) => {
    return number_.toString().padStart(2, "0");
};
/** Convert a Date object to YYYY-MM-DD */
function toDateString(d) {
    if (d)
        return `${d.getFullYear()}-${padTime(d.getMonth() + 1)}-${padTime(d.getDate())} L`;
    return "";
}
/** Convert an BN timestamp to YYYY-MM-DD */
function BNtoDateString(ts) {
    try {
        return toDateString(new Date(ts.toNumber() * 1000));
    }
    catch {
        return "N/A";
    }
}
/** Convert a Date object to YYYY-MM-DD HH:mm:ss */
function toDateTimeString(d) {
    if (d)
        return `${d.getFullYear()}-${padTime(d.getMonth() + 1)}-${padTime(d.getDate())} ${padTime(d.getHours())}:${padTime(d.getMinutes())}:${padTime(d.getSeconds())} L`;
    return "";
}
/** Convert an BN timestamp to YYYY-MM-DD HH:mm:ss */
function BNtoDateTimeString(ts) {
    try {
        return toDateTimeString(new Date(ts.toNumber() * 1000));
    }
    catch {
        return "N/A";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0Esb0NBTUM7QUFHRCx3Q0FNQztBQUdELDRDQVFDO0FBR0QsZ0RBTUM7QUF4Q0QsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFlLEVBQVUsRUFBRTtJQUMxQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQztBQUVGLDBDQUEwQztBQUMxQyxTQUFnQixZQUFZLENBQUMsQ0FBbUI7SUFDOUMsSUFBSSxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FDL0QsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUNaLElBQUksQ0FBQztJQUNSLE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUVELDRDQUE0QztBQUM1QyxTQUFnQixjQUFjLENBQUMsRUFBTTtJQUNuQyxJQUFJLENBQUM7UUFDSCxPQUFPLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQUMsTUFBTSxDQUFDO1FBQ1AsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0FBQ0gsQ0FBQztBQUVELG1EQUFtRDtBQUNuRCxTQUFnQixnQkFBZ0IsQ0FBQyxDQUFtQjtJQUNsRCxJQUFJLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUMvRCxDQUFDLENBQUMsT0FBTyxFQUFFLENBQ1osSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FDOUQsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUNmLElBQUksQ0FBQztJQUNSLE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUVELHFEQUFxRDtBQUNyRCxTQUFnQixrQkFBa0IsQ0FBQyxFQUFNO0lBQ3ZDLElBQUksQ0FBQztRQUNILE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUFDLE1BQU0sQ0FBQztRQUNQLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSBCTiBmcm9tIFwiYm4uanNcIjtcblxuY29uc3QgcGFkVGltZSA9IChudW1iZXJfOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gbnVtYmVyXy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbn07XG5cbi8qKiBDb252ZXJ0IGEgRGF0ZSBvYmplY3QgdG8gWVlZWS1NTS1ERCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZVN0cmluZyhkOiBEYXRlIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgaWYgKGQpXG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWRUaW1lKGQuZ2V0TW9udGgoKSArIDEpfS0ke3BhZFRpbWUoXG4gICAgICBkLmdldERhdGUoKVxuICAgICl9IExgO1xuICByZXR1cm4gXCJcIjtcbn1cblxuLyoqIENvbnZlcnQgYW4gQk4gdGltZXN0YW1wIHRvIFlZWVktTU0tREQgKi9cbmV4cG9ydCBmdW5jdGlvbiBCTnRvRGF0ZVN0cmluZyh0czogQk4pOiBzdHJpbmcge1xuICB0cnkge1xuICAgIHJldHVybiB0b0RhdGVTdHJpbmcobmV3IERhdGUodHMudG9OdW1iZXIoKSAqIDEwMDApKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFwiTi9BXCI7XG4gIH1cbn1cblxuLyoqIENvbnZlcnQgYSBEYXRlIG9iamVjdCB0byBZWVlZLU1NLUREIEhIOm1tOnNzICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlVGltZVN0cmluZyhkOiBEYXRlIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgaWYgKGQpXG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWRUaW1lKGQuZ2V0TW9udGgoKSArIDEpfS0ke3BhZFRpbWUoXG4gICAgICBkLmdldERhdGUoKVxuICAgICl9ICR7cGFkVGltZShkLmdldEhvdXJzKCkpfToke3BhZFRpbWUoZC5nZXRNaW51dGVzKCkpfToke3BhZFRpbWUoXG4gICAgICBkLmdldFNlY29uZHMoKVxuICAgICl9IExgO1xuICByZXR1cm4gXCJcIjtcbn1cblxuLyoqIENvbnZlcnQgYW4gQk4gdGltZXN0YW1wIHRvIFlZWVktTU0tREQgSEg6bW06c3MgKi9cbmV4cG9ydCBmdW5jdGlvbiBCTnRvRGF0ZVRpbWVTdHJpbmcodHM6IEJOKTogc3RyaW5nIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdG9EYXRlVGltZVN0cmluZyhuZXcgRGF0ZSh0cy50b051bWJlcigpICogMTAwMCkpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gXCJOL0FcIjtcbiAgfVxufVxuIl19