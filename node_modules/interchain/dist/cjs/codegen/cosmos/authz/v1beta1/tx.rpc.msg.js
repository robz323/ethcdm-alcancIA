"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Grant grants the provided authorization to the grantee on the granter's
     account with the provided expiration time. If there is already a grant
     for the given (granter, grantee, Authorization) triple, then the grant
     will be overwritten. */
    grant = async (request) => {
        const data = tx_1.MsgGrant.encode(request).finish();
        const promise = this.rpc.request("cosmos.authz.v1beta1.Msg", "Grant", data);
        return promise.then(data => tx_1.MsgGrantResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Exec attempts to execute the provided messages using
     authorizations granted to the grantee. Each message should have only
     one signer corresponding to the granter of the authorization. */
    exec = async (request) => {
        const data = tx_1.MsgExec.encode(request).finish();
        const promise = this.rpc.request("cosmos.authz.v1beta1.Msg", "Exec", data);
        return promise.then(data => tx_1.MsgExecResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Revoke revokes any authorization corresponding to the provided method name on the
     granter's account that has been granted to the grantee. */
    revoke = async (request) => {
        const data = tx_1.MsgRevoke.encode(request).finish();
        const promise = this.rpc.request("cosmos.authz.v1beta1.Msg", "Revoke", data);
        return promise.then(data => tx_1.MsgRevokeResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map