"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountQueryResponse = exports.AccountQueryRequest = void 0;
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseAccountQueryRequest() {
    return {
        target: "",
        request: new Uint8Array()
    };
}
exports.AccountQueryRequest = {
    typeUrl: "/cosmos.accounts.v1.AccountQueryRequest",
    aminoType: "cosmos-sdk/AccountQueryRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.target !== "") {
            writer.uint32(10).string(message.target);
        }
        if (message.request.length !== 0) {
            writer.uint32(18).bytes(message.request);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.target = reader.string();
                    break;
                case 2:
                    message.request = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseAccountQueryRequest();
        message.target = object.target ?? "";
        message.request = object.request ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseAccountQueryRequest();
        if (object.target !== undefined && object.target !== null) {
            message.target = object.target;
        }
        if (object.request !== undefined && object.request !== null) {
            message.request = (0, helpers_1.bytesFromBase64)(object.request);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.target = message.target === "" ? undefined : message.target;
        obj.request = message.request ? (0, helpers_1.base64FromBytes)(message.request) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.AccountQueryRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/AccountQueryRequest",
            value: exports.AccountQueryRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.AccountQueryRequest.decode(message.value);
    },
    toProto(message) {
        return exports.AccountQueryRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.accounts.v1.AccountQueryRequest",
            value: exports.AccountQueryRequest.encode(message).finish()
        };
    }
};
function createBaseAccountQueryResponse() {
    return {
        response: new Uint8Array()
    };
}
exports.AccountQueryResponse = {
    typeUrl: "/cosmos.accounts.v1.AccountQueryResponse",
    aminoType: "cosmos-sdk/AccountQueryResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.response.length !== 0) {
            writer.uint32(10).bytes(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountQueryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.response = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseAccountQueryResponse();
        message.response = object.response ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseAccountQueryResponse();
        if (object.response !== undefined && object.response !== null) {
            message.response = (0, helpers_1.bytesFromBase64)(object.response);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.response = message.response ? (0, helpers_1.base64FromBytes)(message.response) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.AccountQueryResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/AccountQueryResponse",
            value: exports.AccountQueryResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.AccountQueryResponse.decode(message.value);
    },
    toProto(message) {
        return exports.AccountQueryResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.accounts.v1.AccountQueryResponse",
            value: exports.AccountQueryResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=query.js.map