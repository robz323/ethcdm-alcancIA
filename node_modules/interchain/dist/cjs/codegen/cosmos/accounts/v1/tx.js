"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExecuteResponse = exports.MsgExecute = exports.MsgInitResponse = exports.MsgInit = void 0;
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseMsgInit() {
    return {
        sender: "",
        accountType: "",
        message: new Uint8Array()
    };
}
exports.MsgInit = {
    typeUrl: "/cosmos.accounts.v1.MsgInit",
    aminoType: "cosmos-sdk/MsgInit",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.accountType !== "") {
            writer.uint32(18).string(message.accountType);
        }
        if (message.message.length !== 0) {
            writer.uint32(26).bytes(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.accountType = reader.string();
                    break;
                case 3:
                    message.message = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgInit();
        message.sender = object.sender ?? "";
        message.accountType = object.accountType ?? "";
        message.message = object.message ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgInit();
        if (object.sender !== undefined && object.sender !== null) {
            message.sender = object.sender;
        }
        if (object.account_type !== undefined && object.account_type !== null) {
            message.accountType = object.account_type;
        }
        if (object.message !== undefined && object.message !== null) {
            message.message = (0, helpers_1.bytesFromBase64)(object.message);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender === "" ? undefined : message.sender;
        obj.account_type = message.accountType === "" ? undefined : message.accountType;
        obj.message = message.message ? (0, helpers_1.base64FromBytes)(message.message) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgInit.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgInit",
            value: exports.MsgInit.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgInit.decode(message.value);
    },
    toProto(message) {
        return exports.MsgInit.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.accounts.v1.MsgInit",
            value: exports.MsgInit.encode(message).finish()
        };
    }
};
function createBaseMsgInitResponse() {
    return {
        accountAddress: "",
        response: new Uint8Array()
    };
}
exports.MsgInitResponse = {
    typeUrl: "/cosmos.accounts.v1.MsgInitResponse",
    aminoType: "cosmos-sdk/MsgInitResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.accountAddress !== "") {
            writer.uint32(10).string(message.accountAddress);
        }
        if (message.response.length !== 0) {
            writer.uint32(18).bytes(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accountAddress = reader.string();
                    break;
                case 2:
                    message.response = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgInitResponse();
        message.accountAddress = object.accountAddress ?? "";
        message.response = object.response ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgInitResponse();
        if (object.account_address !== undefined && object.account_address !== null) {
            message.accountAddress = object.account_address;
        }
        if (object.response !== undefined && object.response !== null) {
            message.response = (0, helpers_1.bytesFromBase64)(object.response);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.account_address = message.accountAddress === "" ? undefined : message.accountAddress;
        obj.response = message.response ? (0, helpers_1.base64FromBytes)(message.response) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgInitResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgInitResponse",
            value: exports.MsgInitResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgInitResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgInitResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.accounts.v1.MsgInitResponse",
            value: exports.MsgInitResponse.encode(message).finish()
        };
    }
};
function createBaseMsgExecute() {
    return {
        sender: "",
        target: "",
        message: new Uint8Array()
    };
}
exports.MsgExecute = {
    typeUrl: "/cosmos.accounts.v1.MsgExecute",
    aminoType: "cosmos-sdk/MsgExecute",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.target !== "") {
            writer.uint32(18).string(message.target);
        }
        if (message.message.length !== 0) {
            writer.uint32(26).bytes(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.target = reader.string();
                    break;
                case 3:
                    message.message = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgExecute();
        message.sender = object.sender ?? "";
        message.target = object.target ?? "";
        message.message = object.message ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgExecute();
        if (object.sender !== undefined && object.sender !== null) {
            message.sender = object.sender;
        }
        if (object.target !== undefined && object.target !== null) {
            message.target = object.target;
        }
        if (object.message !== undefined && object.message !== null) {
            message.message = (0, helpers_1.bytesFromBase64)(object.message);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender === "" ? undefined : message.sender;
        obj.target = message.target === "" ? undefined : message.target;
        obj.message = message.message ? (0, helpers_1.base64FromBytes)(message.message) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgExecute.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgExecute",
            value: exports.MsgExecute.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgExecute.decode(message.value);
    },
    toProto(message) {
        return exports.MsgExecute.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.accounts.v1.MsgExecute",
            value: exports.MsgExecute.encode(message).finish()
        };
    }
};
function createBaseMsgExecuteResponse() {
    return {
        response: new Uint8Array()
    };
}
exports.MsgExecuteResponse = {
    typeUrl: "/cosmos.accounts.v1.MsgExecuteResponse",
    aminoType: "cosmos-sdk/MsgExecuteResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.response.length !== 0) {
            writer.uint32(10).bytes(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.response = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgExecuteResponse();
        message.response = object.response ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgExecuteResponse();
        if (object.response !== undefined && object.response !== null) {
            message.response = (0, helpers_1.bytesFromBase64)(object.response);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.response = message.response ? (0, helpers_1.base64FromBytes)(message.response) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgExecuteResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/MsgExecuteResponse",
            value: exports.MsgExecuteResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgExecuteResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgExecuteResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/cosmos.accounts.v1.MsgExecuteResponse",
            value: exports.MsgExecuteResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map