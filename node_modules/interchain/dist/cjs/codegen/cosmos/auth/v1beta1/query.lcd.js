"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Accounts returns all the existing accounts.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.43 */
    accounts = async (params = {
        pagination: undefined
    }) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/auth/v1beta1/accounts`;
        return await this.req.get(endpoint, options);
    };
    /* Account returns account details based on address. */
    account = async (params) => {
        const endpoint = `cosmos/auth/v1beta1/accounts/${params.address}`;
        return await this.req.get(endpoint);
    };
    /* AccountAddressByID returns account address based on account number.
    
     Since: cosmos-sdk 0.46.2 */
    accountAddressByID = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.accountId !== "undefined") {
            options.params.account_id = params.accountId;
        }
        const endpoint = `cosmos/auth/v1beta1/address_by_id/${params.id}`;
        return await this.req.get(endpoint, options);
    };
    /* Params queries all parameters. */
    params = async (_params = {}) => {
        const endpoint = `cosmos/auth/v1beta1/params`;
        return await this.req.get(endpoint);
    };
    /* ModuleAccounts returns all the existing module accounts.
    
     Since: cosmos-sdk 0.46 */
    moduleAccounts = async (_params = {}) => {
        const endpoint = `cosmos/auth/v1beta1/module_accounts`;
        return await this.req.get(endpoint);
    };
    /* ModuleAccountByName returns the module account info by module name */
    moduleAccountByName = async (params) => {
        const endpoint = `cosmos/auth/v1beta1/module_accounts/${params.name}`;
        return await this.req.get(endpoint);
    };
    /* Bech32Prefix queries bech32Prefix
    
     Since: cosmos-sdk 0.46 */
    bech32Prefix = async (_params = {}) => {
        const endpoint = `cosmos/auth/v1beta1/bech32`;
        return await this.req.get(endpoint);
    };
    /* AddressBytesToString converts Account Address bytes to string
    
     Since: cosmos-sdk 0.46 */
    addressBytesToString = async (params) => {
        const endpoint = `cosmos/auth/v1beta1/bech32/${params.addressBytes}`;
        return await this.req.get(endpoint);
    };
    /* AddressStringToBytes converts Address string to bytes
    
     Since: cosmos-sdk 0.46 */
    addressStringToBytes = async (params) => {
        const endpoint = `cosmos/auth/v1beta1/bech32/${params.addressString}`;
        return await this.req.get(endpoint);
    };
    /* AccountInfo queries account info which is common to all account types.
    
     Since: cosmos-sdk 0.47 */
    accountInfo = async (params) => {
        const endpoint = `cosmos/auth/v1beta1/account_info/${params.address}`;
        return await this.req.get(endpoint);
    };
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=query.lcd.js.map