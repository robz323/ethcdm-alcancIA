"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* CreateValidator defines a method for creating a new validator. */
    createValidator = async (request) => {
        const data = tx_1.MsgCreateValidator.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "CreateValidator", data);
        return promise.then(data => tx_1.MsgCreateValidatorResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* EditValidator defines a method for editing an existing validator. */
    editValidator = async (request) => {
        const data = tx_1.MsgEditValidator.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "EditValidator", data);
        return promise.then(data => tx_1.MsgEditValidatorResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Delegate defines a method for performing a delegation of coins
     from a delegator to a validator. */
    delegate = async (request) => {
        const data = tx_1.MsgDelegate.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "Delegate", data);
        return promise.then(data => tx_1.MsgDelegateResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* BeginRedelegate defines a method for performing a redelegation
     of coins from a delegator and source validator to a destination validator. */
    beginRedelegate = async (request) => {
        const data = tx_1.MsgBeginRedelegate.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "BeginRedelegate", data);
        return promise.then(data => tx_1.MsgBeginRedelegateResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Undelegate defines a method for performing an undelegation from a
     delegate and a validator. */
    undelegate = async (request) => {
        const data = tx_1.MsgUndelegate.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "Undelegate", data);
        return promise.then(data => tx_1.MsgUndelegateResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
     and delegate back to previous validator.
    
     Since: cosmos-sdk 0.46 */
    cancelUnbondingDelegation = async (request) => {
        const data = tx_1.MsgCancelUnbondingDelegation.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "CancelUnbondingDelegation", data);
        return promise.then(data => tx_1.MsgCancelUnbondingDelegationResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateParams defines an operation for updating the x/staking module
     parameters.
     Since: cosmos-sdk 0.47 */
    updateParams = async (request) => {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "UpdateParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map