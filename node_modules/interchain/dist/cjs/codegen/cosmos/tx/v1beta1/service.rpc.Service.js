"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRpcQueryExtension = exports.ServiceClientImpl = void 0;
const binary_1 = require("../../../binary");
const stargate_1 = require("@cosmjs/stargate");
const service_1 = require("./service");
class ServiceClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Simulate simulates executing a transaction for estimating gas usage. */
    simulate = async (request) => {
        const data = service_1.SimulateRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "Simulate", data);
        return promise.then(data => service_1.SimulateResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* GetTx fetches a tx by hash. */
    getTx = async (request) => {
        const data = service_1.GetTxRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetTx", data);
        return promise.then(data => service_1.GetTxResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* BroadcastTx broadcast transaction. */
    broadcastTx = async (request) => {
        const data = service_1.BroadcastTxRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "BroadcastTx", data);
        return promise.then(data => service_1.BroadcastTxResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* GetTxsEvent fetches txs by event. */
    getTxsEvent = async (request) => {
        const data = service_1.GetTxsEventRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetTxsEvent", data);
        return promise.then(data => service_1.GetTxsEventResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* GetBlockWithTxs fetches a block with decoded txs.
    
     Since: cosmos-sdk 0.45.2 */
    getBlockWithTxs = async (request) => {
        const data = service_1.GetBlockWithTxsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetBlockWithTxs", data);
        return promise.then(data => service_1.GetBlockWithTxsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TxDecode decodes the transaction.
    
     Since: cosmos-sdk 0.47 */
    txDecode = async (request) => {
        const data = service_1.TxDecodeRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxDecode", data);
        return promise.then(data => service_1.TxDecodeResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TxEncode encodes the transaction.
    
     Since: cosmos-sdk 0.47 */
    txEncode = async (request) => {
        const data = service_1.TxEncodeRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxEncode", data);
        return promise.then(data => service_1.TxEncodeResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
    
     Since: cosmos-sdk 0.47 */
    txEncodeAmino = async (request) => {
        const data = service_1.TxEncodeAminoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxEncodeAmino", data);
        return promise.then(data => service_1.TxEncodeAminoResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
    
     Since: cosmos-sdk 0.47 */
    txDecodeAmino = async (request) => {
        const data = service_1.TxDecodeAminoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxDecodeAmino", data);
        return promise.then(data => service_1.TxDecodeAminoResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.ServiceClientImpl = ServiceClientImpl;
const createRpcQueryExtension = (base) => {
    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new ServiceClientImpl(rpc);
    return {
        simulate(request) {
            return queryService.simulate(request);
        },
        getTx(request) {
            return queryService.getTx(request);
        },
        broadcastTx(request) {
            return queryService.broadcastTx(request);
        },
        getTxsEvent(request) {
            return queryService.getTxsEvent(request);
        },
        getBlockWithTxs(request) {
            return queryService.getBlockWithTxs(request);
        },
        txDecode(request) {
            return queryService.txDecode(request);
        },
        txEncode(request) {
            return queryService.txEncode(request);
        },
        txEncodeAmino(request) {
            return queryService.txEncodeAmino(request);
        },
        txDecodeAmino(request) {
            return queryService.txDecodeAmino(request);
        }
    };
};
exports.createRpcQueryExtension = createRpcQueryExtension;
//# sourceMappingURL=service.rpc.Service.js.map