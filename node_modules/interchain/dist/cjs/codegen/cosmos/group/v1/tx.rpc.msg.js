"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* CreateGroup creates a new group with an admin account address, a list of members and some optional metadata. */
    createGroup = async (request) => {
        const data = tx_1.MsgCreateGroup.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "CreateGroup", data);
        return promise.then(data => tx_1.MsgCreateGroupResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateGroupMembers updates the group members with given group id and admin address. */
    updateGroupMembers = async (request) => {
        const data = tx_1.MsgUpdateGroupMembers.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupMembers", data);
        return promise.then(data => tx_1.MsgUpdateGroupMembersResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateGroupAdmin updates the group admin with given group id and previous admin address. */
    updateGroupAdmin = async (request) => {
        const data = tx_1.MsgUpdateGroupAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupAdmin", data);
        return promise.then(data => tx_1.MsgUpdateGroupAdminResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateGroupMetadata updates the group metadata with given group id and admin address. */
    updateGroupMetadata = async (request) => {
        const data = tx_1.MsgUpdateGroupMetadata.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupMetadata", data);
        return promise.then(data => tx_1.MsgUpdateGroupMetadataResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* CreateGroupPolicy creates a new group policy using given DecisionPolicy. */
    createGroupPolicy = async (request) => {
        const data = tx_1.MsgCreateGroupPolicy.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "CreateGroupPolicy", data);
        return promise.then(data => tx_1.MsgCreateGroupPolicyResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* CreateGroupWithPolicy creates a new group with policy. */
    createGroupWithPolicy = async (request) => {
        const data = tx_1.MsgCreateGroupWithPolicy.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "CreateGroupWithPolicy", data);
        return promise.then(data => tx_1.MsgCreateGroupWithPolicyResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateGroupPolicyAdmin updates a group policy admin. */
    updateGroupPolicyAdmin = async (request) => {
        const data = tx_1.MsgUpdateGroupPolicyAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupPolicyAdmin", data);
        return promise.then(data => tx_1.MsgUpdateGroupPolicyAdminResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated. */
    updateGroupPolicyDecisionPolicy = async (request) => {
        const data = tx_1.MsgUpdateGroupPolicyDecisionPolicy.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupPolicyDecisionPolicy", data);
        return promise.then(data => tx_1.MsgUpdateGroupPolicyDecisionPolicyResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateGroupPolicyMetadata updates a group policy metadata. */
    updateGroupPolicyMetadata = async (request) => {
        const data = tx_1.MsgUpdateGroupPolicyMetadata.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupPolicyMetadata", data);
        return promise.then(data => tx_1.MsgUpdateGroupPolicyMetadataResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* SubmitProposal submits a new proposal. */
    submitProposal = async (request) => {
        const data = tx_1.MsgSubmitProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "SubmitProposal", data);
        return promise.then(data => tx_1.MsgSubmitProposalResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* WithdrawProposal withdraws a proposal. */
    withdrawProposal = async (request) => {
        const data = tx_1.MsgWithdrawProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "WithdrawProposal", data);
        return promise.then(data => tx_1.MsgWithdrawProposalResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Vote allows a voter to vote on a proposal. */
    vote = async (request) => {
        const data = tx_1.MsgVote.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "Vote", data);
        return promise.then(data => tx_1.MsgVoteResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Exec executes a proposal. */
    exec = async (request) => {
        const data = tx_1.MsgExec.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "Exec", data);
        return promise.then(data => tx_1.MsgExecResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* LeaveGroup allows a group member to leave the group. */
    leaveGroup = async (request) => {
        const data = tx_1.MsgLeaveGroup.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "LeaveGroup", data);
        return promise.then(data => tx_1.MsgLeaveGroupResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map