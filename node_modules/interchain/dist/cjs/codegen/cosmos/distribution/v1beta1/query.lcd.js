"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Params queries params of the distribution module. */
    params = async (_params = {}) => {
        const endpoint = `cosmos/distribution/v1beta1/params`;
        return await this.req.get(endpoint);
    };
    /* ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator */
    validatorDistributionInfo = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}`;
        return await this.req.get(endpoint);
    };
    /* ValidatorOutstandingRewards queries rewards of a validator address. */
    validatorOutstandingRewards = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}/outstanding_rewards`;
        return await this.req.get(endpoint);
    };
    /* ValidatorCommission queries accumulated commission for a validator. */
    validatorCommission = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}/commission`;
        return await this.req.get(endpoint);
    };
    /* ValidatorSlashes queries slash events of a validator. */
    validatorSlashes = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.startingHeight !== "undefined") {
            options.params.starting_height = params.startingHeight;
        }
        if (typeof params?.endingHeight !== "undefined") {
            options.params.ending_height = params.endingHeight;
        }
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}/slashes`;
        return await this.req.get(endpoint, options);
    };
    /* DelegationRewards queries the total rewards accrued by a delegation. */
    delegationRewards = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/rewards/${params.validatorAddress}`;
        return await this.req.get(endpoint);
    };
    /* DelegationTotalRewards queries the total rewards accrued by each
     validator. */
    delegationTotalRewards = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/rewards`;
        return await this.req.get(endpoint);
    };
    /* DelegatorValidators queries the validators of a delegator. */
    delegatorValidators = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/validators`;
        return await this.req.get(endpoint);
    };
    /* DelegatorWithdrawAddress queries withdraw address of a delegator. */
    delegatorWithdrawAddress = async (params) => {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/withdraw_address`;
        return await this.req.get(endpoint);
    };
    /* CommunityPool queries the community pool coins. */
    communityPool = async (_params = {}) => {
        const endpoint = `cosmos/distribution/v1beta1/community_pool`;
        return await this.req.get(endpoint);
    };
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=query.lcd.js.map