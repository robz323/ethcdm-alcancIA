"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* SetWithdrawAddress defines a method to change the withdraw address
     for a delegator (or validator self-delegation). */
    setWithdrawAddress = async (request) => {
        const data = tx_1.MsgSetWithdrawAddress.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "SetWithdrawAddress", data);
        return promise.then(data => tx_1.MsgSetWithdrawAddressResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* WithdrawDelegatorReward defines a method to withdraw rewards of delegator
     from a single validator. */
    withdrawDelegatorReward = async (request) => {
        const data = tx_1.MsgWithdrawDelegatorReward.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "WithdrawDelegatorReward", data);
        return promise.then(data => tx_1.MsgWithdrawDelegatorRewardResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* WithdrawValidatorCommission defines a method to withdraw the
     full commission to the validator address. */
    withdrawValidatorCommission = async (request) => {
        const data = tx_1.MsgWithdrawValidatorCommission.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "WithdrawValidatorCommission", data);
        return promise.then(data => tx_1.MsgWithdrawValidatorCommissionResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* FundCommunityPool defines a method to allow an account to directly
     fund the community pool. */
    fundCommunityPool = async (request) => {
        const data = tx_1.MsgFundCommunityPool.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "FundCommunityPool", data);
        return promise.then(data => tx_1.MsgFundCommunityPoolResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateParams defines a governance operation for updating the x/distribution
     module parameters. The authority is defined in the keeper.
    
     Since: cosmos-sdk 0.47 */
    updateParams = async (request) => {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "UpdateParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* CommunityPoolSpend defines a governance operation for sending tokens from
     the community pool in the x/distribution module to another account, which
     could be the governance module itself. The authority is defined in the
     keeper.
    
     Since: cosmos-sdk 0.47 */
    communityPoolSpend = async (request) => {
        const data = tx_1.MsgCommunityPoolSpend.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "CommunityPoolSpend", data);
        return promise.then(data => tx_1.MsgCommunityPoolSpendResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* DepositValidatorRewardsPool defines a method to provide additional rewards
     to delegators to a specific validator.
    
     Since: cosmos-sdk 0.50 */
    depositValidatorRewardsPool = async (request) => {
        const data = tx_1.MsgDepositValidatorRewardsPool.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "DepositValidatorRewardsPool", data);
        return promise.then(data => tx_1.MsgDepositValidatorRewardsPoolResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map