"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;
const binary_1 = require("../../../binary");
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("./query");
class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Constitution queries the chain's constitution. */
    constitution = async (request = {}) => {
        const data = query_1.QueryConstitutionRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Constitution", data);
        return promise.then(data => query_1.QueryConstitutionResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Proposal queries proposal details based on ProposalID. */
    proposal = async (request) => {
        const data = query_1.QueryProposalRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Proposal", data);
        return promise.then(data => query_1.QueryProposalResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Proposals queries all proposals based on given status. */
    proposals = async (request) => {
        const data = query_1.QueryProposalsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Proposals", data);
        return promise.then(data => query_1.QueryProposalsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Vote queries voted information based on proposalID, voterAddr. */
    vote = async (request) => {
        const data = query_1.QueryVoteRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Vote", data);
        return promise.then(data => query_1.QueryVoteResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Votes queries votes of a given proposal. */
    votes = async (request) => {
        const data = query_1.QueryVotesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Votes", data);
        return promise.then(data => query_1.QueryVotesResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Params queries all parameters of the gov module. */
    params = async (request) => {
        const data = query_1.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Params", data);
        return promise.then(data => query_1.QueryParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Deposit queries single deposit information based on proposalID, depositAddr. */
    deposit = async (request) => {
        const data = query_1.QueryDepositRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Deposit", data);
        return promise.then(data => query_1.QueryDepositResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Deposits queries all deposits of a single proposal. */
    deposits = async (request) => {
        const data = query_1.QueryDepositsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "Deposits", data);
        return promise.then(data => query_1.QueryDepositsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TallyResult queries the tally of a proposal vote. */
    tallyResult = async (request) => {
        const data = query_1.QueryTallyResultRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Query", "TallyResult", data);
        return promise.then(data => query_1.QueryTallyResultResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.QueryClientImpl = QueryClientImpl;
const createRpcQueryExtension = (base) => {
    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        constitution(request) {
            return queryService.constitution(request);
        },
        proposal(request) {
            return queryService.proposal(request);
        },
        proposals(request) {
            return queryService.proposals(request);
        },
        vote(request) {
            return queryService.vote(request);
        },
        votes(request) {
            return queryService.votes(request);
        },
        params(request) {
            return queryService.params(request);
        },
        deposit(request) {
            return queryService.deposit(request);
        },
        deposits(request) {
            return queryService.deposits(request);
        },
        tallyResult(request) {
            return queryService.tallyResult(request);
        }
    };
};
exports.createRpcQueryExtension = createRpcQueryExtension;
//# sourceMappingURL=query.rpc.Query.js.map