"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Constitution queries the chain's constitution. */
    constitution = async (_params = {}) => {
        const endpoint = `cosmos/gov/v1/constitution`;
        return await this.req.get(endpoint);
    };
    /* Proposal queries proposal details based on ProposalID. */
    proposal = async (params) => {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}`;
        return await this.req.get(endpoint);
    };
    /* Proposals queries all proposals based on given status. */
    proposals = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.proposalStatus !== "undefined") {
            options.params.proposal_status = params.proposalStatus;
        }
        if (typeof params?.voter !== "undefined") {
            options.params.voter = params.voter;
        }
        if (typeof params?.depositor !== "undefined") {
            options.params.depositor = params.depositor;
        }
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals`;
        return await this.req.get(endpoint, options);
    };
    /* Vote queries voted information based on proposalID, voterAddr. */
    vote = async (params) => {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/votes/${params.voter}`;
        return await this.req.get(endpoint);
    };
    /* Votes queries votes of a given proposal. */
    votes = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/votes`;
        return await this.req.get(endpoint, options);
    };
    /* Params queries all parameters of the gov module. */
    params = async (params) => {
        const endpoint = `cosmos/gov/v1/params/${params.paramsType}`;
        return await this.req.get(endpoint);
    };
    /* Deposit queries single deposit information based on proposalID, depositAddr. */
    deposit = async (params) => {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/deposits/${params.depositor}`;
        return await this.req.get(endpoint);
    };
    /* Deposits queries all deposits of a single proposal. */
    deposits = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/deposits`;
        return await this.req.get(endpoint, options);
    };
    /* TallyResult queries the tally of a proposal vote. */
    tallyResult = async (params) => {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/tally`;
        return await this.req.get(endpoint);
    };
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=query.lcd.js.map