"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* SubmitProposal defines a method to create new proposal given the messages. */
    submitProposal = async (request) => {
        const data = tx_1.MsgSubmitProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "SubmitProposal", data);
        return promise.then(data => tx_1.MsgSubmitProposalResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ExecLegacyContent defines a Msg to be in included in a MsgSubmitProposal
     to execute a legacy content-based proposal. */
    execLegacyContent = async (request) => {
        const data = tx_1.MsgExecLegacyContent.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "ExecLegacyContent", data);
        return promise.then(data => tx_1.MsgExecLegacyContentResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Vote defines a method to add a vote on a specific proposal. */
    vote = async (request) => {
        const data = tx_1.MsgVote.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "Vote", data);
        return promise.then(data => tx_1.MsgVoteResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* VoteWeighted defines a method to add a weighted vote on a specific proposal. */
    voteWeighted = async (request) => {
        const data = tx_1.MsgVoteWeighted.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "VoteWeighted", data);
        return promise.then(data => tx_1.MsgVoteWeightedResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Deposit defines a method to add deposit on a specific proposal. */
    deposit = async (request) => {
        const data = tx_1.MsgDeposit.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "Deposit", data);
        return promise.then(data => tx_1.MsgDepositResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateParams defines a governance operation for updating the x/gov module
     parameters. The authority is defined in the keeper.
    
     Since: cosmos-sdk 0.47 */
    updateParams = async (request) => {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "UpdateParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* CancelProposal defines a method to cancel governance proposal
    
     Since: cosmos-sdk 0.50 */
    cancelProposal = async (request) => {
        const data = tx_1.MsgCancelProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1.Msg", "CancelProposal", data);
        return promise.then(data => tx_1.MsgCancelProposalResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map