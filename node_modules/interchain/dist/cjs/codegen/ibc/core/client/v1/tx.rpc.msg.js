"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* CreateClient defines a rpc handler method for MsgCreateClient. */
    createClient = async (request) => {
        const data = tx_1.MsgCreateClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "CreateClient", data);
        return promise.then(data => tx_1.MsgCreateClientResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateClient defines a rpc handler method for MsgUpdateClient. */
    updateClient = async (request) => {
        const data = tx_1.MsgUpdateClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpdateClient", data);
        return promise.then(data => tx_1.MsgUpdateClientResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpgradeClient defines a rpc handler method for MsgUpgradeClient. */
    upgradeClient = async (request) => {
        const data = tx_1.MsgUpgradeClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpgradeClient", data);
        return promise.then(data => tx_1.MsgUpgradeClientResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* SubmitMisbehaviour defines a rpc handler method for MsgSubmitMisbehaviour. */
    submitMisbehaviour = async (request) => {
        const data = tx_1.MsgSubmitMisbehaviour.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "SubmitMisbehaviour", data);
        return promise.then(data => tx_1.MsgSubmitMisbehaviourResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* RecoverClient defines a rpc handler method for MsgRecoverClient. */
    recoverClient = async (request) => {
        const data = tx_1.MsgRecoverClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "RecoverClient", data);
        return promise.then(data => tx_1.MsgRecoverClientResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* IBCSoftwareUpgrade defines a rpc handler method for MsgIBCSoftwareUpgrade. */
    iBCSoftwareUpgrade = async (request) => {
        const data = tx_1.MsgIBCSoftwareUpgrade.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "IBCSoftwareUpgrade", data);
        return promise.then(data => tx_1.MsgIBCSoftwareUpgradeResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateClientParams defines a rpc handler method for MsgUpdateParams. */
    updateClientParams = async (request) => {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpdateClientParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map