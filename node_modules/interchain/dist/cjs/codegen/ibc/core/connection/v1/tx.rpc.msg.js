"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* ConnectionOpenInit defines a rpc handler method for MsgConnectionOpenInit. */
    connectionOpenInit = async (request) => {
        const data = tx_1.MsgConnectionOpenInit.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenInit", data);
        return promise.then(data => tx_1.MsgConnectionOpenInitResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry. */
    connectionOpenTry = async (request) => {
        const data = tx_1.MsgConnectionOpenTry.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenTry", data);
        return promise.then(data => tx_1.MsgConnectionOpenTryResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck. */
    connectionOpenAck = async (request) => {
        const data = tx_1.MsgConnectionOpenAck.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenAck", data);
        return promise.then(data => tx_1.MsgConnectionOpenAckResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ConnectionOpenConfirm defines a rpc handler method for
     MsgConnectionOpenConfirm. */
    connectionOpenConfirm = async (request) => {
        const data = tx_1.MsgConnectionOpenConfirm.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenConfirm", data);
        return promise.then(data => tx_1.MsgConnectionOpenConfirmResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* UpdateConnectionParams defines a rpc handler method for
     MsgUpdateParams. */
    updateConnectionParams = async (request) => {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "UpdateConnectionParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map