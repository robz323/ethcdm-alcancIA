"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit. */
    channelOpenInit = async (request) => {
        const data = tx_1.MsgChannelOpenInit.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenInit", data);
        return promise.then(data => tx_1.MsgChannelOpenInitResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry. */
    channelOpenTry = async (request) => {
        const data = tx_1.MsgChannelOpenTry.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenTry", data);
        return promise.then(data => tx_1.MsgChannelOpenTryResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck. */
    channelOpenAck = async (request) => {
        const data = tx_1.MsgChannelOpenAck.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenAck", data);
        return promise.then(data => tx_1.MsgChannelOpenAckResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm. */
    channelOpenConfirm = async (request) => {
        const data = tx_1.MsgChannelOpenConfirm.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenConfirm", data);
        return promise.then(data => tx_1.MsgChannelOpenConfirmResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit. */
    channelCloseInit = async (request) => {
        const data = tx_1.MsgChannelCloseInit.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelCloseInit", data);
        return promise.then(data => tx_1.MsgChannelCloseInitResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* ChannelCloseConfirm defines a rpc handler method for
     MsgChannelCloseConfirm. */
    channelCloseConfirm = async (request) => {
        const data = tx_1.MsgChannelCloseConfirm.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelCloseConfirm", data);
        return promise.then(data => tx_1.MsgChannelCloseConfirmResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* RecvPacket defines a rpc handler method for MsgRecvPacket. */
    recvPacket = async (request) => {
        const data = tx_1.MsgRecvPacket.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "RecvPacket", data);
        return promise.then(data => tx_1.MsgRecvPacketResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Timeout defines a rpc handler method for MsgTimeout. */
    timeout = async (request) => {
        const data = tx_1.MsgTimeout.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "Timeout", data);
        return promise.then(data => tx_1.MsgTimeoutResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose. */
    timeoutOnClose = async (request) => {
        const data = tx_1.MsgTimeoutOnClose.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "TimeoutOnClose", data);
        return promise.then(data => tx_1.MsgTimeoutOnCloseResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Acknowledgement defines a rpc handler method for MsgAcknowledgement. */
    acknowledgement = async (request) => {
        const data = tx_1.MsgAcknowledgement.encode(request).finish();
        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "Acknowledgement", data);
        return promise.then(data => tx_1.MsgAcknowledgementResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map