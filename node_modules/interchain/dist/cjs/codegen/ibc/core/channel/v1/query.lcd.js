"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../../helpers");
class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Channel queries an IBC Channel. */
    channel = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}`;
        return await this.req.get(endpoint);
    };
    /* Channels queries all the IBC channels of a chain. */
    channels = async (params = {
        pagination: undefined
    }) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `ibc/core/channel/v1/channels`;
        return await this.req.get(endpoint, options);
    };
    /* ConnectionChannels queries all the channels associated with a connection
     end. */
    connectionChannels = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `ibc/core/channel/v1/connections/${params.connection}/channels`;
        return await this.req.get(endpoint, options);
    };
    /* ChannelClientState queries for the client state for the channel associated
     with the provided channel identifiers. */
    channelClientState = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/client_state`;
        return await this.req.get(endpoint);
    };
    /* ChannelConsensusState queries for the consensus state for the channel
     associated with the provided channel identifiers. */
    channelConsensusState = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/consensus_state/revision/${params.revisionNumber}/height/${params.revisionHeight}`;
        return await this.req.get(endpoint);
    };
    /* PacketCommitment queries a stored packet commitment hash. */
    packetCommitment = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_commitments/${params.sequence}`;
        return await this.req.get(endpoint);
    };
    /* PacketCommitments returns all the packet commitments hashes associated
     with a channel. */
    packetCommitments = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_commitments`;
        return await this.req.get(endpoint, options);
    };
    /* PacketReceipt queries if a given packet sequence has been received on the
     queried chain */
    packetReceipt = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_receipts/${params.sequence}`;
        return await this.req.get(endpoint);
    };
    /* PacketAcknowledgement queries a stored packet acknowledgement hash. */
    packetAcknowledgement = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_acks/${params.sequence}`;
        return await this.req.get(endpoint);
    };
    /* PacketAcknowledgements returns all the packet acknowledgements associated
     with a channel. */
    packetAcknowledgements = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        if (typeof params?.packetCommitmentSequences !== "undefined") {
            options.params.packet_commitment_sequences = params.packetCommitmentSequences;
        }
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_acknowledgements`;
        return await this.req.get(endpoint, options);
    };
    /* UnreceivedPackets returns all the unreceived IBC packets associated with a
     channel and sequences. */
    unreceivedPackets = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_commitments/${params.packetCommitmentSequences}/unreceived_packets`;
        return await this.req.get(endpoint);
    };
    /* UnreceivedAcks returns all the unreceived IBC acknowledgements associated
     with a channel and sequences. */
    unreceivedAcks = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/packet_commitments/${params.packetAckSequences}/unreceived_acks`;
        return await this.req.get(endpoint);
    };
    /* NextSequenceReceive returns the next receive sequence for a given channel. */
    nextSequenceReceive = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/next_sequence`;
        return await this.req.get(endpoint);
    };
    /* NextSequenceSend returns the next send sequence for a given channel. */
    nextSequenceSend = async (params) => {
        const endpoint = `ibc/core/channel/v1/channels/${params.channelId}/ports/${params.portId}/next_sequence_send`;
        return await this.req.get(endpoint);
    };
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=query.lcd.js.map