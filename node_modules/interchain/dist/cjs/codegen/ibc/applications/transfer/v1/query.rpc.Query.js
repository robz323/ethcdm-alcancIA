"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;
const binary_1 = require("../../../../binary");
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("./query");
class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* DenomTraces queries all denomination traces. */
    denomTraces = async (request = {
        pagination: undefined
    }) => {
        const data = query_1.QueryDenomTracesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomTraces", data);
        return promise.then(data => query_1.QueryDenomTracesResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* DenomTrace queries a denomination trace information. */
    denomTrace = async (request) => {
        const data = query_1.QueryDenomTraceRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomTrace", data);
        return promise.then(data => query_1.QueryDenomTraceResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* Params queries all parameters of the ibc-transfer module. */
    params = async (request = {}) => {
        const data = query_1.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "Params", data);
        return promise.then(data => query_1.QueryParamsResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* DenomHash queries a denomination hash information. */
    denomHash = async (request) => {
        const data = query_1.QueryDenomHashRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomHash", data);
        return promise.then(data => query_1.QueryDenomHashResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* EscrowAddress returns the escrow address for a particular port and channel id. */
    escrowAddress = async (request) => {
        const data = query_1.QueryEscrowAddressRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "EscrowAddress", data);
        return promise.then(data => query_1.QueryEscrowAddressResponse.decode(new binary_1.BinaryReader(data)));
    };
    /* TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom. */
    totalEscrowForDenom = async (request) => {
        const data = query_1.QueryTotalEscrowForDenomRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "TotalEscrowForDenom", data);
        return promise.then(data => query_1.QueryTotalEscrowForDenomResponse.decode(new binary_1.BinaryReader(data)));
    };
}
exports.QueryClientImpl = QueryClientImpl;
const createRpcQueryExtension = (base) => {
    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        denomTraces(request) {
            return queryService.denomTraces(request);
        },
        denomTrace(request) {
            return queryService.denomTrace(request);
        },
        params(request) {
            return queryService.params(request);
        },
        denomHash(request) {
            return queryService.denomHash(request);
        },
        escrowAddress(request) {
            return queryService.escrowAddress(request);
        },
        totalEscrowForDenom(request) {
            return queryService.totalEscrowForDenom(request);
        }
    };
};
exports.createRpcQueryExtension = createRpcQueryExtension;
//# sourceMappingURL=query.rpc.Query.js.map