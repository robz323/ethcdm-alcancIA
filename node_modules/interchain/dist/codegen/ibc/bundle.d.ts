import * as _119 from "./applications/interchain_accounts/controller/v1/controller";
import * as _120 from "./applications/interchain_accounts/controller/v1/query";
import * as _121 from "./applications/interchain_accounts/controller/v1/tx";
import * as _122 from "./applications/interchain_accounts/genesis/v1/genesis";
import * as _123 from "./applications/interchain_accounts/host/v1/host";
import * as _124 from "./applications/interchain_accounts/host/v1/query";
import * as _125 from "./applications/interchain_accounts/host/v1/tx";
import * as _126 from "./applications/interchain_accounts/v1/account";
import * as _127 from "./applications/interchain_accounts/v1/metadata";
import * as _128 from "./applications/interchain_accounts/v1/packet";
import * as _129 from "./applications/transfer/v1/authz";
import * as _130 from "./applications/transfer/v1/genesis";
import * as _131 from "./applications/transfer/v1/query";
import * as _132 from "./applications/transfer/v1/transfer";
import * as _133 from "./applications/transfer/v1/tx";
import * as _134 from "./applications/transfer/v2/packet";
import * as _135 from "./core/channel/v1/channel";
import * as _136 from "./core/channel/v1/genesis";
import * as _137 from "./core/channel/v1/query";
import * as _138 from "./core/channel/v1/tx";
import * as _139 from "./core/client/v1/client";
import * as _140 from "./core/client/v1/genesis";
import * as _141 from "./core/client/v1/query";
import * as _142 from "./core/client/v1/tx";
import * as _143 from "./core/commitment/v1/commitment";
import * as _144 from "./core/connection/v1/connection";
import * as _145 from "./core/connection/v1/genesis";
import * as _146 from "./core/connection/v1/query";
import * as _147 from "./core/connection/v1/tx";
import * as _148 from "./lightclients/localhost/v2/localhost";
import * as _149 from "./lightclients/solomachine/v2/solomachine";
import * as _150 from "./lightclients/solomachine/v3/solomachine";
import * as _151 from "./lightclients/tendermint/v1/tendermint";
import * as _255 from "./applications/interchain_accounts/controller/v1/query.lcd";
import * as _256 from "./applications/interchain_accounts/host/v1/query.lcd";
import * as _257 from "./applications/transfer/v1/query.lcd";
import * as _258 from "./core/channel/v1/query.lcd";
import * as _259 from "./core/client/v1/query.lcd";
import * as _260 from "./core/connection/v1/query.lcd";
import * as _261 from "./applications/interchain_accounts/controller/v1/query.rpc.Query";
import * as _262 from "./applications/interchain_accounts/host/v1/query.rpc.Query";
import * as _263 from "./applications/transfer/v1/query.rpc.Query";
import * as _264 from "./core/channel/v1/query.rpc.Query";
import * as _265 from "./core/client/v1/query.rpc.Query";
import * as _266 from "./core/connection/v1/query.rpc.Query";
import * as _267 from "./applications/interchain_accounts/controller/v1/tx.rpc.msg";
import * as _268 from "./applications/interchain_accounts/host/v1/tx.rpc.msg";
import * as _269 from "./applications/transfer/v1/tx.rpc.msg";
import * as _270 from "./core/channel/v1/tx.rpc.msg";
import * as _271 from "./core/client/v1/tx.rpc.msg";
import * as _272 from "./core/connection/v1/tx.rpc.msg";
export declare namespace ibc {
    namespace applications {
        namespace interchain_accounts {
            namespace controller {
                const v1: {
                    MsgClientImpl: typeof _267.MsgClientImpl;
                    QueryClientImpl: typeof _261.QueryClientImpl;
                    createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                        interchainAccount(request: _120.QueryInterchainAccountRequest): Promise<_120.QueryInterchainAccountResponse>;
                        params(request?: _120.QueryParamsRequest): Promise<_120.QueryParamsResponse>;
                    };
                    LCDQueryClient: typeof _255.LCDQueryClient;
                    registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
                    load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
                    MessageComposer: {
                        encoded: {
                            registerInterchainAccount(value: _121.MsgRegisterInterchainAccount): {
                                typeUrl: string;
                                value: Uint8Array;
                            };
                            sendTx(value: _121.MsgSendTx): {
                                typeUrl: string;
                                value: Uint8Array;
                            };
                            updateParams(value: _121.MsgUpdateParams): {
                                typeUrl: string;
                                value: Uint8Array;
                            };
                        };
                        withTypeUrl: {
                            registerInterchainAccount(value: _121.MsgRegisterInterchainAccount): {
                                typeUrl: string;
                                value: _121.MsgRegisterInterchainAccount;
                            };
                            sendTx(value: _121.MsgSendTx): {
                                typeUrl: string;
                                value: _121.MsgSendTx;
                            };
                            updateParams(value: _121.MsgUpdateParams): {
                                typeUrl: string;
                                value: _121.MsgUpdateParams;
                            };
                        };
                        fromPartial: {
                            registerInterchainAccount(value: _121.MsgRegisterInterchainAccount): {
                                typeUrl: string;
                                value: _121.MsgRegisterInterchainAccount;
                            };
                            sendTx(value: _121.MsgSendTx): {
                                typeUrl: string;
                                value: _121.MsgSendTx;
                            };
                            updateParams(value: _121.MsgUpdateParams): {
                                typeUrl: string;
                                value: _121.MsgUpdateParams;
                            };
                        };
                    };
                    AminoConverter: {
                        "/ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount": {
                            aminoType: string;
                            toAmino: (message: _121.MsgRegisterInterchainAccount) => _121.MsgRegisterInterchainAccountAmino;
                            fromAmino: (object: _121.MsgRegisterInterchainAccountAmino) => _121.MsgRegisterInterchainAccount;
                        };
                        "/ibc.applications.interchain_accounts.controller.v1.MsgSendTx": {
                            aminoType: string;
                            toAmino: (message: _121.MsgSendTx) => _121.MsgSendTxAmino;
                            fromAmino: (object: _121.MsgSendTxAmino) => _121.MsgSendTx;
                        };
                        "/ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams": {
                            aminoType: string;
                            toAmino: (message: _121.MsgUpdateParams) => _121.MsgUpdateParamsAmino;
                            fromAmino: (object: _121.MsgUpdateParamsAmino) => _121.MsgUpdateParams;
                        };
                    };
                    MsgRegisterInterchainAccount: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _121.MsgRegisterInterchainAccount, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _121.MsgRegisterInterchainAccount;
                        fromPartial(object: {
                            owner?: string;
                            connectionId?: string;
                            version?: string;
                        }): _121.MsgRegisterInterchainAccount;
                        fromAmino(object: _121.MsgRegisterInterchainAccountAmino): _121.MsgRegisterInterchainAccount;
                        toAmino(message: _121.MsgRegisterInterchainAccount): _121.MsgRegisterInterchainAccountAmino;
                        fromAminoMsg(object: _121.MsgRegisterInterchainAccountAminoMsg): _121.MsgRegisterInterchainAccount;
                        toAminoMsg(message: _121.MsgRegisterInterchainAccount): _121.MsgRegisterInterchainAccountAminoMsg;
                        fromProtoMsg(message: _121.MsgRegisterInterchainAccountProtoMsg): _121.MsgRegisterInterchainAccount;
                        toProto(message: _121.MsgRegisterInterchainAccount): Uint8Array;
                        toProtoMsg(message: _121.MsgRegisterInterchainAccount): _121.MsgRegisterInterchainAccountProtoMsg;
                    };
                    MsgRegisterInterchainAccountResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _121.MsgRegisterInterchainAccountResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _121.MsgRegisterInterchainAccountResponse;
                        fromPartial(object: {
                            channelId?: string;
                            portId?: string;
                        }): _121.MsgRegisterInterchainAccountResponse;
                        fromAmino(object: _121.MsgRegisterInterchainAccountResponseAmino): _121.MsgRegisterInterchainAccountResponse;
                        toAmino(message: _121.MsgRegisterInterchainAccountResponse): _121.MsgRegisterInterchainAccountResponseAmino;
                        fromAminoMsg(object: _121.MsgRegisterInterchainAccountResponseAminoMsg): _121.MsgRegisterInterchainAccountResponse;
                        toAminoMsg(message: _121.MsgRegisterInterchainAccountResponse): _121.MsgRegisterInterchainAccountResponseAminoMsg;
                        fromProtoMsg(message: _121.MsgRegisterInterchainAccountResponseProtoMsg): _121.MsgRegisterInterchainAccountResponse;
                        toProto(message: _121.MsgRegisterInterchainAccountResponse): Uint8Array;
                        toProtoMsg(message: _121.MsgRegisterInterchainAccountResponse): _121.MsgRegisterInterchainAccountResponseProtoMsg;
                    };
                    MsgSendTx: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _121.MsgSendTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _121.MsgSendTx;
                        fromPartial(object: {
                            owner?: string;
                            connectionId?: string;
                            packetData?: {
                                type?: _128.Type;
                                data?: Uint8Array;
                                memo?: string;
                            };
                            relativeTimeout?: bigint;
                        }): _121.MsgSendTx;
                        fromAmino(object: _121.MsgSendTxAmino): _121.MsgSendTx;
                        toAmino(message: _121.MsgSendTx): _121.MsgSendTxAmino;
                        fromAminoMsg(object: _121.MsgSendTxAminoMsg): _121.MsgSendTx;
                        toAminoMsg(message: _121.MsgSendTx): _121.MsgSendTxAminoMsg;
                        fromProtoMsg(message: _121.MsgSendTxProtoMsg): _121.MsgSendTx;
                        toProto(message: _121.MsgSendTx): Uint8Array;
                        toProtoMsg(message: _121.MsgSendTx): _121.MsgSendTxProtoMsg;
                    };
                    MsgSendTxResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _121.MsgSendTxResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _121.MsgSendTxResponse;
                        fromPartial(object: {
                            sequence?: bigint;
                        }): _121.MsgSendTxResponse;
                        fromAmino(object: _121.MsgSendTxResponseAmino): _121.MsgSendTxResponse;
                        toAmino(message: _121.MsgSendTxResponse): _121.MsgSendTxResponseAmino;
                        fromAminoMsg(object: _121.MsgSendTxResponseAminoMsg): _121.MsgSendTxResponse;
                        toAminoMsg(message: _121.MsgSendTxResponse): _121.MsgSendTxResponseAminoMsg;
                        fromProtoMsg(message: _121.MsgSendTxResponseProtoMsg): _121.MsgSendTxResponse;
                        toProto(message: _121.MsgSendTxResponse): Uint8Array;
                        toProtoMsg(message: _121.MsgSendTxResponse): _121.MsgSendTxResponseProtoMsg;
                    };
                    MsgUpdateParams: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _121.MsgUpdateParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _121.MsgUpdateParams;
                        fromPartial(object: {
                            signer?: string;
                            params?: {
                                controllerEnabled?: boolean;
                            };
                        }): _121.MsgUpdateParams;
                        fromAmino(object: _121.MsgUpdateParamsAmino): _121.MsgUpdateParams;
                        toAmino(message: _121.MsgUpdateParams): _121.MsgUpdateParamsAmino;
                        fromAminoMsg(object: _121.MsgUpdateParamsAminoMsg): _121.MsgUpdateParams;
                        toAminoMsg(message: _121.MsgUpdateParams): _121.MsgUpdateParamsAminoMsg;
                        fromProtoMsg(message: _121.MsgUpdateParamsProtoMsg): _121.MsgUpdateParams;
                        toProto(message: _121.MsgUpdateParams): Uint8Array;
                        toProtoMsg(message: _121.MsgUpdateParams): _121.MsgUpdateParamsProtoMsg;
                    };
                    MsgUpdateParamsResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(_: _121.MsgUpdateParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _121.MsgUpdateParamsResponse;
                        fromPartial(_: {}): _121.MsgUpdateParamsResponse;
                        fromAmino(_: _121.MsgUpdateParamsResponseAmino): _121.MsgUpdateParamsResponse;
                        toAmino(_: _121.MsgUpdateParamsResponse): _121.MsgUpdateParamsResponseAmino;
                        fromAminoMsg(object: _121.MsgUpdateParamsResponseAminoMsg): _121.MsgUpdateParamsResponse;
                        toAminoMsg(message: _121.MsgUpdateParamsResponse): _121.MsgUpdateParamsResponseAminoMsg;
                        fromProtoMsg(message: _121.MsgUpdateParamsResponseProtoMsg): _121.MsgUpdateParamsResponse;
                        toProto(message: _121.MsgUpdateParamsResponse): Uint8Array;
                        toProtoMsg(message: _121.MsgUpdateParamsResponse): _121.MsgUpdateParamsResponseProtoMsg;
                    };
                    QueryInterchainAccountRequest: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _120.QueryInterchainAccountRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _120.QueryInterchainAccountRequest;
                        fromPartial(object: {
                            owner?: string;
                            connectionId?: string;
                        }): _120.QueryInterchainAccountRequest;
                        fromAmino(object: _120.QueryInterchainAccountRequestAmino): _120.QueryInterchainAccountRequest;
                        toAmino(message: _120.QueryInterchainAccountRequest): _120.QueryInterchainAccountRequestAmino;
                        fromAminoMsg(object: _120.QueryInterchainAccountRequestAminoMsg): _120.QueryInterchainAccountRequest;
                        toAminoMsg(message: _120.QueryInterchainAccountRequest): _120.QueryInterchainAccountRequestAminoMsg;
                        fromProtoMsg(message: _120.QueryInterchainAccountRequestProtoMsg): _120.QueryInterchainAccountRequest;
                        toProto(message: _120.QueryInterchainAccountRequest): Uint8Array;
                        toProtoMsg(message: _120.QueryInterchainAccountRequest): _120.QueryInterchainAccountRequestProtoMsg;
                    };
                    QueryInterchainAccountResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _120.QueryInterchainAccountResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _120.QueryInterchainAccountResponse;
                        fromPartial(object: {
                            address?: string;
                        }): _120.QueryInterchainAccountResponse;
                        fromAmino(object: _120.QueryInterchainAccountResponseAmino): _120.QueryInterchainAccountResponse;
                        toAmino(message: _120.QueryInterchainAccountResponse): _120.QueryInterchainAccountResponseAmino;
                        fromAminoMsg(object: _120.QueryInterchainAccountResponseAminoMsg): _120.QueryInterchainAccountResponse;
                        toAminoMsg(message: _120.QueryInterchainAccountResponse): _120.QueryInterchainAccountResponseAminoMsg;
                        fromProtoMsg(message: _120.QueryInterchainAccountResponseProtoMsg): _120.QueryInterchainAccountResponse;
                        toProto(message: _120.QueryInterchainAccountResponse): Uint8Array;
                        toProtoMsg(message: _120.QueryInterchainAccountResponse): _120.QueryInterchainAccountResponseProtoMsg;
                    };
                    QueryParamsRequest: {
                        typeUrl: string;
                        aminoType: string;
                        encode(_: _120.QueryParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _120.QueryParamsRequest;
                        fromPartial(_: {}): _120.QueryParamsRequest;
                        fromAmino(_: _120.QueryParamsRequestAmino): _120.QueryParamsRequest;
                        toAmino(_: _120.QueryParamsRequest): _120.QueryParamsRequestAmino;
                        fromAminoMsg(object: _120.QueryParamsRequestAminoMsg): _120.QueryParamsRequest;
                        toAminoMsg(message: _120.QueryParamsRequest): _120.QueryParamsRequestAminoMsg;
                        fromProtoMsg(message: _120.QueryParamsRequestProtoMsg): _120.QueryParamsRequest;
                        toProto(message: _120.QueryParamsRequest): Uint8Array;
                        toProtoMsg(message: _120.QueryParamsRequest): _120.QueryParamsRequestProtoMsg;
                    };
                    QueryParamsResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _120.QueryParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _120.QueryParamsResponse;
                        fromPartial(object: {
                            params?: {
                                controllerEnabled?: boolean;
                            };
                        }): _120.QueryParamsResponse;
                        fromAmino(object: _120.QueryParamsResponseAmino): _120.QueryParamsResponse;
                        toAmino(message: _120.QueryParamsResponse): _120.QueryParamsResponseAmino;
                        fromAminoMsg(object: _120.QueryParamsResponseAminoMsg): _120.QueryParamsResponse;
                        toAminoMsg(message: _120.QueryParamsResponse): _120.QueryParamsResponseAminoMsg;
                        fromProtoMsg(message: _120.QueryParamsResponseProtoMsg): _120.QueryParamsResponse;
                        toProto(message: _120.QueryParamsResponse): Uint8Array;
                        toProtoMsg(message: _120.QueryParamsResponse): _120.QueryParamsResponseProtoMsg;
                    };
                    Params: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _119.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _119.Params;
                        fromPartial(object: {
                            controllerEnabled?: boolean;
                        }): _119.Params;
                        fromAmino(object: _119.ParamsAmino): _119.Params;
                        toAmino(message: _119.Params): _119.ParamsAmino;
                        fromAminoMsg(object: _119.ParamsAminoMsg): _119.Params;
                        toAminoMsg(message: _119.Params): _119.ParamsAminoMsg;
                        fromProtoMsg(message: _119.ParamsProtoMsg): _119.Params;
                        toProto(message: _119.Params): Uint8Array;
                        toProtoMsg(message: _119.Params): _119.ParamsProtoMsg;
                    };
                };
            }
            namespace genesis {
                const v1: {
                    GenesisState: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _122.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _122.GenesisState;
                        fromPartial(object: {
                            controllerGenesisState?: {
                                activeChannels?: {
                                    connectionId?: string;
                                    portId?: string;
                                    channelId?: string;
                                    isMiddlewareEnabled?: boolean;
                                }[];
                                interchainAccounts?: {
                                    connectionId?: string;
                                    portId?: string;
                                    accountAddress?: string;
                                }[];
                                ports?: string[];
                                params?: {
                                    controllerEnabled?: boolean;
                                };
                            };
                            hostGenesisState?: {
                                activeChannels?: {
                                    connectionId?: string;
                                    portId?: string;
                                    channelId?: string;
                                    isMiddlewareEnabled?: boolean;
                                }[];
                                interchainAccounts?: {
                                    connectionId?: string;
                                    portId?: string;
                                    accountAddress?: string;
                                }[];
                                port?: string;
                                params?: {
                                    hostEnabled?: boolean;
                                    allowMessages?: string[];
                                };
                            };
                        }): _122.GenesisState;
                        fromAmino(object: _122.GenesisStateAmino): _122.GenesisState;
                        toAmino(message: _122.GenesisState): _122.GenesisStateAmino;
                        fromAminoMsg(object: _122.GenesisStateAminoMsg): _122.GenesisState;
                        toAminoMsg(message: _122.GenesisState): _122.GenesisStateAminoMsg;
                        fromProtoMsg(message: _122.GenesisStateProtoMsg): _122.GenesisState;
                        toProto(message: _122.GenesisState): Uint8Array;
                        toProtoMsg(message: _122.GenesisState): _122.GenesisStateProtoMsg;
                    };
                    ControllerGenesisState: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _122.ControllerGenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _122.ControllerGenesisState;
                        fromPartial(object: {
                            activeChannels?: {
                                connectionId?: string;
                                portId?: string;
                                channelId?: string;
                                isMiddlewareEnabled?: boolean;
                            }[];
                            interchainAccounts?: {
                                connectionId?: string;
                                portId?: string;
                                accountAddress?: string;
                            }[];
                            ports?: string[];
                            params?: {
                                controllerEnabled?: boolean;
                            };
                        }): _122.ControllerGenesisState;
                        fromAmino(object: _122.ControllerGenesisStateAmino): _122.ControllerGenesisState;
                        toAmino(message: _122.ControllerGenesisState): _122.ControllerGenesisStateAmino;
                        fromAminoMsg(object: _122.ControllerGenesisStateAminoMsg): _122.ControllerGenesisState;
                        toAminoMsg(message: _122.ControllerGenesisState): _122.ControllerGenesisStateAminoMsg;
                        fromProtoMsg(message: _122.ControllerGenesisStateProtoMsg): _122.ControllerGenesisState;
                        toProto(message: _122.ControllerGenesisState): Uint8Array;
                        toProtoMsg(message: _122.ControllerGenesisState): _122.ControllerGenesisStateProtoMsg;
                    };
                    HostGenesisState: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _122.HostGenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _122.HostGenesisState;
                        fromPartial(object: {
                            activeChannels?: {
                                connectionId?: string;
                                portId?: string;
                                channelId?: string;
                                isMiddlewareEnabled?: boolean;
                            }[];
                            interchainAccounts?: {
                                connectionId?: string;
                                portId?: string;
                                accountAddress?: string;
                            }[];
                            port?: string;
                            params?: {
                                hostEnabled?: boolean;
                                allowMessages?: string[];
                            };
                        }): _122.HostGenesisState;
                        fromAmino(object: _122.HostGenesisStateAmino): _122.HostGenesisState;
                        toAmino(message: _122.HostGenesisState): _122.HostGenesisStateAmino;
                        fromAminoMsg(object: _122.HostGenesisStateAminoMsg): _122.HostGenesisState;
                        toAminoMsg(message: _122.HostGenesisState): _122.HostGenesisStateAminoMsg;
                        fromProtoMsg(message: _122.HostGenesisStateProtoMsg): _122.HostGenesisState;
                        toProto(message: _122.HostGenesisState): Uint8Array;
                        toProtoMsg(message: _122.HostGenesisState): _122.HostGenesisStateProtoMsg;
                    };
                    ActiveChannel: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _122.ActiveChannel, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _122.ActiveChannel;
                        fromPartial(object: {
                            connectionId?: string;
                            portId?: string;
                            channelId?: string;
                            isMiddlewareEnabled?: boolean;
                        }): _122.ActiveChannel;
                        fromAmino(object: _122.ActiveChannelAmino): _122.ActiveChannel;
                        toAmino(message: _122.ActiveChannel): _122.ActiveChannelAmino;
                        fromAminoMsg(object: _122.ActiveChannelAminoMsg): _122.ActiveChannel;
                        toAminoMsg(message: _122.ActiveChannel): _122.ActiveChannelAminoMsg;
                        fromProtoMsg(message: _122.ActiveChannelProtoMsg): _122.ActiveChannel;
                        toProto(message: _122.ActiveChannel): Uint8Array;
                        toProtoMsg(message: _122.ActiveChannel): _122.ActiveChannelProtoMsg;
                    };
                    RegisteredInterchainAccount: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _122.RegisteredInterchainAccount, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _122.RegisteredInterchainAccount;
                        fromPartial(object: {
                            connectionId?: string;
                            portId?: string;
                            accountAddress?: string;
                        }): _122.RegisteredInterchainAccount;
                        fromAmino(object: _122.RegisteredInterchainAccountAmino): _122.RegisteredInterchainAccount;
                        toAmino(message: _122.RegisteredInterchainAccount): _122.RegisteredInterchainAccountAmino;
                        fromAminoMsg(object: _122.RegisteredInterchainAccountAminoMsg): _122.RegisteredInterchainAccount;
                        toAminoMsg(message: _122.RegisteredInterchainAccount): _122.RegisteredInterchainAccountAminoMsg;
                        fromProtoMsg(message: _122.RegisteredInterchainAccountProtoMsg): _122.RegisteredInterchainAccount;
                        toProto(message: _122.RegisteredInterchainAccount): Uint8Array;
                        toProtoMsg(message: _122.RegisteredInterchainAccount): _122.RegisteredInterchainAccountProtoMsg;
                    };
                };
            }
            namespace host {
                const v1: {
                    MsgClientImpl: typeof _268.MsgClientImpl;
                    QueryClientImpl: typeof _262.QueryClientImpl;
                    createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                        params(request?: _124.QueryParamsRequest): Promise<_124.QueryParamsResponse>;
                    };
                    LCDQueryClient: typeof _256.LCDQueryClient;
                    registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
                    load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
                    MessageComposer: {
                        encoded: {
                            updateParams(value: _125.MsgUpdateParams): {
                                typeUrl: string;
                                value: Uint8Array;
                            };
                        };
                        withTypeUrl: {
                            updateParams(value: _125.MsgUpdateParams): {
                                typeUrl: string;
                                value: _125.MsgUpdateParams;
                            };
                        };
                        fromPartial: {
                            updateParams(value: _125.MsgUpdateParams): {
                                typeUrl: string;
                                value: _125.MsgUpdateParams;
                            };
                        };
                    };
                    AminoConverter: {
                        "/ibc.applications.interchain_accounts.host.v1.MsgUpdateParams": {
                            aminoType: string;
                            toAmino: (message: _125.MsgUpdateParams) => _125.MsgUpdateParamsAmino;
                            fromAmino: (object: _125.MsgUpdateParamsAmino) => _125.MsgUpdateParams;
                        };
                    };
                    MsgUpdateParams: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _125.MsgUpdateParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _125.MsgUpdateParams;
                        fromPartial(object: {
                            signer?: string;
                            params?: {
                                hostEnabled?: boolean;
                                allowMessages?: string[];
                            };
                        }): _125.MsgUpdateParams;
                        fromAmino(object: _125.MsgUpdateParamsAmino): _125.MsgUpdateParams;
                        toAmino(message: _125.MsgUpdateParams): _125.MsgUpdateParamsAmino;
                        fromAminoMsg(object: _125.MsgUpdateParamsAminoMsg): _125.MsgUpdateParams;
                        toAminoMsg(message: _125.MsgUpdateParams): _125.MsgUpdateParamsAminoMsg;
                        fromProtoMsg(message: _125.MsgUpdateParamsProtoMsg): _125.MsgUpdateParams;
                        toProto(message: _125.MsgUpdateParams): Uint8Array;
                        toProtoMsg(message: _125.MsgUpdateParams): _125.MsgUpdateParamsProtoMsg;
                    };
                    MsgUpdateParamsResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(_: _125.MsgUpdateParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _125.MsgUpdateParamsResponse;
                        fromPartial(_: {}): _125.MsgUpdateParamsResponse;
                        fromAmino(_: _125.MsgUpdateParamsResponseAmino): _125.MsgUpdateParamsResponse;
                        toAmino(_: _125.MsgUpdateParamsResponse): _125.MsgUpdateParamsResponseAmino;
                        fromAminoMsg(object: _125.MsgUpdateParamsResponseAminoMsg): _125.MsgUpdateParamsResponse;
                        toAminoMsg(message: _125.MsgUpdateParamsResponse): _125.MsgUpdateParamsResponseAminoMsg;
                        fromProtoMsg(message: _125.MsgUpdateParamsResponseProtoMsg): _125.MsgUpdateParamsResponse;
                        toProto(message: _125.MsgUpdateParamsResponse): Uint8Array;
                        toProtoMsg(message: _125.MsgUpdateParamsResponse): _125.MsgUpdateParamsResponseProtoMsg;
                    };
                    QueryParamsRequest: {
                        typeUrl: string;
                        aminoType: string;
                        encode(_: _124.QueryParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _124.QueryParamsRequest;
                        fromPartial(_: {}): _124.QueryParamsRequest;
                        fromAmino(_: _124.QueryParamsRequestAmino): _124.QueryParamsRequest;
                        toAmino(_: _124.QueryParamsRequest): _124.QueryParamsRequestAmino;
                        fromAminoMsg(object: _124.QueryParamsRequestAminoMsg): _124.QueryParamsRequest;
                        toAminoMsg(message: _124.QueryParamsRequest): _124.QueryParamsRequestAminoMsg;
                        fromProtoMsg(message: _124.QueryParamsRequestProtoMsg): _124.QueryParamsRequest;
                        toProto(message: _124.QueryParamsRequest): Uint8Array;
                        toProtoMsg(message: _124.QueryParamsRequest): _124.QueryParamsRequestProtoMsg;
                    };
                    QueryParamsResponse: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _124.QueryParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _124.QueryParamsResponse;
                        fromPartial(object: {
                            params?: {
                                hostEnabled?: boolean;
                                allowMessages?: string[];
                            };
                        }): _124.QueryParamsResponse;
                        fromAmino(object: _124.QueryParamsResponseAmino): _124.QueryParamsResponse;
                        toAmino(message: _124.QueryParamsResponse): _124.QueryParamsResponseAmino;
                        fromAminoMsg(object: _124.QueryParamsResponseAminoMsg): _124.QueryParamsResponse;
                        toAminoMsg(message: _124.QueryParamsResponse): _124.QueryParamsResponseAminoMsg;
                        fromProtoMsg(message: _124.QueryParamsResponseProtoMsg): _124.QueryParamsResponse;
                        toProto(message: _124.QueryParamsResponse): Uint8Array;
                        toProtoMsg(message: _124.QueryParamsResponse): _124.QueryParamsResponseProtoMsg;
                    };
                    Params: {
                        typeUrl: string;
                        aminoType: string;
                        encode(message: _123.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                        decode(input: Uint8Array | import("..").BinaryReader, length?: number): _123.Params;
                        fromPartial(object: {
                            hostEnabled?: boolean;
                            allowMessages?: string[];
                        }): _123.Params;
                        fromAmino(object: _123.ParamsAmino): _123.Params;
                        toAmino(message: _123.Params): _123.ParamsAmino;
                        fromAminoMsg(object: _123.ParamsAminoMsg): _123.Params;
                        toAminoMsg(message: _123.Params): _123.ParamsAminoMsg;
                        fromProtoMsg(message: _123.ParamsProtoMsg): _123.Params;
                        toProto(message: _123.Params): Uint8Array;
                        toProtoMsg(message: _123.Params): _123.ParamsProtoMsg;
                    };
                };
            }
            const v1: {
                typeFromJSON(object: any): _128.Type;
                typeToJSON(object: _128.Type): string;
                Type: typeof _128.Type;
                TypeSDKType: typeof _128.Type;
                TypeAmino: typeof _128.Type;
                InterchainAccountPacketData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _128.InterchainAccountPacketData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _128.InterchainAccountPacketData;
                    fromPartial(object: {
                        type?: _128.Type;
                        data?: Uint8Array;
                        memo?: string;
                    }): _128.InterchainAccountPacketData;
                    fromAmino(object: _128.InterchainAccountPacketDataAmino): _128.InterchainAccountPacketData;
                    toAmino(message: _128.InterchainAccountPacketData): _128.InterchainAccountPacketDataAmino;
                    fromAminoMsg(object: _128.InterchainAccountPacketDataAminoMsg): _128.InterchainAccountPacketData;
                    toAminoMsg(message: _128.InterchainAccountPacketData): _128.InterchainAccountPacketDataAminoMsg;
                    fromProtoMsg(message: _128.InterchainAccountPacketDataProtoMsg): _128.InterchainAccountPacketData;
                    toProto(message: _128.InterchainAccountPacketData): Uint8Array;
                    toProtoMsg(message: _128.InterchainAccountPacketData): _128.InterchainAccountPacketDataProtoMsg;
                };
                CosmosTx: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _128.CosmosTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _128.CosmosTx;
                    fromPartial(object: {
                        messages?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }): _128.CosmosTx;
                    fromAmino(object: _128.CosmosTxAmino): _128.CosmosTx;
                    toAmino(message: _128.CosmosTx): _128.CosmosTxAmino;
                    fromAminoMsg(object: _128.CosmosTxAminoMsg): _128.CosmosTx;
                    toAminoMsg(message: _128.CosmosTx): _128.CosmosTxAminoMsg;
                    fromProtoMsg(message: _128.CosmosTxProtoMsg): _128.CosmosTx;
                    toProto(message: _128.CosmosTx): Uint8Array;
                    toProtoMsg(message: _128.CosmosTx): _128.CosmosTxProtoMsg;
                };
                Metadata: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _127.Metadata, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _127.Metadata;
                    fromPartial(object: {
                        version?: string;
                        controllerConnectionId?: string;
                        hostConnectionId?: string;
                        address?: string;
                        encoding?: string;
                        txType?: string;
                    }): _127.Metadata;
                    fromAmino(object: _127.MetadataAmino): _127.Metadata;
                    toAmino(message: _127.Metadata): _127.MetadataAmino;
                    fromAminoMsg(object: _127.MetadataAminoMsg): _127.Metadata;
                    toAminoMsg(message: _127.Metadata): _127.MetadataAminoMsg;
                    fromProtoMsg(message: _127.MetadataProtoMsg): _127.Metadata;
                    toProto(message: _127.Metadata): Uint8Array;
                    toProtoMsg(message: _127.Metadata): _127.MetadataProtoMsg;
                };
                InterchainAccount: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _126.InterchainAccount, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _126.InterchainAccount;
                    fromPartial(object: {
                        $typeUrl?: "/ibc.applications.interchain_accounts.v1.InterchainAccount";
                        baseAccount?: {
                            $typeUrl?: "/cosmos.auth.v1beta1.BaseAccount";
                            address?: string;
                            pubKey?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: bigint;
                            sequence?: bigint;
                        };
                        accountOwner?: string;
                    }): _126.InterchainAccount;
                    fromAmino(object: _126.InterchainAccountAmino): _126.InterchainAccount;
                    toAmino(message: _126.InterchainAccount): _126.InterchainAccountAmino;
                    fromAminoMsg(object: _126.InterchainAccountAminoMsg): _126.InterchainAccount;
                    toAminoMsg(message: _126.InterchainAccount): _126.InterchainAccountAminoMsg;
                    fromProtoMsg(message: _126.InterchainAccountProtoMsg): _126.InterchainAccount;
                    toProto(message: _126.InterchainAccount): Uint8Array;
                    toProtoMsg(message: _126.InterchainAccount): _126.InterchainAccountProtoMsg;
                };
            };
        }
        namespace transfer {
            const v1: {
                MsgClientImpl: typeof _269.MsgClientImpl;
                QueryClientImpl: typeof _263.QueryClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    denomTraces(request?: _131.QueryDenomTracesRequest): Promise<_131.QueryDenomTracesResponse>;
                    denomTrace(request: _131.QueryDenomTraceRequest): Promise<_131.QueryDenomTraceResponse>;
                    params(request?: _131.QueryParamsRequest): Promise<_131.QueryParamsResponse>;
                    denomHash(request: _131.QueryDenomHashRequest): Promise<_131.QueryDenomHashResponse>;
                    escrowAddress(request: _131.QueryEscrowAddressRequest): Promise<_131.QueryEscrowAddressResponse>;
                    totalEscrowForDenom(request: _131.QueryTotalEscrowForDenomRequest): Promise<_131.QueryTotalEscrowForDenomResponse>;
                };
                LCDQueryClient: typeof _257.LCDQueryClient;
                registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
                load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
                MessageComposer: {
                    encoded: {
                        transfer(value: _133.MsgTransfer): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        updateParams(value: _133.MsgUpdateParams): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                    };
                    withTypeUrl: {
                        transfer(value: _133.MsgTransfer): {
                            typeUrl: string;
                            value: _133.MsgTransfer;
                        };
                        updateParams(value: _133.MsgUpdateParams): {
                            typeUrl: string;
                            value: _133.MsgUpdateParams;
                        };
                    };
                    fromPartial: {
                        transfer(value: _133.MsgTransfer): {
                            typeUrl: string;
                            value: _133.MsgTransfer;
                        };
                        updateParams(value: _133.MsgUpdateParams): {
                            typeUrl: string;
                            value: _133.MsgUpdateParams;
                        };
                    };
                };
                AminoConverter: {
                    "/ibc.applications.transfer.v1.MsgTransfer": {
                        aminoType: string;
                        toAmino: (message: _133.MsgTransfer) => _133.MsgTransferAmino;
                        fromAmino: (object: _133.MsgTransferAmino) => _133.MsgTransfer;
                    };
                    "/ibc.applications.transfer.v1.MsgUpdateParams": {
                        aminoType: string;
                        toAmino: (message: _133.MsgUpdateParams) => _133.MsgUpdateParamsAmino;
                        fromAmino: (object: _133.MsgUpdateParamsAmino) => _133.MsgUpdateParams;
                    };
                };
                MsgTransfer: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _133.MsgTransfer, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _133.MsgTransfer;
                    fromPartial(object: {
                        sourcePort?: string;
                        sourceChannel?: string;
                        token?: {
                            denom?: string;
                            amount?: string;
                        };
                        sender?: string;
                        receiver?: string;
                        timeoutHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        timeoutTimestamp?: bigint;
                        memo?: string;
                    }): _133.MsgTransfer;
                    fromAmino(object: _133.MsgTransferAmino): _133.MsgTransfer;
                    toAmino(message: _133.MsgTransfer): _133.MsgTransferAmino;
                    fromAminoMsg(object: _133.MsgTransferAminoMsg): _133.MsgTransfer;
                    toAminoMsg(message: _133.MsgTransfer): _133.MsgTransferAminoMsg;
                    fromProtoMsg(message: _133.MsgTransferProtoMsg): _133.MsgTransfer;
                    toProto(message: _133.MsgTransfer): Uint8Array;
                    toProtoMsg(message: _133.MsgTransfer): _133.MsgTransferProtoMsg;
                };
                MsgTransferResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _133.MsgTransferResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _133.MsgTransferResponse;
                    fromPartial(object: {
                        sequence?: bigint;
                    }): _133.MsgTransferResponse;
                    fromAmino(object: _133.MsgTransferResponseAmino): _133.MsgTransferResponse;
                    toAmino(message: _133.MsgTransferResponse): _133.MsgTransferResponseAmino;
                    fromAminoMsg(object: _133.MsgTransferResponseAminoMsg): _133.MsgTransferResponse;
                    toAminoMsg(message: _133.MsgTransferResponse): _133.MsgTransferResponseAminoMsg;
                    fromProtoMsg(message: _133.MsgTransferResponseProtoMsg): _133.MsgTransferResponse;
                    toProto(message: _133.MsgTransferResponse): Uint8Array;
                    toProtoMsg(message: _133.MsgTransferResponse): _133.MsgTransferResponseProtoMsg;
                };
                MsgUpdateParams: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _133.MsgUpdateParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _133.MsgUpdateParams;
                    fromPartial(object: {
                        signer?: string;
                        params?: {
                            allowedClients?: string[];
                        };
                    }): _133.MsgUpdateParams;
                    fromAmino(object: _133.MsgUpdateParamsAmino): _133.MsgUpdateParams;
                    toAmino(message: _133.MsgUpdateParams): _133.MsgUpdateParamsAmino;
                    fromAminoMsg(object: _133.MsgUpdateParamsAminoMsg): _133.MsgUpdateParams;
                    toAminoMsg(message: _133.MsgUpdateParams): _133.MsgUpdateParamsAminoMsg;
                    fromProtoMsg(message: _133.MsgUpdateParamsProtoMsg): _133.MsgUpdateParams;
                    toProto(message: _133.MsgUpdateParams): Uint8Array;
                    toProtoMsg(message: _133.MsgUpdateParams): _133.MsgUpdateParamsProtoMsg;
                };
                MsgUpdateParamsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _133.MsgUpdateParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _133.MsgUpdateParamsResponse;
                    fromPartial(_: {}): _133.MsgUpdateParamsResponse;
                    fromAmino(_: _133.MsgUpdateParamsResponseAmino): _133.MsgUpdateParamsResponse;
                    toAmino(_: _133.MsgUpdateParamsResponse): _133.MsgUpdateParamsResponseAmino;
                    fromAminoMsg(object: _133.MsgUpdateParamsResponseAminoMsg): _133.MsgUpdateParamsResponse;
                    toAminoMsg(message: _133.MsgUpdateParamsResponse): _133.MsgUpdateParamsResponseAminoMsg;
                    fromProtoMsg(message: _133.MsgUpdateParamsResponseProtoMsg): _133.MsgUpdateParamsResponse;
                    toProto(message: _133.MsgUpdateParamsResponse): Uint8Array;
                    toProtoMsg(message: _133.MsgUpdateParamsResponse): _133.MsgUpdateParamsResponseProtoMsg;
                };
                DenomTrace: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _132.DenomTrace, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _132.DenomTrace;
                    fromPartial(object: {
                        path?: string;
                        baseDenom?: string;
                    }): _132.DenomTrace;
                    fromAmino(object: _132.DenomTraceAmino): _132.DenomTrace;
                    toAmino(message: _132.DenomTrace): _132.DenomTraceAmino;
                    fromAminoMsg(object: _132.DenomTraceAminoMsg): _132.DenomTrace;
                    toAminoMsg(message: _132.DenomTrace): _132.DenomTraceAminoMsg;
                    fromProtoMsg(message: _132.DenomTraceProtoMsg): _132.DenomTrace;
                    toProto(message: _132.DenomTrace): Uint8Array;
                    toProtoMsg(message: _132.DenomTrace): _132.DenomTraceProtoMsg;
                };
                Params: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _132.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _132.Params;
                    fromPartial(object: {
                        sendEnabled?: boolean;
                        receiveEnabled?: boolean;
                    }): _132.Params;
                    fromAmino(object: _132.ParamsAmino): _132.Params;
                    toAmino(message: _132.Params): _132.ParamsAmino;
                    fromAminoMsg(object: _132.ParamsAminoMsg): _132.Params;
                    toAminoMsg(message: _132.Params): _132.ParamsAminoMsg;
                    fromProtoMsg(message: _132.ParamsProtoMsg): _132.Params;
                    toProto(message: _132.Params): Uint8Array;
                    toProtoMsg(message: _132.Params): _132.ParamsProtoMsg;
                };
                QueryDenomTraceRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryDenomTraceRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryDenomTraceRequest;
                    fromPartial(object: {
                        hash?: string;
                    }): _131.QueryDenomTraceRequest;
                    fromAmino(object: _131.QueryDenomTraceRequestAmino): _131.QueryDenomTraceRequest;
                    toAmino(message: _131.QueryDenomTraceRequest): _131.QueryDenomTraceRequestAmino;
                    fromAminoMsg(object: _131.QueryDenomTraceRequestAminoMsg): _131.QueryDenomTraceRequest;
                    toAminoMsg(message: _131.QueryDenomTraceRequest): _131.QueryDenomTraceRequestAminoMsg;
                    fromProtoMsg(message: _131.QueryDenomTraceRequestProtoMsg): _131.QueryDenomTraceRequest;
                    toProto(message: _131.QueryDenomTraceRequest): Uint8Array;
                    toProtoMsg(message: _131.QueryDenomTraceRequest): _131.QueryDenomTraceRequestProtoMsg;
                };
                QueryDenomTraceResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryDenomTraceResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryDenomTraceResponse;
                    fromPartial(object: {
                        denomTrace?: {
                            path?: string;
                            baseDenom?: string;
                        };
                    }): _131.QueryDenomTraceResponse;
                    fromAmino(object: _131.QueryDenomTraceResponseAmino): _131.QueryDenomTraceResponse;
                    toAmino(message: _131.QueryDenomTraceResponse): _131.QueryDenomTraceResponseAmino;
                    fromAminoMsg(object: _131.QueryDenomTraceResponseAminoMsg): _131.QueryDenomTraceResponse;
                    toAminoMsg(message: _131.QueryDenomTraceResponse): _131.QueryDenomTraceResponseAminoMsg;
                    fromProtoMsg(message: _131.QueryDenomTraceResponseProtoMsg): _131.QueryDenomTraceResponse;
                    toProto(message: _131.QueryDenomTraceResponse): Uint8Array;
                    toProtoMsg(message: _131.QueryDenomTraceResponse): _131.QueryDenomTraceResponseProtoMsg;
                };
                QueryDenomTracesRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryDenomTracesRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryDenomTracesRequest;
                    fromPartial(object: {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _131.QueryDenomTracesRequest;
                    fromAmino(object: _131.QueryDenomTracesRequestAmino): _131.QueryDenomTracesRequest;
                    toAmino(message: _131.QueryDenomTracesRequest): _131.QueryDenomTracesRequestAmino;
                    fromAminoMsg(object: _131.QueryDenomTracesRequestAminoMsg): _131.QueryDenomTracesRequest;
                    toAminoMsg(message: _131.QueryDenomTracesRequest): _131.QueryDenomTracesRequestAminoMsg;
                    fromProtoMsg(message: _131.QueryDenomTracesRequestProtoMsg): _131.QueryDenomTracesRequest;
                    toProto(message: _131.QueryDenomTracesRequest): Uint8Array;
                    toProtoMsg(message: _131.QueryDenomTracesRequest): _131.QueryDenomTracesRequestProtoMsg;
                };
                QueryDenomTracesResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryDenomTracesResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryDenomTracesResponse;
                    fromPartial(object: {
                        denomTraces?: {
                            path?: string;
                            baseDenom?: string;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                    }): _131.QueryDenomTracesResponse;
                    fromAmino(object: _131.QueryDenomTracesResponseAmino): _131.QueryDenomTracesResponse;
                    toAmino(message: _131.QueryDenomTracesResponse): _131.QueryDenomTracesResponseAmino;
                    fromAminoMsg(object: _131.QueryDenomTracesResponseAminoMsg): _131.QueryDenomTracesResponse;
                    toAminoMsg(message: _131.QueryDenomTracesResponse): _131.QueryDenomTracesResponseAminoMsg;
                    fromProtoMsg(message: _131.QueryDenomTracesResponseProtoMsg): _131.QueryDenomTracesResponse;
                    toProto(message: _131.QueryDenomTracesResponse): Uint8Array;
                    toProtoMsg(message: _131.QueryDenomTracesResponse): _131.QueryDenomTracesResponseProtoMsg;
                };
                QueryParamsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _131.QueryParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryParamsRequest;
                    fromPartial(_: {}): _131.QueryParamsRequest;
                    fromAmino(_: _131.QueryParamsRequestAmino): _131.QueryParamsRequest;
                    toAmino(_: _131.QueryParamsRequest): _131.QueryParamsRequestAmino;
                    fromAminoMsg(object: _131.QueryParamsRequestAminoMsg): _131.QueryParamsRequest;
                    toAminoMsg(message: _131.QueryParamsRequest): _131.QueryParamsRequestAminoMsg;
                    fromProtoMsg(message: _131.QueryParamsRequestProtoMsg): _131.QueryParamsRequest;
                    toProto(message: _131.QueryParamsRequest): Uint8Array;
                    toProtoMsg(message: _131.QueryParamsRequest): _131.QueryParamsRequestProtoMsg;
                };
                QueryParamsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryParamsResponse;
                    fromPartial(object: {
                        params?: {
                            sendEnabled?: boolean;
                            receiveEnabled?: boolean;
                        };
                    }): _131.QueryParamsResponse;
                    fromAmino(object: _131.QueryParamsResponseAmino): _131.QueryParamsResponse;
                    toAmino(message: _131.QueryParamsResponse): _131.QueryParamsResponseAmino;
                    fromAminoMsg(object: _131.QueryParamsResponseAminoMsg): _131.QueryParamsResponse;
                    toAminoMsg(message: _131.QueryParamsResponse): _131.QueryParamsResponseAminoMsg;
                    fromProtoMsg(message: _131.QueryParamsResponseProtoMsg): _131.QueryParamsResponse;
                    toProto(message: _131.QueryParamsResponse): Uint8Array;
                    toProtoMsg(message: _131.QueryParamsResponse): _131.QueryParamsResponseProtoMsg;
                };
                QueryDenomHashRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryDenomHashRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryDenomHashRequest;
                    fromPartial(object: {
                        trace?: string;
                    }): _131.QueryDenomHashRequest;
                    fromAmino(object: _131.QueryDenomHashRequestAmino): _131.QueryDenomHashRequest;
                    toAmino(message: _131.QueryDenomHashRequest): _131.QueryDenomHashRequestAmino;
                    fromAminoMsg(object: _131.QueryDenomHashRequestAminoMsg): _131.QueryDenomHashRequest;
                    toAminoMsg(message: _131.QueryDenomHashRequest): _131.QueryDenomHashRequestAminoMsg;
                    fromProtoMsg(message: _131.QueryDenomHashRequestProtoMsg): _131.QueryDenomHashRequest;
                    toProto(message: _131.QueryDenomHashRequest): Uint8Array;
                    toProtoMsg(message: _131.QueryDenomHashRequest): _131.QueryDenomHashRequestProtoMsg;
                };
                QueryDenomHashResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryDenomHashResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryDenomHashResponse;
                    fromPartial(object: {
                        hash?: string;
                    }): _131.QueryDenomHashResponse;
                    fromAmino(object: _131.QueryDenomHashResponseAmino): _131.QueryDenomHashResponse;
                    toAmino(message: _131.QueryDenomHashResponse): _131.QueryDenomHashResponseAmino;
                    fromAminoMsg(object: _131.QueryDenomHashResponseAminoMsg): _131.QueryDenomHashResponse;
                    toAminoMsg(message: _131.QueryDenomHashResponse): _131.QueryDenomHashResponseAminoMsg;
                    fromProtoMsg(message: _131.QueryDenomHashResponseProtoMsg): _131.QueryDenomHashResponse;
                    toProto(message: _131.QueryDenomHashResponse): Uint8Array;
                    toProtoMsg(message: _131.QueryDenomHashResponse): _131.QueryDenomHashResponseProtoMsg;
                };
                QueryEscrowAddressRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryEscrowAddressRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryEscrowAddressRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                    }): _131.QueryEscrowAddressRequest;
                    fromAmino(object: _131.QueryEscrowAddressRequestAmino): _131.QueryEscrowAddressRequest;
                    toAmino(message: _131.QueryEscrowAddressRequest): _131.QueryEscrowAddressRequestAmino;
                    fromAminoMsg(object: _131.QueryEscrowAddressRequestAminoMsg): _131.QueryEscrowAddressRequest;
                    toAminoMsg(message: _131.QueryEscrowAddressRequest): _131.QueryEscrowAddressRequestAminoMsg;
                    fromProtoMsg(message: _131.QueryEscrowAddressRequestProtoMsg): _131.QueryEscrowAddressRequest;
                    toProto(message: _131.QueryEscrowAddressRequest): Uint8Array;
                    toProtoMsg(message: _131.QueryEscrowAddressRequest): _131.QueryEscrowAddressRequestProtoMsg;
                };
                QueryEscrowAddressResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryEscrowAddressResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryEscrowAddressResponse;
                    fromPartial(object: {
                        escrowAddress?: string;
                    }): _131.QueryEscrowAddressResponse;
                    fromAmino(object: _131.QueryEscrowAddressResponseAmino): _131.QueryEscrowAddressResponse;
                    toAmino(message: _131.QueryEscrowAddressResponse): _131.QueryEscrowAddressResponseAmino;
                    fromAminoMsg(object: _131.QueryEscrowAddressResponseAminoMsg): _131.QueryEscrowAddressResponse;
                    toAminoMsg(message: _131.QueryEscrowAddressResponse): _131.QueryEscrowAddressResponseAminoMsg;
                    fromProtoMsg(message: _131.QueryEscrowAddressResponseProtoMsg): _131.QueryEscrowAddressResponse;
                    toProto(message: _131.QueryEscrowAddressResponse): Uint8Array;
                    toProtoMsg(message: _131.QueryEscrowAddressResponse): _131.QueryEscrowAddressResponseProtoMsg;
                };
                QueryTotalEscrowForDenomRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryTotalEscrowForDenomRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryTotalEscrowForDenomRequest;
                    fromPartial(object: {
                        denom?: string;
                    }): _131.QueryTotalEscrowForDenomRequest;
                    fromAmino(object: _131.QueryTotalEscrowForDenomRequestAmino): _131.QueryTotalEscrowForDenomRequest;
                    toAmino(message: _131.QueryTotalEscrowForDenomRequest): _131.QueryTotalEscrowForDenomRequestAmino;
                    fromAminoMsg(object: _131.QueryTotalEscrowForDenomRequestAminoMsg): _131.QueryTotalEscrowForDenomRequest;
                    toAminoMsg(message: _131.QueryTotalEscrowForDenomRequest): _131.QueryTotalEscrowForDenomRequestAminoMsg;
                    fromProtoMsg(message: _131.QueryTotalEscrowForDenomRequestProtoMsg): _131.QueryTotalEscrowForDenomRequest;
                    toProto(message: _131.QueryTotalEscrowForDenomRequest): Uint8Array;
                    toProtoMsg(message: _131.QueryTotalEscrowForDenomRequest): _131.QueryTotalEscrowForDenomRequestProtoMsg;
                };
                QueryTotalEscrowForDenomResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _131.QueryTotalEscrowForDenomResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _131.QueryTotalEscrowForDenomResponse;
                    fromPartial(object: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        };
                    }): _131.QueryTotalEscrowForDenomResponse;
                    fromAmino(object: _131.QueryTotalEscrowForDenomResponseAmino): _131.QueryTotalEscrowForDenomResponse;
                    toAmino(message: _131.QueryTotalEscrowForDenomResponse): _131.QueryTotalEscrowForDenomResponseAmino;
                    fromAminoMsg(object: _131.QueryTotalEscrowForDenomResponseAminoMsg): _131.QueryTotalEscrowForDenomResponse;
                    toAminoMsg(message: _131.QueryTotalEscrowForDenomResponse): _131.QueryTotalEscrowForDenomResponseAminoMsg;
                    fromProtoMsg(message: _131.QueryTotalEscrowForDenomResponseProtoMsg): _131.QueryTotalEscrowForDenomResponse;
                    toProto(message: _131.QueryTotalEscrowForDenomResponse): Uint8Array;
                    toProtoMsg(message: _131.QueryTotalEscrowForDenomResponse): _131.QueryTotalEscrowForDenomResponseProtoMsg;
                };
                GenesisState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _130.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _130.GenesisState;
                    fromPartial(object: {
                        portId?: string;
                        denomTraces?: {
                            path?: string;
                            baseDenom?: string;
                        }[];
                        params?: {
                            sendEnabled?: boolean;
                            receiveEnabled?: boolean;
                        };
                        totalEscrowed?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }): _130.GenesisState;
                    fromAmino(object: _130.GenesisStateAmino): _130.GenesisState;
                    toAmino(message: _130.GenesisState): _130.GenesisStateAmino;
                    fromAminoMsg(object: _130.GenesisStateAminoMsg): _130.GenesisState;
                    toAminoMsg(message: _130.GenesisState): _130.GenesisStateAminoMsg;
                    fromProtoMsg(message: _130.GenesisStateProtoMsg): _130.GenesisState;
                    toProto(message: _130.GenesisState): Uint8Array;
                    toProtoMsg(message: _130.GenesisState): _130.GenesisStateProtoMsg;
                };
                Allocation: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _129.Allocation, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _129.Allocation;
                    fromPartial(object: {
                        sourcePort?: string;
                        sourceChannel?: string;
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        allowList?: string[];
                    }): _129.Allocation;
                    fromAmino(object: _129.AllocationAmino): _129.Allocation;
                    toAmino(message: _129.Allocation): _129.AllocationAmino;
                    fromAminoMsg(object: _129.AllocationAminoMsg): _129.Allocation;
                    toAminoMsg(message: _129.Allocation): _129.AllocationAminoMsg;
                    fromProtoMsg(message: _129.AllocationProtoMsg): _129.Allocation;
                    toProto(message: _129.Allocation): Uint8Array;
                    toProtoMsg(message: _129.Allocation): _129.AllocationProtoMsg;
                };
                TransferAuthorization: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _129.TransferAuthorization, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _129.TransferAuthorization;
                    fromPartial(object: {
                        $typeUrl?: "/ibc.applications.transfer.v1.TransferAuthorization";
                        allocations?: {
                            sourcePort?: string;
                            sourceChannel?: string;
                            spendLimit?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            allowList?: string[];
                        }[];
                    }): _129.TransferAuthorization;
                    fromAmino(object: _129.TransferAuthorizationAmino): _129.TransferAuthorization;
                    toAmino(message: _129.TransferAuthorization): _129.TransferAuthorizationAmino;
                    fromAminoMsg(object: _129.TransferAuthorizationAminoMsg): _129.TransferAuthorization;
                    toAminoMsg(message: _129.TransferAuthorization): _129.TransferAuthorizationAminoMsg;
                    fromProtoMsg(message: _129.TransferAuthorizationProtoMsg): _129.TransferAuthorization;
                    toProto(message: _129.TransferAuthorization): Uint8Array;
                    toProtoMsg(message: _129.TransferAuthorization): _129.TransferAuthorizationProtoMsg;
                };
            };
            const v2: {
                FungibleTokenPacketData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _134.FungibleTokenPacketData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _134.FungibleTokenPacketData;
                    fromPartial(object: {
                        denom?: string;
                        amount?: string;
                        sender?: string;
                        receiver?: string;
                        memo?: string;
                    }): _134.FungibleTokenPacketData;
                    fromAmino(object: _134.FungibleTokenPacketDataAmino): _134.FungibleTokenPacketData;
                    toAmino(message: _134.FungibleTokenPacketData): _134.FungibleTokenPacketDataAmino;
                    fromAminoMsg(object: _134.FungibleTokenPacketDataAminoMsg): _134.FungibleTokenPacketData;
                    toAminoMsg(message: _134.FungibleTokenPacketData): _134.FungibleTokenPacketDataAminoMsg;
                    fromProtoMsg(message: _134.FungibleTokenPacketDataProtoMsg): _134.FungibleTokenPacketData;
                    toProto(message: _134.FungibleTokenPacketData): Uint8Array;
                    toProtoMsg(message: _134.FungibleTokenPacketData): _134.FungibleTokenPacketDataProtoMsg;
                };
            };
        }
    }
    namespace core {
        namespace channel {
            const v1: {
                MsgClientImpl: typeof _270.MsgClientImpl;
                QueryClientImpl: typeof _264.QueryClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    channel(request: _137.QueryChannelRequest): Promise<_137.QueryChannelResponse>;
                    channels(request?: _137.QueryChannelsRequest): Promise<_137.QueryChannelsResponse>;
                    connectionChannels(request: _137.QueryConnectionChannelsRequest): Promise<_137.QueryConnectionChannelsResponse>;
                    channelClientState(request: _137.QueryChannelClientStateRequest): Promise<_137.QueryChannelClientStateResponse>;
                    channelConsensusState(request: _137.QueryChannelConsensusStateRequest): Promise<_137.QueryChannelConsensusStateResponse>;
                    packetCommitment(request: _137.QueryPacketCommitmentRequest): Promise<_137.QueryPacketCommitmentResponse>;
                    packetCommitments(request: _137.QueryPacketCommitmentsRequest): Promise<_137.QueryPacketCommitmentsResponse>;
                    packetReceipt(request: _137.QueryPacketReceiptRequest): Promise<_137.QueryPacketReceiptResponse>;
                    packetAcknowledgement(request: _137.QueryPacketAcknowledgementRequest): Promise<_137.QueryPacketAcknowledgementResponse>;
                    packetAcknowledgements(request: _137.QueryPacketAcknowledgementsRequest): Promise<_137.QueryPacketAcknowledgementsResponse>;
                    unreceivedPackets(request: _137.QueryUnreceivedPacketsRequest): Promise<_137.QueryUnreceivedPacketsResponse>;
                    unreceivedAcks(request: _137.QueryUnreceivedAcksRequest): Promise<_137.QueryUnreceivedAcksResponse>;
                    nextSequenceReceive(request: _137.QueryNextSequenceReceiveRequest): Promise<_137.QueryNextSequenceReceiveResponse>;
                    nextSequenceSend(request: _137.QueryNextSequenceSendRequest): Promise<_137.QueryNextSequenceSendResponse>;
                };
                LCDQueryClient: typeof _258.LCDQueryClient;
                registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
                load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
                MessageComposer: {
                    encoded: {
                        channelOpenInit(value: _138.MsgChannelOpenInit): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        channelOpenTry(value: _138.MsgChannelOpenTry): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        channelOpenAck(value: _138.MsgChannelOpenAck): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        channelOpenConfirm(value: _138.MsgChannelOpenConfirm): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        channelCloseInit(value: _138.MsgChannelCloseInit): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        channelCloseConfirm(value: _138.MsgChannelCloseConfirm): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        recvPacket(value: _138.MsgRecvPacket): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        timeout(value: _138.MsgTimeout): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        timeoutOnClose(value: _138.MsgTimeoutOnClose): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        acknowledgement(value: _138.MsgAcknowledgement): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                    };
                    withTypeUrl: {
                        channelOpenInit(value: _138.MsgChannelOpenInit): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenInit;
                        };
                        channelOpenTry(value: _138.MsgChannelOpenTry): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenTry;
                        };
                        channelOpenAck(value: _138.MsgChannelOpenAck): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenAck;
                        };
                        channelOpenConfirm(value: _138.MsgChannelOpenConfirm): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenConfirm;
                        };
                        channelCloseInit(value: _138.MsgChannelCloseInit): {
                            typeUrl: string;
                            value: _138.MsgChannelCloseInit;
                        };
                        channelCloseConfirm(value: _138.MsgChannelCloseConfirm): {
                            typeUrl: string;
                            value: _138.MsgChannelCloseConfirm;
                        };
                        recvPacket(value: _138.MsgRecvPacket): {
                            typeUrl: string;
                            value: _138.MsgRecvPacket;
                        };
                        timeout(value: _138.MsgTimeout): {
                            typeUrl: string;
                            value: _138.MsgTimeout;
                        };
                        timeoutOnClose(value: _138.MsgTimeoutOnClose): {
                            typeUrl: string;
                            value: _138.MsgTimeoutOnClose;
                        };
                        acknowledgement(value: _138.MsgAcknowledgement): {
                            typeUrl: string;
                            value: _138.MsgAcknowledgement;
                        };
                    };
                    fromPartial: {
                        channelOpenInit(value: _138.MsgChannelOpenInit): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenInit;
                        };
                        channelOpenTry(value: _138.MsgChannelOpenTry): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenTry;
                        };
                        channelOpenAck(value: _138.MsgChannelOpenAck): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenAck;
                        };
                        channelOpenConfirm(value: _138.MsgChannelOpenConfirm): {
                            typeUrl: string;
                            value: _138.MsgChannelOpenConfirm;
                        };
                        channelCloseInit(value: _138.MsgChannelCloseInit): {
                            typeUrl: string;
                            value: _138.MsgChannelCloseInit;
                        };
                        channelCloseConfirm(value: _138.MsgChannelCloseConfirm): {
                            typeUrl: string;
                            value: _138.MsgChannelCloseConfirm;
                        };
                        recvPacket(value: _138.MsgRecvPacket): {
                            typeUrl: string;
                            value: _138.MsgRecvPacket;
                        };
                        timeout(value: _138.MsgTimeout): {
                            typeUrl: string;
                            value: _138.MsgTimeout;
                        };
                        timeoutOnClose(value: _138.MsgTimeoutOnClose): {
                            typeUrl: string;
                            value: _138.MsgTimeoutOnClose;
                        };
                        acknowledgement(value: _138.MsgAcknowledgement): {
                            typeUrl: string;
                            value: _138.MsgAcknowledgement;
                        };
                    };
                };
                AminoConverter: {
                    "/ibc.core.channel.v1.MsgChannelOpenInit": {
                        aminoType: string;
                        toAmino: (message: _138.MsgChannelOpenInit) => _138.MsgChannelOpenInitAmino;
                        fromAmino: (object: _138.MsgChannelOpenInitAmino) => _138.MsgChannelOpenInit;
                    };
                    "/ibc.core.channel.v1.MsgChannelOpenTry": {
                        aminoType: string;
                        toAmino: (message: _138.MsgChannelOpenTry) => _138.MsgChannelOpenTryAmino;
                        fromAmino: (object: _138.MsgChannelOpenTryAmino) => _138.MsgChannelOpenTry;
                    };
                    "/ibc.core.channel.v1.MsgChannelOpenAck": {
                        aminoType: string;
                        toAmino: (message: _138.MsgChannelOpenAck) => _138.MsgChannelOpenAckAmino;
                        fromAmino: (object: _138.MsgChannelOpenAckAmino) => _138.MsgChannelOpenAck;
                    };
                    "/ibc.core.channel.v1.MsgChannelOpenConfirm": {
                        aminoType: string;
                        toAmino: (message: _138.MsgChannelOpenConfirm) => _138.MsgChannelOpenConfirmAmino;
                        fromAmino: (object: _138.MsgChannelOpenConfirmAmino) => _138.MsgChannelOpenConfirm;
                    };
                    "/ibc.core.channel.v1.MsgChannelCloseInit": {
                        aminoType: string;
                        toAmino: (message: _138.MsgChannelCloseInit) => _138.MsgChannelCloseInitAmino;
                        fromAmino: (object: _138.MsgChannelCloseInitAmino) => _138.MsgChannelCloseInit;
                    };
                    "/ibc.core.channel.v1.MsgChannelCloseConfirm": {
                        aminoType: string;
                        toAmino: (message: _138.MsgChannelCloseConfirm) => _138.MsgChannelCloseConfirmAmino;
                        fromAmino: (object: _138.MsgChannelCloseConfirmAmino) => _138.MsgChannelCloseConfirm;
                    };
                    "/ibc.core.channel.v1.MsgRecvPacket": {
                        aminoType: string;
                        toAmino: (message: _138.MsgRecvPacket) => _138.MsgRecvPacketAmino;
                        fromAmino: (object: _138.MsgRecvPacketAmino) => _138.MsgRecvPacket;
                    };
                    "/ibc.core.channel.v1.MsgTimeout": {
                        aminoType: string;
                        toAmino: (message: _138.MsgTimeout) => _138.MsgTimeoutAmino;
                        fromAmino: (object: _138.MsgTimeoutAmino) => _138.MsgTimeout;
                    };
                    "/ibc.core.channel.v1.MsgTimeoutOnClose": {
                        aminoType: string;
                        toAmino: (message: _138.MsgTimeoutOnClose) => _138.MsgTimeoutOnCloseAmino;
                        fromAmino: (object: _138.MsgTimeoutOnCloseAmino) => _138.MsgTimeoutOnClose;
                    };
                    "/ibc.core.channel.v1.MsgAcknowledgement": {
                        aminoType: string;
                        toAmino: (message: _138.MsgAcknowledgement) => _138.MsgAcknowledgementAmino;
                        fromAmino: (object: _138.MsgAcknowledgementAmino) => _138.MsgAcknowledgement;
                    };
                };
                responseResultTypeFromJSON(object: any): _138.ResponseResultType;
                responseResultTypeToJSON(object: _138.ResponseResultType): string;
                ResponseResultType: typeof _138.ResponseResultType;
                ResponseResultTypeSDKType: typeof _138.ResponseResultType;
                ResponseResultTypeAmino: typeof _138.ResponseResultType;
                MsgChannelOpenInit: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelOpenInit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenInit;
                    fromPartial(object: {
                        portId?: string;
                        channel?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                        };
                        signer?: string;
                    }): _138.MsgChannelOpenInit;
                    fromAmino(object: _138.MsgChannelOpenInitAmino): _138.MsgChannelOpenInit;
                    toAmino(message: _138.MsgChannelOpenInit): _138.MsgChannelOpenInitAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenInitAminoMsg): _138.MsgChannelOpenInit;
                    toAminoMsg(message: _138.MsgChannelOpenInit): _138.MsgChannelOpenInitAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenInitProtoMsg): _138.MsgChannelOpenInit;
                    toProto(message: _138.MsgChannelOpenInit): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenInit): _138.MsgChannelOpenInitProtoMsg;
                };
                MsgChannelOpenInitResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelOpenInitResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenInitResponse;
                    fromPartial(object: {
                        channelId?: string;
                        version?: string;
                    }): _138.MsgChannelOpenInitResponse;
                    fromAmino(object: _138.MsgChannelOpenInitResponseAmino): _138.MsgChannelOpenInitResponse;
                    toAmino(message: _138.MsgChannelOpenInitResponse): _138.MsgChannelOpenInitResponseAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenInitResponseAminoMsg): _138.MsgChannelOpenInitResponse;
                    toAminoMsg(message: _138.MsgChannelOpenInitResponse): _138.MsgChannelOpenInitResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenInitResponseProtoMsg): _138.MsgChannelOpenInitResponse;
                    toProto(message: _138.MsgChannelOpenInitResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenInitResponse): _138.MsgChannelOpenInitResponseProtoMsg;
                };
                MsgChannelOpenTry: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelOpenTry, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenTry;
                    fromPartial(object: {
                        portId?: string;
                        previousChannelId?: string;
                        channel?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                        };
                        counterpartyVersion?: string;
                        proofInit?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _138.MsgChannelOpenTry;
                    fromAmino(object: _138.MsgChannelOpenTryAmino): _138.MsgChannelOpenTry;
                    toAmino(message: _138.MsgChannelOpenTry): _138.MsgChannelOpenTryAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenTryAminoMsg): _138.MsgChannelOpenTry;
                    toAminoMsg(message: _138.MsgChannelOpenTry): _138.MsgChannelOpenTryAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenTryProtoMsg): _138.MsgChannelOpenTry;
                    toProto(message: _138.MsgChannelOpenTry): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenTry): _138.MsgChannelOpenTryProtoMsg;
                };
                MsgChannelOpenTryResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelOpenTryResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenTryResponse;
                    fromPartial(object: {
                        version?: string;
                        channelId?: string;
                    }): _138.MsgChannelOpenTryResponse;
                    fromAmino(object: _138.MsgChannelOpenTryResponseAmino): _138.MsgChannelOpenTryResponse;
                    toAmino(message: _138.MsgChannelOpenTryResponse): _138.MsgChannelOpenTryResponseAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenTryResponseAminoMsg): _138.MsgChannelOpenTryResponse;
                    toAminoMsg(message: _138.MsgChannelOpenTryResponse): _138.MsgChannelOpenTryResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenTryResponseProtoMsg): _138.MsgChannelOpenTryResponse;
                    toProto(message: _138.MsgChannelOpenTryResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenTryResponse): _138.MsgChannelOpenTryResponseProtoMsg;
                };
                MsgChannelOpenAck: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelOpenAck, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenAck;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        counterpartyChannelId?: string;
                        counterpartyVersion?: string;
                        proofTry?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _138.MsgChannelOpenAck;
                    fromAmino(object: _138.MsgChannelOpenAckAmino): _138.MsgChannelOpenAck;
                    toAmino(message: _138.MsgChannelOpenAck): _138.MsgChannelOpenAckAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenAckAminoMsg): _138.MsgChannelOpenAck;
                    toAminoMsg(message: _138.MsgChannelOpenAck): _138.MsgChannelOpenAckAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenAckProtoMsg): _138.MsgChannelOpenAck;
                    toProto(message: _138.MsgChannelOpenAck): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenAck): _138.MsgChannelOpenAckProtoMsg;
                };
                MsgChannelOpenAckResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _138.MsgChannelOpenAckResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenAckResponse;
                    fromPartial(_: {}): _138.MsgChannelOpenAckResponse;
                    fromAmino(_: _138.MsgChannelOpenAckResponseAmino): _138.MsgChannelOpenAckResponse;
                    toAmino(_: _138.MsgChannelOpenAckResponse): _138.MsgChannelOpenAckResponseAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenAckResponseAminoMsg): _138.MsgChannelOpenAckResponse;
                    toAminoMsg(message: _138.MsgChannelOpenAckResponse): _138.MsgChannelOpenAckResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenAckResponseProtoMsg): _138.MsgChannelOpenAckResponse;
                    toProto(message: _138.MsgChannelOpenAckResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenAckResponse): _138.MsgChannelOpenAckResponseProtoMsg;
                };
                MsgChannelOpenConfirm: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelOpenConfirm, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenConfirm;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        proofAck?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _138.MsgChannelOpenConfirm;
                    fromAmino(object: _138.MsgChannelOpenConfirmAmino): _138.MsgChannelOpenConfirm;
                    toAmino(message: _138.MsgChannelOpenConfirm): _138.MsgChannelOpenConfirmAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenConfirmAminoMsg): _138.MsgChannelOpenConfirm;
                    toAminoMsg(message: _138.MsgChannelOpenConfirm): _138.MsgChannelOpenConfirmAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenConfirmProtoMsg): _138.MsgChannelOpenConfirm;
                    toProto(message: _138.MsgChannelOpenConfirm): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenConfirm): _138.MsgChannelOpenConfirmProtoMsg;
                };
                MsgChannelOpenConfirmResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _138.MsgChannelOpenConfirmResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelOpenConfirmResponse;
                    fromPartial(_: {}): _138.MsgChannelOpenConfirmResponse;
                    fromAmino(_: _138.MsgChannelOpenConfirmResponseAmino): _138.MsgChannelOpenConfirmResponse;
                    toAmino(_: _138.MsgChannelOpenConfirmResponse): _138.MsgChannelOpenConfirmResponseAmino;
                    fromAminoMsg(object: _138.MsgChannelOpenConfirmResponseAminoMsg): _138.MsgChannelOpenConfirmResponse;
                    toAminoMsg(message: _138.MsgChannelOpenConfirmResponse): _138.MsgChannelOpenConfirmResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelOpenConfirmResponseProtoMsg): _138.MsgChannelOpenConfirmResponse;
                    toProto(message: _138.MsgChannelOpenConfirmResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelOpenConfirmResponse): _138.MsgChannelOpenConfirmResponseProtoMsg;
                };
                MsgChannelCloseInit: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelCloseInit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelCloseInit;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        signer?: string;
                    }): _138.MsgChannelCloseInit;
                    fromAmino(object: _138.MsgChannelCloseInitAmino): _138.MsgChannelCloseInit;
                    toAmino(message: _138.MsgChannelCloseInit): _138.MsgChannelCloseInitAmino;
                    fromAminoMsg(object: _138.MsgChannelCloseInitAminoMsg): _138.MsgChannelCloseInit;
                    toAminoMsg(message: _138.MsgChannelCloseInit): _138.MsgChannelCloseInitAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelCloseInitProtoMsg): _138.MsgChannelCloseInit;
                    toProto(message: _138.MsgChannelCloseInit): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelCloseInit): _138.MsgChannelCloseInitProtoMsg;
                };
                MsgChannelCloseInitResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _138.MsgChannelCloseInitResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelCloseInitResponse;
                    fromPartial(_: {}): _138.MsgChannelCloseInitResponse;
                    fromAmino(_: _138.MsgChannelCloseInitResponseAmino): _138.MsgChannelCloseInitResponse;
                    toAmino(_: _138.MsgChannelCloseInitResponse): _138.MsgChannelCloseInitResponseAmino;
                    fromAminoMsg(object: _138.MsgChannelCloseInitResponseAminoMsg): _138.MsgChannelCloseInitResponse;
                    toAminoMsg(message: _138.MsgChannelCloseInitResponse): _138.MsgChannelCloseInitResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelCloseInitResponseProtoMsg): _138.MsgChannelCloseInitResponse;
                    toProto(message: _138.MsgChannelCloseInitResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelCloseInitResponse): _138.MsgChannelCloseInitResponseProtoMsg;
                };
                MsgChannelCloseConfirm: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgChannelCloseConfirm, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelCloseConfirm;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        proofInit?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _138.MsgChannelCloseConfirm;
                    fromAmino(object: _138.MsgChannelCloseConfirmAmino): _138.MsgChannelCloseConfirm;
                    toAmino(message: _138.MsgChannelCloseConfirm): _138.MsgChannelCloseConfirmAmino;
                    fromAminoMsg(object: _138.MsgChannelCloseConfirmAminoMsg): _138.MsgChannelCloseConfirm;
                    toAminoMsg(message: _138.MsgChannelCloseConfirm): _138.MsgChannelCloseConfirmAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelCloseConfirmProtoMsg): _138.MsgChannelCloseConfirm;
                    toProto(message: _138.MsgChannelCloseConfirm): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelCloseConfirm): _138.MsgChannelCloseConfirmProtoMsg;
                };
                MsgChannelCloseConfirmResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _138.MsgChannelCloseConfirmResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgChannelCloseConfirmResponse;
                    fromPartial(_: {}): _138.MsgChannelCloseConfirmResponse;
                    fromAmino(_: _138.MsgChannelCloseConfirmResponseAmino): _138.MsgChannelCloseConfirmResponse;
                    toAmino(_: _138.MsgChannelCloseConfirmResponse): _138.MsgChannelCloseConfirmResponseAmino;
                    fromAminoMsg(object: _138.MsgChannelCloseConfirmResponseAminoMsg): _138.MsgChannelCloseConfirmResponse;
                    toAminoMsg(message: _138.MsgChannelCloseConfirmResponse): _138.MsgChannelCloseConfirmResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgChannelCloseConfirmResponseProtoMsg): _138.MsgChannelCloseConfirmResponse;
                    toProto(message: _138.MsgChannelCloseConfirmResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgChannelCloseConfirmResponse): _138.MsgChannelCloseConfirmResponseProtoMsg;
                };
                MsgRecvPacket: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgRecvPacket, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgRecvPacket;
                    fromPartial(object: {
                        packet?: {
                            sequence?: bigint;
                            sourcePort?: string;
                            sourceChannel?: string;
                            destinationPort?: string;
                            destinationChannel?: string;
                            data?: Uint8Array;
                            timeoutHeight?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            timeoutTimestamp?: bigint;
                        };
                        proofCommitment?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _138.MsgRecvPacket;
                    fromAmino(object: _138.MsgRecvPacketAmino): _138.MsgRecvPacket;
                    toAmino(message: _138.MsgRecvPacket): _138.MsgRecvPacketAmino;
                    fromAminoMsg(object: _138.MsgRecvPacketAminoMsg): _138.MsgRecvPacket;
                    toAminoMsg(message: _138.MsgRecvPacket): _138.MsgRecvPacketAminoMsg;
                    fromProtoMsg(message: _138.MsgRecvPacketProtoMsg): _138.MsgRecvPacket;
                    toProto(message: _138.MsgRecvPacket): Uint8Array;
                    toProtoMsg(message: _138.MsgRecvPacket): _138.MsgRecvPacketProtoMsg;
                };
                MsgRecvPacketResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgRecvPacketResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgRecvPacketResponse;
                    fromPartial(object: {
                        result?: _138.ResponseResultType;
                    }): _138.MsgRecvPacketResponse;
                    fromAmino(object: _138.MsgRecvPacketResponseAmino): _138.MsgRecvPacketResponse;
                    toAmino(message: _138.MsgRecvPacketResponse): _138.MsgRecvPacketResponseAmino;
                    fromAminoMsg(object: _138.MsgRecvPacketResponseAminoMsg): _138.MsgRecvPacketResponse;
                    toAminoMsg(message: _138.MsgRecvPacketResponse): _138.MsgRecvPacketResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgRecvPacketResponseProtoMsg): _138.MsgRecvPacketResponse;
                    toProto(message: _138.MsgRecvPacketResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgRecvPacketResponse): _138.MsgRecvPacketResponseProtoMsg;
                };
                MsgTimeout: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgTimeout, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgTimeout;
                    fromPartial(object: {
                        packet?: {
                            sequence?: bigint;
                            sourcePort?: string;
                            sourceChannel?: string;
                            destinationPort?: string;
                            destinationChannel?: string;
                            data?: Uint8Array;
                            timeoutHeight?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            timeoutTimestamp?: bigint;
                        };
                        proofUnreceived?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        nextSequenceRecv?: bigint;
                        signer?: string;
                    }): _138.MsgTimeout;
                    fromAmino(object: _138.MsgTimeoutAmino): _138.MsgTimeout;
                    toAmino(message: _138.MsgTimeout): _138.MsgTimeoutAmino;
                    fromAminoMsg(object: _138.MsgTimeoutAminoMsg): _138.MsgTimeout;
                    toAminoMsg(message: _138.MsgTimeout): _138.MsgTimeoutAminoMsg;
                    fromProtoMsg(message: _138.MsgTimeoutProtoMsg): _138.MsgTimeout;
                    toProto(message: _138.MsgTimeout): Uint8Array;
                    toProtoMsg(message: _138.MsgTimeout): _138.MsgTimeoutProtoMsg;
                };
                MsgTimeoutResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgTimeoutResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgTimeoutResponse;
                    fromPartial(object: {
                        result?: _138.ResponseResultType;
                    }): _138.MsgTimeoutResponse;
                    fromAmino(object: _138.MsgTimeoutResponseAmino): _138.MsgTimeoutResponse;
                    toAmino(message: _138.MsgTimeoutResponse): _138.MsgTimeoutResponseAmino;
                    fromAminoMsg(object: _138.MsgTimeoutResponseAminoMsg): _138.MsgTimeoutResponse;
                    toAminoMsg(message: _138.MsgTimeoutResponse): _138.MsgTimeoutResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgTimeoutResponseProtoMsg): _138.MsgTimeoutResponse;
                    toProto(message: _138.MsgTimeoutResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgTimeoutResponse): _138.MsgTimeoutResponseProtoMsg;
                };
                MsgTimeoutOnClose: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgTimeoutOnClose, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgTimeoutOnClose;
                    fromPartial(object: {
                        packet?: {
                            sequence?: bigint;
                            sourcePort?: string;
                            sourceChannel?: string;
                            destinationPort?: string;
                            destinationChannel?: string;
                            data?: Uint8Array;
                            timeoutHeight?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            timeoutTimestamp?: bigint;
                        };
                        proofUnreceived?: Uint8Array;
                        proofClose?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        nextSequenceRecv?: bigint;
                        signer?: string;
                    }): _138.MsgTimeoutOnClose;
                    fromAmino(object: _138.MsgTimeoutOnCloseAmino): _138.MsgTimeoutOnClose;
                    toAmino(message: _138.MsgTimeoutOnClose): _138.MsgTimeoutOnCloseAmino;
                    fromAminoMsg(object: _138.MsgTimeoutOnCloseAminoMsg): _138.MsgTimeoutOnClose;
                    toAminoMsg(message: _138.MsgTimeoutOnClose): _138.MsgTimeoutOnCloseAminoMsg;
                    fromProtoMsg(message: _138.MsgTimeoutOnCloseProtoMsg): _138.MsgTimeoutOnClose;
                    toProto(message: _138.MsgTimeoutOnClose): Uint8Array;
                    toProtoMsg(message: _138.MsgTimeoutOnClose): _138.MsgTimeoutOnCloseProtoMsg;
                };
                MsgTimeoutOnCloseResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgTimeoutOnCloseResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgTimeoutOnCloseResponse;
                    fromPartial(object: {
                        result?: _138.ResponseResultType;
                    }): _138.MsgTimeoutOnCloseResponse;
                    fromAmino(object: _138.MsgTimeoutOnCloseResponseAmino): _138.MsgTimeoutOnCloseResponse;
                    toAmino(message: _138.MsgTimeoutOnCloseResponse): _138.MsgTimeoutOnCloseResponseAmino;
                    fromAminoMsg(object: _138.MsgTimeoutOnCloseResponseAminoMsg): _138.MsgTimeoutOnCloseResponse;
                    toAminoMsg(message: _138.MsgTimeoutOnCloseResponse): _138.MsgTimeoutOnCloseResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgTimeoutOnCloseResponseProtoMsg): _138.MsgTimeoutOnCloseResponse;
                    toProto(message: _138.MsgTimeoutOnCloseResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgTimeoutOnCloseResponse): _138.MsgTimeoutOnCloseResponseProtoMsg;
                };
                MsgAcknowledgement: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgAcknowledgement, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgAcknowledgement;
                    fromPartial(object: {
                        packet?: {
                            sequence?: bigint;
                            sourcePort?: string;
                            sourceChannel?: string;
                            destinationPort?: string;
                            destinationChannel?: string;
                            data?: Uint8Array;
                            timeoutHeight?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            timeoutTimestamp?: bigint;
                        };
                        acknowledgement?: Uint8Array;
                        proofAcked?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _138.MsgAcknowledgement;
                    fromAmino(object: _138.MsgAcknowledgementAmino): _138.MsgAcknowledgement;
                    toAmino(message: _138.MsgAcknowledgement): _138.MsgAcknowledgementAmino;
                    fromAminoMsg(object: _138.MsgAcknowledgementAminoMsg): _138.MsgAcknowledgement;
                    toAminoMsg(message: _138.MsgAcknowledgement): _138.MsgAcknowledgementAminoMsg;
                    fromProtoMsg(message: _138.MsgAcknowledgementProtoMsg): _138.MsgAcknowledgement;
                    toProto(message: _138.MsgAcknowledgement): Uint8Array;
                    toProtoMsg(message: _138.MsgAcknowledgement): _138.MsgAcknowledgementProtoMsg;
                };
                MsgAcknowledgementResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _138.MsgAcknowledgementResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _138.MsgAcknowledgementResponse;
                    fromPartial(object: {
                        result?: _138.ResponseResultType;
                    }): _138.MsgAcknowledgementResponse;
                    fromAmino(object: _138.MsgAcknowledgementResponseAmino): _138.MsgAcknowledgementResponse;
                    toAmino(message: _138.MsgAcknowledgementResponse): _138.MsgAcknowledgementResponseAmino;
                    fromAminoMsg(object: _138.MsgAcknowledgementResponseAminoMsg): _138.MsgAcknowledgementResponse;
                    toAminoMsg(message: _138.MsgAcknowledgementResponse): _138.MsgAcknowledgementResponseAminoMsg;
                    fromProtoMsg(message: _138.MsgAcknowledgementResponseProtoMsg): _138.MsgAcknowledgementResponse;
                    toProto(message: _138.MsgAcknowledgementResponse): Uint8Array;
                    toProtoMsg(message: _138.MsgAcknowledgementResponse): _138.MsgAcknowledgementResponseProtoMsg;
                };
                QueryChannelRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                    }): _137.QueryChannelRequest;
                    fromAmino(object: _137.QueryChannelRequestAmino): _137.QueryChannelRequest;
                    toAmino(message: _137.QueryChannelRequest): _137.QueryChannelRequestAmino;
                    fromAminoMsg(object: _137.QueryChannelRequestAminoMsg): _137.QueryChannelRequest;
                    toAminoMsg(message: _137.QueryChannelRequest): _137.QueryChannelRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelRequestProtoMsg): _137.QueryChannelRequest;
                    toProto(message: _137.QueryChannelRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelRequest): _137.QueryChannelRequestProtoMsg;
                };
                QueryChannelResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelResponse;
                    fromPartial(object: {
                        channel?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                        };
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryChannelResponse;
                    fromAmino(object: _137.QueryChannelResponseAmino): _137.QueryChannelResponse;
                    toAmino(message: _137.QueryChannelResponse): _137.QueryChannelResponseAmino;
                    fromAminoMsg(object: _137.QueryChannelResponseAminoMsg): _137.QueryChannelResponse;
                    toAminoMsg(message: _137.QueryChannelResponse): _137.QueryChannelResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelResponseProtoMsg): _137.QueryChannelResponse;
                    toProto(message: _137.QueryChannelResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelResponse): _137.QueryChannelResponseProtoMsg;
                };
                QueryChannelsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelsRequest;
                    fromPartial(object: {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _137.QueryChannelsRequest;
                    fromAmino(object: _137.QueryChannelsRequestAmino): _137.QueryChannelsRequest;
                    toAmino(message: _137.QueryChannelsRequest): _137.QueryChannelsRequestAmino;
                    fromAminoMsg(object: _137.QueryChannelsRequestAminoMsg): _137.QueryChannelsRequest;
                    toAminoMsg(message: _137.QueryChannelsRequest): _137.QueryChannelsRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelsRequestProtoMsg): _137.QueryChannelsRequest;
                    toProto(message: _137.QueryChannelsRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelsRequest): _137.QueryChannelsRequestProtoMsg;
                };
                QueryChannelsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelsResponse;
                    fromPartial(object: {
                        channels?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                            portId?: string;
                            channelId?: string;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryChannelsResponse;
                    fromAmino(object: _137.QueryChannelsResponseAmino): _137.QueryChannelsResponse;
                    toAmino(message: _137.QueryChannelsResponse): _137.QueryChannelsResponseAmino;
                    fromAminoMsg(object: _137.QueryChannelsResponseAminoMsg): _137.QueryChannelsResponse;
                    toAminoMsg(message: _137.QueryChannelsResponse): _137.QueryChannelsResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelsResponseProtoMsg): _137.QueryChannelsResponse;
                    toProto(message: _137.QueryChannelsResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelsResponse): _137.QueryChannelsResponseProtoMsg;
                };
                QueryConnectionChannelsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryConnectionChannelsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryConnectionChannelsRequest;
                    fromPartial(object: {
                        connection?: string;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _137.QueryConnectionChannelsRequest;
                    fromAmino(object: _137.QueryConnectionChannelsRequestAmino): _137.QueryConnectionChannelsRequest;
                    toAmino(message: _137.QueryConnectionChannelsRequest): _137.QueryConnectionChannelsRequestAmino;
                    fromAminoMsg(object: _137.QueryConnectionChannelsRequestAminoMsg): _137.QueryConnectionChannelsRequest;
                    toAminoMsg(message: _137.QueryConnectionChannelsRequest): _137.QueryConnectionChannelsRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryConnectionChannelsRequestProtoMsg): _137.QueryConnectionChannelsRequest;
                    toProto(message: _137.QueryConnectionChannelsRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryConnectionChannelsRequest): _137.QueryConnectionChannelsRequestProtoMsg;
                };
                QueryConnectionChannelsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryConnectionChannelsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryConnectionChannelsResponse;
                    fromPartial(object: {
                        channels?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                            portId?: string;
                            channelId?: string;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryConnectionChannelsResponse;
                    fromAmino(object: _137.QueryConnectionChannelsResponseAmino): _137.QueryConnectionChannelsResponse;
                    toAmino(message: _137.QueryConnectionChannelsResponse): _137.QueryConnectionChannelsResponseAmino;
                    fromAminoMsg(object: _137.QueryConnectionChannelsResponseAminoMsg): _137.QueryConnectionChannelsResponse;
                    toAminoMsg(message: _137.QueryConnectionChannelsResponse): _137.QueryConnectionChannelsResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryConnectionChannelsResponseProtoMsg): _137.QueryConnectionChannelsResponse;
                    toProto(message: _137.QueryConnectionChannelsResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryConnectionChannelsResponse): _137.QueryConnectionChannelsResponseProtoMsg;
                };
                QueryChannelClientStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelClientStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelClientStateRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                    }): _137.QueryChannelClientStateRequest;
                    fromAmino(object: _137.QueryChannelClientStateRequestAmino): _137.QueryChannelClientStateRequest;
                    toAmino(message: _137.QueryChannelClientStateRequest): _137.QueryChannelClientStateRequestAmino;
                    fromAminoMsg(object: _137.QueryChannelClientStateRequestAminoMsg): _137.QueryChannelClientStateRequest;
                    toAminoMsg(message: _137.QueryChannelClientStateRequest): _137.QueryChannelClientStateRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelClientStateRequestProtoMsg): _137.QueryChannelClientStateRequest;
                    toProto(message: _137.QueryChannelClientStateRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelClientStateRequest): _137.QueryChannelClientStateRequestProtoMsg;
                };
                QueryChannelClientStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelClientStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelClientStateResponse;
                    fromPartial(object: {
                        identifiedClientState?: {
                            clientId?: string;
                            clientState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        };
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryChannelClientStateResponse;
                    fromAmino(object: _137.QueryChannelClientStateResponseAmino): _137.QueryChannelClientStateResponse;
                    toAmino(message: _137.QueryChannelClientStateResponse): _137.QueryChannelClientStateResponseAmino;
                    fromAminoMsg(object: _137.QueryChannelClientStateResponseAminoMsg): _137.QueryChannelClientStateResponse;
                    toAminoMsg(message: _137.QueryChannelClientStateResponse): _137.QueryChannelClientStateResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelClientStateResponseProtoMsg): _137.QueryChannelClientStateResponse;
                    toProto(message: _137.QueryChannelClientStateResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelClientStateResponse): _137.QueryChannelClientStateResponseProtoMsg;
                };
                QueryChannelConsensusStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelConsensusStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelConsensusStateRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        revisionNumber?: bigint;
                        revisionHeight?: bigint;
                    }): _137.QueryChannelConsensusStateRequest;
                    fromAmino(object: _137.QueryChannelConsensusStateRequestAmino): _137.QueryChannelConsensusStateRequest;
                    toAmino(message: _137.QueryChannelConsensusStateRequest): _137.QueryChannelConsensusStateRequestAmino;
                    fromAminoMsg(object: _137.QueryChannelConsensusStateRequestAminoMsg): _137.QueryChannelConsensusStateRequest;
                    toAminoMsg(message: _137.QueryChannelConsensusStateRequest): _137.QueryChannelConsensusStateRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelConsensusStateRequestProtoMsg): _137.QueryChannelConsensusStateRequest;
                    toProto(message: _137.QueryChannelConsensusStateRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelConsensusStateRequest): _137.QueryChannelConsensusStateRequestProtoMsg;
                };
                QueryChannelConsensusStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryChannelConsensusStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryChannelConsensusStateResponse;
                    fromPartial(object: {
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        clientId?: string;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryChannelConsensusStateResponse;
                    fromAmino(object: _137.QueryChannelConsensusStateResponseAmino): _137.QueryChannelConsensusStateResponse;
                    toAmino(message: _137.QueryChannelConsensusStateResponse): _137.QueryChannelConsensusStateResponseAmino;
                    fromAminoMsg(object: _137.QueryChannelConsensusStateResponseAminoMsg): _137.QueryChannelConsensusStateResponse;
                    toAminoMsg(message: _137.QueryChannelConsensusStateResponse): _137.QueryChannelConsensusStateResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryChannelConsensusStateResponseProtoMsg): _137.QueryChannelConsensusStateResponse;
                    toProto(message: _137.QueryChannelConsensusStateResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryChannelConsensusStateResponse): _137.QueryChannelConsensusStateResponseProtoMsg;
                };
                QueryPacketCommitmentRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketCommitmentRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketCommitmentRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        sequence?: bigint;
                    }): _137.QueryPacketCommitmentRequest;
                    fromAmino(object: _137.QueryPacketCommitmentRequestAmino): _137.QueryPacketCommitmentRequest;
                    toAmino(message: _137.QueryPacketCommitmentRequest): _137.QueryPacketCommitmentRequestAmino;
                    fromAminoMsg(object: _137.QueryPacketCommitmentRequestAminoMsg): _137.QueryPacketCommitmentRequest;
                    toAminoMsg(message: _137.QueryPacketCommitmentRequest): _137.QueryPacketCommitmentRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketCommitmentRequestProtoMsg): _137.QueryPacketCommitmentRequest;
                    toProto(message: _137.QueryPacketCommitmentRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketCommitmentRequest): _137.QueryPacketCommitmentRequestProtoMsg;
                };
                QueryPacketCommitmentResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketCommitmentResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketCommitmentResponse;
                    fromPartial(object: {
                        commitment?: Uint8Array;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryPacketCommitmentResponse;
                    fromAmino(object: _137.QueryPacketCommitmentResponseAmino): _137.QueryPacketCommitmentResponse;
                    toAmino(message: _137.QueryPacketCommitmentResponse): _137.QueryPacketCommitmentResponseAmino;
                    fromAminoMsg(object: _137.QueryPacketCommitmentResponseAminoMsg): _137.QueryPacketCommitmentResponse;
                    toAminoMsg(message: _137.QueryPacketCommitmentResponse): _137.QueryPacketCommitmentResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketCommitmentResponseProtoMsg): _137.QueryPacketCommitmentResponse;
                    toProto(message: _137.QueryPacketCommitmentResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketCommitmentResponse): _137.QueryPacketCommitmentResponseProtoMsg;
                };
                QueryPacketCommitmentsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketCommitmentsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketCommitmentsRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _137.QueryPacketCommitmentsRequest;
                    fromAmino(object: _137.QueryPacketCommitmentsRequestAmino): _137.QueryPacketCommitmentsRequest;
                    toAmino(message: _137.QueryPacketCommitmentsRequest): _137.QueryPacketCommitmentsRequestAmino;
                    fromAminoMsg(object: _137.QueryPacketCommitmentsRequestAminoMsg): _137.QueryPacketCommitmentsRequest;
                    toAminoMsg(message: _137.QueryPacketCommitmentsRequest): _137.QueryPacketCommitmentsRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketCommitmentsRequestProtoMsg): _137.QueryPacketCommitmentsRequest;
                    toProto(message: _137.QueryPacketCommitmentsRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketCommitmentsRequest): _137.QueryPacketCommitmentsRequestProtoMsg;
                };
                QueryPacketCommitmentsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketCommitmentsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketCommitmentsResponse;
                    fromPartial(object: {
                        commitments?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                            data?: Uint8Array;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryPacketCommitmentsResponse;
                    fromAmino(object: _137.QueryPacketCommitmentsResponseAmino): _137.QueryPacketCommitmentsResponse;
                    toAmino(message: _137.QueryPacketCommitmentsResponse): _137.QueryPacketCommitmentsResponseAmino;
                    fromAminoMsg(object: _137.QueryPacketCommitmentsResponseAminoMsg): _137.QueryPacketCommitmentsResponse;
                    toAminoMsg(message: _137.QueryPacketCommitmentsResponse): _137.QueryPacketCommitmentsResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketCommitmentsResponseProtoMsg): _137.QueryPacketCommitmentsResponse;
                    toProto(message: _137.QueryPacketCommitmentsResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketCommitmentsResponse): _137.QueryPacketCommitmentsResponseProtoMsg;
                };
                QueryPacketReceiptRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketReceiptRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketReceiptRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        sequence?: bigint;
                    }): _137.QueryPacketReceiptRequest;
                    fromAmino(object: _137.QueryPacketReceiptRequestAmino): _137.QueryPacketReceiptRequest;
                    toAmino(message: _137.QueryPacketReceiptRequest): _137.QueryPacketReceiptRequestAmino;
                    fromAminoMsg(object: _137.QueryPacketReceiptRequestAminoMsg): _137.QueryPacketReceiptRequest;
                    toAminoMsg(message: _137.QueryPacketReceiptRequest): _137.QueryPacketReceiptRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketReceiptRequestProtoMsg): _137.QueryPacketReceiptRequest;
                    toProto(message: _137.QueryPacketReceiptRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketReceiptRequest): _137.QueryPacketReceiptRequestProtoMsg;
                };
                QueryPacketReceiptResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketReceiptResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketReceiptResponse;
                    fromPartial(object: {
                        received?: boolean;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryPacketReceiptResponse;
                    fromAmino(object: _137.QueryPacketReceiptResponseAmino): _137.QueryPacketReceiptResponse;
                    toAmino(message: _137.QueryPacketReceiptResponse): _137.QueryPacketReceiptResponseAmino;
                    fromAminoMsg(object: _137.QueryPacketReceiptResponseAminoMsg): _137.QueryPacketReceiptResponse;
                    toAminoMsg(message: _137.QueryPacketReceiptResponse): _137.QueryPacketReceiptResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketReceiptResponseProtoMsg): _137.QueryPacketReceiptResponse;
                    toProto(message: _137.QueryPacketReceiptResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketReceiptResponse): _137.QueryPacketReceiptResponseProtoMsg;
                };
                QueryPacketAcknowledgementRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketAcknowledgementRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketAcknowledgementRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        sequence?: bigint;
                    }): _137.QueryPacketAcknowledgementRequest;
                    fromAmino(object: _137.QueryPacketAcknowledgementRequestAmino): _137.QueryPacketAcknowledgementRequest;
                    toAmino(message: _137.QueryPacketAcknowledgementRequest): _137.QueryPacketAcknowledgementRequestAmino;
                    fromAminoMsg(object: _137.QueryPacketAcknowledgementRequestAminoMsg): _137.QueryPacketAcknowledgementRequest;
                    toAminoMsg(message: _137.QueryPacketAcknowledgementRequest): _137.QueryPacketAcknowledgementRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketAcknowledgementRequestProtoMsg): _137.QueryPacketAcknowledgementRequest;
                    toProto(message: _137.QueryPacketAcknowledgementRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketAcknowledgementRequest): _137.QueryPacketAcknowledgementRequestProtoMsg;
                };
                QueryPacketAcknowledgementResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketAcknowledgementResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketAcknowledgementResponse;
                    fromPartial(object: {
                        acknowledgement?: Uint8Array;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryPacketAcknowledgementResponse;
                    fromAmino(object: _137.QueryPacketAcknowledgementResponseAmino): _137.QueryPacketAcknowledgementResponse;
                    toAmino(message: _137.QueryPacketAcknowledgementResponse): _137.QueryPacketAcknowledgementResponseAmino;
                    fromAminoMsg(object: _137.QueryPacketAcknowledgementResponseAminoMsg): _137.QueryPacketAcknowledgementResponse;
                    toAminoMsg(message: _137.QueryPacketAcknowledgementResponse): _137.QueryPacketAcknowledgementResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketAcknowledgementResponseProtoMsg): _137.QueryPacketAcknowledgementResponse;
                    toProto(message: _137.QueryPacketAcknowledgementResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketAcknowledgementResponse): _137.QueryPacketAcknowledgementResponseProtoMsg;
                };
                QueryPacketAcknowledgementsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketAcknowledgementsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketAcknowledgementsRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                        packetCommitmentSequences?: bigint[];
                    }): _137.QueryPacketAcknowledgementsRequest;
                    fromAmino(object: _137.QueryPacketAcknowledgementsRequestAmino): _137.QueryPacketAcknowledgementsRequest;
                    toAmino(message: _137.QueryPacketAcknowledgementsRequest): _137.QueryPacketAcknowledgementsRequestAmino;
                    fromAminoMsg(object: _137.QueryPacketAcknowledgementsRequestAminoMsg): _137.QueryPacketAcknowledgementsRequest;
                    toAminoMsg(message: _137.QueryPacketAcknowledgementsRequest): _137.QueryPacketAcknowledgementsRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketAcknowledgementsRequestProtoMsg): _137.QueryPacketAcknowledgementsRequest;
                    toProto(message: _137.QueryPacketAcknowledgementsRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketAcknowledgementsRequest): _137.QueryPacketAcknowledgementsRequestProtoMsg;
                };
                QueryPacketAcknowledgementsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryPacketAcknowledgementsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryPacketAcknowledgementsResponse;
                    fromPartial(object: {
                        acknowledgements?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                            data?: Uint8Array;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryPacketAcknowledgementsResponse;
                    fromAmino(object: _137.QueryPacketAcknowledgementsResponseAmino): _137.QueryPacketAcknowledgementsResponse;
                    toAmino(message: _137.QueryPacketAcknowledgementsResponse): _137.QueryPacketAcknowledgementsResponseAmino;
                    fromAminoMsg(object: _137.QueryPacketAcknowledgementsResponseAminoMsg): _137.QueryPacketAcknowledgementsResponse;
                    toAminoMsg(message: _137.QueryPacketAcknowledgementsResponse): _137.QueryPacketAcknowledgementsResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryPacketAcknowledgementsResponseProtoMsg): _137.QueryPacketAcknowledgementsResponse;
                    toProto(message: _137.QueryPacketAcknowledgementsResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryPacketAcknowledgementsResponse): _137.QueryPacketAcknowledgementsResponseProtoMsg;
                };
                QueryUnreceivedPacketsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryUnreceivedPacketsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryUnreceivedPacketsRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        packetCommitmentSequences?: bigint[];
                    }): _137.QueryUnreceivedPacketsRequest;
                    fromAmino(object: _137.QueryUnreceivedPacketsRequestAmino): _137.QueryUnreceivedPacketsRequest;
                    toAmino(message: _137.QueryUnreceivedPacketsRequest): _137.QueryUnreceivedPacketsRequestAmino;
                    fromAminoMsg(object: _137.QueryUnreceivedPacketsRequestAminoMsg): _137.QueryUnreceivedPacketsRequest;
                    toAminoMsg(message: _137.QueryUnreceivedPacketsRequest): _137.QueryUnreceivedPacketsRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryUnreceivedPacketsRequestProtoMsg): _137.QueryUnreceivedPacketsRequest;
                    toProto(message: _137.QueryUnreceivedPacketsRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryUnreceivedPacketsRequest): _137.QueryUnreceivedPacketsRequestProtoMsg;
                };
                QueryUnreceivedPacketsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryUnreceivedPacketsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryUnreceivedPacketsResponse;
                    fromPartial(object: {
                        sequences?: bigint[];
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryUnreceivedPacketsResponse;
                    fromAmino(object: _137.QueryUnreceivedPacketsResponseAmino): _137.QueryUnreceivedPacketsResponse;
                    toAmino(message: _137.QueryUnreceivedPacketsResponse): _137.QueryUnreceivedPacketsResponseAmino;
                    fromAminoMsg(object: _137.QueryUnreceivedPacketsResponseAminoMsg): _137.QueryUnreceivedPacketsResponse;
                    toAminoMsg(message: _137.QueryUnreceivedPacketsResponse): _137.QueryUnreceivedPacketsResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryUnreceivedPacketsResponseProtoMsg): _137.QueryUnreceivedPacketsResponse;
                    toProto(message: _137.QueryUnreceivedPacketsResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryUnreceivedPacketsResponse): _137.QueryUnreceivedPacketsResponseProtoMsg;
                };
                QueryUnreceivedAcksRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryUnreceivedAcksRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryUnreceivedAcksRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        packetAckSequences?: bigint[];
                    }): _137.QueryUnreceivedAcksRequest;
                    fromAmino(object: _137.QueryUnreceivedAcksRequestAmino): _137.QueryUnreceivedAcksRequest;
                    toAmino(message: _137.QueryUnreceivedAcksRequest): _137.QueryUnreceivedAcksRequestAmino;
                    fromAminoMsg(object: _137.QueryUnreceivedAcksRequestAminoMsg): _137.QueryUnreceivedAcksRequest;
                    toAminoMsg(message: _137.QueryUnreceivedAcksRequest): _137.QueryUnreceivedAcksRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryUnreceivedAcksRequestProtoMsg): _137.QueryUnreceivedAcksRequest;
                    toProto(message: _137.QueryUnreceivedAcksRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryUnreceivedAcksRequest): _137.QueryUnreceivedAcksRequestProtoMsg;
                };
                QueryUnreceivedAcksResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryUnreceivedAcksResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryUnreceivedAcksResponse;
                    fromPartial(object: {
                        sequences?: bigint[];
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryUnreceivedAcksResponse;
                    fromAmino(object: _137.QueryUnreceivedAcksResponseAmino): _137.QueryUnreceivedAcksResponse;
                    toAmino(message: _137.QueryUnreceivedAcksResponse): _137.QueryUnreceivedAcksResponseAmino;
                    fromAminoMsg(object: _137.QueryUnreceivedAcksResponseAminoMsg): _137.QueryUnreceivedAcksResponse;
                    toAminoMsg(message: _137.QueryUnreceivedAcksResponse): _137.QueryUnreceivedAcksResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryUnreceivedAcksResponseProtoMsg): _137.QueryUnreceivedAcksResponse;
                    toProto(message: _137.QueryUnreceivedAcksResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryUnreceivedAcksResponse): _137.QueryUnreceivedAcksResponseProtoMsg;
                };
                QueryNextSequenceReceiveRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryNextSequenceReceiveRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryNextSequenceReceiveRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                    }): _137.QueryNextSequenceReceiveRequest;
                    fromAmino(object: _137.QueryNextSequenceReceiveRequestAmino): _137.QueryNextSequenceReceiveRequest;
                    toAmino(message: _137.QueryNextSequenceReceiveRequest): _137.QueryNextSequenceReceiveRequestAmino;
                    fromAminoMsg(object: _137.QueryNextSequenceReceiveRequestAminoMsg): _137.QueryNextSequenceReceiveRequest;
                    toAminoMsg(message: _137.QueryNextSequenceReceiveRequest): _137.QueryNextSequenceReceiveRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryNextSequenceReceiveRequestProtoMsg): _137.QueryNextSequenceReceiveRequest;
                    toProto(message: _137.QueryNextSequenceReceiveRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryNextSequenceReceiveRequest): _137.QueryNextSequenceReceiveRequestProtoMsg;
                };
                QueryNextSequenceReceiveResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryNextSequenceReceiveResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryNextSequenceReceiveResponse;
                    fromPartial(object: {
                        nextSequenceReceive?: bigint;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryNextSequenceReceiveResponse;
                    fromAmino(object: _137.QueryNextSequenceReceiveResponseAmino): _137.QueryNextSequenceReceiveResponse;
                    toAmino(message: _137.QueryNextSequenceReceiveResponse): _137.QueryNextSequenceReceiveResponseAmino;
                    fromAminoMsg(object: _137.QueryNextSequenceReceiveResponseAminoMsg): _137.QueryNextSequenceReceiveResponse;
                    toAminoMsg(message: _137.QueryNextSequenceReceiveResponse): _137.QueryNextSequenceReceiveResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryNextSequenceReceiveResponseProtoMsg): _137.QueryNextSequenceReceiveResponse;
                    toProto(message: _137.QueryNextSequenceReceiveResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryNextSequenceReceiveResponse): _137.QueryNextSequenceReceiveResponseProtoMsg;
                };
                QueryNextSequenceSendRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryNextSequenceSendRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryNextSequenceSendRequest;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                    }): _137.QueryNextSequenceSendRequest;
                    fromAmino(object: _137.QueryNextSequenceSendRequestAmino): _137.QueryNextSequenceSendRequest;
                    toAmino(message: _137.QueryNextSequenceSendRequest): _137.QueryNextSequenceSendRequestAmino;
                    fromAminoMsg(object: _137.QueryNextSequenceSendRequestAminoMsg): _137.QueryNextSequenceSendRequest;
                    toAminoMsg(message: _137.QueryNextSequenceSendRequest): _137.QueryNextSequenceSendRequestAminoMsg;
                    fromProtoMsg(message: _137.QueryNextSequenceSendRequestProtoMsg): _137.QueryNextSequenceSendRequest;
                    toProto(message: _137.QueryNextSequenceSendRequest): Uint8Array;
                    toProtoMsg(message: _137.QueryNextSequenceSendRequest): _137.QueryNextSequenceSendRequestProtoMsg;
                };
                QueryNextSequenceSendResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _137.QueryNextSequenceSendResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _137.QueryNextSequenceSendResponse;
                    fromPartial(object: {
                        nextSequenceSend?: bigint;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _137.QueryNextSequenceSendResponse;
                    fromAmino(object: _137.QueryNextSequenceSendResponseAmino): _137.QueryNextSequenceSendResponse;
                    toAmino(message: _137.QueryNextSequenceSendResponse): _137.QueryNextSequenceSendResponseAmino;
                    fromAminoMsg(object: _137.QueryNextSequenceSendResponseAminoMsg): _137.QueryNextSequenceSendResponse;
                    toAminoMsg(message: _137.QueryNextSequenceSendResponse): _137.QueryNextSequenceSendResponseAminoMsg;
                    fromProtoMsg(message: _137.QueryNextSequenceSendResponseProtoMsg): _137.QueryNextSequenceSendResponse;
                    toProto(message: _137.QueryNextSequenceSendResponse): Uint8Array;
                    toProtoMsg(message: _137.QueryNextSequenceSendResponse): _137.QueryNextSequenceSendResponseProtoMsg;
                };
                GenesisState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _136.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _136.GenesisState;
                    fromPartial(object: {
                        channels?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                            portId?: string;
                            channelId?: string;
                        }[];
                        acknowledgements?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                            data?: Uint8Array;
                        }[];
                        commitments?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                            data?: Uint8Array;
                        }[];
                        receipts?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                            data?: Uint8Array;
                        }[];
                        sendSequences?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                        }[];
                        recvSequences?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                        }[];
                        ackSequences?: {
                            portId?: string;
                            channelId?: string;
                            sequence?: bigint;
                        }[];
                        nextChannelSequence?: bigint;
                    }): _136.GenesisState;
                    fromAmino(object: _136.GenesisStateAmino): _136.GenesisState;
                    toAmino(message: _136.GenesisState): _136.GenesisStateAmino;
                    fromAminoMsg(object: _136.GenesisStateAminoMsg): _136.GenesisState;
                    toAminoMsg(message: _136.GenesisState): _136.GenesisStateAminoMsg;
                    fromProtoMsg(message: _136.GenesisStateProtoMsg): _136.GenesisState;
                    toProto(message: _136.GenesisState): Uint8Array;
                    toProtoMsg(message: _136.GenesisState): _136.GenesisStateProtoMsg;
                };
                PacketSequence: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _136.PacketSequence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _136.PacketSequence;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        sequence?: bigint;
                    }): _136.PacketSequence;
                    fromAmino(object: _136.PacketSequenceAmino): _136.PacketSequence;
                    toAmino(message: _136.PacketSequence): _136.PacketSequenceAmino;
                    fromAminoMsg(object: _136.PacketSequenceAminoMsg): _136.PacketSequence;
                    toAminoMsg(message: _136.PacketSequence): _136.PacketSequenceAminoMsg;
                    fromProtoMsg(message: _136.PacketSequenceProtoMsg): _136.PacketSequence;
                    toProto(message: _136.PacketSequence): Uint8Array;
                    toProtoMsg(message: _136.PacketSequence): _136.PacketSequenceProtoMsg;
                };
                stateFromJSON(object: any): _135.State;
                stateToJSON(object: _135.State): string;
                orderFromJSON(object: any): _135.Order;
                orderToJSON(object: _135.Order): string;
                State: typeof _135.State;
                StateSDKType: typeof _135.State;
                StateAmino: typeof _135.State;
                Order: typeof _135.Order;
                OrderSDKType: typeof _135.Order;
                OrderAmino: typeof _135.Order;
                Channel: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.Channel, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.Channel;
                    fromPartial(object: {
                        state?: _135.State;
                        ordering?: _135.Order;
                        counterparty?: {
                            portId?: string;
                            channelId?: string;
                        };
                        connectionHops?: string[];
                        version?: string;
                    }): _135.Channel;
                    fromAmino(object: _135.ChannelAmino): _135.Channel;
                    toAmino(message: _135.Channel): _135.ChannelAmino;
                    fromAminoMsg(object: _135.ChannelAminoMsg): _135.Channel;
                    toAminoMsg(message: _135.Channel): _135.ChannelAminoMsg;
                    fromProtoMsg(message: _135.ChannelProtoMsg): _135.Channel;
                    toProto(message: _135.Channel): Uint8Array;
                    toProtoMsg(message: _135.Channel): _135.ChannelProtoMsg;
                };
                IdentifiedChannel: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.IdentifiedChannel, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.IdentifiedChannel;
                    fromPartial(object: {
                        state?: _135.State;
                        ordering?: _135.Order;
                        counterparty?: {
                            portId?: string;
                            channelId?: string;
                        };
                        connectionHops?: string[];
                        version?: string;
                        portId?: string;
                        channelId?: string;
                    }): _135.IdentifiedChannel;
                    fromAmino(object: _135.IdentifiedChannelAmino): _135.IdentifiedChannel;
                    toAmino(message: _135.IdentifiedChannel): _135.IdentifiedChannelAmino;
                    fromAminoMsg(object: _135.IdentifiedChannelAminoMsg): _135.IdentifiedChannel;
                    toAminoMsg(message: _135.IdentifiedChannel): _135.IdentifiedChannelAminoMsg;
                    fromProtoMsg(message: _135.IdentifiedChannelProtoMsg): _135.IdentifiedChannel;
                    toProto(message: _135.IdentifiedChannel): Uint8Array;
                    toProtoMsg(message: _135.IdentifiedChannel): _135.IdentifiedChannelProtoMsg;
                };
                Counterparty: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.Counterparty, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.Counterparty;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                    }): _135.Counterparty;
                    fromAmino(object: _135.CounterpartyAmino): _135.Counterparty;
                    toAmino(message: _135.Counterparty): _135.CounterpartyAmino;
                    fromAminoMsg(object: _135.CounterpartyAminoMsg): _135.Counterparty;
                    toAminoMsg(message: _135.Counterparty): _135.CounterpartyAminoMsg;
                    fromProtoMsg(message: _135.CounterpartyProtoMsg): _135.Counterparty;
                    toProto(message: _135.Counterparty): Uint8Array;
                    toProtoMsg(message: _135.Counterparty): _135.CounterpartyProtoMsg;
                };
                Packet: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.Packet, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.Packet;
                    fromPartial(object: {
                        sequence?: bigint;
                        sourcePort?: string;
                        sourceChannel?: string;
                        destinationPort?: string;
                        destinationChannel?: string;
                        data?: Uint8Array;
                        timeoutHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        timeoutTimestamp?: bigint;
                    }): _135.Packet;
                    fromAmino(object: _135.PacketAmino): _135.Packet;
                    toAmino(message: _135.Packet): _135.PacketAmino;
                    fromAminoMsg(object: _135.PacketAminoMsg): _135.Packet;
                    toAminoMsg(message: _135.Packet): _135.PacketAminoMsg;
                    fromProtoMsg(message: _135.PacketProtoMsg): _135.Packet;
                    toProto(message: _135.Packet): Uint8Array;
                    toProtoMsg(message: _135.Packet): _135.PacketProtoMsg;
                };
                PacketState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.PacketState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.PacketState;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        sequence?: bigint;
                        data?: Uint8Array;
                    }): _135.PacketState;
                    fromAmino(object: _135.PacketStateAmino): _135.PacketState;
                    toAmino(message: _135.PacketState): _135.PacketStateAmino;
                    fromAminoMsg(object: _135.PacketStateAminoMsg): _135.PacketState;
                    toAminoMsg(message: _135.PacketState): _135.PacketStateAminoMsg;
                    fromProtoMsg(message: _135.PacketStateProtoMsg): _135.PacketState;
                    toProto(message: _135.PacketState): Uint8Array;
                    toProtoMsg(message: _135.PacketState): _135.PacketStateProtoMsg;
                };
                PacketId: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.PacketId, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.PacketId;
                    fromPartial(object: {
                        portId?: string;
                        channelId?: string;
                        sequence?: bigint;
                    }): _135.PacketId;
                    fromAmino(object: _135.PacketIdAmino): _135.PacketId;
                    toAmino(message: _135.PacketId): _135.PacketIdAmino;
                    fromAminoMsg(object: _135.PacketIdAminoMsg): _135.PacketId;
                    toAminoMsg(message: _135.PacketId): _135.PacketIdAminoMsg;
                    fromProtoMsg(message: _135.PacketIdProtoMsg): _135.PacketId;
                    toProto(message: _135.PacketId): Uint8Array;
                    toProtoMsg(message: _135.PacketId): _135.PacketIdProtoMsg;
                };
                Acknowledgement: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.Acknowledgement, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.Acknowledgement;
                    fromPartial(object: {
                        result?: Uint8Array;
                        error?: string;
                    }): _135.Acknowledgement;
                    fromAmino(object: _135.AcknowledgementAmino): _135.Acknowledgement;
                    toAmino(message: _135.Acknowledgement): _135.AcknowledgementAmino;
                    fromAminoMsg(object: _135.AcknowledgementAminoMsg): _135.Acknowledgement;
                    toAminoMsg(message: _135.Acknowledgement): _135.AcknowledgementAminoMsg;
                    fromProtoMsg(message: _135.AcknowledgementProtoMsg): _135.Acknowledgement;
                    toProto(message: _135.Acknowledgement): Uint8Array;
                    toProtoMsg(message: _135.Acknowledgement): _135.AcknowledgementProtoMsg;
                };
                Timeout: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _135.Timeout, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _135.Timeout;
                    fromPartial(object: {
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        timestamp?: bigint;
                    }): _135.Timeout;
                    fromAmino(object: _135.TimeoutAmino): _135.Timeout;
                    toAmino(message: _135.Timeout): _135.TimeoutAmino;
                    fromAminoMsg(object: _135.TimeoutAminoMsg): _135.Timeout;
                    toAminoMsg(message: _135.Timeout): _135.TimeoutAminoMsg;
                    fromProtoMsg(message: _135.TimeoutProtoMsg): _135.Timeout;
                    toProto(message: _135.Timeout): Uint8Array;
                    toProtoMsg(message: _135.Timeout): _135.TimeoutProtoMsg;
                };
            };
        }
        namespace client {
            const v1: {
                MsgClientImpl: typeof _271.MsgClientImpl;
                QueryClientImpl: typeof _265.QueryClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    clientState(request: _141.QueryClientStateRequest): Promise<_141.QueryClientStateResponse>;
                    clientStates(request?: _141.QueryClientStatesRequest): Promise<_141.QueryClientStatesResponse>;
                    consensusState(request: _141.QueryConsensusStateRequest): Promise<_141.QueryConsensusStateResponse>;
                    consensusStates(request: _141.QueryConsensusStatesRequest): Promise<_141.QueryConsensusStatesResponse>;
                    consensusStateHeights(request: _141.QueryConsensusStateHeightsRequest): Promise<_141.QueryConsensusStateHeightsResponse>;
                    clientStatus(request: _141.QueryClientStatusRequest): Promise<_141.QueryClientStatusResponse>;
                    clientParams(request?: _141.QueryClientParamsRequest): Promise<_141.QueryClientParamsResponse>;
                    upgradedClientState(request?: _141.QueryUpgradedClientStateRequest): Promise<_141.QueryUpgradedClientStateResponse>;
                    upgradedConsensusState(request?: _141.QueryUpgradedConsensusStateRequest): Promise<_141.QueryUpgradedConsensusStateResponse>;
                };
                LCDQueryClient: typeof _259.LCDQueryClient;
                registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
                load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
                MessageComposer: {
                    encoded: {
                        createClient(value: _142.MsgCreateClient): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        updateClient(value: _142.MsgUpdateClient): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        upgradeClient(value: _142.MsgUpgradeClient): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        submitMisbehaviour(value: _142.MsgSubmitMisbehaviour): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        recoverClient(value: _142.MsgRecoverClient): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        iBCSoftwareUpgrade(value: _142.MsgIBCSoftwareUpgrade): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        updateClientParams(value: _142.MsgUpdateParams): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                    };
                    withTypeUrl: {
                        createClient(value: _142.MsgCreateClient): {
                            typeUrl: string;
                            value: _142.MsgCreateClient;
                        };
                        updateClient(value: _142.MsgUpdateClient): {
                            typeUrl: string;
                            value: _142.MsgUpdateClient;
                        };
                        upgradeClient(value: _142.MsgUpgradeClient): {
                            typeUrl: string;
                            value: _142.MsgUpgradeClient;
                        };
                        submitMisbehaviour(value: _142.MsgSubmitMisbehaviour): {
                            typeUrl: string;
                            value: _142.MsgSubmitMisbehaviour;
                        };
                        recoverClient(value: _142.MsgRecoverClient): {
                            typeUrl: string;
                            value: _142.MsgRecoverClient;
                        };
                        iBCSoftwareUpgrade(value: _142.MsgIBCSoftwareUpgrade): {
                            typeUrl: string;
                            value: _142.MsgIBCSoftwareUpgrade;
                        };
                        updateClientParams(value: _142.MsgUpdateParams): {
                            typeUrl: string;
                            value: _142.MsgUpdateParams;
                        };
                    };
                    fromPartial: {
                        createClient(value: _142.MsgCreateClient): {
                            typeUrl: string;
                            value: _142.MsgCreateClient;
                        };
                        updateClient(value: _142.MsgUpdateClient): {
                            typeUrl: string;
                            value: _142.MsgUpdateClient;
                        };
                        upgradeClient(value: _142.MsgUpgradeClient): {
                            typeUrl: string;
                            value: _142.MsgUpgradeClient;
                        };
                        submitMisbehaviour(value: _142.MsgSubmitMisbehaviour): {
                            typeUrl: string;
                            value: _142.MsgSubmitMisbehaviour;
                        };
                        recoverClient(value: _142.MsgRecoverClient): {
                            typeUrl: string;
                            value: _142.MsgRecoverClient;
                        };
                        iBCSoftwareUpgrade(value: _142.MsgIBCSoftwareUpgrade): {
                            typeUrl: string;
                            value: _142.MsgIBCSoftwareUpgrade;
                        };
                        updateClientParams(value: _142.MsgUpdateParams): {
                            typeUrl: string;
                            value: _142.MsgUpdateParams;
                        };
                    };
                };
                AminoConverter: {
                    "/ibc.core.client.v1.MsgCreateClient": {
                        aminoType: string;
                        toAmino: (message: _142.MsgCreateClient) => _142.MsgCreateClientAmino;
                        fromAmino: (object: _142.MsgCreateClientAmino) => _142.MsgCreateClient;
                    };
                    "/ibc.core.client.v1.MsgUpdateClient": {
                        aminoType: string;
                        toAmino: (message: _142.MsgUpdateClient) => _142.MsgUpdateClientAmino;
                        fromAmino: (object: _142.MsgUpdateClientAmino) => _142.MsgUpdateClient;
                    };
                    "/ibc.core.client.v1.MsgUpgradeClient": {
                        aminoType: string;
                        toAmino: (message: _142.MsgUpgradeClient) => _142.MsgUpgradeClientAmino;
                        fromAmino: (object: _142.MsgUpgradeClientAmino) => _142.MsgUpgradeClient;
                    };
                    "/ibc.core.client.v1.MsgSubmitMisbehaviour": {
                        aminoType: string;
                        toAmino: (message: _142.MsgSubmitMisbehaviour) => _142.MsgSubmitMisbehaviourAmino;
                        fromAmino: (object: _142.MsgSubmitMisbehaviourAmino) => _142.MsgSubmitMisbehaviour;
                    };
                    "/ibc.core.client.v1.MsgRecoverClient": {
                        aminoType: string;
                        toAmino: (message: _142.MsgRecoverClient) => _142.MsgRecoverClientAmino;
                        fromAmino: (object: _142.MsgRecoverClientAmino) => _142.MsgRecoverClient;
                    };
                    "/ibc.core.client.v1.MsgIBCSoftwareUpgrade": {
                        aminoType: string;
                        toAmino: (message: _142.MsgIBCSoftwareUpgrade) => _142.MsgIBCSoftwareUpgradeAmino;
                        fromAmino: (object: _142.MsgIBCSoftwareUpgradeAmino) => _142.MsgIBCSoftwareUpgrade;
                    };
                    "/ibc.core.client.v1.MsgUpdateParams": {
                        aminoType: string;
                        toAmino: (message: _142.MsgUpdateParams) => _142.MsgUpdateParamsAmino;
                        fromAmino: (object: _142.MsgUpdateParamsAmino) => _142.MsgUpdateParams;
                    };
                };
                MsgCreateClient: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgCreateClient, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgCreateClient;
                    fromPartial(object: {
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        signer?: string;
                    }): _142.MsgCreateClient;
                    fromAmino(object: _142.MsgCreateClientAmino): _142.MsgCreateClient;
                    toAmino(message: _142.MsgCreateClient): _142.MsgCreateClientAmino;
                    fromAminoMsg(object: _142.MsgCreateClientAminoMsg): _142.MsgCreateClient;
                    toAminoMsg(message: _142.MsgCreateClient): _142.MsgCreateClientAminoMsg;
                    fromProtoMsg(message: _142.MsgCreateClientProtoMsg): _142.MsgCreateClient;
                    toProto(message: _142.MsgCreateClient): Uint8Array;
                    toProtoMsg(message: _142.MsgCreateClient): _142.MsgCreateClientProtoMsg;
                };
                MsgCreateClientResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgCreateClientResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgCreateClientResponse;
                    fromPartial(_: {}): _142.MsgCreateClientResponse;
                    fromAmino(_: _142.MsgCreateClientResponseAmino): _142.MsgCreateClientResponse;
                    toAmino(_: _142.MsgCreateClientResponse): _142.MsgCreateClientResponseAmino;
                    fromAminoMsg(object: _142.MsgCreateClientResponseAminoMsg): _142.MsgCreateClientResponse;
                    toAminoMsg(message: _142.MsgCreateClientResponse): _142.MsgCreateClientResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgCreateClientResponseProtoMsg): _142.MsgCreateClientResponse;
                    toProto(message: _142.MsgCreateClientResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgCreateClientResponse): _142.MsgCreateClientResponseProtoMsg;
                };
                MsgUpdateClient: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgUpdateClient, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgUpdateClient;
                    fromPartial(object: {
                        clientId?: string;
                        clientMessage?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        signer?: string;
                    }): _142.MsgUpdateClient;
                    fromAmino(object: _142.MsgUpdateClientAmino): _142.MsgUpdateClient;
                    toAmino(message: _142.MsgUpdateClient): _142.MsgUpdateClientAmino;
                    fromAminoMsg(object: _142.MsgUpdateClientAminoMsg): _142.MsgUpdateClient;
                    toAminoMsg(message: _142.MsgUpdateClient): _142.MsgUpdateClientAminoMsg;
                    fromProtoMsg(message: _142.MsgUpdateClientProtoMsg): _142.MsgUpdateClient;
                    toProto(message: _142.MsgUpdateClient): Uint8Array;
                    toProtoMsg(message: _142.MsgUpdateClient): _142.MsgUpdateClientProtoMsg;
                };
                MsgUpdateClientResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgUpdateClientResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgUpdateClientResponse;
                    fromPartial(_: {}): _142.MsgUpdateClientResponse;
                    fromAmino(_: _142.MsgUpdateClientResponseAmino): _142.MsgUpdateClientResponse;
                    toAmino(_: _142.MsgUpdateClientResponse): _142.MsgUpdateClientResponseAmino;
                    fromAminoMsg(object: _142.MsgUpdateClientResponseAminoMsg): _142.MsgUpdateClientResponse;
                    toAminoMsg(message: _142.MsgUpdateClientResponse): _142.MsgUpdateClientResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgUpdateClientResponseProtoMsg): _142.MsgUpdateClientResponse;
                    toProto(message: _142.MsgUpdateClientResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgUpdateClientResponse): _142.MsgUpdateClientResponseProtoMsg;
                };
                MsgUpgradeClient: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgUpgradeClient, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgUpgradeClient;
                    fromPartial(object: {
                        clientId?: string;
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        proofUpgradeClient?: Uint8Array;
                        proofUpgradeConsensusState?: Uint8Array;
                        signer?: string;
                    }): _142.MsgUpgradeClient;
                    fromAmino(object: _142.MsgUpgradeClientAmino): _142.MsgUpgradeClient;
                    toAmino(message: _142.MsgUpgradeClient): _142.MsgUpgradeClientAmino;
                    fromAminoMsg(object: _142.MsgUpgradeClientAminoMsg): _142.MsgUpgradeClient;
                    toAminoMsg(message: _142.MsgUpgradeClient): _142.MsgUpgradeClientAminoMsg;
                    fromProtoMsg(message: _142.MsgUpgradeClientProtoMsg): _142.MsgUpgradeClient;
                    toProto(message: _142.MsgUpgradeClient): Uint8Array;
                    toProtoMsg(message: _142.MsgUpgradeClient): _142.MsgUpgradeClientProtoMsg;
                };
                MsgUpgradeClientResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgUpgradeClientResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgUpgradeClientResponse;
                    fromPartial(_: {}): _142.MsgUpgradeClientResponse;
                    fromAmino(_: _142.MsgUpgradeClientResponseAmino): _142.MsgUpgradeClientResponse;
                    toAmino(_: _142.MsgUpgradeClientResponse): _142.MsgUpgradeClientResponseAmino;
                    fromAminoMsg(object: _142.MsgUpgradeClientResponseAminoMsg): _142.MsgUpgradeClientResponse;
                    toAminoMsg(message: _142.MsgUpgradeClientResponse): _142.MsgUpgradeClientResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgUpgradeClientResponseProtoMsg): _142.MsgUpgradeClientResponse;
                    toProto(message: _142.MsgUpgradeClientResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgUpgradeClientResponse): _142.MsgUpgradeClientResponseProtoMsg;
                };
                MsgSubmitMisbehaviour: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgSubmitMisbehaviour, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgSubmitMisbehaviour;
                    fromPartial(object: {
                        clientId?: string;
                        misbehaviour?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        signer?: string;
                    }): _142.MsgSubmitMisbehaviour;
                    fromAmino(object: _142.MsgSubmitMisbehaviourAmino): _142.MsgSubmitMisbehaviour;
                    toAmino(message: _142.MsgSubmitMisbehaviour): _142.MsgSubmitMisbehaviourAmino;
                    fromAminoMsg(object: _142.MsgSubmitMisbehaviourAminoMsg): _142.MsgSubmitMisbehaviour;
                    toAminoMsg(message: _142.MsgSubmitMisbehaviour): _142.MsgSubmitMisbehaviourAminoMsg;
                    fromProtoMsg(message: _142.MsgSubmitMisbehaviourProtoMsg): _142.MsgSubmitMisbehaviour;
                    toProto(message: _142.MsgSubmitMisbehaviour): Uint8Array;
                    toProtoMsg(message: _142.MsgSubmitMisbehaviour): _142.MsgSubmitMisbehaviourProtoMsg;
                };
                MsgSubmitMisbehaviourResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgSubmitMisbehaviourResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgSubmitMisbehaviourResponse;
                    fromPartial(_: {}): _142.MsgSubmitMisbehaviourResponse;
                    fromAmino(_: _142.MsgSubmitMisbehaviourResponseAmino): _142.MsgSubmitMisbehaviourResponse;
                    toAmino(_: _142.MsgSubmitMisbehaviourResponse): _142.MsgSubmitMisbehaviourResponseAmino;
                    fromAminoMsg(object: _142.MsgSubmitMisbehaviourResponseAminoMsg): _142.MsgSubmitMisbehaviourResponse;
                    toAminoMsg(message: _142.MsgSubmitMisbehaviourResponse): _142.MsgSubmitMisbehaviourResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgSubmitMisbehaviourResponseProtoMsg): _142.MsgSubmitMisbehaviourResponse;
                    toProto(message: _142.MsgSubmitMisbehaviourResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgSubmitMisbehaviourResponse): _142.MsgSubmitMisbehaviourResponseProtoMsg;
                };
                MsgRecoverClient: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgRecoverClient, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgRecoverClient;
                    fromPartial(object: {
                        subjectClientId?: string;
                        substituteClientId?: string;
                        signer?: string;
                    }): _142.MsgRecoverClient;
                    fromAmino(object: _142.MsgRecoverClientAmino): _142.MsgRecoverClient;
                    toAmino(message: _142.MsgRecoverClient): _142.MsgRecoverClientAmino;
                    fromAminoMsg(object: _142.MsgRecoverClientAminoMsg): _142.MsgRecoverClient;
                    toAminoMsg(message: _142.MsgRecoverClient): _142.MsgRecoverClientAminoMsg;
                    fromProtoMsg(message: _142.MsgRecoverClientProtoMsg): _142.MsgRecoverClient;
                    toProto(message: _142.MsgRecoverClient): Uint8Array;
                    toProtoMsg(message: _142.MsgRecoverClient): _142.MsgRecoverClientProtoMsg;
                };
                MsgRecoverClientResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgRecoverClientResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgRecoverClientResponse;
                    fromPartial(_: {}): _142.MsgRecoverClientResponse;
                    fromAmino(_: _142.MsgRecoverClientResponseAmino): _142.MsgRecoverClientResponse;
                    toAmino(_: _142.MsgRecoverClientResponse): _142.MsgRecoverClientResponseAmino;
                    fromAminoMsg(object: _142.MsgRecoverClientResponseAminoMsg): _142.MsgRecoverClientResponse;
                    toAminoMsg(message: _142.MsgRecoverClientResponse): _142.MsgRecoverClientResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgRecoverClientResponseProtoMsg): _142.MsgRecoverClientResponse;
                    toProto(message: _142.MsgRecoverClientResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgRecoverClientResponse): _142.MsgRecoverClientResponseProtoMsg;
                };
                MsgIBCSoftwareUpgrade: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgIBCSoftwareUpgrade, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgIBCSoftwareUpgrade;
                    fromPartial(object: {
                        plan?: {
                            name?: string;
                            time?: Date;
                            height?: bigint;
                            info?: string;
                            upgradedClientState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        };
                        upgradedClientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        signer?: string;
                    }): _142.MsgIBCSoftwareUpgrade;
                    fromAmino(object: _142.MsgIBCSoftwareUpgradeAmino): _142.MsgIBCSoftwareUpgrade;
                    toAmino(message: _142.MsgIBCSoftwareUpgrade): _142.MsgIBCSoftwareUpgradeAmino;
                    fromAminoMsg(object: _142.MsgIBCSoftwareUpgradeAminoMsg): _142.MsgIBCSoftwareUpgrade;
                    toAminoMsg(message: _142.MsgIBCSoftwareUpgrade): _142.MsgIBCSoftwareUpgradeAminoMsg;
                    fromProtoMsg(message: _142.MsgIBCSoftwareUpgradeProtoMsg): _142.MsgIBCSoftwareUpgrade;
                    toProto(message: _142.MsgIBCSoftwareUpgrade): Uint8Array;
                    toProtoMsg(message: _142.MsgIBCSoftwareUpgrade): _142.MsgIBCSoftwareUpgradeProtoMsg;
                };
                MsgIBCSoftwareUpgradeResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgIBCSoftwareUpgradeResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgIBCSoftwareUpgradeResponse;
                    fromPartial(_: {}): _142.MsgIBCSoftwareUpgradeResponse;
                    fromAmino(_: _142.MsgIBCSoftwareUpgradeResponseAmino): _142.MsgIBCSoftwareUpgradeResponse;
                    toAmino(_: _142.MsgIBCSoftwareUpgradeResponse): _142.MsgIBCSoftwareUpgradeResponseAmino;
                    fromAminoMsg(object: _142.MsgIBCSoftwareUpgradeResponseAminoMsg): _142.MsgIBCSoftwareUpgradeResponse;
                    toAminoMsg(message: _142.MsgIBCSoftwareUpgradeResponse): _142.MsgIBCSoftwareUpgradeResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgIBCSoftwareUpgradeResponseProtoMsg): _142.MsgIBCSoftwareUpgradeResponse;
                    toProto(message: _142.MsgIBCSoftwareUpgradeResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgIBCSoftwareUpgradeResponse): _142.MsgIBCSoftwareUpgradeResponseProtoMsg;
                };
                MsgUpdateParams: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _142.MsgUpdateParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgUpdateParams;
                    fromPartial(object: {
                        signer?: string;
                        params?: {
                            allowedClients?: string[];
                        };
                    }): _142.MsgUpdateParams;
                    fromAmino(object: _142.MsgUpdateParamsAmino): _142.MsgUpdateParams;
                    toAmino(message: _142.MsgUpdateParams): _142.MsgUpdateParamsAmino;
                    fromAminoMsg(object: _142.MsgUpdateParamsAminoMsg): _142.MsgUpdateParams;
                    toAminoMsg(message: _142.MsgUpdateParams): _142.MsgUpdateParamsAminoMsg;
                    fromProtoMsg(message: _142.MsgUpdateParamsProtoMsg): _142.MsgUpdateParams;
                    toProto(message: _142.MsgUpdateParams): Uint8Array;
                    toProtoMsg(message: _142.MsgUpdateParams): _142.MsgUpdateParamsProtoMsg;
                };
                MsgUpdateParamsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _142.MsgUpdateParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _142.MsgUpdateParamsResponse;
                    fromPartial(_: {}): _142.MsgUpdateParamsResponse;
                    fromAmino(_: _142.MsgUpdateParamsResponseAmino): _142.MsgUpdateParamsResponse;
                    toAmino(_: _142.MsgUpdateParamsResponse): _142.MsgUpdateParamsResponseAmino;
                    fromAminoMsg(object: _142.MsgUpdateParamsResponseAminoMsg): _142.MsgUpdateParamsResponse;
                    toAminoMsg(message: _142.MsgUpdateParamsResponse): _142.MsgUpdateParamsResponseAminoMsg;
                    fromProtoMsg(message: _142.MsgUpdateParamsResponseProtoMsg): _142.MsgUpdateParamsResponse;
                    toProto(message: _142.MsgUpdateParamsResponse): Uint8Array;
                    toProtoMsg(message: _142.MsgUpdateParamsResponse): _142.MsgUpdateParamsResponseProtoMsg;
                };
                QueryClientStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientStateRequest;
                    fromPartial(object: {
                        clientId?: string;
                    }): _141.QueryClientStateRequest;
                    fromAmino(object: _141.QueryClientStateRequestAmino): _141.QueryClientStateRequest;
                    toAmino(message: _141.QueryClientStateRequest): _141.QueryClientStateRequestAmino;
                    fromAminoMsg(object: _141.QueryClientStateRequestAminoMsg): _141.QueryClientStateRequest;
                    toAminoMsg(message: _141.QueryClientStateRequest): _141.QueryClientStateRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryClientStateRequestProtoMsg): _141.QueryClientStateRequest;
                    toProto(message: _141.QueryClientStateRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryClientStateRequest): _141.QueryClientStateRequestProtoMsg;
                };
                QueryClientStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientStateResponse;
                    fromPartial(object: {
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _141.QueryClientStateResponse;
                    fromAmino(object: _141.QueryClientStateResponseAmino): _141.QueryClientStateResponse;
                    toAmino(message: _141.QueryClientStateResponse): _141.QueryClientStateResponseAmino;
                    fromAminoMsg(object: _141.QueryClientStateResponseAminoMsg): _141.QueryClientStateResponse;
                    toAminoMsg(message: _141.QueryClientStateResponse): _141.QueryClientStateResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryClientStateResponseProtoMsg): _141.QueryClientStateResponse;
                    toProto(message: _141.QueryClientStateResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryClientStateResponse): _141.QueryClientStateResponseProtoMsg;
                };
                QueryClientStatesRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientStatesRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientStatesRequest;
                    fromPartial(object: {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _141.QueryClientStatesRequest;
                    fromAmino(object: _141.QueryClientStatesRequestAmino): _141.QueryClientStatesRequest;
                    toAmino(message: _141.QueryClientStatesRequest): _141.QueryClientStatesRequestAmino;
                    fromAminoMsg(object: _141.QueryClientStatesRequestAminoMsg): _141.QueryClientStatesRequest;
                    toAminoMsg(message: _141.QueryClientStatesRequest): _141.QueryClientStatesRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryClientStatesRequestProtoMsg): _141.QueryClientStatesRequest;
                    toProto(message: _141.QueryClientStatesRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryClientStatesRequest): _141.QueryClientStatesRequestProtoMsg;
                };
                QueryClientStatesResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientStatesResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientStatesResponse;
                    fromPartial(object: {
                        clientStates?: {
                            clientId?: string;
                            clientState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                    }): _141.QueryClientStatesResponse;
                    fromAmino(object: _141.QueryClientStatesResponseAmino): _141.QueryClientStatesResponse;
                    toAmino(message: _141.QueryClientStatesResponse): _141.QueryClientStatesResponseAmino;
                    fromAminoMsg(object: _141.QueryClientStatesResponseAminoMsg): _141.QueryClientStatesResponse;
                    toAminoMsg(message: _141.QueryClientStatesResponse): _141.QueryClientStatesResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryClientStatesResponseProtoMsg): _141.QueryClientStatesResponse;
                    toProto(message: _141.QueryClientStatesResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryClientStatesResponse): _141.QueryClientStatesResponseProtoMsg;
                };
                QueryConsensusStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryConsensusStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryConsensusStateRequest;
                    fromPartial(object: {
                        clientId?: string;
                        revisionNumber?: bigint;
                        revisionHeight?: bigint;
                        latestHeight?: boolean;
                    }): _141.QueryConsensusStateRequest;
                    fromAmino(object: _141.QueryConsensusStateRequestAmino): _141.QueryConsensusStateRequest;
                    toAmino(message: _141.QueryConsensusStateRequest): _141.QueryConsensusStateRequestAmino;
                    fromAminoMsg(object: _141.QueryConsensusStateRequestAminoMsg): _141.QueryConsensusStateRequest;
                    toAminoMsg(message: _141.QueryConsensusStateRequest): _141.QueryConsensusStateRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryConsensusStateRequestProtoMsg): _141.QueryConsensusStateRequest;
                    toProto(message: _141.QueryConsensusStateRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryConsensusStateRequest): _141.QueryConsensusStateRequestProtoMsg;
                };
                QueryConsensusStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryConsensusStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryConsensusStateResponse;
                    fromPartial(object: {
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _141.QueryConsensusStateResponse;
                    fromAmino(object: _141.QueryConsensusStateResponseAmino): _141.QueryConsensusStateResponse;
                    toAmino(message: _141.QueryConsensusStateResponse): _141.QueryConsensusStateResponseAmino;
                    fromAminoMsg(object: _141.QueryConsensusStateResponseAminoMsg): _141.QueryConsensusStateResponse;
                    toAminoMsg(message: _141.QueryConsensusStateResponse): _141.QueryConsensusStateResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryConsensusStateResponseProtoMsg): _141.QueryConsensusStateResponse;
                    toProto(message: _141.QueryConsensusStateResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryConsensusStateResponse): _141.QueryConsensusStateResponseProtoMsg;
                };
                QueryConsensusStatesRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryConsensusStatesRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryConsensusStatesRequest;
                    fromPartial(object: {
                        clientId?: string;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _141.QueryConsensusStatesRequest;
                    fromAmino(object: _141.QueryConsensusStatesRequestAmino): _141.QueryConsensusStatesRequest;
                    toAmino(message: _141.QueryConsensusStatesRequest): _141.QueryConsensusStatesRequestAmino;
                    fromAminoMsg(object: _141.QueryConsensusStatesRequestAminoMsg): _141.QueryConsensusStatesRequest;
                    toAminoMsg(message: _141.QueryConsensusStatesRequest): _141.QueryConsensusStatesRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryConsensusStatesRequestProtoMsg): _141.QueryConsensusStatesRequest;
                    toProto(message: _141.QueryConsensusStatesRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryConsensusStatesRequest): _141.QueryConsensusStatesRequestProtoMsg;
                };
                QueryConsensusStatesResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryConsensusStatesResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryConsensusStatesResponse;
                    fromPartial(object: {
                        consensusStates?: {
                            height?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            consensusState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                    }): _141.QueryConsensusStatesResponse;
                    fromAmino(object: _141.QueryConsensusStatesResponseAmino): _141.QueryConsensusStatesResponse;
                    toAmino(message: _141.QueryConsensusStatesResponse): _141.QueryConsensusStatesResponseAmino;
                    fromAminoMsg(object: _141.QueryConsensusStatesResponseAminoMsg): _141.QueryConsensusStatesResponse;
                    toAminoMsg(message: _141.QueryConsensusStatesResponse): _141.QueryConsensusStatesResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryConsensusStatesResponseProtoMsg): _141.QueryConsensusStatesResponse;
                    toProto(message: _141.QueryConsensusStatesResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryConsensusStatesResponse): _141.QueryConsensusStatesResponseProtoMsg;
                };
                QueryConsensusStateHeightsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryConsensusStateHeightsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryConsensusStateHeightsRequest;
                    fromPartial(object: {
                        clientId?: string;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _141.QueryConsensusStateHeightsRequest;
                    fromAmino(object: _141.QueryConsensusStateHeightsRequestAmino): _141.QueryConsensusStateHeightsRequest;
                    toAmino(message: _141.QueryConsensusStateHeightsRequest): _141.QueryConsensusStateHeightsRequestAmino;
                    fromAminoMsg(object: _141.QueryConsensusStateHeightsRequestAminoMsg): _141.QueryConsensusStateHeightsRequest;
                    toAminoMsg(message: _141.QueryConsensusStateHeightsRequest): _141.QueryConsensusStateHeightsRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryConsensusStateHeightsRequestProtoMsg): _141.QueryConsensusStateHeightsRequest;
                    toProto(message: _141.QueryConsensusStateHeightsRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryConsensusStateHeightsRequest): _141.QueryConsensusStateHeightsRequestProtoMsg;
                };
                QueryConsensusStateHeightsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryConsensusStateHeightsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryConsensusStateHeightsResponse;
                    fromPartial(object: {
                        consensusStateHeights?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                    }): _141.QueryConsensusStateHeightsResponse;
                    fromAmino(object: _141.QueryConsensusStateHeightsResponseAmino): _141.QueryConsensusStateHeightsResponse;
                    toAmino(message: _141.QueryConsensusStateHeightsResponse): _141.QueryConsensusStateHeightsResponseAmino;
                    fromAminoMsg(object: _141.QueryConsensusStateHeightsResponseAminoMsg): _141.QueryConsensusStateHeightsResponse;
                    toAminoMsg(message: _141.QueryConsensusStateHeightsResponse): _141.QueryConsensusStateHeightsResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryConsensusStateHeightsResponseProtoMsg): _141.QueryConsensusStateHeightsResponse;
                    toProto(message: _141.QueryConsensusStateHeightsResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryConsensusStateHeightsResponse): _141.QueryConsensusStateHeightsResponseProtoMsg;
                };
                QueryClientStatusRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientStatusRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientStatusRequest;
                    fromPartial(object: {
                        clientId?: string;
                    }): _141.QueryClientStatusRequest;
                    fromAmino(object: _141.QueryClientStatusRequestAmino): _141.QueryClientStatusRequest;
                    toAmino(message: _141.QueryClientStatusRequest): _141.QueryClientStatusRequestAmino;
                    fromAminoMsg(object: _141.QueryClientStatusRequestAminoMsg): _141.QueryClientStatusRequest;
                    toAminoMsg(message: _141.QueryClientStatusRequest): _141.QueryClientStatusRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryClientStatusRequestProtoMsg): _141.QueryClientStatusRequest;
                    toProto(message: _141.QueryClientStatusRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryClientStatusRequest): _141.QueryClientStatusRequestProtoMsg;
                };
                QueryClientStatusResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientStatusResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientStatusResponse;
                    fromPartial(object: {
                        status?: string;
                    }): _141.QueryClientStatusResponse;
                    fromAmino(object: _141.QueryClientStatusResponseAmino): _141.QueryClientStatusResponse;
                    toAmino(message: _141.QueryClientStatusResponse): _141.QueryClientStatusResponseAmino;
                    fromAminoMsg(object: _141.QueryClientStatusResponseAminoMsg): _141.QueryClientStatusResponse;
                    toAminoMsg(message: _141.QueryClientStatusResponse): _141.QueryClientStatusResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryClientStatusResponseProtoMsg): _141.QueryClientStatusResponse;
                    toProto(message: _141.QueryClientStatusResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryClientStatusResponse): _141.QueryClientStatusResponseProtoMsg;
                };
                QueryClientParamsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _141.QueryClientParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientParamsRequest;
                    fromPartial(_: {}): _141.QueryClientParamsRequest;
                    fromAmino(_: _141.QueryClientParamsRequestAmino): _141.QueryClientParamsRequest;
                    toAmino(_: _141.QueryClientParamsRequest): _141.QueryClientParamsRequestAmino;
                    fromAminoMsg(object: _141.QueryClientParamsRequestAminoMsg): _141.QueryClientParamsRequest;
                    toAminoMsg(message: _141.QueryClientParamsRequest): _141.QueryClientParamsRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryClientParamsRequestProtoMsg): _141.QueryClientParamsRequest;
                    toProto(message: _141.QueryClientParamsRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryClientParamsRequest): _141.QueryClientParamsRequestProtoMsg;
                };
                QueryClientParamsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryClientParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryClientParamsResponse;
                    fromPartial(object: {
                        params?: {
                            allowedClients?: string[];
                        };
                    }): _141.QueryClientParamsResponse;
                    fromAmino(object: _141.QueryClientParamsResponseAmino): _141.QueryClientParamsResponse;
                    toAmino(message: _141.QueryClientParamsResponse): _141.QueryClientParamsResponseAmino;
                    fromAminoMsg(object: _141.QueryClientParamsResponseAminoMsg): _141.QueryClientParamsResponse;
                    toAminoMsg(message: _141.QueryClientParamsResponse): _141.QueryClientParamsResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryClientParamsResponseProtoMsg): _141.QueryClientParamsResponse;
                    toProto(message: _141.QueryClientParamsResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryClientParamsResponse): _141.QueryClientParamsResponseProtoMsg;
                };
                QueryUpgradedClientStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _141.QueryUpgradedClientStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryUpgradedClientStateRequest;
                    fromPartial(_: {}): _141.QueryUpgradedClientStateRequest;
                    fromAmino(_: _141.QueryUpgradedClientStateRequestAmino): _141.QueryUpgradedClientStateRequest;
                    toAmino(_: _141.QueryUpgradedClientStateRequest): _141.QueryUpgradedClientStateRequestAmino;
                    fromAminoMsg(object: _141.QueryUpgradedClientStateRequestAminoMsg): _141.QueryUpgradedClientStateRequest;
                    toAminoMsg(message: _141.QueryUpgradedClientStateRequest): _141.QueryUpgradedClientStateRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryUpgradedClientStateRequestProtoMsg): _141.QueryUpgradedClientStateRequest;
                    toProto(message: _141.QueryUpgradedClientStateRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryUpgradedClientStateRequest): _141.QueryUpgradedClientStateRequestProtoMsg;
                };
                QueryUpgradedClientStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryUpgradedClientStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryUpgradedClientStateResponse;
                    fromPartial(object: {
                        upgradedClientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }): _141.QueryUpgradedClientStateResponse;
                    fromAmino(object: _141.QueryUpgradedClientStateResponseAmino): _141.QueryUpgradedClientStateResponse;
                    toAmino(message: _141.QueryUpgradedClientStateResponse): _141.QueryUpgradedClientStateResponseAmino;
                    fromAminoMsg(object: _141.QueryUpgradedClientStateResponseAminoMsg): _141.QueryUpgradedClientStateResponse;
                    toAminoMsg(message: _141.QueryUpgradedClientStateResponse): _141.QueryUpgradedClientStateResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryUpgradedClientStateResponseProtoMsg): _141.QueryUpgradedClientStateResponse;
                    toProto(message: _141.QueryUpgradedClientStateResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryUpgradedClientStateResponse): _141.QueryUpgradedClientStateResponseProtoMsg;
                };
                QueryUpgradedConsensusStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _141.QueryUpgradedConsensusStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryUpgradedConsensusStateRequest;
                    fromPartial(_: {}): _141.QueryUpgradedConsensusStateRequest;
                    fromAmino(_: _141.QueryUpgradedConsensusStateRequestAmino): _141.QueryUpgradedConsensusStateRequest;
                    toAmino(_: _141.QueryUpgradedConsensusStateRequest): _141.QueryUpgradedConsensusStateRequestAmino;
                    fromAminoMsg(object: _141.QueryUpgradedConsensusStateRequestAminoMsg): _141.QueryUpgradedConsensusStateRequest;
                    toAminoMsg(message: _141.QueryUpgradedConsensusStateRequest): _141.QueryUpgradedConsensusStateRequestAminoMsg;
                    fromProtoMsg(message: _141.QueryUpgradedConsensusStateRequestProtoMsg): _141.QueryUpgradedConsensusStateRequest;
                    toProto(message: _141.QueryUpgradedConsensusStateRequest): Uint8Array;
                    toProtoMsg(message: _141.QueryUpgradedConsensusStateRequest): _141.QueryUpgradedConsensusStateRequestProtoMsg;
                };
                QueryUpgradedConsensusStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _141.QueryUpgradedConsensusStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _141.QueryUpgradedConsensusStateResponse;
                    fromPartial(object: {
                        upgradedConsensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }): _141.QueryUpgradedConsensusStateResponse;
                    fromAmino(object: _141.QueryUpgradedConsensusStateResponseAmino): _141.QueryUpgradedConsensusStateResponse;
                    toAmino(message: _141.QueryUpgradedConsensusStateResponse): _141.QueryUpgradedConsensusStateResponseAmino;
                    fromAminoMsg(object: _141.QueryUpgradedConsensusStateResponseAminoMsg): _141.QueryUpgradedConsensusStateResponse;
                    toAminoMsg(message: _141.QueryUpgradedConsensusStateResponse): _141.QueryUpgradedConsensusStateResponseAminoMsg;
                    fromProtoMsg(message: _141.QueryUpgradedConsensusStateResponseProtoMsg): _141.QueryUpgradedConsensusStateResponse;
                    toProto(message: _141.QueryUpgradedConsensusStateResponse): Uint8Array;
                    toProtoMsg(message: _141.QueryUpgradedConsensusStateResponse): _141.QueryUpgradedConsensusStateResponseProtoMsg;
                };
                GenesisState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _140.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _140.GenesisState;
                    fromPartial(object: {
                        clients?: {
                            clientId?: string;
                            clientState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                        clientsConsensus?: {
                            clientId?: string;
                            consensusStates?: {
                                height?: {
                                    revisionNumber?: bigint;
                                    revisionHeight?: bigint;
                                };
                                consensusState?: {
                                    $typeUrl?: string;
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                            }[];
                        }[];
                        clientsMetadata?: {
                            clientId?: string;
                            clientMetadata?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                            }[];
                        }[];
                        params?: {
                            allowedClients?: string[];
                        };
                        createLocalhost?: boolean;
                        nextClientSequence?: bigint;
                    }): _140.GenesisState;
                    fromAmino(object: _140.GenesisStateAmino): _140.GenesisState;
                    toAmino(message: _140.GenesisState): _140.GenesisStateAmino;
                    fromAminoMsg(object: _140.GenesisStateAminoMsg): _140.GenesisState;
                    toAminoMsg(message: _140.GenesisState): _140.GenesisStateAminoMsg;
                    fromProtoMsg(message: _140.GenesisStateProtoMsg): _140.GenesisState;
                    toProto(message: _140.GenesisState): Uint8Array;
                    toProtoMsg(message: _140.GenesisState): _140.GenesisStateProtoMsg;
                };
                GenesisMetadata: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _140.GenesisMetadata, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _140.GenesisMetadata;
                    fromPartial(object: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    }): _140.GenesisMetadata;
                    fromAmino(object: _140.GenesisMetadataAmino): _140.GenesisMetadata;
                    toAmino(message: _140.GenesisMetadata): _140.GenesisMetadataAmino;
                    fromAminoMsg(object: _140.GenesisMetadataAminoMsg): _140.GenesisMetadata;
                    toAminoMsg(message: _140.GenesisMetadata): _140.GenesisMetadataAminoMsg;
                    fromProtoMsg(message: _140.GenesisMetadataProtoMsg): _140.GenesisMetadata;
                    toProto(message: _140.GenesisMetadata): Uint8Array;
                    toProtoMsg(message: _140.GenesisMetadata): _140.GenesisMetadataProtoMsg;
                };
                IdentifiedGenesisMetadata: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _140.IdentifiedGenesisMetadata, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _140.IdentifiedGenesisMetadata;
                    fromPartial(object: {
                        clientId?: string;
                        clientMetadata?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        }[];
                    }): _140.IdentifiedGenesisMetadata;
                    fromAmino(object: _140.IdentifiedGenesisMetadataAmino): _140.IdentifiedGenesisMetadata;
                    toAmino(message: _140.IdentifiedGenesisMetadata): _140.IdentifiedGenesisMetadataAmino;
                    fromAminoMsg(object: _140.IdentifiedGenesisMetadataAminoMsg): _140.IdentifiedGenesisMetadata;
                    toAminoMsg(message: _140.IdentifiedGenesisMetadata): _140.IdentifiedGenesisMetadataAminoMsg;
                    fromProtoMsg(message: _140.IdentifiedGenesisMetadataProtoMsg): _140.IdentifiedGenesisMetadata;
                    toProto(message: _140.IdentifiedGenesisMetadata): Uint8Array;
                    toProtoMsg(message: _140.IdentifiedGenesisMetadata): _140.IdentifiedGenesisMetadataProtoMsg;
                };
                IdentifiedClientState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _139.IdentifiedClientState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _139.IdentifiedClientState;
                    fromPartial(object: {
                        clientId?: string;
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }): _139.IdentifiedClientState;
                    fromAmino(object: _139.IdentifiedClientStateAmino): _139.IdentifiedClientState;
                    toAmino(message: _139.IdentifiedClientState): _139.IdentifiedClientStateAmino;
                    fromAminoMsg(object: _139.IdentifiedClientStateAminoMsg): _139.IdentifiedClientState;
                    toAminoMsg(message: _139.IdentifiedClientState): _139.IdentifiedClientStateAminoMsg;
                    fromProtoMsg(message: _139.IdentifiedClientStateProtoMsg): _139.IdentifiedClientState;
                    toProto(message: _139.IdentifiedClientState): Uint8Array;
                    toProtoMsg(message: _139.IdentifiedClientState): _139.IdentifiedClientStateProtoMsg;
                };
                ConsensusStateWithHeight: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _139.ConsensusStateWithHeight, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _139.ConsensusStateWithHeight;
                    fromPartial(object: {
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }): _139.ConsensusStateWithHeight;
                    fromAmino(object: _139.ConsensusStateWithHeightAmino): _139.ConsensusStateWithHeight;
                    toAmino(message: _139.ConsensusStateWithHeight): _139.ConsensusStateWithHeightAmino;
                    fromAminoMsg(object: _139.ConsensusStateWithHeightAminoMsg): _139.ConsensusStateWithHeight;
                    toAminoMsg(message: _139.ConsensusStateWithHeight): _139.ConsensusStateWithHeightAminoMsg;
                    fromProtoMsg(message: _139.ConsensusStateWithHeightProtoMsg): _139.ConsensusStateWithHeight;
                    toProto(message: _139.ConsensusStateWithHeight): Uint8Array;
                    toProtoMsg(message: _139.ConsensusStateWithHeight): _139.ConsensusStateWithHeightProtoMsg;
                };
                ClientConsensusStates: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _139.ClientConsensusStates, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _139.ClientConsensusStates;
                    fromPartial(object: {
                        clientId?: string;
                        consensusStates?: {
                            height?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            consensusState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    }): _139.ClientConsensusStates;
                    fromAmino(object: _139.ClientConsensusStatesAmino): _139.ClientConsensusStates;
                    toAmino(message: _139.ClientConsensusStates): _139.ClientConsensusStatesAmino;
                    fromAminoMsg(object: _139.ClientConsensusStatesAminoMsg): _139.ClientConsensusStates;
                    toAminoMsg(message: _139.ClientConsensusStates): _139.ClientConsensusStatesAminoMsg;
                    fromProtoMsg(message: _139.ClientConsensusStatesProtoMsg): _139.ClientConsensusStates;
                    toProto(message: _139.ClientConsensusStates): Uint8Array;
                    toProtoMsg(message: _139.ClientConsensusStates): _139.ClientConsensusStatesProtoMsg;
                };
                Height: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _139.Height, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _139.Height;
                    fromPartial(object: {
                        revisionNumber?: bigint;
                        revisionHeight?: bigint;
                    }): _139.Height;
                    fromAmino(object: _139.HeightAmino): _139.Height;
                    toAmino(message: _139.Height): _139.HeightAmino;
                    fromAminoMsg(object: _139.HeightAminoMsg): _139.Height;
                    toAminoMsg(message: _139.Height): _139.HeightAminoMsg;
                    fromProtoMsg(message: _139.HeightProtoMsg): _139.Height;
                    toProto(message: _139.Height): Uint8Array;
                    toProtoMsg(message: _139.Height): _139.HeightProtoMsg;
                };
                Params: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _139.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _139.Params;
                    fromPartial(object: {
                        allowedClients?: string[];
                    }): _139.Params;
                    fromAmino(object: _139.ParamsAmino): _139.Params;
                    toAmino(message: _139.Params): _139.ParamsAmino;
                    fromAminoMsg(object: _139.ParamsAminoMsg): _139.Params;
                    toAminoMsg(message: _139.Params): _139.ParamsAminoMsg;
                    fromProtoMsg(message: _139.ParamsProtoMsg): _139.Params;
                    toProto(message: _139.Params): Uint8Array;
                    toProtoMsg(message: _139.Params): _139.ParamsProtoMsg;
                };
            };
        }
        namespace commitment {
            const v1: {
                MerkleRoot: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _143.MerkleRoot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _143.MerkleRoot;
                    fromPartial(object: {
                        hash?: Uint8Array;
                    }): _143.MerkleRoot;
                    fromAmino(object: _143.MerkleRootAmino): _143.MerkleRoot;
                    toAmino(message: _143.MerkleRoot): _143.MerkleRootAmino;
                    fromAminoMsg(object: _143.MerkleRootAminoMsg): _143.MerkleRoot;
                    toAminoMsg(message: _143.MerkleRoot): _143.MerkleRootAminoMsg;
                    fromProtoMsg(message: _143.MerkleRootProtoMsg): _143.MerkleRoot;
                    toProto(message: _143.MerkleRoot): Uint8Array;
                    toProtoMsg(message: _143.MerkleRoot): _143.MerkleRootProtoMsg;
                };
                MerklePrefix: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _143.MerklePrefix, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _143.MerklePrefix;
                    fromPartial(object: {
                        keyPrefix?: Uint8Array;
                    }): _143.MerklePrefix;
                    fromAmino(object: _143.MerklePrefixAmino): _143.MerklePrefix;
                    toAmino(message: _143.MerklePrefix): _143.MerklePrefixAmino;
                    fromAminoMsg(object: _143.MerklePrefixAminoMsg): _143.MerklePrefix;
                    toAminoMsg(message: _143.MerklePrefix): _143.MerklePrefixAminoMsg;
                    fromProtoMsg(message: _143.MerklePrefixProtoMsg): _143.MerklePrefix;
                    toProto(message: _143.MerklePrefix): Uint8Array;
                    toProtoMsg(message: _143.MerklePrefix): _143.MerklePrefixProtoMsg;
                };
                MerklePath: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _143.MerklePath, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _143.MerklePath;
                    fromPartial(object: {
                        keyPath?: string[];
                    }): _143.MerklePath;
                    fromAmino(object: _143.MerklePathAmino): _143.MerklePath;
                    toAmino(message: _143.MerklePath): _143.MerklePathAmino;
                    fromAminoMsg(object: _143.MerklePathAminoMsg): _143.MerklePath;
                    toAminoMsg(message: _143.MerklePath): _143.MerklePathAminoMsg;
                    fromProtoMsg(message: _143.MerklePathProtoMsg): _143.MerklePath;
                    toProto(message: _143.MerklePath): Uint8Array;
                    toProtoMsg(message: _143.MerklePath): _143.MerklePathProtoMsg;
                };
                MerkleProof: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _143.MerkleProof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _143.MerkleProof;
                    fromPartial(object: {
                        proofs?: {
                            exist?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                leaf?: {
                                    hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                    prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                    prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                    length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                    prefix?: Uint8Array;
                                };
                                path?: {
                                    hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                    prefix?: Uint8Array;
                                    suffix?: Uint8Array;
                                }[];
                            };
                            nonexist?: {
                                key?: Uint8Array;
                                left?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    leaf?: {
                                        hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                        prefix?: Uint8Array;
                                    };
                                    path?: {
                                        hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        prefix?: Uint8Array;
                                        suffix?: Uint8Array;
                                    }[];
                                };
                                right?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    leaf?: {
                                        hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                        prefix?: Uint8Array;
                                    };
                                    path?: {
                                        hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                        prefix?: Uint8Array;
                                        suffix?: Uint8Array;
                                    }[];
                                };
                            };
                            batch?: {
                                entries?: {
                                    exist?: {
                                        key?: Uint8Array;
                                        value?: Uint8Array;
                                        leaf?: {
                                            hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                            prefix?: Uint8Array;
                                        };
                                        path?: {
                                            hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            prefix?: Uint8Array;
                                            suffix?: Uint8Array;
                                        }[];
                                    };
                                    nonexist?: {
                                        key?: Uint8Array;
                                        left?: {
                                            key?: Uint8Array;
                                            value?: Uint8Array;
                                            leaf?: {
                                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                                prefix?: Uint8Array;
                                            };
                                            path?: {
                                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prefix?: Uint8Array;
                                                suffix?: Uint8Array;
                                            }[];
                                        };
                                        right?: {
                                            key?: Uint8Array;
                                            value?: Uint8Array;
                                            leaf?: {
                                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                                prefix?: Uint8Array;
                                            };
                                            path?: {
                                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prefix?: Uint8Array;
                                                suffix?: Uint8Array;
                                            }[];
                                        };
                                    };
                                }[];
                            };
                            compressed?: {
                                entries?: {
                                    exist?: {
                                        key?: Uint8Array;
                                        value?: Uint8Array;
                                        leaf?: {
                                            hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                            length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                            prefix?: Uint8Array;
                                        };
                                        path?: number[];
                                    };
                                    nonexist?: {
                                        key?: Uint8Array;
                                        left?: {
                                            key?: Uint8Array;
                                            value?: Uint8Array;
                                            leaf?: {
                                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                                prefix?: Uint8Array;
                                            };
                                            path?: number[];
                                        };
                                        right?: {
                                            key?: Uint8Array;
                                            value?: Uint8Array;
                                            leaf?: {
                                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                                length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                                prefix?: Uint8Array;
                                            };
                                            path?: number[];
                                        };
                                    };
                                }[];
                                lookupInners?: {
                                    hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                    prefix?: Uint8Array;
                                    suffix?: Uint8Array;
                                }[];
                            };
                        }[];
                    }): _143.MerkleProof;
                    fromAmino(object: _143.MerkleProofAmino): _143.MerkleProof;
                    toAmino(message: _143.MerkleProof): _143.MerkleProofAmino;
                    fromAminoMsg(object: _143.MerkleProofAminoMsg): _143.MerkleProof;
                    toAminoMsg(message: _143.MerkleProof): _143.MerkleProofAminoMsg;
                    fromProtoMsg(message: _143.MerkleProofProtoMsg): _143.MerkleProof;
                    toProto(message: _143.MerkleProof): Uint8Array;
                    toProtoMsg(message: _143.MerkleProof): _143.MerkleProofProtoMsg;
                };
            };
        }
        namespace connection {
            const v1: {
                MsgClientImpl: typeof _272.MsgClientImpl;
                QueryClientImpl: typeof _266.QueryClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    connection(request: _146.QueryConnectionRequest): Promise<_146.QueryConnectionResponse>;
                    connections(request?: _146.QueryConnectionsRequest): Promise<_146.QueryConnectionsResponse>;
                    clientConnections(request: _146.QueryClientConnectionsRequest): Promise<_146.QueryClientConnectionsResponse>;
                    connectionClientState(request: _146.QueryConnectionClientStateRequest): Promise<_146.QueryConnectionClientStateResponse>;
                    connectionConsensusState(request: _146.QueryConnectionConsensusStateRequest): Promise<_146.QueryConnectionConsensusStateResponse>;
                    connectionParams(request?: _146.QueryConnectionParamsRequest): Promise<_146.QueryConnectionParamsResponse>;
                };
                LCDQueryClient: typeof _260.LCDQueryClient;
                registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
                load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
                MessageComposer: {
                    encoded: {
                        connectionOpenInit(value: _147.MsgConnectionOpenInit): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        connectionOpenTry(value: _147.MsgConnectionOpenTry): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        connectionOpenAck(value: _147.MsgConnectionOpenAck): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        connectionOpenConfirm(value: _147.MsgConnectionOpenConfirm): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                        updateConnectionParams(value: _147.MsgUpdateParams): {
                            typeUrl: string;
                            value: Uint8Array;
                        };
                    };
                    withTypeUrl: {
                        connectionOpenInit(value: _147.MsgConnectionOpenInit): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenInit;
                        };
                        connectionOpenTry(value: _147.MsgConnectionOpenTry): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenTry;
                        };
                        connectionOpenAck(value: _147.MsgConnectionOpenAck): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenAck;
                        };
                        connectionOpenConfirm(value: _147.MsgConnectionOpenConfirm): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenConfirm;
                        };
                        updateConnectionParams(value: _147.MsgUpdateParams): {
                            typeUrl: string;
                            value: _147.MsgUpdateParams;
                        };
                    };
                    fromPartial: {
                        connectionOpenInit(value: _147.MsgConnectionOpenInit): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenInit;
                        };
                        connectionOpenTry(value: _147.MsgConnectionOpenTry): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenTry;
                        };
                        connectionOpenAck(value: _147.MsgConnectionOpenAck): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenAck;
                        };
                        connectionOpenConfirm(value: _147.MsgConnectionOpenConfirm): {
                            typeUrl: string;
                            value: _147.MsgConnectionOpenConfirm;
                        };
                        updateConnectionParams(value: _147.MsgUpdateParams): {
                            typeUrl: string;
                            value: _147.MsgUpdateParams;
                        };
                    };
                };
                AminoConverter: {
                    "/ibc.core.connection.v1.MsgConnectionOpenInit": {
                        aminoType: string;
                        toAmino: (message: _147.MsgConnectionOpenInit) => _147.MsgConnectionOpenInitAmino;
                        fromAmino: (object: _147.MsgConnectionOpenInitAmino) => _147.MsgConnectionOpenInit;
                    };
                    "/ibc.core.connection.v1.MsgConnectionOpenTry": {
                        aminoType: string;
                        toAmino: (message: _147.MsgConnectionOpenTry) => _147.MsgConnectionOpenTryAmino;
                        fromAmino: (object: _147.MsgConnectionOpenTryAmino) => _147.MsgConnectionOpenTry;
                    };
                    "/ibc.core.connection.v1.MsgConnectionOpenAck": {
                        aminoType: string;
                        toAmino: (message: _147.MsgConnectionOpenAck) => _147.MsgConnectionOpenAckAmino;
                        fromAmino: (object: _147.MsgConnectionOpenAckAmino) => _147.MsgConnectionOpenAck;
                    };
                    "/ibc.core.connection.v1.MsgConnectionOpenConfirm": {
                        aminoType: string;
                        toAmino: (message: _147.MsgConnectionOpenConfirm) => _147.MsgConnectionOpenConfirmAmino;
                        fromAmino: (object: _147.MsgConnectionOpenConfirmAmino) => _147.MsgConnectionOpenConfirm;
                    };
                    "/ibc.core.connection.v1.MsgUpdateParams": {
                        aminoType: string;
                        toAmino: (message: _147.MsgUpdateParams) => _147.MsgUpdateParamsAmino;
                        fromAmino: (object: _147.MsgUpdateParamsAmino) => _147.MsgUpdateParams;
                    };
                };
                MsgConnectionOpenInit: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _147.MsgConnectionOpenInit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenInit;
                    fromPartial(object: {
                        clientId?: string;
                        counterparty?: {
                            clientId?: string;
                            connectionId?: string;
                            prefix?: {
                                keyPrefix?: Uint8Array;
                            };
                        };
                        version?: {
                            identifier?: string;
                            features?: string[];
                        };
                        delayPeriod?: bigint;
                        signer?: string;
                    }): _147.MsgConnectionOpenInit;
                    fromAmino(object: _147.MsgConnectionOpenInitAmino): _147.MsgConnectionOpenInit;
                    toAmino(message: _147.MsgConnectionOpenInit): _147.MsgConnectionOpenInitAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenInitAminoMsg): _147.MsgConnectionOpenInit;
                    toAminoMsg(message: _147.MsgConnectionOpenInit): _147.MsgConnectionOpenInitAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenInitProtoMsg): _147.MsgConnectionOpenInit;
                    toProto(message: _147.MsgConnectionOpenInit): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenInit): _147.MsgConnectionOpenInitProtoMsg;
                };
                MsgConnectionOpenInitResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _147.MsgConnectionOpenInitResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenInitResponse;
                    fromPartial(_: {}): _147.MsgConnectionOpenInitResponse;
                    fromAmino(_: _147.MsgConnectionOpenInitResponseAmino): _147.MsgConnectionOpenInitResponse;
                    toAmino(_: _147.MsgConnectionOpenInitResponse): _147.MsgConnectionOpenInitResponseAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenInitResponseAminoMsg): _147.MsgConnectionOpenInitResponse;
                    toAminoMsg(message: _147.MsgConnectionOpenInitResponse): _147.MsgConnectionOpenInitResponseAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenInitResponseProtoMsg): _147.MsgConnectionOpenInitResponse;
                    toProto(message: _147.MsgConnectionOpenInitResponse): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenInitResponse): _147.MsgConnectionOpenInitResponseProtoMsg;
                };
                MsgConnectionOpenTry: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _147.MsgConnectionOpenTry, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenTry;
                    fromPartial(object: {
                        clientId?: string;
                        previousConnectionId?: string;
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        counterparty?: {
                            clientId?: string;
                            connectionId?: string;
                            prefix?: {
                                keyPrefix?: Uint8Array;
                            };
                        };
                        delayPeriod?: bigint;
                        counterpartyVersions?: {
                            identifier?: string;
                            features?: string[];
                        }[];
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        proofInit?: Uint8Array;
                        proofClient?: Uint8Array;
                        proofConsensus?: Uint8Array;
                        consensusHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                        hostConsensusStateProof?: Uint8Array;
                    }): _147.MsgConnectionOpenTry;
                    fromAmino(object: _147.MsgConnectionOpenTryAmino): _147.MsgConnectionOpenTry;
                    toAmino(message: _147.MsgConnectionOpenTry): _147.MsgConnectionOpenTryAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenTryAminoMsg): _147.MsgConnectionOpenTry;
                    toAminoMsg(message: _147.MsgConnectionOpenTry): _147.MsgConnectionOpenTryAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenTryProtoMsg): _147.MsgConnectionOpenTry;
                    toProto(message: _147.MsgConnectionOpenTry): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenTry): _147.MsgConnectionOpenTryProtoMsg;
                };
                MsgConnectionOpenTryResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _147.MsgConnectionOpenTryResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenTryResponse;
                    fromPartial(_: {}): _147.MsgConnectionOpenTryResponse;
                    fromAmino(_: _147.MsgConnectionOpenTryResponseAmino): _147.MsgConnectionOpenTryResponse;
                    toAmino(_: _147.MsgConnectionOpenTryResponse): _147.MsgConnectionOpenTryResponseAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenTryResponseAminoMsg): _147.MsgConnectionOpenTryResponse;
                    toAminoMsg(message: _147.MsgConnectionOpenTryResponse): _147.MsgConnectionOpenTryResponseAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenTryResponseProtoMsg): _147.MsgConnectionOpenTryResponse;
                    toProto(message: _147.MsgConnectionOpenTryResponse): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenTryResponse): _147.MsgConnectionOpenTryResponseProtoMsg;
                };
                MsgConnectionOpenAck: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _147.MsgConnectionOpenAck, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenAck;
                    fromPartial(object: {
                        connectionId?: string;
                        counterpartyConnectionId?: string;
                        version?: {
                            identifier?: string;
                            features?: string[];
                        };
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        proofTry?: Uint8Array;
                        proofClient?: Uint8Array;
                        proofConsensus?: Uint8Array;
                        consensusHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                        hostConsensusStateProof?: Uint8Array;
                    }): _147.MsgConnectionOpenAck;
                    fromAmino(object: _147.MsgConnectionOpenAckAmino): _147.MsgConnectionOpenAck;
                    toAmino(message: _147.MsgConnectionOpenAck): _147.MsgConnectionOpenAckAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenAckAminoMsg): _147.MsgConnectionOpenAck;
                    toAminoMsg(message: _147.MsgConnectionOpenAck): _147.MsgConnectionOpenAckAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenAckProtoMsg): _147.MsgConnectionOpenAck;
                    toProto(message: _147.MsgConnectionOpenAck): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenAck): _147.MsgConnectionOpenAckProtoMsg;
                };
                MsgConnectionOpenAckResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _147.MsgConnectionOpenAckResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenAckResponse;
                    fromPartial(_: {}): _147.MsgConnectionOpenAckResponse;
                    fromAmino(_: _147.MsgConnectionOpenAckResponseAmino): _147.MsgConnectionOpenAckResponse;
                    toAmino(_: _147.MsgConnectionOpenAckResponse): _147.MsgConnectionOpenAckResponseAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenAckResponseAminoMsg): _147.MsgConnectionOpenAckResponse;
                    toAminoMsg(message: _147.MsgConnectionOpenAckResponse): _147.MsgConnectionOpenAckResponseAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenAckResponseProtoMsg): _147.MsgConnectionOpenAckResponse;
                    toProto(message: _147.MsgConnectionOpenAckResponse): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenAckResponse): _147.MsgConnectionOpenAckResponseProtoMsg;
                };
                MsgConnectionOpenConfirm: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _147.MsgConnectionOpenConfirm, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenConfirm;
                    fromPartial(object: {
                        connectionId?: string;
                        proofAck?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        signer?: string;
                    }): _147.MsgConnectionOpenConfirm;
                    fromAmino(object: _147.MsgConnectionOpenConfirmAmino): _147.MsgConnectionOpenConfirm;
                    toAmino(message: _147.MsgConnectionOpenConfirm): _147.MsgConnectionOpenConfirmAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenConfirmAminoMsg): _147.MsgConnectionOpenConfirm;
                    toAminoMsg(message: _147.MsgConnectionOpenConfirm): _147.MsgConnectionOpenConfirmAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenConfirmProtoMsg): _147.MsgConnectionOpenConfirm;
                    toProto(message: _147.MsgConnectionOpenConfirm): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenConfirm): _147.MsgConnectionOpenConfirmProtoMsg;
                };
                MsgConnectionOpenConfirmResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _147.MsgConnectionOpenConfirmResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgConnectionOpenConfirmResponse;
                    fromPartial(_: {}): _147.MsgConnectionOpenConfirmResponse;
                    fromAmino(_: _147.MsgConnectionOpenConfirmResponseAmino): _147.MsgConnectionOpenConfirmResponse;
                    toAmino(_: _147.MsgConnectionOpenConfirmResponse): _147.MsgConnectionOpenConfirmResponseAmino;
                    fromAminoMsg(object: _147.MsgConnectionOpenConfirmResponseAminoMsg): _147.MsgConnectionOpenConfirmResponse;
                    toAminoMsg(message: _147.MsgConnectionOpenConfirmResponse): _147.MsgConnectionOpenConfirmResponseAminoMsg;
                    fromProtoMsg(message: _147.MsgConnectionOpenConfirmResponseProtoMsg): _147.MsgConnectionOpenConfirmResponse;
                    toProto(message: _147.MsgConnectionOpenConfirmResponse): Uint8Array;
                    toProtoMsg(message: _147.MsgConnectionOpenConfirmResponse): _147.MsgConnectionOpenConfirmResponseProtoMsg;
                };
                MsgUpdateParams: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _147.MsgUpdateParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgUpdateParams;
                    fromPartial(object: {
                        signer?: string;
                        params?: {
                            allowedClients?: string[];
                        };
                    }): _147.MsgUpdateParams;
                    fromAmino(object: _147.MsgUpdateParamsAmino): _147.MsgUpdateParams;
                    toAmino(message: _147.MsgUpdateParams): _147.MsgUpdateParamsAmino;
                    fromAminoMsg(object: _147.MsgUpdateParamsAminoMsg): _147.MsgUpdateParams;
                    toAminoMsg(message: _147.MsgUpdateParams): _147.MsgUpdateParamsAminoMsg;
                    fromProtoMsg(message: _147.MsgUpdateParamsProtoMsg): _147.MsgUpdateParams;
                    toProto(message: _147.MsgUpdateParams): Uint8Array;
                    toProtoMsg(message: _147.MsgUpdateParams): _147.MsgUpdateParamsProtoMsg;
                };
                MsgUpdateParamsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _147.MsgUpdateParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _147.MsgUpdateParamsResponse;
                    fromPartial(_: {}): _147.MsgUpdateParamsResponse;
                    fromAmino(_: _147.MsgUpdateParamsResponseAmino): _147.MsgUpdateParamsResponse;
                    toAmino(_: _147.MsgUpdateParamsResponse): _147.MsgUpdateParamsResponseAmino;
                    fromAminoMsg(object: _147.MsgUpdateParamsResponseAminoMsg): _147.MsgUpdateParamsResponse;
                    toAminoMsg(message: _147.MsgUpdateParamsResponse): _147.MsgUpdateParamsResponseAminoMsg;
                    fromProtoMsg(message: _147.MsgUpdateParamsResponseProtoMsg): _147.MsgUpdateParamsResponse;
                    toProto(message: _147.MsgUpdateParamsResponse): Uint8Array;
                    toProtoMsg(message: _147.MsgUpdateParamsResponse): _147.MsgUpdateParamsResponseProtoMsg;
                };
                QueryConnectionRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionRequest;
                    fromPartial(object: {
                        connectionId?: string;
                    }): _146.QueryConnectionRequest;
                    fromAmino(object: _146.QueryConnectionRequestAmino): _146.QueryConnectionRequest;
                    toAmino(message: _146.QueryConnectionRequest): _146.QueryConnectionRequestAmino;
                    fromAminoMsg(object: _146.QueryConnectionRequestAminoMsg): _146.QueryConnectionRequest;
                    toAminoMsg(message: _146.QueryConnectionRequest): _146.QueryConnectionRequestAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionRequestProtoMsg): _146.QueryConnectionRequest;
                    toProto(message: _146.QueryConnectionRequest): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionRequest): _146.QueryConnectionRequestProtoMsg;
                };
                QueryConnectionResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionResponse;
                    fromPartial(object: {
                        connection?: {
                            clientId?: string;
                            versions?: {
                                identifier?: string;
                                features?: string[];
                            }[];
                            state?: _144.State;
                            counterparty?: {
                                clientId?: string;
                                connectionId?: string;
                                prefix?: {
                                    keyPrefix?: Uint8Array;
                                };
                            };
                            delayPeriod?: bigint;
                        };
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _146.QueryConnectionResponse;
                    fromAmino(object: _146.QueryConnectionResponseAmino): _146.QueryConnectionResponse;
                    toAmino(message: _146.QueryConnectionResponse): _146.QueryConnectionResponseAmino;
                    fromAminoMsg(object: _146.QueryConnectionResponseAminoMsg): _146.QueryConnectionResponse;
                    toAminoMsg(message: _146.QueryConnectionResponse): _146.QueryConnectionResponseAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionResponseProtoMsg): _146.QueryConnectionResponse;
                    toProto(message: _146.QueryConnectionResponse): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionResponse): _146.QueryConnectionResponseProtoMsg;
                };
                QueryConnectionsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionsRequest;
                    fromPartial(object: {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: bigint;
                            limit?: bigint;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _146.QueryConnectionsRequest;
                    fromAmino(object: _146.QueryConnectionsRequestAmino): _146.QueryConnectionsRequest;
                    toAmino(message: _146.QueryConnectionsRequest): _146.QueryConnectionsRequestAmino;
                    fromAminoMsg(object: _146.QueryConnectionsRequestAminoMsg): _146.QueryConnectionsRequest;
                    toAminoMsg(message: _146.QueryConnectionsRequest): _146.QueryConnectionsRequestAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionsRequestProtoMsg): _146.QueryConnectionsRequest;
                    toProto(message: _146.QueryConnectionsRequest): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionsRequest): _146.QueryConnectionsRequestProtoMsg;
                };
                QueryConnectionsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionsResponse;
                    fromPartial(object: {
                        connections?: {
                            id?: string;
                            clientId?: string;
                            versions?: {
                                identifier?: string;
                                features?: string[];
                            }[];
                            state?: _144.State;
                            counterparty?: {
                                clientId?: string;
                                connectionId?: string;
                                prefix?: {
                                    keyPrefix?: Uint8Array;
                                };
                            };
                            delayPeriod?: bigint;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: bigint;
                        };
                        height?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _146.QueryConnectionsResponse;
                    fromAmino(object: _146.QueryConnectionsResponseAmino): _146.QueryConnectionsResponse;
                    toAmino(message: _146.QueryConnectionsResponse): _146.QueryConnectionsResponseAmino;
                    fromAminoMsg(object: _146.QueryConnectionsResponseAminoMsg): _146.QueryConnectionsResponse;
                    toAminoMsg(message: _146.QueryConnectionsResponse): _146.QueryConnectionsResponseAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionsResponseProtoMsg): _146.QueryConnectionsResponse;
                    toProto(message: _146.QueryConnectionsResponse): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionsResponse): _146.QueryConnectionsResponseProtoMsg;
                };
                QueryClientConnectionsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryClientConnectionsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryClientConnectionsRequest;
                    fromPartial(object: {
                        clientId?: string;
                    }): _146.QueryClientConnectionsRequest;
                    fromAmino(object: _146.QueryClientConnectionsRequestAmino): _146.QueryClientConnectionsRequest;
                    toAmino(message: _146.QueryClientConnectionsRequest): _146.QueryClientConnectionsRequestAmino;
                    fromAminoMsg(object: _146.QueryClientConnectionsRequestAminoMsg): _146.QueryClientConnectionsRequest;
                    toAminoMsg(message: _146.QueryClientConnectionsRequest): _146.QueryClientConnectionsRequestAminoMsg;
                    fromProtoMsg(message: _146.QueryClientConnectionsRequestProtoMsg): _146.QueryClientConnectionsRequest;
                    toProto(message: _146.QueryClientConnectionsRequest): Uint8Array;
                    toProtoMsg(message: _146.QueryClientConnectionsRequest): _146.QueryClientConnectionsRequestProtoMsg;
                };
                QueryClientConnectionsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryClientConnectionsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryClientConnectionsResponse;
                    fromPartial(object: {
                        connectionPaths?: string[];
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _146.QueryClientConnectionsResponse;
                    fromAmino(object: _146.QueryClientConnectionsResponseAmino): _146.QueryClientConnectionsResponse;
                    toAmino(message: _146.QueryClientConnectionsResponse): _146.QueryClientConnectionsResponseAmino;
                    fromAminoMsg(object: _146.QueryClientConnectionsResponseAminoMsg): _146.QueryClientConnectionsResponse;
                    toAminoMsg(message: _146.QueryClientConnectionsResponse): _146.QueryClientConnectionsResponseAminoMsg;
                    fromProtoMsg(message: _146.QueryClientConnectionsResponseProtoMsg): _146.QueryClientConnectionsResponse;
                    toProto(message: _146.QueryClientConnectionsResponse): Uint8Array;
                    toProtoMsg(message: _146.QueryClientConnectionsResponse): _146.QueryClientConnectionsResponseProtoMsg;
                };
                QueryConnectionClientStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionClientStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionClientStateRequest;
                    fromPartial(object: {
                        connectionId?: string;
                    }): _146.QueryConnectionClientStateRequest;
                    fromAmino(object: _146.QueryConnectionClientStateRequestAmino): _146.QueryConnectionClientStateRequest;
                    toAmino(message: _146.QueryConnectionClientStateRequest): _146.QueryConnectionClientStateRequestAmino;
                    fromAminoMsg(object: _146.QueryConnectionClientStateRequestAminoMsg): _146.QueryConnectionClientStateRequest;
                    toAminoMsg(message: _146.QueryConnectionClientStateRequest): _146.QueryConnectionClientStateRequestAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionClientStateRequestProtoMsg): _146.QueryConnectionClientStateRequest;
                    toProto(message: _146.QueryConnectionClientStateRequest): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionClientStateRequest): _146.QueryConnectionClientStateRequestProtoMsg;
                };
                QueryConnectionClientStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionClientStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionClientStateResponse;
                    fromPartial(object: {
                        identifiedClientState?: {
                            clientId?: string;
                            clientState?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        };
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _146.QueryConnectionClientStateResponse;
                    fromAmino(object: _146.QueryConnectionClientStateResponseAmino): _146.QueryConnectionClientStateResponse;
                    toAmino(message: _146.QueryConnectionClientStateResponse): _146.QueryConnectionClientStateResponseAmino;
                    fromAminoMsg(object: _146.QueryConnectionClientStateResponseAminoMsg): _146.QueryConnectionClientStateResponse;
                    toAminoMsg(message: _146.QueryConnectionClientStateResponse): _146.QueryConnectionClientStateResponseAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionClientStateResponseProtoMsg): _146.QueryConnectionClientStateResponse;
                    toProto(message: _146.QueryConnectionClientStateResponse): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionClientStateResponse): _146.QueryConnectionClientStateResponseProtoMsg;
                };
                QueryConnectionConsensusStateRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionConsensusStateRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionConsensusStateRequest;
                    fromPartial(object: {
                        connectionId?: string;
                        revisionNumber?: bigint;
                        revisionHeight?: bigint;
                    }): _146.QueryConnectionConsensusStateRequest;
                    fromAmino(object: _146.QueryConnectionConsensusStateRequestAmino): _146.QueryConnectionConsensusStateRequest;
                    toAmino(message: _146.QueryConnectionConsensusStateRequest): _146.QueryConnectionConsensusStateRequestAmino;
                    fromAminoMsg(object: _146.QueryConnectionConsensusStateRequestAminoMsg): _146.QueryConnectionConsensusStateRequest;
                    toAminoMsg(message: _146.QueryConnectionConsensusStateRequest): _146.QueryConnectionConsensusStateRequestAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionConsensusStateRequestProtoMsg): _146.QueryConnectionConsensusStateRequest;
                    toProto(message: _146.QueryConnectionConsensusStateRequest): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionConsensusStateRequest): _146.QueryConnectionConsensusStateRequestProtoMsg;
                };
                QueryConnectionConsensusStateResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionConsensusStateResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionConsensusStateResponse;
                    fromPartial(object: {
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        clientId?: string;
                        proof?: Uint8Array;
                        proofHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _146.QueryConnectionConsensusStateResponse;
                    fromAmino(object: _146.QueryConnectionConsensusStateResponseAmino): _146.QueryConnectionConsensusStateResponse;
                    toAmino(message: _146.QueryConnectionConsensusStateResponse): _146.QueryConnectionConsensusStateResponseAmino;
                    fromAminoMsg(object: _146.QueryConnectionConsensusStateResponseAminoMsg): _146.QueryConnectionConsensusStateResponse;
                    toAminoMsg(message: _146.QueryConnectionConsensusStateResponse): _146.QueryConnectionConsensusStateResponseAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionConsensusStateResponseProtoMsg): _146.QueryConnectionConsensusStateResponse;
                    toProto(message: _146.QueryConnectionConsensusStateResponse): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionConsensusStateResponse): _146.QueryConnectionConsensusStateResponseProtoMsg;
                };
                QueryConnectionParamsRequest: {
                    typeUrl: string;
                    aminoType: string;
                    encode(_: _146.QueryConnectionParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionParamsRequest;
                    fromPartial(_: {}): _146.QueryConnectionParamsRequest;
                    fromAmino(_: _146.QueryConnectionParamsRequestAmino): _146.QueryConnectionParamsRequest;
                    toAmino(_: _146.QueryConnectionParamsRequest): _146.QueryConnectionParamsRequestAmino;
                    fromAminoMsg(object: _146.QueryConnectionParamsRequestAminoMsg): _146.QueryConnectionParamsRequest;
                    toAminoMsg(message: _146.QueryConnectionParamsRequest): _146.QueryConnectionParamsRequestAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionParamsRequestProtoMsg): _146.QueryConnectionParamsRequest;
                    toProto(message: _146.QueryConnectionParamsRequest): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionParamsRequest): _146.QueryConnectionParamsRequestProtoMsg;
                };
                QueryConnectionParamsResponse: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _146.QueryConnectionParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _146.QueryConnectionParamsResponse;
                    fromPartial(object: {
                        params?: {
                            allowedClients?: string[];
                        };
                    }): _146.QueryConnectionParamsResponse;
                    fromAmino(object: _146.QueryConnectionParamsResponseAmino): _146.QueryConnectionParamsResponse;
                    toAmino(message: _146.QueryConnectionParamsResponse): _146.QueryConnectionParamsResponseAmino;
                    fromAminoMsg(object: _146.QueryConnectionParamsResponseAminoMsg): _146.QueryConnectionParamsResponse;
                    toAminoMsg(message: _146.QueryConnectionParamsResponse): _146.QueryConnectionParamsResponseAminoMsg;
                    fromProtoMsg(message: _146.QueryConnectionParamsResponseProtoMsg): _146.QueryConnectionParamsResponse;
                    toProto(message: _146.QueryConnectionParamsResponse): Uint8Array;
                    toProtoMsg(message: _146.QueryConnectionParamsResponse): _146.QueryConnectionParamsResponseProtoMsg;
                };
                GenesisState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _145.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _145.GenesisState;
                    fromPartial(object: {
                        connections?: {
                            id?: string;
                            clientId?: string;
                            versions?: {
                                identifier?: string;
                                features?: string[];
                            }[];
                            state?: _144.State;
                            counterparty?: {
                                clientId?: string;
                                connectionId?: string;
                                prefix?: {
                                    keyPrefix?: Uint8Array;
                                };
                            };
                            delayPeriod?: bigint;
                        }[];
                        clientConnectionPaths?: {
                            clientId?: string;
                            paths?: string[];
                        }[];
                        nextConnectionSequence?: bigint;
                        params?: {
                            maxExpectedTimePerBlock?: bigint;
                        };
                    }): _145.GenesisState;
                    fromAmino(object: _145.GenesisStateAmino): _145.GenesisState;
                    toAmino(message: _145.GenesisState): _145.GenesisStateAmino;
                    fromAminoMsg(object: _145.GenesisStateAminoMsg): _145.GenesisState;
                    toAminoMsg(message: _145.GenesisState): _145.GenesisStateAminoMsg;
                    fromProtoMsg(message: _145.GenesisStateProtoMsg): _145.GenesisState;
                    toProto(message: _145.GenesisState): Uint8Array;
                    toProtoMsg(message: _145.GenesisState): _145.GenesisStateProtoMsg;
                };
                stateFromJSON(object: any): _144.State;
                stateToJSON(object: _144.State): string;
                State: typeof _144.State;
                StateSDKType: typeof _144.State;
                StateAmino: typeof _144.State;
                ConnectionEnd: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.ConnectionEnd, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.ConnectionEnd;
                    fromPartial(object: {
                        clientId?: string;
                        versions?: {
                            identifier?: string;
                            features?: string[];
                        }[];
                        state?: _144.State;
                        counterparty?: {
                            clientId?: string;
                            connectionId?: string;
                            prefix?: {
                                keyPrefix?: Uint8Array;
                            };
                        };
                        delayPeriod?: bigint;
                    }): _144.ConnectionEnd;
                    fromAmino(object: _144.ConnectionEndAmino): _144.ConnectionEnd;
                    toAmino(message: _144.ConnectionEnd): _144.ConnectionEndAmino;
                    fromAminoMsg(object: _144.ConnectionEndAminoMsg): _144.ConnectionEnd;
                    toAminoMsg(message: _144.ConnectionEnd): _144.ConnectionEndAminoMsg;
                    fromProtoMsg(message: _144.ConnectionEndProtoMsg): _144.ConnectionEnd;
                    toProto(message: _144.ConnectionEnd): Uint8Array;
                    toProtoMsg(message: _144.ConnectionEnd): _144.ConnectionEndProtoMsg;
                };
                IdentifiedConnection: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.IdentifiedConnection, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.IdentifiedConnection;
                    fromPartial(object: {
                        id?: string;
                        clientId?: string;
                        versions?: {
                            identifier?: string;
                            features?: string[];
                        }[];
                        state?: _144.State;
                        counterparty?: {
                            clientId?: string;
                            connectionId?: string;
                            prefix?: {
                                keyPrefix?: Uint8Array;
                            };
                        };
                        delayPeriod?: bigint;
                    }): _144.IdentifiedConnection;
                    fromAmino(object: _144.IdentifiedConnectionAmino): _144.IdentifiedConnection;
                    toAmino(message: _144.IdentifiedConnection): _144.IdentifiedConnectionAmino;
                    fromAminoMsg(object: _144.IdentifiedConnectionAminoMsg): _144.IdentifiedConnection;
                    toAminoMsg(message: _144.IdentifiedConnection): _144.IdentifiedConnectionAminoMsg;
                    fromProtoMsg(message: _144.IdentifiedConnectionProtoMsg): _144.IdentifiedConnection;
                    toProto(message: _144.IdentifiedConnection): Uint8Array;
                    toProtoMsg(message: _144.IdentifiedConnection): _144.IdentifiedConnectionProtoMsg;
                };
                Counterparty: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.Counterparty, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.Counterparty;
                    fromPartial(object: {
                        clientId?: string;
                        connectionId?: string;
                        prefix?: {
                            keyPrefix?: Uint8Array;
                        };
                    }): _144.Counterparty;
                    fromAmino(object: _144.CounterpartyAmino): _144.Counterparty;
                    toAmino(message: _144.Counterparty): _144.CounterpartyAmino;
                    fromAminoMsg(object: _144.CounterpartyAminoMsg): _144.Counterparty;
                    toAminoMsg(message: _144.Counterparty): _144.CounterpartyAminoMsg;
                    fromProtoMsg(message: _144.CounterpartyProtoMsg): _144.Counterparty;
                    toProto(message: _144.Counterparty): Uint8Array;
                    toProtoMsg(message: _144.Counterparty): _144.CounterpartyProtoMsg;
                };
                ClientPaths: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.ClientPaths, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.ClientPaths;
                    fromPartial(object: {
                        paths?: string[];
                    }): _144.ClientPaths;
                    fromAmino(object: _144.ClientPathsAmino): _144.ClientPaths;
                    toAmino(message: _144.ClientPaths): _144.ClientPathsAmino;
                    fromAminoMsg(object: _144.ClientPathsAminoMsg): _144.ClientPaths;
                    toAminoMsg(message: _144.ClientPaths): _144.ClientPathsAminoMsg;
                    fromProtoMsg(message: _144.ClientPathsProtoMsg): _144.ClientPaths;
                    toProto(message: _144.ClientPaths): Uint8Array;
                    toProtoMsg(message: _144.ClientPaths): _144.ClientPathsProtoMsg;
                };
                ConnectionPaths: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.ConnectionPaths, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.ConnectionPaths;
                    fromPartial(object: {
                        clientId?: string;
                        paths?: string[];
                    }): _144.ConnectionPaths;
                    fromAmino(object: _144.ConnectionPathsAmino): _144.ConnectionPaths;
                    toAmino(message: _144.ConnectionPaths): _144.ConnectionPathsAmino;
                    fromAminoMsg(object: _144.ConnectionPathsAminoMsg): _144.ConnectionPaths;
                    toAminoMsg(message: _144.ConnectionPaths): _144.ConnectionPathsAminoMsg;
                    fromProtoMsg(message: _144.ConnectionPathsProtoMsg): _144.ConnectionPaths;
                    toProto(message: _144.ConnectionPaths): Uint8Array;
                    toProtoMsg(message: _144.ConnectionPaths): _144.ConnectionPathsProtoMsg;
                };
                Version: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.Version, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.Version;
                    fromPartial(object: {
                        identifier?: string;
                        features?: string[];
                    }): _144.Version;
                    fromAmino(object: _144.VersionAmino): _144.Version;
                    toAmino(message: _144.Version): _144.VersionAmino;
                    fromAminoMsg(object: _144.VersionAminoMsg): _144.Version;
                    toAminoMsg(message: _144.Version): _144.VersionAminoMsg;
                    fromProtoMsg(message: _144.VersionProtoMsg): _144.Version;
                    toProto(message: _144.Version): Uint8Array;
                    toProtoMsg(message: _144.Version): _144.VersionProtoMsg;
                };
                Params: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _144.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _144.Params;
                    fromPartial(object: {
                        maxExpectedTimePerBlock?: bigint;
                    }): _144.Params;
                    fromAmino(object: _144.ParamsAmino): _144.Params;
                    toAmino(message: _144.Params): _144.ParamsAmino;
                    fromAminoMsg(object: _144.ParamsAminoMsg): _144.Params;
                    toAminoMsg(message: _144.Params): _144.ParamsAminoMsg;
                    fromProtoMsg(message: _144.ParamsProtoMsg): _144.Params;
                    toProto(message: _144.Params): Uint8Array;
                    toProtoMsg(message: _144.Params): _144.ParamsProtoMsg;
                };
            };
        }
    }
    namespace lightclients {
        namespace localhost {
            const v2: {
                ClientState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _148.ClientState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _148.ClientState;
                    fromPartial(object: {
                        latestHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                    }): _148.ClientState;
                    fromAmino(object: _148.ClientStateAmino): _148.ClientState;
                    toAmino(message: _148.ClientState): _148.ClientStateAmino;
                    fromAminoMsg(object: _148.ClientStateAminoMsg): _148.ClientState;
                    toAminoMsg(message: _148.ClientState): _148.ClientStateAminoMsg;
                    fromProtoMsg(message: _148.ClientStateProtoMsg): _148.ClientState;
                    toProto(message: _148.ClientState): Uint8Array;
                    toProtoMsg(message: _148.ClientState): _148.ClientStateProtoMsg;
                };
            };
        }
        namespace solomachine {
            const v2: {
                dataTypeFromJSON(object: any): _149.DataType;
                dataTypeToJSON(object: _149.DataType): string;
                DataType: typeof _149.DataType;
                DataTypeSDKType: typeof _149.DataType;
                DataTypeAmino: typeof _149.DataType;
                ClientState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.ClientState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.ClientState;
                    fromPartial(object: {
                        sequence?: bigint;
                        isFrozen?: boolean;
                        consensusState?: {
                            publicKey?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            diversifier?: string;
                            timestamp?: bigint;
                        };
                        allowUpdateAfterProposal?: boolean;
                    }): _149.ClientState;
                    fromAmino(object: _149.ClientStateAmino): _149.ClientState;
                    toAmino(message: _149.ClientState): _149.ClientStateAmino;
                    fromAminoMsg(object: _149.ClientStateAminoMsg): _149.ClientState;
                    toAminoMsg(message: _149.ClientState): _149.ClientStateAminoMsg;
                    fromProtoMsg(message: _149.ClientStateProtoMsg): _149.ClientState;
                    toProto(message: _149.ClientState): Uint8Array;
                    toProtoMsg(message: _149.ClientState): _149.ClientStateProtoMsg;
                };
                ConsensusState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.ConsensusState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.ConsensusState;
                    fromPartial(object: {
                        publicKey?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        diversifier?: string;
                        timestamp?: bigint;
                    }): _149.ConsensusState;
                    fromAmino(object: _149.ConsensusStateAmino): _149.ConsensusState;
                    toAmino(message: _149.ConsensusState): _149.ConsensusStateAmino;
                    fromAminoMsg(object: _149.ConsensusStateAminoMsg): _149.ConsensusState;
                    toAminoMsg(message: _149.ConsensusState): _149.ConsensusStateAminoMsg;
                    fromProtoMsg(message: _149.ConsensusStateProtoMsg): _149.ConsensusState;
                    toProto(message: _149.ConsensusState): Uint8Array;
                    toProtoMsg(message: _149.ConsensusState): _149.ConsensusStateProtoMsg;
                };
                Header: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.Header, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.Header;
                    fromPartial(object: {
                        sequence?: bigint;
                        timestamp?: bigint;
                        signature?: Uint8Array;
                        newPublicKey?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        newDiversifier?: string;
                    }): _149.Header;
                    fromAmino(object: _149.HeaderAmino): _149.Header;
                    toAmino(message: _149.Header): _149.HeaderAmino;
                    fromAminoMsg(object: _149.HeaderAminoMsg): _149.Header;
                    toAminoMsg(message: _149.Header): _149.HeaderAminoMsg;
                    fromProtoMsg(message: _149.HeaderProtoMsg): _149.Header;
                    toProto(message: _149.Header): Uint8Array;
                    toProtoMsg(message: _149.Header): _149.HeaderProtoMsg;
                };
                Misbehaviour: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.Misbehaviour, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.Misbehaviour;
                    fromPartial(object: {
                        clientId?: string;
                        sequence?: bigint;
                        signatureOne?: {
                            signature?: Uint8Array;
                            dataType?: _149.DataType;
                            data?: Uint8Array;
                            timestamp?: bigint;
                        };
                        signatureTwo?: {
                            signature?: Uint8Array;
                            dataType?: _149.DataType;
                            data?: Uint8Array;
                            timestamp?: bigint;
                        };
                    }): _149.Misbehaviour;
                    fromAmino(object: _149.MisbehaviourAmino): _149.Misbehaviour;
                    toAmino(message: _149.Misbehaviour): _149.MisbehaviourAmino;
                    fromAminoMsg(object: _149.MisbehaviourAminoMsg): _149.Misbehaviour;
                    toAminoMsg(message: _149.Misbehaviour): _149.MisbehaviourAminoMsg;
                    fromProtoMsg(message: _149.MisbehaviourProtoMsg): _149.Misbehaviour;
                    toProto(message: _149.Misbehaviour): Uint8Array;
                    toProtoMsg(message: _149.Misbehaviour): _149.MisbehaviourProtoMsg;
                };
                SignatureAndData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.SignatureAndData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.SignatureAndData;
                    fromPartial(object: {
                        signature?: Uint8Array;
                        dataType?: _149.DataType;
                        data?: Uint8Array;
                        timestamp?: bigint;
                    }): _149.SignatureAndData;
                    fromAmino(object: _149.SignatureAndDataAmino): _149.SignatureAndData;
                    toAmino(message: _149.SignatureAndData): _149.SignatureAndDataAmino;
                    fromAminoMsg(object: _149.SignatureAndDataAminoMsg): _149.SignatureAndData;
                    toAminoMsg(message: _149.SignatureAndData): _149.SignatureAndDataAminoMsg;
                    fromProtoMsg(message: _149.SignatureAndDataProtoMsg): _149.SignatureAndData;
                    toProto(message: _149.SignatureAndData): Uint8Array;
                    toProtoMsg(message: _149.SignatureAndData): _149.SignatureAndDataProtoMsg;
                };
                TimestampedSignatureData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.TimestampedSignatureData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.TimestampedSignatureData;
                    fromPartial(object: {
                        signatureData?: Uint8Array;
                        timestamp?: bigint;
                    }): _149.TimestampedSignatureData;
                    fromAmino(object: _149.TimestampedSignatureDataAmino): _149.TimestampedSignatureData;
                    toAmino(message: _149.TimestampedSignatureData): _149.TimestampedSignatureDataAmino;
                    fromAminoMsg(object: _149.TimestampedSignatureDataAminoMsg): _149.TimestampedSignatureData;
                    toAminoMsg(message: _149.TimestampedSignatureData): _149.TimestampedSignatureDataAminoMsg;
                    fromProtoMsg(message: _149.TimestampedSignatureDataProtoMsg): _149.TimestampedSignatureData;
                    toProto(message: _149.TimestampedSignatureData): Uint8Array;
                    toProtoMsg(message: _149.TimestampedSignatureData): _149.TimestampedSignatureDataProtoMsg;
                };
                SignBytes: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.SignBytes, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.SignBytes;
                    fromPartial(object: {
                        sequence?: bigint;
                        timestamp?: bigint;
                        diversifier?: string;
                        dataType?: _149.DataType;
                        data?: Uint8Array;
                    }): _149.SignBytes;
                    fromAmino(object: _149.SignBytesAmino): _149.SignBytes;
                    toAmino(message: _149.SignBytes): _149.SignBytesAmino;
                    fromAminoMsg(object: _149.SignBytesAminoMsg): _149.SignBytes;
                    toAminoMsg(message: _149.SignBytes): _149.SignBytesAminoMsg;
                    fromProtoMsg(message: _149.SignBytesProtoMsg): _149.SignBytes;
                    toProto(message: _149.SignBytes): Uint8Array;
                    toProtoMsg(message: _149.SignBytes): _149.SignBytesProtoMsg;
                };
                HeaderData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.HeaderData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.HeaderData;
                    fromPartial(object: {
                        newPubKey?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        newDiversifier?: string;
                    }): _149.HeaderData;
                    fromAmino(object: _149.HeaderDataAmino): _149.HeaderData;
                    toAmino(message: _149.HeaderData): _149.HeaderDataAmino;
                    fromAminoMsg(object: _149.HeaderDataAminoMsg): _149.HeaderData;
                    toAminoMsg(message: _149.HeaderData): _149.HeaderDataAminoMsg;
                    fromProtoMsg(message: _149.HeaderDataProtoMsg): _149.HeaderData;
                    toProto(message: _149.HeaderData): Uint8Array;
                    toProtoMsg(message: _149.HeaderData): _149.HeaderDataProtoMsg;
                };
                ClientStateData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.ClientStateData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.ClientStateData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        clientState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }): _149.ClientStateData;
                    fromAmino(object: _149.ClientStateDataAmino): _149.ClientStateData;
                    toAmino(message: _149.ClientStateData): _149.ClientStateDataAmino;
                    fromAminoMsg(object: _149.ClientStateDataAminoMsg): _149.ClientStateData;
                    toAminoMsg(message: _149.ClientStateData): _149.ClientStateDataAminoMsg;
                    fromProtoMsg(message: _149.ClientStateDataProtoMsg): _149.ClientStateData;
                    toProto(message: _149.ClientStateData): Uint8Array;
                    toProtoMsg(message: _149.ClientStateData): _149.ClientStateDataProtoMsg;
                };
                ConsensusStateData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.ConsensusStateData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.ConsensusStateData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        consensusState?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }): _149.ConsensusStateData;
                    fromAmino(object: _149.ConsensusStateDataAmino): _149.ConsensusStateData;
                    toAmino(message: _149.ConsensusStateData): _149.ConsensusStateDataAmino;
                    fromAminoMsg(object: _149.ConsensusStateDataAminoMsg): _149.ConsensusStateData;
                    toAminoMsg(message: _149.ConsensusStateData): _149.ConsensusStateDataAminoMsg;
                    fromProtoMsg(message: _149.ConsensusStateDataProtoMsg): _149.ConsensusStateData;
                    toProto(message: _149.ConsensusStateData): Uint8Array;
                    toProtoMsg(message: _149.ConsensusStateData): _149.ConsensusStateDataProtoMsg;
                };
                ConnectionStateData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.ConnectionStateData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.ConnectionStateData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        connection?: {
                            clientId?: string;
                            versions?: {
                                identifier?: string;
                                features?: string[];
                            }[];
                            state?: _144.State;
                            counterparty?: {
                                clientId?: string;
                                connectionId?: string;
                                prefix?: {
                                    keyPrefix?: Uint8Array;
                                };
                            };
                            delayPeriod?: bigint;
                        };
                    }): _149.ConnectionStateData;
                    fromAmino(object: _149.ConnectionStateDataAmino): _149.ConnectionStateData;
                    toAmino(message: _149.ConnectionStateData): _149.ConnectionStateDataAmino;
                    fromAminoMsg(object: _149.ConnectionStateDataAminoMsg): _149.ConnectionStateData;
                    toAminoMsg(message: _149.ConnectionStateData): _149.ConnectionStateDataAminoMsg;
                    fromProtoMsg(message: _149.ConnectionStateDataProtoMsg): _149.ConnectionStateData;
                    toProto(message: _149.ConnectionStateData): Uint8Array;
                    toProtoMsg(message: _149.ConnectionStateData): _149.ConnectionStateDataProtoMsg;
                };
                ChannelStateData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.ChannelStateData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.ChannelStateData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        channel?: {
                            state?: _135.State;
                            ordering?: _135.Order;
                            counterparty?: {
                                portId?: string;
                                channelId?: string;
                            };
                            connectionHops?: string[];
                            version?: string;
                        };
                    }): _149.ChannelStateData;
                    fromAmino(object: _149.ChannelStateDataAmino): _149.ChannelStateData;
                    toAmino(message: _149.ChannelStateData): _149.ChannelStateDataAmino;
                    fromAminoMsg(object: _149.ChannelStateDataAminoMsg): _149.ChannelStateData;
                    toAminoMsg(message: _149.ChannelStateData): _149.ChannelStateDataAminoMsg;
                    fromProtoMsg(message: _149.ChannelStateDataProtoMsg): _149.ChannelStateData;
                    toProto(message: _149.ChannelStateData): Uint8Array;
                    toProtoMsg(message: _149.ChannelStateData): _149.ChannelStateDataProtoMsg;
                };
                PacketCommitmentData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.PacketCommitmentData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.PacketCommitmentData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        commitment?: Uint8Array;
                    }): _149.PacketCommitmentData;
                    fromAmino(object: _149.PacketCommitmentDataAmino): _149.PacketCommitmentData;
                    toAmino(message: _149.PacketCommitmentData): _149.PacketCommitmentDataAmino;
                    fromAminoMsg(object: _149.PacketCommitmentDataAminoMsg): _149.PacketCommitmentData;
                    toAminoMsg(message: _149.PacketCommitmentData): _149.PacketCommitmentDataAminoMsg;
                    fromProtoMsg(message: _149.PacketCommitmentDataProtoMsg): _149.PacketCommitmentData;
                    toProto(message: _149.PacketCommitmentData): Uint8Array;
                    toProtoMsg(message: _149.PacketCommitmentData): _149.PacketCommitmentDataProtoMsg;
                };
                PacketAcknowledgementData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.PacketAcknowledgementData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.PacketAcknowledgementData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        acknowledgement?: Uint8Array;
                    }): _149.PacketAcknowledgementData;
                    fromAmino(object: _149.PacketAcknowledgementDataAmino): _149.PacketAcknowledgementData;
                    toAmino(message: _149.PacketAcknowledgementData): _149.PacketAcknowledgementDataAmino;
                    fromAminoMsg(object: _149.PacketAcknowledgementDataAminoMsg): _149.PacketAcknowledgementData;
                    toAminoMsg(message: _149.PacketAcknowledgementData): _149.PacketAcknowledgementDataAminoMsg;
                    fromProtoMsg(message: _149.PacketAcknowledgementDataProtoMsg): _149.PacketAcknowledgementData;
                    toProto(message: _149.PacketAcknowledgementData): Uint8Array;
                    toProtoMsg(message: _149.PacketAcknowledgementData): _149.PacketAcknowledgementDataProtoMsg;
                };
                PacketReceiptAbsenceData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.PacketReceiptAbsenceData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.PacketReceiptAbsenceData;
                    fromPartial(object: {
                        path?: Uint8Array;
                    }): _149.PacketReceiptAbsenceData;
                    fromAmino(object: _149.PacketReceiptAbsenceDataAmino): _149.PacketReceiptAbsenceData;
                    toAmino(message: _149.PacketReceiptAbsenceData): _149.PacketReceiptAbsenceDataAmino;
                    fromAminoMsg(object: _149.PacketReceiptAbsenceDataAminoMsg): _149.PacketReceiptAbsenceData;
                    toAminoMsg(message: _149.PacketReceiptAbsenceData): _149.PacketReceiptAbsenceDataAminoMsg;
                    fromProtoMsg(message: _149.PacketReceiptAbsenceDataProtoMsg): _149.PacketReceiptAbsenceData;
                    toProto(message: _149.PacketReceiptAbsenceData): Uint8Array;
                    toProtoMsg(message: _149.PacketReceiptAbsenceData): _149.PacketReceiptAbsenceDataProtoMsg;
                };
                NextSequenceRecvData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _149.NextSequenceRecvData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _149.NextSequenceRecvData;
                    fromPartial(object: {
                        path?: Uint8Array;
                        nextSeqRecv?: bigint;
                    }): _149.NextSequenceRecvData;
                    fromAmino(object: _149.NextSequenceRecvDataAmino): _149.NextSequenceRecvData;
                    toAmino(message: _149.NextSequenceRecvData): _149.NextSequenceRecvDataAmino;
                    fromAminoMsg(object: _149.NextSequenceRecvDataAminoMsg): _149.NextSequenceRecvData;
                    toAminoMsg(message: _149.NextSequenceRecvData): _149.NextSequenceRecvDataAminoMsg;
                    fromProtoMsg(message: _149.NextSequenceRecvDataProtoMsg): _149.NextSequenceRecvData;
                    toProto(message: _149.NextSequenceRecvData): Uint8Array;
                    toProtoMsg(message: _149.NextSequenceRecvData): _149.NextSequenceRecvDataProtoMsg;
                };
            };
            const v3: {
                ClientState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.ClientState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.ClientState;
                    fromPartial(object: {
                        sequence?: bigint;
                        isFrozen?: boolean;
                        consensusState?: {
                            publicKey?: {
                                $typeUrl?: string;
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            diversifier?: string;
                            timestamp?: bigint;
                        };
                    }): _150.ClientState;
                    fromAmino(object: _150.ClientStateAmino): _150.ClientState;
                    toAmino(message: _150.ClientState): _150.ClientStateAmino;
                    fromAminoMsg(object: _150.ClientStateAminoMsg): _150.ClientState;
                    toAminoMsg(message: _150.ClientState): _150.ClientStateAminoMsg;
                    fromProtoMsg(message: _150.ClientStateProtoMsg): _150.ClientState;
                    toProto(message: _150.ClientState): Uint8Array;
                    toProtoMsg(message: _150.ClientState): _150.ClientStateProtoMsg;
                };
                ConsensusState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.ConsensusState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.ConsensusState;
                    fromPartial(object: {
                        publicKey?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        diversifier?: string;
                        timestamp?: bigint;
                    }): _150.ConsensusState;
                    fromAmino(object: _150.ConsensusStateAmino): _150.ConsensusState;
                    toAmino(message: _150.ConsensusState): _150.ConsensusStateAmino;
                    fromAminoMsg(object: _150.ConsensusStateAminoMsg): _150.ConsensusState;
                    toAminoMsg(message: _150.ConsensusState): _150.ConsensusStateAminoMsg;
                    fromProtoMsg(message: _150.ConsensusStateProtoMsg): _150.ConsensusState;
                    toProto(message: _150.ConsensusState): Uint8Array;
                    toProtoMsg(message: _150.ConsensusState): _150.ConsensusStateProtoMsg;
                };
                Header: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.Header, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.Header;
                    fromPartial(object: {
                        timestamp?: bigint;
                        signature?: Uint8Array;
                        newPublicKey?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        newDiversifier?: string;
                    }): _150.Header;
                    fromAmino(object: _150.HeaderAmino): _150.Header;
                    toAmino(message: _150.Header): _150.HeaderAmino;
                    fromAminoMsg(object: _150.HeaderAminoMsg): _150.Header;
                    toAminoMsg(message: _150.Header): _150.HeaderAminoMsg;
                    fromProtoMsg(message: _150.HeaderProtoMsg): _150.Header;
                    toProto(message: _150.Header): Uint8Array;
                    toProtoMsg(message: _150.Header): _150.HeaderProtoMsg;
                };
                Misbehaviour: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.Misbehaviour, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.Misbehaviour;
                    fromPartial(object: {
                        sequence?: bigint;
                        signatureOne?: {
                            signature?: Uint8Array;
                            path?: Uint8Array;
                            data?: Uint8Array;
                            timestamp?: bigint;
                        };
                        signatureTwo?: {
                            signature?: Uint8Array;
                            path?: Uint8Array;
                            data?: Uint8Array;
                            timestamp?: bigint;
                        };
                    }): _150.Misbehaviour;
                    fromAmino(object: _150.MisbehaviourAmino): _150.Misbehaviour;
                    toAmino(message: _150.Misbehaviour): _150.MisbehaviourAmino;
                    fromAminoMsg(object: _150.MisbehaviourAminoMsg): _150.Misbehaviour;
                    toAminoMsg(message: _150.Misbehaviour): _150.MisbehaviourAminoMsg;
                    fromProtoMsg(message: _150.MisbehaviourProtoMsg): _150.Misbehaviour;
                    toProto(message: _150.Misbehaviour): Uint8Array;
                    toProtoMsg(message: _150.Misbehaviour): _150.MisbehaviourProtoMsg;
                };
                SignatureAndData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.SignatureAndData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.SignatureAndData;
                    fromPartial(object: {
                        signature?: Uint8Array;
                        path?: Uint8Array;
                        data?: Uint8Array;
                        timestamp?: bigint;
                    }): _150.SignatureAndData;
                    fromAmino(object: _150.SignatureAndDataAmino): _150.SignatureAndData;
                    toAmino(message: _150.SignatureAndData): _150.SignatureAndDataAmino;
                    fromAminoMsg(object: _150.SignatureAndDataAminoMsg): _150.SignatureAndData;
                    toAminoMsg(message: _150.SignatureAndData): _150.SignatureAndDataAminoMsg;
                    fromProtoMsg(message: _150.SignatureAndDataProtoMsg): _150.SignatureAndData;
                    toProto(message: _150.SignatureAndData): Uint8Array;
                    toProtoMsg(message: _150.SignatureAndData): _150.SignatureAndDataProtoMsg;
                };
                TimestampedSignatureData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.TimestampedSignatureData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.TimestampedSignatureData;
                    fromPartial(object: {
                        signatureData?: Uint8Array;
                        timestamp?: bigint;
                    }): _150.TimestampedSignatureData;
                    fromAmino(object: _150.TimestampedSignatureDataAmino): _150.TimestampedSignatureData;
                    toAmino(message: _150.TimestampedSignatureData): _150.TimestampedSignatureDataAmino;
                    fromAminoMsg(object: _150.TimestampedSignatureDataAminoMsg): _150.TimestampedSignatureData;
                    toAminoMsg(message: _150.TimestampedSignatureData): _150.TimestampedSignatureDataAminoMsg;
                    fromProtoMsg(message: _150.TimestampedSignatureDataProtoMsg): _150.TimestampedSignatureData;
                    toProto(message: _150.TimestampedSignatureData): Uint8Array;
                    toProtoMsg(message: _150.TimestampedSignatureData): _150.TimestampedSignatureDataProtoMsg;
                };
                SignBytes: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.SignBytes, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.SignBytes;
                    fromPartial(object: {
                        sequence?: bigint;
                        timestamp?: bigint;
                        diversifier?: string;
                        path?: Uint8Array;
                        data?: Uint8Array;
                    }): _150.SignBytes;
                    fromAmino(object: _150.SignBytesAmino): _150.SignBytes;
                    toAmino(message: _150.SignBytes): _150.SignBytesAmino;
                    fromAminoMsg(object: _150.SignBytesAminoMsg): _150.SignBytes;
                    toAminoMsg(message: _150.SignBytes): _150.SignBytesAminoMsg;
                    fromProtoMsg(message: _150.SignBytesProtoMsg): _150.SignBytes;
                    toProto(message: _150.SignBytes): Uint8Array;
                    toProtoMsg(message: _150.SignBytes): _150.SignBytesProtoMsg;
                };
                HeaderData: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _150.HeaderData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _150.HeaderData;
                    fromPartial(object: {
                        newPubKey?: {
                            $typeUrl?: string;
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        newDiversifier?: string;
                    }): _150.HeaderData;
                    fromAmino(object: _150.HeaderDataAmino): _150.HeaderData;
                    toAmino(message: _150.HeaderData): _150.HeaderDataAmino;
                    fromAminoMsg(object: _150.HeaderDataAminoMsg): _150.HeaderData;
                    toAminoMsg(message: _150.HeaderData): _150.HeaderDataAminoMsg;
                    fromProtoMsg(message: _150.HeaderDataProtoMsg): _150.HeaderData;
                    toProto(message: _150.HeaderData): Uint8Array;
                    toProtoMsg(message: _150.HeaderData): _150.HeaderDataProtoMsg;
                };
            };
        }
        namespace tendermint {
            const v1: {
                ClientState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _151.ClientState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _151.ClientState;
                    fromPartial(object: {
                        chainId?: string;
                        trustLevel?: {
                            numerator?: bigint;
                            denominator?: bigint;
                        };
                        trustingPeriod?: {
                            seconds?: bigint;
                            nanos?: number;
                        };
                        unbondingPeriod?: {
                            seconds?: bigint;
                            nanos?: number;
                        };
                        maxClockDrift?: {
                            seconds?: bigint;
                            nanos?: number;
                        };
                        frozenHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        latestHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        proofSpecs?: {
                            leafSpec?: {
                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                                prehashKey?: import("../cosmos/ics23/v1/proofs").HashOp;
                                prehashValue?: import("../cosmos/ics23/v1/proofs").HashOp;
                                length?: import("../cosmos/ics23/v1/proofs").LengthOp;
                                prefix?: Uint8Array;
                            };
                            innerSpec?: {
                                childOrder?: number[];
                                childSize?: number;
                                minPrefixLength?: number;
                                maxPrefixLength?: number;
                                emptyChild?: Uint8Array;
                                hash?: import("../cosmos/ics23/v1/proofs").HashOp;
                            };
                            maxDepth?: number;
                            minDepth?: number;
                            prehashKeyBeforeComparison?: boolean;
                        }[];
                        upgradePath?: string[];
                        allowUpdateAfterExpiry?: boolean;
                        allowUpdateAfterMisbehaviour?: boolean;
                    }): _151.ClientState;
                    fromAmino(object: _151.ClientStateAmino): _151.ClientState;
                    toAmino(message: _151.ClientState): _151.ClientStateAmino;
                    fromAminoMsg(object: _151.ClientStateAminoMsg): _151.ClientState;
                    toAminoMsg(message: _151.ClientState): _151.ClientStateAminoMsg;
                    fromProtoMsg(message: _151.ClientStateProtoMsg): _151.ClientState;
                    toProto(message: _151.ClientState): Uint8Array;
                    toProtoMsg(message: _151.ClientState): _151.ClientStateProtoMsg;
                };
                ConsensusState: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _151.ConsensusState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _151.ConsensusState;
                    fromPartial(object: {
                        timestamp?: Date;
                        root?: {
                            hash?: Uint8Array;
                        };
                        nextValidatorsHash?: Uint8Array;
                    }): _151.ConsensusState;
                    fromAmino(object: _151.ConsensusStateAmino): _151.ConsensusState;
                    toAmino(message: _151.ConsensusState): _151.ConsensusStateAmino;
                    fromAminoMsg(object: _151.ConsensusStateAminoMsg): _151.ConsensusState;
                    toAminoMsg(message: _151.ConsensusState): _151.ConsensusStateAminoMsg;
                    fromProtoMsg(message: _151.ConsensusStateProtoMsg): _151.ConsensusState;
                    toProto(message: _151.ConsensusState): Uint8Array;
                    toProtoMsg(message: _151.ConsensusState): _151.ConsensusStateProtoMsg;
                };
                Misbehaviour: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _151.Misbehaviour, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _151.Misbehaviour;
                    fromPartial(object: {
                        clientId?: string;
                        header1?: {
                            signedHeader?: {
                                header?: {
                                    version?: {
                                        block?: bigint;
                                        app?: bigint;
                                    };
                                    chainId?: string;
                                    height?: bigint;
                                    time?: Date;
                                    lastBlockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    lastCommitHash?: Uint8Array;
                                    dataHash?: Uint8Array;
                                    validatorsHash?: Uint8Array;
                                    nextValidatorsHash?: Uint8Array;
                                    consensusHash?: Uint8Array;
                                    appHash?: Uint8Array;
                                    lastResultsHash?: Uint8Array;
                                    evidenceHash?: Uint8Array;
                                    proposerAddress?: Uint8Array;
                                };
                                commit?: {
                                    height?: bigint;
                                    round?: number;
                                    blockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    signatures?: {
                                        blockIdFlag?: import("../tendermint/types/validator").BlockIDFlag;
                                        validatorAddress?: Uint8Array;
                                        timestamp?: Date;
                                        signature?: Uint8Array;
                                    }[];
                                };
                            };
                            validatorSet?: {
                                validators?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                }[];
                                proposer?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                };
                                totalVotingPower?: bigint;
                            };
                            trustedHeight?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            trustedValidators?: {
                                validators?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                }[];
                                proposer?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                };
                                totalVotingPower?: bigint;
                            };
                        };
                        header2?: {
                            signedHeader?: {
                                header?: {
                                    version?: {
                                        block?: bigint;
                                        app?: bigint;
                                    };
                                    chainId?: string;
                                    height?: bigint;
                                    time?: Date;
                                    lastBlockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    lastCommitHash?: Uint8Array;
                                    dataHash?: Uint8Array;
                                    validatorsHash?: Uint8Array;
                                    nextValidatorsHash?: Uint8Array;
                                    consensusHash?: Uint8Array;
                                    appHash?: Uint8Array;
                                    lastResultsHash?: Uint8Array;
                                    evidenceHash?: Uint8Array;
                                    proposerAddress?: Uint8Array;
                                };
                                commit?: {
                                    height?: bigint;
                                    round?: number;
                                    blockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    signatures?: {
                                        blockIdFlag?: import("../tendermint/types/validator").BlockIDFlag;
                                        validatorAddress?: Uint8Array;
                                        timestamp?: Date;
                                        signature?: Uint8Array;
                                    }[];
                                };
                            };
                            validatorSet?: {
                                validators?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                }[];
                                proposer?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                };
                                totalVotingPower?: bigint;
                            };
                            trustedHeight?: {
                                revisionNumber?: bigint;
                                revisionHeight?: bigint;
                            };
                            trustedValidators?: {
                                validators?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                }[];
                                proposer?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                };
                                totalVotingPower?: bigint;
                            };
                        };
                    }): _151.Misbehaviour;
                    fromAmino(object: _151.MisbehaviourAmino): _151.Misbehaviour;
                    toAmino(message: _151.Misbehaviour): _151.MisbehaviourAmino;
                    fromAminoMsg(object: _151.MisbehaviourAminoMsg): _151.Misbehaviour;
                    toAminoMsg(message: _151.Misbehaviour): _151.MisbehaviourAminoMsg;
                    fromProtoMsg(message: _151.MisbehaviourProtoMsg): _151.Misbehaviour;
                    toProto(message: _151.Misbehaviour): Uint8Array;
                    toProtoMsg(message: _151.Misbehaviour): _151.MisbehaviourProtoMsg;
                };
                Header: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _151.Header, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _151.Header;
                    fromPartial(object: {
                        signedHeader?: {
                            header?: {
                                version?: {
                                    block?: bigint;
                                    app?: bigint;
                                };
                                chainId?: string;
                                height?: bigint;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            commit?: {
                                height?: bigint;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/validator").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                        validatorSet?: {
                            validators?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            }[];
                            proposer?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            };
                            totalVotingPower?: bigint;
                        };
                        trustedHeight?: {
                            revisionNumber?: bigint;
                            revisionHeight?: bigint;
                        };
                        trustedValidators?: {
                            validators?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            }[];
                            proposer?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            };
                            totalVotingPower?: bigint;
                        };
                    }): _151.Header;
                    fromAmino(object: _151.HeaderAmino): _151.Header;
                    toAmino(message: _151.Header): _151.HeaderAmino;
                    fromAminoMsg(object: _151.HeaderAminoMsg): _151.Header;
                    toAminoMsg(message: _151.Header): _151.HeaderAminoMsg;
                    fromProtoMsg(message: _151.HeaderProtoMsg): _151.Header;
                    toProto(message: _151.Header): Uint8Array;
                    toProtoMsg(message: _151.Header): _151.HeaderProtoMsg;
                };
                Fraction: {
                    typeUrl: string;
                    aminoType: string;
                    encode(message: _151.Fraction, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _151.Fraction;
                    fromPartial(object: {
                        numerator?: bigint;
                        denominator?: bigint;
                    }): _151.Fraction;
                    fromAmino(object: _151.FractionAmino): _151.Fraction;
                    toAmino(message: _151.Fraction): _151.FractionAmino;
                    fromAminoMsg(object: _151.FractionAminoMsg): _151.Fraction;
                    toAminoMsg(message: _151.Fraction): _151.FractionAminoMsg;
                    fromProtoMsg(message: _151.FractionProtoMsg): _151.Fraction;
                    toProto(message: _151.Fraction): Uint8Array;
                    toProtoMsg(message: _151.Fraction): _151.FractionProtoMsg;
                };
            };
        }
    }
    const ClientFactory: {
        createRPCMsgClient: ({ rpc }: {
            rpc: import("../helpers").Rpc;
        }) => Promise<{
            cosmos: {
                accounts: {
                    v1: import("../cosmos/accounts/v1/tx.rpc.msg").MsgClientImpl;
                };
                auth: {
                    v1beta1: import("../cosmos/auth/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                authz: {
                    v1beta1: import("../cosmos/authz/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                bank: {
                    v1beta1: import("../cosmos/bank/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                circuit: {
                    v1: import("../cosmos/circuit/v1/tx.rpc.msg").MsgClientImpl;
                };
                consensus: {
                    v1: import("../cosmos/consensus/v1/tx.rpc.msg").MsgClientImpl;
                };
                distribution: {
                    v1beta1: import("../cosmos/distribution/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                feegrant: {
                    v1beta1: import("../cosmos/feegrant/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                gov: {
                    v1: import("../cosmos/gov/v1/tx.rpc.msg").MsgClientImpl;
                    v1beta1: import("../cosmos/gov/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                group: {
                    v1: import("../cosmos/group/v1/tx.rpc.msg").MsgClientImpl;
                };
                mint: {
                    v1beta1: import("../cosmos/mint/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                staking: {
                    v1beta1: import("../cosmos/staking/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                upgrade: {
                    v1beta1: import("../cosmos/upgrade/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                vesting: {
                    v1beta1: import("../cosmos/vesting/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
            };
            ibc: {
                applications: {
                    interchain_accounts: {
                        controller: {
                            v1: _267.MsgClientImpl;
                        };
                        host: {
                            v1: _268.MsgClientImpl;
                        };
                    };
                    transfer: {
                        v1: _269.MsgClientImpl;
                    };
                };
                core: {
                    channel: {
                        v1: _270.MsgClientImpl;
                    };
                    client: {
                        v1: _271.MsgClientImpl;
                    };
                    connection: {
                        v1: _272.MsgClientImpl;
                    };
                };
            };
        }>;
        createRPCQueryClient: ({ rpcEndpoint }: {
            rpcEndpoint: string | import("@cosmjs/tendermint-rpc").HttpEndpoint;
        }) => Promise<{
            cosmos: {
                accounts: {
                    v1: {
                        accountQuery(request: import("../cosmos/accounts/v1/query").AccountQueryRequest): Promise<import("../cosmos/accounts/v1/query").AccountQueryResponse>;
                    };
                };
                auth: {
                    v1beta1: {
                        accounts(request?: import("../cosmos/auth/v1beta1/query").QueryAccountsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountsResponse>;
                        account(request: import("../cosmos/auth/v1beta1/query").QueryAccountRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountResponse>;
                        accountAddressByID(request: import("../cosmos/auth/v1beta1/query").QueryAccountAddressByIDRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountAddressByIDResponse>;
                        params(request?: import("../cosmos/auth/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryParamsResponse>;
                        moduleAccounts(request?: import("../cosmos/auth/v1beta1/query").QueryModuleAccountsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryModuleAccountsResponse>;
                        moduleAccountByName(request: import("../cosmos/auth/v1beta1/query").QueryModuleAccountByNameRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryModuleAccountByNameResponse>;
                        bech32Prefix(request?: import("../cosmos/auth/v1beta1/query").Bech32PrefixRequest): Promise<import("../cosmos/auth/v1beta1/query").Bech32PrefixResponse>;
                        addressBytesToString(request: import("../cosmos/auth/v1beta1/query").AddressBytesToStringRequest): Promise<import("../cosmos/auth/v1beta1/query").AddressBytesToStringResponse>;
                        addressStringToBytes(request: import("../cosmos/auth/v1beta1/query").AddressStringToBytesRequest): Promise<import("../cosmos/auth/v1beta1/query").AddressStringToBytesResponse>;
                        accountInfo(request: import("../cosmos/auth/v1beta1/query").QueryAccountInfoRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountInfoResponse>;
                    };
                };
                authz: {
                    v1beta1: {
                        grants(request: import("../cosmos/authz/v1beta1/query").QueryGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGrantsResponse>;
                        granterGrants(request: import("../cosmos/authz/v1beta1/query").QueryGranterGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGranterGrantsResponse>;
                        granteeGrants(request: import("../cosmos/authz/v1beta1/query").QueryGranteeGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGranteeGrantsResponse>;
                    };
                };
                bank: {
                    v1beta1: {
                        balance(request: import("../cosmos/bank/v1beta1/query").QueryBalanceRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryBalanceResponse>;
                        allBalances(request: import("../cosmos/bank/v1beta1/query").QueryAllBalancesRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryAllBalancesResponse>;
                        spendableBalances(request: import("../cosmos/bank/v1beta1/query").QuerySpendableBalancesRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySpendableBalancesResponse>;
                        spendableBalanceByDenom(request: import("../cosmos/bank/v1beta1/query").QuerySpendableBalanceByDenomRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySpendableBalanceByDenomResponse>;
                        totalSupply(request?: import("../cosmos/bank/v1beta1/query").QueryTotalSupplyRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryTotalSupplyResponse>;
                        supplyOf(request: import("../cosmos/bank/v1beta1/query").QuerySupplyOfRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySupplyOfResponse>;
                        params(request?: import("../cosmos/bank/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryParamsResponse>;
                        denomMetadata(request: import("../cosmos/bank/v1beta1/query").QueryDenomMetadataRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomMetadataResponse>;
                        denomMetadataByQueryString(request: import("../cosmos/bank/v1beta1/query").QueryDenomMetadataByQueryStringRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomMetadataByQueryStringResponse>;
                        denomsMetadata(request?: import("../cosmos/bank/v1beta1/query").QueryDenomsMetadataRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomsMetadataResponse>;
                        denomOwners(request: import("../cosmos/bank/v1beta1/query").QueryDenomOwnersRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomOwnersResponse>;
                        sendEnabled(request: import("../cosmos/bank/v1beta1/query").QuerySendEnabledRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySendEnabledResponse>;
                    };
                };
                base: {
                    node: {
                        v1beta1: {
                            config(request?: import("../cosmos/base/node/v1beta1/query").ConfigRequest): Promise<import("../cosmos/base/node/v1beta1/query").ConfigResponse>;
                            status(request?: import("../cosmos/base/node/v1beta1/query").StatusRequest): Promise<import("../cosmos/base/node/v1beta1/query").StatusResponse>;
                        };
                    };
                };
                circuit: {
                    v1: {
                        account(request: import("../cosmos/circuit/v1/query").QueryAccountRequest): Promise<import("../cosmos/circuit/v1/query").AccountResponse>;
                        accounts(request?: import("../cosmos/circuit/v1/query").QueryAccountsRequest): Promise<import("../cosmos/circuit/v1/query").AccountsResponse>;
                        disabledList(request?: import("../cosmos/circuit/v1/query").QueryDisabledListRequest): Promise<import("../cosmos/circuit/v1/query").DisabledListResponse>;
                    };
                };
                consensus: {
                    v1: {
                        params(request?: import("../cosmos/consensus/v1/query").QueryParamsRequest): Promise<import("../cosmos/consensus/v1/query").QueryParamsResponse>;
                    };
                };
                distribution: {
                    v1beta1: {
                        params(request?: import("../cosmos/distribution/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryParamsResponse>;
                        validatorDistributionInfo(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorDistributionInfoRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorDistributionInfoResponse>;
                        validatorOutstandingRewards(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorOutstandingRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorOutstandingRewardsResponse>;
                        validatorCommission(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorCommissionRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorCommissionResponse>;
                        validatorSlashes(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorSlashesRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorSlashesResponse>;
                        delegationRewards(request: import("../cosmos/distribution/v1beta1/query").QueryDelegationRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegationRewardsResponse>;
                        delegationTotalRewards(request: import("../cosmos/distribution/v1beta1/query").QueryDelegationTotalRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegationTotalRewardsResponse>;
                        delegatorValidators(request: import("../cosmos/distribution/v1beta1/query").QueryDelegatorValidatorsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegatorValidatorsResponse>;
                        delegatorWithdrawAddress(request: import("../cosmos/distribution/v1beta1/query").QueryDelegatorWithdrawAddressRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegatorWithdrawAddressResponse>;
                        communityPool(request?: import("../cosmos/distribution/v1beta1/query").QueryCommunityPoolRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryCommunityPoolResponse>;
                    };
                };
                feegrant: {
                    v1beta1: {
                        allowance(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowanceRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowanceResponse>;
                        allowances(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowancesRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowancesResponse>;
                        allowancesByGranter(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowancesByGranterRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowancesByGranterResponse>;
                    };
                };
                gov: {
                    v1: {
                        constitution(request?: import("../cosmos/gov/v1/query").QueryConstitutionRequest): Promise<import("../cosmos/gov/v1/query").QueryConstitutionResponse>;
                        proposal(request: import("../cosmos/gov/v1/query").QueryProposalRequest): Promise<import("../cosmos/gov/v1/query").QueryProposalResponse>;
                        proposals(request: import("../cosmos/gov/v1/query").QueryProposalsRequest): Promise<import("../cosmos/gov/v1/query").QueryProposalsResponse>;
                        vote(request: import("../cosmos/gov/v1/query").QueryVoteRequest): Promise<import("../cosmos/gov/v1/query").QueryVoteResponse>;
                        votes(request: import("../cosmos/gov/v1/query").QueryVotesRequest): Promise<import("../cosmos/gov/v1/query").QueryVotesResponse>;
                        params(request: import("../cosmos/gov/v1/query").QueryParamsRequest): Promise<import("../cosmos/gov/v1/query").QueryParamsResponse>;
                        deposit(request: import("../cosmos/gov/v1/query").QueryDepositRequest): Promise<import("../cosmos/gov/v1/query").QueryDepositResponse>;
                        deposits(request: import("../cosmos/gov/v1/query").QueryDepositsRequest): Promise<import("../cosmos/gov/v1/query").QueryDepositsResponse>;
                        tallyResult(request: import("../cosmos/gov/v1/query").QueryTallyResultRequest): Promise<import("../cosmos/gov/v1/query").QueryTallyResultResponse>;
                    };
                    v1beta1: {
                        proposal(request: import("../cosmos/gov/v1beta1/query").QueryProposalRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryProposalResponse>;
                        proposals(request: import("../cosmos/gov/v1beta1/query").QueryProposalsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryProposalsResponse>;
                        vote(request: import("../cosmos/gov/v1beta1/query").QueryVoteRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryVoteResponse>;
                        votes(request: import("../cosmos/gov/v1beta1/query").QueryVotesRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryVotesResponse>;
                        params(request: import("../cosmos/gov/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryParamsResponse>;
                        deposit(request: import("../cosmos/gov/v1beta1/query").QueryDepositRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryDepositResponse>;
                        deposits(request: import("../cosmos/gov/v1beta1/query").QueryDepositsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryDepositsResponse>;
                        tallyResult(request: import("../cosmos/gov/v1beta1/query").QueryTallyResultRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryTallyResultResponse>;
                    };
                };
                group: {
                    v1: {
                        groupInfo(request: import("../cosmos/group/v1/query").QueryGroupInfoRequest): Promise<import("../cosmos/group/v1/query").QueryGroupInfoResponse>;
                        groupPolicyInfo(request: import("../cosmos/group/v1/query").QueryGroupPolicyInfoRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPolicyInfoResponse>;
                        groupMembers(request: import("../cosmos/group/v1/query").QueryGroupMembersRequest): Promise<import("../cosmos/group/v1/query").QueryGroupMembersResponse>;
                        groupsByAdmin(request: import("../cosmos/group/v1/query").QueryGroupsByAdminRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsByAdminResponse>;
                        groupPoliciesByGroup(request: import("../cosmos/group/v1/query").QueryGroupPoliciesByGroupRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPoliciesByGroupResponse>;
                        groupPoliciesByAdmin(request: import("../cosmos/group/v1/query").QueryGroupPoliciesByAdminRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPoliciesByAdminResponse>;
                        proposal(request: import("../cosmos/group/v1/query").QueryProposalRequest): Promise<import("../cosmos/group/v1/query").QueryProposalResponse>;
                        proposalsByGroupPolicy(request: import("../cosmos/group/v1/query").QueryProposalsByGroupPolicyRequest): Promise<import("../cosmos/group/v1/query").QueryProposalsByGroupPolicyResponse>;
                        voteByProposalVoter(request: import("../cosmos/group/v1/query").QueryVoteByProposalVoterRequest): Promise<import("../cosmos/group/v1/query").QueryVoteByProposalVoterResponse>;
                        votesByProposal(request: import("../cosmos/group/v1/query").QueryVotesByProposalRequest): Promise<import("../cosmos/group/v1/query").QueryVotesByProposalResponse>;
                        votesByVoter(request: import("../cosmos/group/v1/query").QueryVotesByVoterRequest): Promise<import("../cosmos/group/v1/query").QueryVotesByVoterResponse>;
                        groupsByMember(request: import("../cosmos/group/v1/query").QueryGroupsByMemberRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsByMemberResponse>;
                        tallyResult(request: import("../cosmos/group/v1/query").QueryTallyResultRequest): Promise<import("../cosmos/group/v1/query").QueryTallyResultResponse>;
                        groups(request?: import("../cosmos/group/v1/query").QueryGroupsRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsResponse>;
                    };
                };
                mint: {
                    v1beta1: {
                        params(request?: import("../cosmos/mint/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryParamsResponse>;
                        inflation(request?: import("../cosmos/mint/v1beta1/query").QueryInflationRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryInflationResponse>;
                        annualProvisions(request?: import("../cosmos/mint/v1beta1/query").QueryAnnualProvisionsRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryAnnualProvisionsResponse>;
                    };
                };
                orm: {
                    query: {
                        v1alpha1: {
                            get(request: import("../cosmos/orm/query/v1alpha1/query").GetRequest): Promise<import("../cosmos/orm/query/v1alpha1/query").GetResponse>;
                            list(request: import("../cosmos/orm/query/v1alpha1/query").ListRequest): Promise<import("../cosmos/orm/query/v1alpha1/query").ListResponse>;
                        };
                    };
                };
                params: {
                    v1beta1: {
                        params(request: import("../cosmos/params/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/params/v1beta1/query").QueryParamsResponse>;
                        subspaces(request?: import("../cosmos/params/v1beta1/query").QuerySubspacesRequest): Promise<import("../cosmos/params/v1beta1/query").QuerySubspacesResponse>;
                    };
                };
                staking: {
                    v1beta1: {
                        validators(request: import("../cosmos/staking/v1beta1/query").QueryValidatorsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorsResponse>;
                        validator(request: import("../cosmos/staking/v1beta1/query").QueryValidatorRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorResponse>;
                        validatorDelegations(request: import("../cosmos/staking/v1beta1/query").QueryValidatorDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorDelegationsResponse>;
                        validatorUnbondingDelegations(request: import("../cosmos/staking/v1beta1/query").QueryValidatorUnbondingDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorUnbondingDelegationsResponse>;
                        delegation(request: import("../cosmos/staking/v1beta1/query").QueryDelegationRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegationResponse>;
                        unbondingDelegation(request: import("../cosmos/staking/v1beta1/query").QueryUnbondingDelegationRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryUnbondingDelegationResponse>;
                        delegatorDelegations(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorDelegationsResponse>;
                        delegatorUnbondingDelegations(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorUnbondingDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorUnbondingDelegationsResponse>;
                        redelegations(request: import("../cosmos/staking/v1beta1/query").QueryRedelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryRedelegationsResponse>;
                        delegatorValidators(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorsResponse>;
                        delegatorValidator(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorResponse>;
                        historicalInfo(request: import("../cosmos/staking/v1beta1/query").QueryHistoricalInfoRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryHistoricalInfoResponse>;
                        pool(request?: import("../cosmos/staking/v1beta1/query").QueryPoolRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryPoolResponse>;
                        params(request?: import("../cosmos/staking/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryParamsResponse>;
                    };
                };
                tx: {
                    v1beta1: {
                        simulate(request: import("../cosmos/tx/v1beta1/service").SimulateRequest): Promise<import("../cosmos/tx/v1beta1/service").SimulateResponse>;
                        getTx(request: import("../cosmos/tx/v1beta1/service").GetTxRequest): Promise<import("../cosmos/tx/v1beta1/service").GetTxResponse>;
                        broadcastTx(request: import("../cosmos/tx/v1beta1/service").BroadcastTxRequest): Promise<import("../cosmos/tx/v1beta1/service").BroadcastTxResponse>;
                        getTxsEvent(request: import("../cosmos/tx/v1beta1/service").GetTxsEventRequest): Promise<import("../cosmos/tx/v1beta1/service").GetTxsEventResponse>;
                        getBlockWithTxs(request: import("../cosmos/tx/v1beta1/service").GetBlockWithTxsRequest): Promise<import("../cosmos/tx/v1beta1/service").GetBlockWithTxsResponse>;
                        txDecode(request: import("../cosmos/tx/v1beta1/service").TxDecodeRequest): Promise<import("../cosmos/tx/v1beta1/service").TxDecodeResponse>;
                        txEncode(request: import("../cosmos/tx/v1beta1/service").TxEncodeRequest): Promise<import("../cosmos/tx/v1beta1/service").TxEncodeResponse>;
                        txEncodeAmino(request: import("../cosmos/tx/v1beta1/service").TxEncodeAminoRequest): Promise<import("../cosmos/tx/v1beta1/service").TxEncodeAminoResponse>;
                        txDecodeAmino(request: import("../cosmos/tx/v1beta1/service").TxDecodeAminoRequest): Promise<import("../cosmos/tx/v1beta1/service").TxDecodeAminoResponse>;
                    };
                };
                upgrade: {
                    v1beta1: {
                        currentPlan(request?: import("../cosmos/upgrade/v1beta1/query").QueryCurrentPlanRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryCurrentPlanResponse>;
                        appliedPlan(request: import("../cosmos/upgrade/v1beta1/query").QueryAppliedPlanRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryAppliedPlanResponse>;
                        upgradedConsensusState(request: import("../cosmos/upgrade/v1beta1/query").QueryUpgradedConsensusStateRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryUpgradedConsensusStateResponse>;
                        moduleVersions(request: import("../cosmos/upgrade/v1beta1/query").QueryModuleVersionsRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryModuleVersionsResponse>;
                        authority(request?: import("../cosmos/upgrade/v1beta1/query").QueryAuthorityRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryAuthorityResponse>;
                    };
                };
            };
            ibc: {
                applications: {
                    interchain_accounts: {
                        controller: {
                            v1: {
                                interchainAccount(request: _120.QueryInterchainAccountRequest): Promise<_120.QueryInterchainAccountResponse>;
                                params(request?: _120.QueryParamsRequest): Promise<_120.QueryParamsResponse>;
                            };
                        };
                        host: {
                            v1: {
                                params(request?: _124.QueryParamsRequest): Promise<_124.QueryParamsResponse>;
                            };
                        };
                    };
                    transfer: {
                        v1: {
                            denomTraces(request?: _131.QueryDenomTracesRequest): Promise<_131.QueryDenomTracesResponse>;
                            denomTrace(request: _131.QueryDenomTraceRequest): Promise<_131.QueryDenomTraceResponse>;
                            params(request?: _131.QueryParamsRequest): Promise<_131.QueryParamsResponse>;
                            denomHash(request: _131.QueryDenomHashRequest): Promise<_131.QueryDenomHashResponse>;
                            escrowAddress(request: _131.QueryEscrowAddressRequest): Promise<_131.QueryEscrowAddressResponse>;
                            totalEscrowForDenom(request: _131.QueryTotalEscrowForDenomRequest): Promise<_131.QueryTotalEscrowForDenomResponse>;
                        };
                    };
                };
                core: {
                    channel: {
                        v1: {
                            channel(request: _137.QueryChannelRequest): Promise<_137.QueryChannelResponse>;
                            channels(request?: _137.QueryChannelsRequest): Promise<_137.QueryChannelsResponse>;
                            connectionChannels(request: _137.QueryConnectionChannelsRequest): Promise<_137.QueryConnectionChannelsResponse>;
                            channelClientState(request: _137.QueryChannelClientStateRequest): Promise<_137.QueryChannelClientStateResponse>;
                            channelConsensusState(request: _137.QueryChannelConsensusStateRequest): Promise<_137.QueryChannelConsensusStateResponse>;
                            packetCommitment(request: _137.QueryPacketCommitmentRequest): Promise<_137.QueryPacketCommitmentResponse>;
                            packetCommitments(request: _137.QueryPacketCommitmentsRequest): Promise<_137.QueryPacketCommitmentsResponse>;
                            packetReceipt(request: _137.QueryPacketReceiptRequest): Promise<_137.QueryPacketReceiptResponse>;
                            packetAcknowledgement(request: _137.QueryPacketAcknowledgementRequest): Promise<_137.QueryPacketAcknowledgementResponse>;
                            packetAcknowledgements(request: _137.QueryPacketAcknowledgementsRequest): Promise<_137.QueryPacketAcknowledgementsResponse>;
                            unreceivedPackets(request: _137.QueryUnreceivedPacketsRequest): Promise<_137.QueryUnreceivedPacketsResponse>;
                            unreceivedAcks(request: _137.QueryUnreceivedAcksRequest): Promise<_137.QueryUnreceivedAcksResponse>;
                            nextSequenceReceive(request: _137.QueryNextSequenceReceiveRequest): Promise<_137.QueryNextSequenceReceiveResponse>;
                            nextSequenceSend(request: _137.QueryNextSequenceSendRequest): Promise<_137.QueryNextSequenceSendResponse>;
                        };
                    };
                    client: {
                        v1: {
                            clientState(request: _141.QueryClientStateRequest): Promise<_141.QueryClientStateResponse>;
                            clientStates(request?: _141.QueryClientStatesRequest): Promise<_141.QueryClientStatesResponse>;
                            consensusState(request: _141.QueryConsensusStateRequest): Promise<_141.QueryConsensusStateResponse>;
                            consensusStates(request: _141.QueryConsensusStatesRequest): Promise<_141.QueryConsensusStatesResponse>;
                            consensusStateHeights(request: _141.QueryConsensusStateHeightsRequest): Promise<_141.QueryConsensusStateHeightsResponse>;
                            clientStatus(request: _141.QueryClientStatusRequest): Promise<_141.QueryClientStatusResponse>;
                            clientParams(request?: _141.QueryClientParamsRequest): Promise<_141.QueryClientParamsResponse>;
                            upgradedClientState(request?: _141.QueryUpgradedClientStateRequest): Promise<_141.QueryUpgradedClientStateResponse>;
                            upgradedConsensusState(request?: _141.QueryUpgradedConsensusStateRequest): Promise<_141.QueryUpgradedConsensusStateResponse>;
                        };
                    };
                    connection: {
                        v1: {
                            connection(request: _146.QueryConnectionRequest): Promise<_146.QueryConnectionResponse>;
                            connections(request?: _146.QueryConnectionsRequest): Promise<_146.QueryConnectionsResponse>;
                            clientConnections(request: _146.QueryClientConnectionsRequest): Promise<_146.QueryClientConnectionsResponse>;
                            connectionClientState(request: _146.QueryConnectionClientStateRequest): Promise<_146.QueryConnectionClientStateResponse>;
                            connectionConsensusState(request: _146.QueryConnectionConsensusStateRequest): Promise<_146.QueryConnectionConsensusStateResponse>;
                            connectionParams(request?: _146.QueryConnectionParamsRequest): Promise<_146.QueryConnectionParamsResponse>;
                        };
                    };
                };
            };
        }>;
        createLCDClient: ({ restEndpoint }: {
            restEndpoint: string;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: import("../cosmos/auth/v1beta1/query.lcd").LCDQueryClient;
                };
                authz: {
                    v1beta1: import("../cosmos/authz/v1beta1/query.lcd").LCDQueryClient;
                };
                bank: {
                    v1beta1: import("../cosmos/bank/v1beta1/query.lcd").LCDQueryClient;
                };
                base: {
                    node: {
                        v1beta1: import("../cosmos/base/node/v1beta1/query.lcd").LCDQueryClient;
                    };
                };
                circuit: {
                    v1: import("../cosmos/circuit/v1/query.lcd").LCDQueryClient;
                };
                consensus: {
                    v1: import("../cosmos/consensus/v1/query.lcd").LCDQueryClient;
                };
                distribution: {
                    v1beta1: import("../cosmos/distribution/v1beta1/query.lcd").LCDQueryClient;
                };
                feegrant: {
                    v1beta1: import("../cosmos/feegrant/v1beta1/query.lcd").LCDQueryClient;
                };
                gov: {
                    v1: import("../cosmos/gov/v1/query.lcd").LCDQueryClient;
                    v1beta1: import("../cosmos/gov/v1beta1/query.lcd").LCDQueryClient;
                };
                group: {
                    v1: import("../cosmos/group/v1/query.lcd").LCDQueryClient;
                };
                mint: {
                    v1beta1: import("../cosmos/mint/v1beta1/query.lcd").LCDQueryClient;
                };
                params: {
                    v1beta1: import("../cosmos/params/v1beta1/query.lcd").LCDQueryClient;
                };
                staking: {
                    v1beta1: import("../cosmos/staking/v1beta1/query.lcd").LCDQueryClient;
                };
                tx: {
                    v1beta1: import("../cosmos/tx/v1beta1/service.lcd").LCDQueryClient;
                };
                upgrade: {
                    v1beta1: import("../cosmos/upgrade/v1beta1/query.lcd").LCDQueryClient;
                };
            };
            ibc: {
                applications: {
                    interchain_accounts: {
                        controller: {
                            v1: _255.LCDQueryClient;
                        };
                        host: {
                            v1: _256.LCDQueryClient;
                        };
                    };
                    transfer: {
                        v1: _257.LCDQueryClient;
                    };
                };
                core: {
                    channel: {
                        v1: _258.LCDQueryClient;
                    };
                    client: {
                        v1: _259.LCDQueryClient;
                    };
                    connection: {
                        v1: _260.LCDQueryClient;
                    };
                };
            };
        }>;
    };
}
