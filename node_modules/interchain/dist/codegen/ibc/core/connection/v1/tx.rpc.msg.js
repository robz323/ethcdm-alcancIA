import { BinaryReader } from "../../../../binary";
import { MsgConnectionOpenInit, MsgConnectionOpenInitResponse, MsgConnectionOpenTry, MsgConnectionOpenTryResponse, MsgConnectionOpenAck, MsgConnectionOpenAckResponse, MsgConnectionOpenConfirm, MsgConnectionOpenConfirmResponse, MsgUpdateParams, MsgUpdateParamsResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* ConnectionOpenInit defines a rpc handler method for MsgConnectionOpenInit. */
    connectionOpenInit = async (request) => {
        const data = MsgConnectionOpenInit.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenInit", data);
        return promise.then(data => MsgConnectionOpenInitResponse.decode(new BinaryReader(data)));
    };
    /* ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry. */
    connectionOpenTry = async (request) => {
        const data = MsgConnectionOpenTry.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenTry", data);
        return promise.then(data => MsgConnectionOpenTryResponse.decode(new BinaryReader(data)));
    };
    /* ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck. */
    connectionOpenAck = async (request) => {
        const data = MsgConnectionOpenAck.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenAck", data);
        return promise.then(data => MsgConnectionOpenAckResponse.decode(new BinaryReader(data)));
    };
    /* ConnectionOpenConfirm defines a rpc handler method for
     MsgConnectionOpenConfirm. */
    connectionOpenConfirm = async (request) => {
        const data = MsgConnectionOpenConfirm.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenConfirm", data);
        return promise.then(data => MsgConnectionOpenConfirmResponse.decode(new BinaryReader(data)));
    };
    /* UpdateConnectionParams defines a rpc handler method for
     MsgUpdateParams. */
    updateConnectionParams = async (request) => {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "UpdateConnectionParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map