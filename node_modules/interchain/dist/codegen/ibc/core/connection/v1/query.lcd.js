import { setPaginationParams } from "../../../../helpers";
export class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Connection queries an IBC connection end. */
    connection = async (params) => {
        const endpoint = `ibc/core/connection/v1/connections/${params.connectionId}`;
        return await this.req.get(endpoint);
    };
    /* Connections queries all the IBC connections of a chain. */
    connections = async (params = {
        pagination: undefined
    }) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `ibc/core/connection/v1/connections`;
        return await this.req.get(endpoint, options);
    };
    /* ClientConnections queries the connection paths associated with a client
     state. */
    clientConnections = async (params) => {
        const endpoint = `ibc/core/connection/v1/client_connections/${params.clientId}`;
        return await this.req.get(endpoint);
    };
    /* ConnectionClientState queries the client state associated with the
     connection. */
    connectionClientState = async (params) => {
        const endpoint = `ibc/core/connection/v1/connections/${params.connectionId}/client_state`;
        return await this.req.get(endpoint);
    };
    /* ConnectionConsensusState queries the consensus state associated with the
     connection. */
    connectionConsensusState = async (params) => {
        const endpoint = `ibc/core/connection/v1/connections/${params.connectionId}/consensus_state/revision/${params.revisionNumber}/height/${params.revisionHeight}`;
        return await this.req.get(endpoint);
    };
    /* ConnectionParams queries all parameters of the ibc connection submodule. */
    connectionParams = async (_params = {}) => {
        const endpoint = `ibc/core/connection/v1/params`;
        return await this.req.get(endpoint);
    };
}
//# sourceMappingURL=query.lcd.js.map