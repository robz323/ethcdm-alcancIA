import { BinaryReader } from "../../../../binary";
import { MsgCreateClient, MsgCreateClientResponse, MsgUpdateClient, MsgUpdateClientResponse, MsgUpgradeClient, MsgUpgradeClientResponse, MsgSubmitMisbehaviour, MsgSubmitMisbehaviourResponse, MsgRecoverClient, MsgRecoverClientResponse, MsgIBCSoftwareUpgrade, MsgIBCSoftwareUpgradeResponse, MsgUpdateParams, MsgUpdateParamsResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* CreateClient defines a rpc handler method for MsgCreateClient. */
    createClient = async (request) => {
        const data = MsgCreateClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "CreateClient", data);
        return promise.then(data => MsgCreateClientResponse.decode(new BinaryReader(data)));
    };
    /* UpdateClient defines a rpc handler method for MsgUpdateClient. */
    updateClient = async (request) => {
        const data = MsgUpdateClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpdateClient", data);
        return promise.then(data => MsgUpdateClientResponse.decode(new BinaryReader(data)));
    };
    /* UpgradeClient defines a rpc handler method for MsgUpgradeClient. */
    upgradeClient = async (request) => {
        const data = MsgUpgradeClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpgradeClient", data);
        return promise.then(data => MsgUpgradeClientResponse.decode(new BinaryReader(data)));
    };
    /* SubmitMisbehaviour defines a rpc handler method for MsgSubmitMisbehaviour. */
    submitMisbehaviour = async (request) => {
        const data = MsgSubmitMisbehaviour.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "SubmitMisbehaviour", data);
        return promise.then(data => MsgSubmitMisbehaviourResponse.decode(new BinaryReader(data)));
    };
    /* RecoverClient defines a rpc handler method for MsgRecoverClient. */
    recoverClient = async (request) => {
        const data = MsgRecoverClient.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "RecoverClient", data);
        return promise.then(data => MsgRecoverClientResponse.decode(new BinaryReader(data)));
    };
    /* IBCSoftwareUpgrade defines a rpc handler method for MsgIBCSoftwareUpgrade. */
    iBCSoftwareUpgrade = async (request) => {
        const data = MsgIBCSoftwareUpgrade.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "IBCSoftwareUpgrade", data);
        return promise.then(data => MsgIBCSoftwareUpgradeResponse.decode(new BinaryReader(data)));
    };
    /* UpdateClientParams defines a rpc handler method for MsgUpdateParams. */
    updateClientParams = async (request) => {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpdateClientParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map