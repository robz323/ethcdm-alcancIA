import { BinaryReader } from "../../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryClientStateRequest, QueryClientStateResponse, QueryClientStatesRequest, QueryClientStatesResponse, QueryConsensusStateRequest, QueryConsensusStateResponse, QueryConsensusStatesRequest, QueryConsensusStatesResponse, QueryConsensusStateHeightsRequest, QueryConsensusStateHeightsResponse, QueryClientStatusRequest, QueryClientStatusResponse, QueryClientParamsRequest, QueryClientParamsResponse, QueryUpgradedClientStateRequest, QueryUpgradedClientStateResponse, QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* ClientState queries an IBC light client. */
    clientState = async (request) => {
        const data = QueryClientStateRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientState", data);
        return promise.then(data => QueryClientStateResponse.decode(new BinaryReader(data)));
    };
    /* ClientStates queries all the IBC light clients of a chain. */
    clientStates = async (request = {
        pagination: undefined
    }) => {
        const data = QueryClientStatesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientStates", data);
        return promise.then(data => QueryClientStatesResponse.decode(new BinaryReader(data)));
    };
    /* ConsensusState queries a consensus state associated with a client state at
     a given height. */
    consensusState = async (request) => {
        const data = QueryConsensusStateRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ConsensusState", data);
        return promise.then(data => QueryConsensusStateResponse.decode(new BinaryReader(data)));
    };
    /* ConsensusStates queries all the consensus state associated with a given
     client. */
    consensusStates = async (request) => {
        const data = QueryConsensusStatesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ConsensusStates", data);
        return promise.then(data => QueryConsensusStatesResponse.decode(new BinaryReader(data)));
    };
    /* ConsensusStateHeights queries the height of every consensus states associated with a given client. */
    consensusStateHeights = async (request) => {
        const data = QueryConsensusStateHeightsRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ConsensusStateHeights", data);
        return promise.then(data => QueryConsensusStateHeightsResponse.decode(new BinaryReader(data)));
    };
    /* Status queries the status of an IBC client. */
    clientStatus = async (request) => {
        const data = QueryClientStatusRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientStatus", data);
        return promise.then(data => QueryClientStatusResponse.decode(new BinaryReader(data)));
    };
    /* ClientParams queries all parameters of the ibc client submodule. */
    clientParams = async (request = {}) => {
        const data = QueryClientParamsRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientParams", data);
        return promise.then(data => QueryClientParamsResponse.decode(new BinaryReader(data)));
    };
    /* UpgradedClientState queries an Upgraded IBC light client. */
    upgradedClientState = async (request = {}) => {
        const data = QueryUpgradedClientStateRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "UpgradedClientState", data);
        return promise.then(data => QueryUpgradedClientStateResponse.decode(new BinaryReader(data)));
    };
    /* UpgradedConsensusState queries an Upgraded IBC consensus state. */
    upgradedConsensusState = async (request = {}) => {
        const data = QueryUpgradedConsensusStateRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.core.client.v1.Query", "UpgradedConsensusState", data);
        return promise.then(data => QueryUpgradedConsensusStateResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        clientState(request) {
            return queryService.clientState(request);
        },
        clientStates(request) {
            return queryService.clientStates(request);
        },
        consensusState(request) {
            return queryService.consensusState(request);
        },
        consensusStates(request) {
            return queryService.consensusStates(request);
        },
        consensusStateHeights(request) {
            return queryService.consensusStateHeights(request);
        },
        clientStatus(request) {
            return queryService.clientStatus(request);
        },
        clientParams(request) {
            return queryService.clientParams(request);
        },
        upgradedClientState(request) {
            return queryService.upgradedClientState(request);
        },
        upgradedConsensusState(request) {
            return queryService.upgradedConsensusState(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map