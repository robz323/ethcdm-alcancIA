import { BinaryReader } from "../../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryDenomTracesRequest, QueryDenomTracesResponse, QueryDenomTraceRequest, QueryDenomTraceResponse, QueryParamsRequest, QueryParamsResponse, QueryDenomHashRequest, QueryDenomHashResponse, QueryEscrowAddressRequest, QueryEscrowAddressResponse, QueryTotalEscrowForDenomRequest, QueryTotalEscrowForDenomResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* DenomTraces queries all denomination traces. */
    denomTraces = async (request = {
        pagination: undefined
    }) => {
        const data = QueryDenomTracesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomTraces", data);
        return promise.then(data => QueryDenomTracesResponse.decode(new BinaryReader(data)));
    };
    /* DenomTrace queries a denomination trace information. */
    denomTrace = async (request) => {
        const data = QueryDenomTraceRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomTrace", data);
        return promise.then(data => QueryDenomTraceResponse.decode(new BinaryReader(data)));
    };
    /* Params queries all parameters of the ibc-transfer module. */
    params = async (request = {}) => {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "Params", data);
        return promise.then(data => QueryParamsResponse.decode(new BinaryReader(data)));
    };
    /* DenomHash queries a denomination hash information. */
    denomHash = async (request) => {
        const data = QueryDenomHashRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomHash", data);
        return promise.then(data => QueryDenomHashResponse.decode(new BinaryReader(data)));
    };
    /* EscrowAddress returns the escrow address for a particular port and channel id. */
    escrowAddress = async (request) => {
        const data = QueryEscrowAddressRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "EscrowAddress", data);
        return promise.then(data => QueryEscrowAddressResponse.decode(new BinaryReader(data)));
    };
    /* TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom. */
    totalEscrowForDenom = async (request) => {
        const data = QueryTotalEscrowForDenomRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "TotalEscrowForDenom", data);
        return promise.then(data => QueryTotalEscrowForDenomResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        denomTraces(request) {
            return queryService.denomTraces(request);
        },
        denomTrace(request) {
            return queryService.denomTrace(request);
        },
        params(request) {
            return queryService.params(request);
        },
        denomHash(request) {
            return queryService.denomHash(request);
        },
        escrowAddress(request) {
            return queryService.escrowAddress(request);
        },
        totalEscrowForDenom(request) {
            return queryService.totalEscrowForDenom(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map