import { BinaryReader } from "../../../../../binary";
import { MsgRegisterInterchainAccount, MsgRegisterInterchainAccountResponse, MsgSendTx, MsgSendTxResponse, MsgUpdateParams, MsgUpdateParamsResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* RegisterInterchainAccount defines a rpc handler for MsgRegisterInterchainAccount. */
    registerInterchainAccount = async (request) => {
        const data = MsgRegisterInterchainAccount.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.interchain_accounts.controller.v1.Msg", "RegisterInterchainAccount", data);
        return promise.then(data => MsgRegisterInterchainAccountResponse.decode(new BinaryReader(data)));
    };
    /* SendTx defines a rpc handler for MsgSendTx. */
    sendTx = async (request) => {
        const data = MsgSendTx.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.interchain_accounts.controller.v1.Msg", "SendTx", data);
        return promise.then(data => MsgSendTxResponse.decode(new BinaryReader(data)));
    };
    /* UpdateParams defines a rpc handler for MsgUpdateParams. */
    updateParams = async (request) => {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.interchain_accounts.controller.v1.Msg", "UpdateParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map