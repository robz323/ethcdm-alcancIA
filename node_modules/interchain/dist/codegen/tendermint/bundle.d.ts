import * as _106 from "./abci/types";
import * as _107 from "./crypto/keys";
import * as _108 from "./crypto/proof";
import * as _109 from "./libs/bits/types";
import * as _110 from "./p2p/types";
import * as _111 from "./types/block";
import * as _112 from "./types/evidence";
import * as _113 from "./types/params";
import * as _114 from "./types/types";
import * as _115 from "./types/validator";
import * as _116 from "./version/types";
export declare namespace tendermint {
    const abci: {
        checkTxTypeFromJSON(object: any): _106.CheckTxType;
        checkTxTypeToJSON(object: _106.CheckTxType): string;
        responseOfferSnapshot_ResultFromJSON(object: any): _106.ResponseOfferSnapshot_Result;
        responseOfferSnapshot_ResultToJSON(object: _106.ResponseOfferSnapshot_Result): string;
        responseApplySnapshotChunk_ResultFromJSON(object: any): _106.ResponseApplySnapshotChunk_Result;
        responseApplySnapshotChunk_ResultToJSON(object: _106.ResponseApplySnapshotChunk_Result): string;
        responseProcessProposal_ProposalStatusFromJSON(object: any): _106.ResponseProcessProposal_ProposalStatus;
        responseProcessProposal_ProposalStatusToJSON(object: _106.ResponseProcessProposal_ProposalStatus): string;
        responseVerifyVoteExtension_VerifyStatusFromJSON(object: any): _106.ResponseVerifyVoteExtension_VerifyStatus;
        responseVerifyVoteExtension_VerifyStatusToJSON(object: _106.ResponseVerifyVoteExtension_VerifyStatus): string;
        misbehaviorTypeFromJSON(object: any): _106.MisbehaviorType;
        misbehaviorTypeToJSON(object: _106.MisbehaviorType): string;
        CheckTxType: typeof _106.CheckTxType;
        CheckTxTypeSDKType: typeof _106.CheckTxType;
        CheckTxTypeAmino: typeof _106.CheckTxType;
        ResponseOfferSnapshot_Result: typeof _106.ResponseOfferSnapshot_Result;
        ResponseOfferSnapshot_ResultSDKType: typeof _106.ResponseOfferSnapshot_Result;
        ResponseOfferSnapshot_ResultAmino: typeof _106.ResponseOfferSnapshot_Result;
        ResponseApplySnapshotChunk_Result: typeof _106.ResponseApplySnapshotChunk_Result;
        ResponseApplySnapshotChunk_ResultSDKType: typeof _106.ResponseApplySnapshotChunk_Result;
        ResponseApplySnapshotChunk_ResultAmino: typeof _106.ResponseApplySnapshotChunk_Result;
        ResponseProcessProposal_ProposalStatus: typeof _106.ResponseProcessProposal_ProposalStatus;
        ResponseProcessProposal_ProposalStatusSDKType: typeof _106.ResponseProcessProposal_ProposalStatus;
        ResponseProcessProposal_ProposalStatusAmino: typeof _106.ResponseProcessProposal_ProposalStatus;
        ResponseVerifyVoteExtension_VerifyStatus: typeof _106.ResponseVerifyVoteExtension_VerifyStatus;
        ResponseVerifyVoteExtension_VerifyStatusSDKType: typeof _106.ResponseVerifyVoteExtension_VerifyStatus;
        ResponseVerifyVoteExtension_VerifyStatusAmino: typeof _106.ResponseVerifyVoteExtension_VerifyStatus;
        MisbehaviorType: typeof _106.MisbehaviorType;
        MisbehaviorTypeSDKType: typeof _106.MisbehaviorType;
        MisbehaviorTypeAmino: typeof _106.MisbehaviorType;
        Request: {
            typeUrl: string;
            encode(message: _106.Request, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.Request;
            fromPartial(object: {
                echo?: {
                    message?: string;
                };
                flush?: {};
                info?: {
                    version?: string;
                    blockVersion?: bigint;
                    p2pVersion?: bigint;
                    abciVersion?: string;
                };
                initChain?: {
                    time?: Date;
                    chainId?: string;
                    consensusParams?: {
                        block?: {
                            maxBytes?: bigint;
                            maxGas?: bigint;
                        };
                        evidence?: {
                            maxAgeNumBlocks?: bigint;
                            maxAgeDuration?: {
                                seconds?: bigint;
                                nanos?: number;
                            };
                            maxBytes?: bigint;
                        };
                        validator?: {
                            pubKeyTypes?: string[];
                        };
                        version?: {
                            app?: bigint;
                        };
                        abci?: {
                            voteExtensionsEnableHeight?: bigint;
                        };
                    };
                    validators?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: bigint;
                    }[];
                    appStateBytes?: Uint8Array;
                    initialHeight?: bigint;
                };
                query?: {
                    data?: Uint8Array;
                    path?: string;
                    height?: bigint;
                    prove?: boolean;
                };
                checkTx?: {
                    tx?: Uint8Array;
                    type?: _106.CheckTxType;
                };
                commit?: {};
                listSnapshots?: {};
                offerSnapshot?: {
                    snapshot?: {
                        height?: bigint;
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: Uint8Array;
                    };
                    appHash?: Uint8Array;
                };
                loadSnapshotChunk?: {
                    height?: bigint;
                    format?: number;
                    chunk?: number;
                };
                applySnapshotChunk?: {
                    index?: number;
                    chunk?: Uint8Array;
                    sender?: string;
                };
                prepareProposal?: {
                    maxTxBytes?: bigint;
                    txs?: Uint8Array[];
                    localLastCommit?: {
                        round?: number;
                        votes?: {
                            validator?: {
                                address?: Uint8Array;
                                power?: bigint;
                            };
                            voteExtension?: Uint8Array;
                            extensionSignature?: Uint8Array;
                            blockIdFlag?: _115.BlockIDFlag;
                        }[];
                    };
                    misbehavior?: {
                        type?: _106.MisbehaviorType;
                        validator?: {
                            address?: Uint8Array;
                            power?: bigint;
                        };
                        height?: bigint;
                        time?: Date;
                        totalVotingPower?: bigint;
                    }[];
                    height?: bigint;
                    time?: Date;
                    nextValidatorsHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                processProposal?: {
                    txs?: Uint8Array[];
                    proposedLastCommit?: {
                        round?: number;
                        votes?: {
                            validator?: {
                                address?: Uint8Array;
                                power?: bigint;
                            };
                            blockIdFlag?: _115.BlockIDFlag;
                        }[];
                    };
                    misbehavior?: {
                        type?: _106.MisbehaviorType;
                        validator?: {
                            address?: Uint8Array;
                            power?: bigint;
                        };
                        height?: bigint;
                        time?: Date;
                        totalVotingPower?: bigint;
                    }[];
                    hash?: Uint8Array;
                    height?: bigint;
                    time?: Date;
                    nextValidatorsHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                extendVote?: {
                    hash?: Uint8Array;
                    height?: bigint;
                };
                verifyVoteExtension?: {
                    hash?: Uint8Array;
                    validatorAddress?: Uint8Array;
                    height?: bigint;
                    voteExtension?: Uint8Array;
                };
                finalizeBlock?: {
                    txs?: Uint8Array[];
                    decidedLastCommit?: {
                        round?: number;
                        votes?: {
                            validator?: {
                                address?: Uint8Array;
                                power?: bigint;
                            };
                            blockIdFlag?: _115.BlockIDFlag;
                        }[];
                    };
                    misbehavior?: {
                        type?: _106.MisbehaviorType;
                        validator?: {
                            address?: Uint8Array;
                            power?: bigint;
                        };
                        height?: bigint;
                        time?: Date;
                        totalVotingPower?: bigint;
                    }[];
                    hash?: Uint8Array;
                    height?: bigint;
                    time?: Date;
                    nextValidatorsHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
            }): _106.Request;
            fromAmino(object: _106.RequestAmino): _106.Request;
            toAmino(message: _106.Request): _106.RequestAmino;
            fromAminoMsg(object: _106.RequestAminoMsg): _106.Request;
            fromProtoMsg(message: _106.RequestProtoMsg): _106.Request;
            toProto(message: _106.Request): Uint8Array;
            toProtoMsg(message: _106.Request): _106.RequestProtoMsg;
        };
        RequestEcho: {
            typeUrl: string;
            encode(message: _106.RequestEcho, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestEcho;
            fromPartial(object: {
                message?: string;
            }): _106.RequestEcho;
            fromAmino(object: _106.RequestEchoAmino): _106.RequestEcho;
            toAmino(message: _106.RequestEcho): _106.RequestEchoAmino;
            fromAminoMsg(object: _106.RequestEchoAminoMsg): _106.RequestEcho;
            fromProtoMsg(message: _106.RequestEchoProtoMsg): _106.RequestEcho;
            toProto(message: _106.RequestEcho): Uint8Array;
            toProtoMsg(message: _106.RequestEcho): _106.RequestEchoProtoMsg;
        };
        RequestFlush: {
            typeUrl: string;
            encode(_: _106.RequestFlush, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestFlush;
            fromPartial(_: {}): _106.RequestFlush;
            fromAmino(_: _106.RequestFlushAmino): _106.RequestFlush;
            toAmino(_: _106.RequestFlush): _106.RequestFlushAmino;
            fromAminoMsg(object: _106.RequestFlushAminoMsg): _106.RequestFlush;
            fromProtoMsg(message: _106.RequestFlushProtoMsg): _106.RequestFlush;
            toProto(message: _106.RequestFlush): Uint8Array;
            toProtoMsg(message: _106.RequestFlush): _106.RequestFlushProtoMsg;
        };
        RequestInfo: {
            typeUrl: string;
            encode(message: _106.RequestInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestInfo;
            fromPartial(object: {
                version?: string;
                blockVersion?: bigint;
                p2pVersion?: bigint;
                abciVersion?: string;
            }): _106.RequestInfo;
            fromAmino(object: _106.RequestInfoAmino): _106.RequestInfo;
            toAmino(message: _106.RequestInfo): _106.RequestInfoAmino;
            fromAminoMsg(object: _106.RequestInfoAminoMsg): _106.RequestInfo;
            fromProtoMsg(message: _106.RequestInfoProtoMsg): _106.RequestInfo;
            toProto(message: _106.RequestInfo): Uint8Array;
            toProtoMsg(message: _106.RequestInfo): _106.RequestInfoProtoMsg;
        };
        RequestInitChain: {
            typeUrl: string;
            encode(message: _106.RequestInitChain, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestInitChain;
            fromPartial(object: {
                time?: Date;
                chainId?: string;
                consensusParams?: {
                    block?: {
                        maxBytes?: bigint;
                        maxGas?: bigint;
                    };
                    evidence?: {
                        maxAgeNumBlocks?: bigint;
                        maxAgeDuration?: {
                            seconds?: bigint;
                            nanos?: number;
                        };
                        maxBytes?: bigint;
                    };
                    validator?: {
                        pubKeyTypes?: string[];
                    };
                    version?: {
                        app?: bigint;
                    };
                    abci?: {
                        voteExtensionsEnableHeight?: bigint;
                    };
                };
                validators?: {
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    power?: bigint;
                }[];
                appStateBytes?: Uint8Array;
                initialHeight?: bigint;
            }): _106.RequestInitChain;
            fromAmino(object: _106.RequestInitChainAmino): _106.RequestInitChain;
            toAmino(message: _106.RequestInitChain): _106.RequestInitChainAmino;
            fromAminoMsg(object: _106.RequestInitChainAminoMsg): _106.RequestInitChain;
            fromProtoMsg(message: _106.RequestInitChainProtoMsg): _106.RequestInitChain;
            toProto(message: _106.RequestInitChain): Uint8Array;
            toProtoMsg(message: _106.RequestInitChain): _106.RequestInitChainProtoMsg;
        };
        RequestQuery: {
            typeUrl: string;
            encode(message: _106.RequestQuery, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestQuery;
            fromPartial(object: {
                data?: Uint8Array;
                path?: string;
                height?: bigint;
                prove?: boolean;
            }): _106.RequestQuery;
            fromAmino(object: _106.RequestQueryAmino): _106.RequestQuery;
            toAmino(message: _106.RequestQuery): _106.RequestQueryAmino;
            fromAminoMsg(object: _106.RequestQueryAminoMsg): _106.RequestQuery;
            fromProtoMsg(message: _106.RequestQueryProtoMsg): _106.RequestQuery;
            toProto(message: _106.RequestQuery): Uint8Array;
            toProtoMsg(message: _106.RequestQuery): _106.RequestQueryProtoMsg;
        };
        RequestCheckTx: {
            typeUrl: string;
            encode(message: _106.RequestCheckTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestCheckTx;
            fromPartial(object: {
                tx?: Uint8Array;
                type?: _106.CheckTxType;
            }): _106.RequestCheckTx;
            fromAmino(object: _106.RequestCheckTxAmino): _106.RequestCheckTx;
            toAmino(message: _106.RequestCheckTx): _106.RequestCheckTxAmino;
            fromAminoMsg(object: _106.RequestCheckTxAminoMsg): _106.RequestCheckTx;
            fromProtoMsg(message: _106.RequestCheckTxProtoMsg): _106.RequestCheckTx;
            toProto(message: _106.RequestCheckTx): Uint8Array;
            toProtoMsg(message: _106.RequestCheckTx): _106.RequestCheckTxProtoMsg;
        };
        RequestCommit: {
            typeUrl: string;
            encode(_: _106.RequestCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestCommit;
            fromPartial(_: {}): _106.RequestCommit;
            fromAmino(_: _106.RequestCommitAmino): _106.RequestCommit;
            toAmino(_: _106.RequestCommit): _106.RequestCommitAmino;
            fromAminoMsg(object: _106.RequestCommitAminoMsg): _106.RequestCommit;
            fromProtoMsg(message: _106.RequestCommitProtoMsg): _106.RequestCommit;
            toProto(message: _106.RequestCommit): Uint8Array;
            toProtoMsg(message: _106.RequestCommit): _106.RequestCommitProtoMsg;
        };
        RequestListSnapshots: {
            typeUrl: string;
            encode(_: _106.RequestListSnapshots, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestListSnapshots;
            fromPartial(_: {}): _106.RequestListSnapshots;
            fromAmino(_: _106.RequestListSnapshotsAmino): _106.RequestListSnapshots;
            toAmino(_: _106.RequestListSnapshots): _106.RequestListSnapshotsAmino;
            fromAminoMsg(object: _106.RequestListSnapshotsAminoMsg): _106.RequestListSnapshots;
            fromProtoMsg(message: _106.RequestListSnapshotsProtoMsg): _106.RequestListSnapshots;
            toProto(message: _106.RequestListSnapshots): Uint8Array;
            toProtoMsg(message: _106.RequestListSnapshots): _106.RequestListSnapshotsProtoMsg;
        };
        RequestOfferSnapshot: {
            typeUrl: string;
            encode(message: _106.RequestOfferSnapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestOfferSnapshot;
            fromPartial(object: {
                snapshot?: {
                    height?: bigint;
                    format?: number;
                    chunks?: number;
                    hash?: Uint8Array;
                    metadata?: Uint8Array;
                };
                appHash?: Uint8Array;
            }): _106.RequestOfferSnapshot;
            fromAmino(object: _106.RequestOfferSnapshotAmino): _106.RequestOfferSnapshot;
            toAmino(message: _106.RequestOfferSnapshot): _106.RequestOfferSnapshotAmino;
            fromAminoMsg(object: _106.RequestOfferSnapshotAminoMsg): _106.RequestOfferSnapshot;
            fromProtoMsg(message: _106.RequestOfferSnapshotProtoMsg): _106.RequestOfferSnapshot;
            toProto(message: _106.RequestOfferSnapshot): Uint8Array;
            toProtoMsg(message: _106.RequestOfferSnapshot): _106.RequestOfferSnapshotProtoMsg;
        };
        RequestLoadSnapshotChunk: {
            typeUrl: string;
            encode(message: _106.RequestLoadSnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestLoadSnapshotChunk;
            fromPartial(object: {
                height?: bigint;
                format?: number;
                chunk?: number;
            }): _106.RequestLoadSnapshotChunk;
            fromAmino(object: _106.RequestLoadSnapshotChunkAmino): _106.RequestLoadSnapshotChunk;
            toAmino(message: _106.RequestLoadSnapshotChunk): _106.RequestLoadSnapshotChunkAmino;
            fromAminoMsg(object: _106.RequestLoadSnapshotChunkAminoMsg): _106.RequestLoadSnapshotChunk;
            fromProtoMsg(message: _106.RequestLoadSnapshotChunkProtoMsg): _106.RequestLoadSnapshotChunk;
            toProto(message: _106.RequestLoadSnapshotChunk): Uint8Array;
            toProtoMsg(message: _106.RequestLoadSnapshotChunk): _106.RequestLoadSnapshotChunkProtoMsg;
        };
        RequestApplySnapshotChunk: {
            typeUrl: string;
            encode(message: _106.RequestApplySnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestApplySnapshotChunk;
            fromPartial(object: {
                index?: number;
                chunk?: Uint8Array;
                sender?: string;
            }): _106.RequestApplySnapshotChunk;
            fromAmino(object: _106.RequestApplySnapshotChunkAmino): _106.RequestApplySnapshotChunk;
            toAmino(message: _106.RequestApplySnapshotChunk): _106.RequestApplySnapshotChunkAmino;
            fromAminoMsg(object: _106.RequestApplySnapshotChunkAminoMsg): _106.RequestApplySnapshotChunk;
            fromProtoMsg(message: _106.RequestApplySnapshotChunkProtoMsg): _106.RequestApplySnapshotChunk;
            toProto(message: _106.RequestApplySnapshotChunk): Uint8Array;
            toProtoMsg(message: _106.RequestApplySnapshotChunk): _106.RequestApplySnapshotChunkProtoMsg;
        };
        RequestPrepareProposal: {
            typeUrl: string;
            encode(message: _106.RequestPrepareProposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestPrepareProposal;
            fromPartial(object: {
                maxTxBytes?: bigint;
                txs?: Uint8Array[];
                localLastCommit?: {
                    round?: number;
                    votes?: {
                        validator?: {
                            address?: Uint8Array;
                            power?: bigint;
                        };
                        voteExtension?: Uint8Array;
                        extensionSignature?: Uint8Array;
                        blockIdFlag?: _115.BlockIDFlag;
                    }[];
                };
                misbehavior?: {
                    type?: _106.MisbehaviorType;
                    validator?: {
                        address?: Uint8Array;
                        power?: bigint;
                    };
                    height?: bigint;
                    time?: Date;
                    totalVotingPower?: bigint;
                }[];
                height?: bigint;
                time?: Date;
                nextValidatorsHash?: Uint8Array;
                proposerAddress?: Uint8Array;
            }): _106.RequestPrepareProposal;
            fromAmino(object: _106.RequestPrepareProposalAmino): _106.RequestPrepareProposal;
            toAmino(message: _106.RequestPrepareProposal): _106.RequestPrepareProposalAmino;
            fromAminoMsg(object: _106.RequestPrepareProposalAminoMsg): _106.RequestPrepareProposal;
            fromProtoMsg(message: _106.RequestPrepareProposalProtoMsg): _106.RequestPrepareProposal;
            toProto(message: _106.RequestPrepareProposal): Uint8Array;
            toProtoMsg(message: _106.RequestPrepareProposal): _106.RequestPrepareProposalProtoMsg;
        };
        RequestProcessProposal: {
            typeUrl: string;
            encode(message: _106.RequestProcessProposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestProcessProposal;
            fromPartial(object: {
                txs?: Uint8Array[];
                proposedLastCommit?: {
                    round?: number;
                    votes?: {
                        validator?: {
                            address?: Uint8Array;
                            power?: bigint;
                        };
                        blockIdFlag?: _115.BlockIDFlag;
                    }[];
                };
                misbehavior?: {
                    type?: _106.MisbehaviorType;
                    validator?: {
                        address?: Uint8Array;
                        power?: bigint;
                    };
                    height?: bigint;
                    time?: Date;
                    totalVotingPower?: bigint;
                }[];
                hash?: Uint8Array;
                height?: bigint;
                time?: Date;
                nextValidatorsHash?: Uint8Array;
                proposerAddress?: Uint8Array;
            }): _106.RequestProcessProposal;
            fromAmino(object: _106.RequestProcessProposalAmino): _106.RequestProcessProposal;
            toAmino(message: _106.RequestProcessProposal): _106.RequestProcessProposalAmino;
            fromAminoMsg(object: _106.RequestProcessProposalAminoMsg): _106.RequestProcessProposal;
            fromProtoMsg(message: _106.RequestProcessProposalProtoMsg): _106.RequestProcessProposal;
            toProto(message: _106.RequestProcessProposal): Uint8Array;
            toProtoMsg(message: _106.RequestProcessProposal): _106.RequestProcessProposalProtoMsg;
        };
        RequestExtendVote: {
            typeUrl: string;
            encode(message: _106.RequestExtendVote, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestExtendVote;
            fromPartial(object: {
                hash?: Uint8Array;
                height?: bigint;
            }): _106.RequestExtendVote;
            fromAmino(object: _106.RequestExtendVoteAmino): _106.RequestExtendVote;
            toAmino(message: _106.RequestExtendVote): _106.RequestExtendVoteAmino;
            fromAminoMsg(object: _106.RequestExtendVoteAminoMsg): _106.RequestExtendVote;
            fromProtoMsg(message: _106.RequestExtendVoteProtoMsg): _106.RequestExtendVote;
            toProto(message: _106.RequestExtendVote): Uint8Array;
            toProtoMsg(message: _106.RequestExtendVote): _106.RequestExtendVoteProtoMsg;
        };
        RequestVerifyVoteExtension: {
            typeUrl: string;
            encode(message: _106.RequestVerifyVoteExtension, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestVerifyVoteExtension;
            fromPartial(object: {
                hash?: Uint8Array;
                validatorAddress?: Uint8Array;
                height?: bigint;
                voteExtension?: Uint8Array;
            }): _106.RequestVerifyVoteExtension;
            fromAmino(object: _106.RequestVerifyVoteExtensionAmino): _106.RequestVerifyVoteExtension;
            toAmino(message: _106.RequestVerifyVoteExtension): _106.RequestVerifyVoteExtensionAmino;
            fromAminoMsg(object: _106.RequestVerifyVoteExtensionAminoMsg): _106.RequestVerifyVoteExtension;
            fromProtoMsg(message: _106.RequestVerifyVoteExtensionProtoMsg): _106.RequestVerifyVoteExtension;
            toProto(message: _106.RequestVerifyVoteExtension): Uint8Array;
            toProtoMsg(message: _106.RequestVerifyVoteExtension): _106.RequestVerifyVoteExtensionProtoMsg;
        };
        RequestFinalizeBlock: {
            typeUrl: string;
            encode(message: _106.RequestFinalizeBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.RequestFinalizeBlock;
            fromPartial(object: {
                txs?: Uint8Array[];
                decidedLastCommit?: {
                    round?: number;
                    votes?: {
                        validator?: {
                            address?: Uint8Array;
                            power?: bigint;
                        };
                        blockIdFlag?: _115.BlockIDFlag;
                    }[];
                };
                misbehavior?: {
                    type?: _106.MisbehaviorType;
                    validator?: {
                        address?: Uint8Array;
                        power?: bigint;
                    };
                    height?: bigint;
                    time?: Date;
                    totalVotingPower?: bigint;
                }[];
                hash?: Uint8Array;
                height?: bigint;
                time?: Date;
                nextValidatorsHash?: Uint8Array;
                proposerAddress?: Uint8Array;
            }): _106.RequestFinalizeBlock;
            fromAmino(object: _106.RequestFinalizeBlockAmino): _106.RequestFinalizeBlock;
            toAmino(message: _106.RequestFinalizeBlock): _106.RequestFinalizeBlockAmino;
            fromAminoMsg(object: _106.RequestFinalizeBlockAminoMsg): _106.RequestFinalizeBlock;
            fromProtoMsg(message: _106.RequestFinalizeBlockProtoMsg): _106.RequestFinalizeBlock;
            toProto(message: _106.RequestFinalizeBlock): Uint8Array;
            toProtoMsg(message: _106.RequestFinalizeBlock): _106.RequestFinalizeBlockProtoMsg;
        };
        Response: {
            typeUrl: string;
            encode(message: _106.Response, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.Response;
            fromPartial(object: {
                exception?: {
                    error?: string;
                };
                echo?: {
                    message?: string;
                };
                flush?: {};
                info?: {
                    data?: string;
                    version?: string;
                    appVersion?: bigint;
                    lastBlockHeight?: bigint;
                    lastBlockAppHash?: Uint8Array;
                };
                initChain?: {
                    consensusParams?: {
                        block?: {
                            maxBytes?: bigint;
                            maxGas?: bigint;
                        };
                        evidence?: {
                            maxAgeNumBlocks?: bigint;
                            maxAgeDuration?: {
                                seconds?: bigint;
                                nanos?: number;
                            };
                            maxBytes?: bigint;
                        };
                        validator?: {
                            pubKeyTypes?: string[];
                        };
                        version?: {
                            app?: bigint;
                        };
                        abci?: {
                            voteExtensionsEnableHeight?: bigint;
                        };
                    };
                    validators?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: bigint;
                    }[];
                    appHash?: Uint8Array;
                };
                query?: {
                    code?: number;
                    log?: string;
                    info?: string;
                    index?: bigint;
                    key?: Uint8Array;
                    value?: Uint8Array;
                    proofOps?: {
                        ops?: {
                            type?: string;
                            key?: Uint8Array;
                            data?: Uint8Array;
                        }[];
                    };
                    height?: bigint;
                    codespace?: string;
                };
                checkTx?: {
                    code?: number;
                    data?: Uint8Array;
                    log?: string;
                    info?: string;
                    gasWanted?: bigint;
                    gasUsed?: bigint;
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                            index?: boolean;
                        }[];
                    }[];
                    codespace?: string;
                };
                commit?: {
                    retainHeight?: bigint;
                };
                listSnapshots?: {
                    snapshots?: {
                        height?: bigint;
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: Uint8Array;
                    }[];
                };
                offerSnapshot?: {
                    result?: _106.ResponseOfferSnapshot_Result;
                };
                loadSnapshotChunk?: {
                    chunk?: Uint8Array;
                };
                applySnapshotChunk?: {
                    result?: _106.ResponseApplySnapshotChunk_Result;
                    refetchChunks?: number[];
                    rejectSenders?: string[];
                };
                prepareProposal?: {
                    txs?: Uint8Array[];
                };
                processProposal?: {
                    status?: _106.ResponseProcessProposal_ProposalStatus;
                };
                extendVote?: {
                    voteExtension?: Uint8Array;
                };
                verifyVoteExtension?: {
                    status?: _106.ResponseVerifyVoteExtension_VerifyStatus;
                };
                finalizeBlock?: {
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                            index?: boolean;
                        }[];
                    }[];
                    txResults?: {
                        code?: number;
                        data?: Uint8Array;
                        log?: string;
                        info?: string;
                        gasWanted?: bigint;
                        gasUsed?: bigint;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                                index?: boolean;
                            }[];
                        }[];
                        codespace?: string;
                    }[];
                    validatorUpdates?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: bigint;
                    }[];
                    consensusParamUpdates?: {
                        block?: {
                            maxBytes?: bigint;
                            maxGas?: bigint;
                        };
                        evidence?: {
                            maxAgeNumBlocks?: bigint;
                            maxAgeDuration?: {
                                seconds?: bigint;
                                nanos?: number;
                            };
                            maxBytes?: bigint;
                        };
                        validator?: {
                            pubKeyTypes?: string[];
                        };
                        version?: {
                            app?: bigint;
                        };
                        abci?: {
                            voteExtensionsEnableHeight?: bigint;
                        };
                    };
                    appHash?: Uint8Array;
                };
            }): _106.Response;
            fromAmino(object: _106.ResponseAmino): _106.Response;
            toAmino(message: _106.Response): _106.ResponseAmino;
            fromAminoMsg(object: _106.ResponseAminoMsg): _106.Response;
            fromProtoMsg(message: _106.ResponseProtoMsg): _106.Response;
            toProto(message: _106.Response): Uint8Array;
            toProtoMsg(message: _106.Response): _106.ResponseProtoMsg;
        };
        ResponseException: {
            typeUrl: string;
            encode(message: _106.ResponseException, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseException;
            fromPartial(object: {
                error?: string;
            }): _106.ResponseException;
            fromAmino(object: _106.ResponseExceptionAmino): _106.ResponseException;
            toAmino(message: _106.ResponseException): _106.ResponseExceptionAmino;
            fromAminoMsg(object: _106.ResponseExceptionAminoMsg): _106.ResponseException;
            fromProtoMsg(message: _106.ResponseExceptionProtoMsg): _106.ResponseException;
            toProto(message: _106.ResponseException): Uint8Array;
            toProtoMsg(message: _106.ResponseException): _106.ResponseExceptionProtoMsg;
        };
        ResponseEcho: {
            typeUrl: string;
            encode(message: _106.ResponseEcho, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseEcho;
            fromPartial(object: {
                message?: string;
            }): _106.ResponseEcho;
            fromAmino(object: _106.ResponseEchoAmino): _106.ResponseEcho;
            toAmino(message: _106.ResponseEcho): _106.ResponseEchoAmino;
            fromAminoMsg(object: _106.ResponseEchoAminoMsg): _106.ResponseEcho;
            fromProtoMsg(message: _106.ResponseEchoProtoMsg): _106.ResponseEcho;
            toProto(message: _106.ResponseEcho): Uint8Array;
            toProtoMsg(message: _106.ResponseEcho): _106.ResponseEchoProtoMsg;
        };
        ResponseFlush: {
            typeUrl: string;
            encode(_: _106.ResponseFlush, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseFlush;
            fromPartial(_: {}): _106.ResponseFlush;
            fromAmino(_: _106.ResponseFlushAmino): _106.ResponseFlush;
            toAmino(_: _106.ResponseFlush): _106.ResponseFlushAmino;
            fromAminoMsg(object: _106.ResponseFlushAminoMsg): _106.ResponseFlush;
            fromProtoMsg(message: _106.ResponseFlushProtoMsg): _106.ResponseFlush;
            toProto(message: _106.ResponseFlush): Uint8Array;
            toProtoMsg(message: _106.ResponseFlush): _106.ResponseFlushProtoMsg;
        };
        ResponseInfo: {
            typeUrl: string;
            encode(message: _106.ResponseInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseInfo;
            fromPartial(object: {
                data?: string;
                version?: string;
                appVersion?: bigint;
                lastBlockHeight?: bigint;
                lastBlockAppHash?: Uint8Array;
            }): _106.ResponseInfo;
            fromAmino(object: _106.ResponseInfoAmino): _106.ResponseInfo;
            toAmino(message: _106.ResponseInfo): _106.ResponseInfoAmino;
            fromAminoMsg(object: _106.ResponseInfoAminoMsg): _106.ResponseInfo;
            fromProtoMsg(message: _106.ResponseInfoProtoMsg): _106.ResponseInfo;
            toProto(message: _106.ResponseInfo): Uint8Array;
            toProtoMsg(message: _106.ResponseInfo): _106.ResponseInfoProtoMsg;
        };
        ResponseInitChain: {
            typeUrl: string;
            encode(message: _106.ResponseInitChain, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseInitChain;
            fromPartial(object: {
                consensusParams?: {
                    block?: {
                        maxBytes?: bigint;
                        maxGas?: bigint;
                    };
                    evidence?: {
                        maxAgeNumBlocks?: bigint;
                        maxAgeDuration?: {
                            seconds?: bigint;
                            nanos?: number;
                        };
                        maxBytes?: bigint;
                    };
                    validator?: {
                        pubKeyTypes?: string[];
                    };
                    version?: {
                        app?: bigint;
                    };
                    abci?: {
                        voteExtensionsEnableHeight?: bigint;
                    };
                };
                validators?: {
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    power?: bigint;
                }[];
                appHash?: Uint8Array;
            }): _106.ResponseInitChain;
            fromAmino(object: _106.ResponseInitChainAmino): _106.ResponseInitChain;
            toAmino(message: _106.ResponseInitChain): _106.ResponseInitChainAmino;
            fromAminoMsg(object: _106.ResponseInitChainAminoMsg): _106.ResponseInitChain;
            fromProtoMsg(message: _106.ResponseInitChainProtoMsg): _106.ResponseInitChain;
            toProto(message: _106.ResponseInitChain): Uint8Array;
            toProtoMsg(message: _106.ResponseInitChain): _106.ResponseInitChainProtoMsg;
        };
        ResponseQuery: {
            typeUrl: string;
            encode(message: _106.ResponseQuery, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseQuery;
            fromPartial(object: {
                code?: number;
                log?: string;
                info?: string;
                index?: bigint;
                key?: Uint8Array;
                value?: Uint8Array;
                proofOps?: {
                    ops?: {
                        type?: string;
                        key?: Uint8Array;
                        data?: Uint8Array;
                    }[];
                };
                height?: bigint;
                codespace?: string;
            }): _106.ResponseQuery;
            fromAmino(object: _106.ResponseQueryAmino): _106.ResponseQuery;
            toAmino(message: _106.ResponseQuery): _106.ResponseQueryAmino;
            fromAminoMsg(object: _106.ResponseQueryAminoMsg): _106.ResponseQuery;
            fromProtoMsg(message: _106.ResponseQueryProtoMsg): _106.ResponseQuery;
            toProto(message: _106.ResponseQuery): Uint8Array;
            toProtoMsg(message: _106.ResponseQuery): _106.ResponseQueryProtoMsg;
        };
        ResponseCheckTx: {
            typeUrl: string;
            encode(message: _106.ResponseCheckTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseCheckTx;
            fromPartial(object: {
                code?: number;
                data?: Uint8Array;
                log?: string;
                info?: string;
                gasWanted?: bigint;
                gasUsed?: bigint;
                events?: {
                    type?: string;
                    attributes?: {
                        key?: string;
                        value?: string;
                        index?: boolean;
                    }[];
                }[];
                codespace?: string;
            }): _106.ResponseCheckTx;
            fromAmino(object: _106.ResponseCheckTxAmino): _106.ResponseCheckTx;
            toAmino(message: _106.ResponseCheckTx): _106.ResponseCheckTxAmino;
            fromAminoMsg(object: _106.ResponseCheckTxAminoMsg): _106.ResponseCheckTx;
            fromProtoMsg(message: _106.ResponseCheckTxProtoMsg): _106.ResponseCheckTx;
            toProto(message: _106.ResponseCheckTx): Uint8Array;
            toProtoMsg(message: _106.ResponseCheckTx): _106.ResponseCheckTxProtoMsg;
        };
        ResponseCommit: {
            typeUrl: string;
            encode(message: _106.ResponseCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseCommit;
            fromPartial(object: {
                retainHeight?: bigint;
            }): _106.ResponseCommit;
            fromAmino(object: _106.ResponseCommitAmino): _106.ResponseCommit;
            toAmino(message: _106.ResponseCommit): _106.ResponseCommitAmino;
            fromAminoMsg(object: _106.ResponseCommitAminoMsg): _106.ResponseCommit;
            fromProtoMsg(message: _106.ResponseCommitProtoMsg): _106.ResponseCommit;
            toProto(message: _106.ResponseCommit): Uint8Array;
            toProtoMsg(message: _106.ResponseCommit): _106.ResponseCommitProtoMsg;
        };
        ResponseListSnapshots: {
            typeUrl: string;
            encode(message: _106.ResponseListSnapshots, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseListSnapshots;
            fromPartial(object: {
                snapshots?: {
                    height?: bigint;
                    format?: number;
                    chunks?: number;
                    hash?: Uint8Array;
                    metadata?: Uint8Array;
                }[];
            }): _106.ResponseListSnapshots;
            fromAmino(object: _106.ResponseListSnapshotsAmino): _106.ResponseListSnapshots;
            toAmino(message: _106.ResponseListSnapshots): _106.ResponseListSnapshotsAmino;
            fromAminoMsg(object: _106.ResponseListSnapshotsAminoMsg): _106.ResponseListSnapshots;
            fromProtoMsg(message: _106.ResponseListSnapshotsProtoMsg): _106.ResponseListSnapshots;
            toProto(message: _106.ResponseListSnapshots): Uint8Array;
            toProtoMsg(message: _106.ResponseListSnapshots): _106.ResponseListSnapshotsProtoMsg;
        };
        ResponseOfferSnapshot: {
            typeUrl: string;
            encode(message: _106.ResponseOfferSnapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseOfferSnapshot;
            fromPartial(object: {
                result?: _106.ResponseOfferSnapshot_Result;
            }): _106.ResponseOfferSnapshot;
            fromAmino(object: _106.ResponseOfferSnapshotAmino): _106.ResponseOfferSnapshot;
            toAmino(message: _106.ResponseOfferSnapshot): _106.ResponseOfferSnapshotAmino;
            fromAminoMsg(object: _106.ResponseOfferSnapshotAminoMsg): _106.ResponseOfferSnapshot;
            fromProtoMsg(message: _106.ResponseOfferSnapshotProtoMsg): _106.ResponseOfferSnapshot;
            toProto(message: _106.ResponseOfferSnapshot): Uint8Array;
            toProtoMsg(message: _106.ResponseOfferSnapshot): _106.ResponseOfferSnapshotProtoMsg;
        };
        ResponseLoadSnapshotChunk: {
            typeUrl: string;
            encode(message: _106.ResponseLoadSnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseLoadSnapshotChunk;
            fromPartial(object: {
                chunk?: Uint8Array;
            }): _106.ResponseLoadSnapshotChunk;
            fromAmino(object: _106.ResponseLoadSnapshotChunkAmino): _106.ResponseLoadSnapshotChunk;
            toAmino(message: _106.ResponseLoadSnapshotChunk): _106.ResponseLoadSnapshotChunkAmino;
            fromAminoMsg(object: _106.ResponseLoadSnapshotChunkAminoMsg): _106.ResponseLoadSnapshotChunk;
            fromProtoMsg(message: _106.ResponseLoadSnapshotChunkProtoMsg): _106.ResponseLoadSnapshotChunk;
            toProto(message: _106.ResponseLoadSnapshotChunk): Uint8Array;
            toProtoMsg(message: _106.ResponseLoadSnapshotChunk): _106.ResponseLoadSnapshotChunkProtoMsg;
        };
        ResponseApplySnapshotChunk: {
            typeUrl: string;
            encode(message: _106.ResponseApplySnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseApplySnapshotChunk;
            fromPartial(object: {
                result?: _106.ResponseApplySnapshotChunk_Result;
                refetchChunks?: number[];
                rejectSenders?: string[];
            }): _106.ResponseApplySnapshotChunk;
            fromAmino(object: _106.ResponseApplySnapshotChunkAmino): _106.ResponseApplySnapshotChunk;
            toAmino(message: _106.ResponseApplySnapshotChunk): _106.ResponseApplySnapshotChunkAmino;
            fromAminoMsg(object: _106.ResponseApplySnapshotChunkAminoMsg): _106.ResponseApplySnapshotChunk;
            fromProtoMsg(message: _106.ResponseApplySnapshotChunkProtoMsg): _106.ResponseApplySnapshotChunk;
            toProto(message: _106.ResponseApplySnapshotChunk): Uint8Array;
            toProtoMsg(message: _106.ResponseApplySnapshotChunk): _106.ResponseApplySnapshotChunkProtoMsg;
        };
        ResponsePrepareProposal: {
            typeUrl: string;
            encode(message: _106.ResponsePrepareProposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponsePrepareProposal;
            fromPartial(object: {
                txs?: Uint8Array[];
            }): _106.ResponsePrepareProposal;
            fromAmino(object: _106.ResponsePrepareProposalAmino): _106.ResponsePrepareProposal;
            toAmino(message: _106.ResponsePrepareProposal): _106.ResponsePrepareProposalAmino;
            fromAminoMsg(object: _106.ResponsePrepareProposalAminoMsg): _106.ResponsePrepareProposal;
            fromProtoMsg(message: _106.ResponsePrepareProposalProtoMsg): _106.ResponsePrepareProposal;
            toProto(message: _106.ResponsePrepareProposal): Uint8Array;
            toProtoMsg(message: _106.ResponsePrepareProposal): _106.ResponsePrepareProposalProtoMsg;
        };
        ResponseProcessProposal: {
            typeUrl: string;
            encode(message: _106.ResponseProcessProposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseProcessProposal;
            fromPartial(object: {
                status?: _106.ResponseProcessProposal_ProposalStatus;
            }): _106.ResponseProcessProposal;
            fromAmino(object: _106.ResponseProcessProposalAmino): _106.ResponseProcessProposal;
            toAmino(message: _106.ResponseProcessProposal): _106.ResponseProcessProposalAmino;
            fromAminoMsg(object: _106.ResponseProcessProposalAminoMsg): _106.ResponseProcessProposal;
            fromProtoMsg(message: _106.ResponseProcessProposalProtoMsg): _106.ResponseProcessProposal;
            toProto(message: _106.ResponseProcessProposal): Uint8Array;
            toProtoMsg(message: _106.ResponseProcessProposal): _106.ResponseProcessProposalProtoMsg;
        };
        ResponseExtendVote: {
            typeUrl: string;
            encode(message: _106.ResponseExtendVote, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseExtendVote;
            fromPartial(object: {
                voteExtension?: Uint8Array;
            }): _106.ResponseExtendVote;
            fromAmino(object: _106.ResponseExtendVoteAmino): _106.ResponseExtendVote;
            toAmino(message: _106.ResponseExtendVote): _106.ResponseExtendVoteAmino;
            fromAminoMsg(object: _106.ResponseExtendVoteAminoMsg): _106.ResponseExtendVote;
            fromProtoMsg(message: _106.ResponseExtendVoteProtoMsg): _106.ResponseExtendVote;
            toProto(message: _106.ResponseExtendVote): Uint8Array;
            toProtoMsg(message: _106.ResponseExtendVote): _106.ResponseExtendVoteProtoMsg;
        };
        ResponseVerifyVoteExtension: {
            typeUrl: string;
            encode(message: _106.ResponseVerifyVoteExtension, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseVerifyVoteExtension;
            fromPartial(object: {
                status?: _106.ResponseVerifyVoteExtension_VerifyStatus;
            }): _106.ResponseVerifyVoteExtension;
            fromAmino(object: _106.ResponseVerifyVoteExtensionAmino): _106.ResponseVerifyVoteExtension;
            toAmino(message: _106.ResponseVerifyVoteExtension): _106.ResponseVerifyVoteExtensionAmino;
            fromAminoMsg(object: _106.ResponseVerifyVoteExtensionAminoMsg): _106.ResponseVerifyVoteExtension;
            fromProtoMsg(message: _106.ResponseVerifyVoteExtensionProtoMsg): _106.ResponseVerifyVoteExtension;
            toProto(message: _106.ResponseVerifyVoteExtension): Uint8Array;
            toProtoMsg(message: _106.ResponseVerifyVoteExtension): _106.ResponseVerifyVoteExtensionProtoMsg;
        };
        ResponseFinalizeBlock: {
            typeUrl: string;
            encode(message: _106.ResponseFinalizeBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ResponseFinalizeBlock;
            fromPartial(object: {
                events?: {
                    type?: string;
                    attributes?: {
                        key?: string;
                        value?: string;
                        index?: boolean;
                    }[];
                }[];
                txResults?: {
                    code?: number;
                    data?: Uint8Array;
                    log?: string;
                    info?: string;
                    gasWanted?: bigint;
                    gasUsed?: bigint;
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                            index?: boolean;
                        }[];
                    }[];
                    codespace?: string;
                }[];
                validatorUpdates?: {
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    power?: bigint;
                }[];
                consensusParamUpdates?: {
                    block?: {
                        maxBytes?: bigint;
                        maxGas?: bigint;
                    };
                    evidence?: {
                        maxAgeNumBlocks?: bigint;
                        maxAgeDuration?: {
                            seconds?: bigint;
                            nanos?: number;
                        };
                        maxBytes?: bigint;
                    };
                    validator?: {
                        pubKeyTypes?: string[];
                    };
                    version?: {
                        app?: bigint;
                    };
                    abci?: {
                        voteExtensionsEnableHeight?: bigint;
                    };
                };
                appHash?: Uint8Array;
            }): _106.ResponseFinalizeBlock;
            fromAmino(object: _106.ResponseFinalizeBlockAmino): _106.ResponseFinalizeBlock;
            toAmino(message: _106.ResponseFinalizeBlock): _106.ResponseFinalizeBlockAmino;
            fromAminoMsg(object: _106.ResponseFinalizeBlockAminoMsg): _106.ResponseFinalizeBlock;
            fromProtoMsg(message: _106.ResponseFinalizeBlockProtoMsg): _106.ResponseFinalizeBlock;
            toProto(message: _106.ResponseFinalizeBlock): Uint8Array;
            toProtoMsg(message: _106.ResponseFinalizeBlock): _106.ResponseFinalizeBlockProtoMsg;
        };
        CommitInfo: {
            typeUrl: string;
            encode(message: _106.CommitInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.CommitInfo;
            fromPartial(object: {
                round?: number;
                votes?: {
                    validator?: {
                        address?: Uint8Array;
                        power?: bigint;
                    };
                    blockIdFlag?: _115.BlockIDFlag;
                }[];
            }): _106.CommitInfo;
            fromAmino(object: _106.CommitInfoAmino): _106.CommitInfo;
            toAmino(message: _106.CommitInfo): _106.CommitInfoAmino;
            fromAminoMsg(object: _106.CommitInfoAminoMsg): _106.CommitInfo;
            fromProtoMsg(message: _106.CommitInfoProtoMsg): _106.CommitInfo;
            toProto(message: _106.CommitInfo): Uint8Array;
            toProtoMsg(message: _106.CommitInfo): _106.CommitInfoProtoMsg;
        };
        ExtendedCommitInfo: {
            typeUrl: string;
            encode(message: _106.ExtendedCommitInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ExtendedCommitInfo;
            fromPartial(object: {
                round?: number;
                votes?: {
                    validator?: {
                        address?: Uint8Array;
                        power?: bigint;
                    };
                    voteExtension?: Uint8Array;
                    extensionSignature?: Uint8Array;
                    blockIdFlag?: _115.BlockIDFlag;
                }[];
            }): _106.ExtendedCommitInfo;
            fromAmino(object: _106.ExtendedCommitInfoAmino): _106.ExtendedCommitInfo;
            toAmino(message: _106.ExtendedCommitInfo): _106.ExtendedCommitInfoAmino;
            fromAminoMsg(object: _106.ExtendedCommitInfoAminoMsg): _106.ExtendedCommitInfo;
            fromProtoMsg(message: _106.ExtendedCommitInfoProtoMsg): _106.ExtendedCommitInfo;
            toProto(message: _106.ExtendedCommitInfo): Uint8Array;
            toProtoMsg(message: _106.ExtendedCommitInfo): _106.ExtendedCommitInfoProtoMsg;
        };
        Event: {
            typeUrl: string;
            encode(message: _106.Event, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.Event;
            fromPartial(object: {
                type?: string;
                attributes?: {
                    key?: string;
                    value?: string;
                    index?: boolean;
                }[];
            }): _106.Event;
            fromAmino(object: _106.EventAmino): _106.Event;
            toAmino(message: _106.Event): _106.EventAmino;
            fromAminoMsg(object: _106.EventAminoMsg): _106.Event;
            fromProtoMsg(message: _106.EventProtoMsg): _106.Event;
            toProto(message: _106.Event): Uint8Array;
            toProtoMsg(message: _106.Event): _106.EventProtoMsg;
        };
        EventAttribute: {
            typeUrl: string;
            encode(message: _106.EventAttribute, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.EventAttribute;
            fromPartial(object: {
                key?: string;
                value?: string;
                index?: boolean;
            }): _106.EventAttribute;
            fromAmino(object: _106.EventAttributeAmino): _106.EventAttribute;
            toAmino(message: _106.EventAttribute): _106.EventAttributeAmino;
            fromAminoMsg(object: _106.EventAttributeAminoMsg): _106.EventAttribute;
            fromProtoMsg(message: _106.EventAttributeProtoMsg): _106.EventAttribute;
            toProto(message: _106.EventAttribute): Uint8Array;
            toProtoMsg(message: _106.EventAttribute): _106.EventAttributeProtoMsg;
        };
        ExecTxResult: {
            typeUrl: string;
            encode(message: _106.ExecTxResult, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ExecTxResult;
            fromPartial(object: {
                code?: number;
                data?: Uint8Array;
                log?: string;
                info?: string;
                gasWanted?: bigint;
                gasUsed?: bigint;
                events?: {
                    type?: string;
                    attributes?: {
                        key?: string;
                        value?: string;
                        index?: boolean;
                    }[];
                }[];
                codespace?: string;
            }): _106.ExecTxResult;
            fromAmino(object: _106.ExecTxResultAmino): _106.ExecTxResult;
            toAmino(message: _106.ExecTxResult): _106.ExecTxResultAmino;
            fromAminoMsg(object: _106.ExecTxResultAminoMsg): _106.ExecTxResult;
            fromProtoMsg(message: _106.ExecTxResultProtoMsg): _106.ExecTxResult;
            toProto(message: _106.ExecTxResult): Uint8Array;
            toProtoMsg(message: _106.ExecTxResult): _106.ExecTxResultProtoMsg;
        };
        TxResult: {
            typeUrl: string;
            encode(message: _106.TxResult, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.TxResult;
            fromPartial(object: {
                height?: bigint;
                index?: number;
                tx?: Uint8Array;
                result?: {
                    code?: number;
                    data?: Uint8Array;
                    log?: string;
                    info?: string;
                    gasWanted?: bigint;
                    gasUsed?: bigint;
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                            index?: boolean;
                        }[];
                    }[];
                    codespace?: string;
                };
            }): _106.TxResult;
            fromAmino(object: _106.TxResultAmino): _106.TxResult;
            toAmino(message: _106.TxResult): _106.TxResultAmino;
            fromAminoMsg(object: _106.TxResultAminoMsg): _106.TxResult;
            fromProtoMsg(message: _106.TxResultProtoMsg): _106.TxResult;
            toProto(message: _106.TxResult): Uint8Array;
            toProtoMsg(message: _106.TxResult): _106.TxResultProtoMsg;
        };
        Validator: {
            typeUrl: string;
            encode(message: _106.Validator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.Validator;
            fromPartial(object: {
                address?: Uint8Array;
                power?: bigint;
            }): _106.Validator;
            fromAmino(object: _106.ValidatorAmino): _106.Validator;
            toAmino(message: _106.Validator): _106.ValidatorAmino;
            fromAminoMsg(object: _106.ValidatorAminoMsg): _106.Validator;
            fromProtoMsg(message: _106.ValidatorProtoMsg): _106.Validator;
            toProto(message: _106.Validator): Uint8Array;
            toProtoMsg(message: _106.Validator): _106.ValidatorProtoMsg;
        };
        ValidatorUpdate: {
            typeUrl: string;
            encode(message: _106.ValidatorUpdate, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ValidatorUpdate;
            fromPartial(object: {
                pubKey?: {
                    ed25519?: Uint8Array;
                    secp256k1?: Uint8Array;
                };
                power?: bigint;
            }): _106.ValidatorUpdate;
            fromAmino(object: _106.ValidatorUpdateAmino): _106.ValidatorUpdate;
            toAmino(message: _106.ValidatorUpdate): _106.ValidatorUpdateAmino;
            fromAminoMsg(object: _106.ValidatorUpdateAminoMsg): _106.ValidatorUpdate;
            fromProtoMsg(message: _106.ValidatorUpdateProtoMsg): _106.ValidatorUpdate;
            toProto(message: _106.ValidatorUpdate): Uint8Array;
            toProtoMsg(message: _106.ValidatorUpdate): _106.ValidatorUpdateProtoMsg;
        };
        VoteInfo: {
            typeUrl: string;
            encode(message: _106.VoteInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.VoteInfo;
            fromPartial(object: {
                validator?: {
                    address?: Uint8Array;
                    power?: bigint;
                };
                blockIdFlag?: _115.BlockIDFlag;
            }): _106.VoteInfo;
            fromAmino(object: _106.VoteInfoAmino): _106.VoteInfo;
            toAmino(message: _106.VoteInfo): _106.VoteInfoAmino;
            fromAminoMsg(object: _106.VoteInfoAminoMsg): _106.VoteInfo;
            fromProtoMsg(message: _106.VoteInfoProtoMsg): _106.VoteInfo;
            toProto(message: _106.VoteInfo): Uint8Array;
            toProtoMsg(message: _106.VoteInfo): _106.VoteInfoProtoMsg;
        };
        ExtendedVoteInfo: {
            typeUrl: string;
            encode(message: _106.ExtendedVoteInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.ExtendedVoteInfo;
            fromPartial(object: {
                validator?: {
                    address?: Uint8Array;
                    power?: bigint;
                };
                voteExtension?: Uint8Array;
                extensionSignature?: Uint8Array;
                blockIdFlag?: _115.BlockIDFlag;
            }): _106.ExtendedVoteInfo;
            fromAmino(object: _106.ExtendedVoteInfoAmino): _106.ExtendedVoteInfo;
            toAmino(message: _106.ExtendedVoteInfo): _106.ExtendedVoteInfoAmino;
            fromAminoMsg(object: _106.ExtendedVoteInfoAminoMsg): _106.ExtendedVoteInfo;
            fromProtoMsg(message: _106.ExtendedVoteInfoProtoMsg): _106.ExtendedVoteInfo;
            toProto(message: _106.ExtendedVoteInfo): Uint8Array;
            toProtoMsg(message: _106.ExtendedVoteInfo): _106.ExtendedVoteInfoProtoMsg;
        };
        Misbehavior: {
            typeUrl: string;
            encode(message: _106.Misbehavior, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.Misbehavior;
            fromPartial(object: {
                type?: _106.MisbehaviorType;
                validator?: {
                    address?: Uint8Array;
                    power?: bigint;
                };
                height?: bigint;
                time?: Date;
                totalVotingPower?: bigint;
            }): _106.Misbehavior;
            fromAmino(object: _106.MisbehaviorAmino): _106.Misbehavior;
            toAmino(message: _106.Misbehavior): _106.MisbehaviorAmino;
            fromAminoMsg(object: _106.MisbehaviorAminoMsg): _106.Misbehavior;
            fromProtoMsg(message: _106.MisbehaviorProtoMsg): _106.Misbehavior;
            toProto(message: _106.Misbehavior): Uint8Array;
            toProtoMsg(message: _106.Misbehavior): _106.MisbehaviorProtoMsg;
        };
        Snapshot: {
            typeUrl: string;
            encode(message: _106.Snapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _106.Snapshot;
            fromPartial(object: {
                height?: bigint;
                format?: number;
                chunks?: number;
                hash?: Uint8Array;
                metadata?: Uint8Array;
            }): _106.Snapshot;
            fromAmino(object: _106.SnapshotAmino): _106.Snapshot;
            toAmino(message: _106.Snapshot): _106.SnapshotAmino;
            fromAminoMsg(object: _106.SnapshotAminoMsg): _106.Snapshot;
            fromProtoMsg(message: _106.SnapshotProtoMsg): _106.Snapshot;
            toProto(message: _106.Snapshot): Uint8Array;
            toProtoMsg(message: _106.Snapshot): _106.SnapshotProtoMsg;
        };
    };
    const crypto: {
        Proof: {
            typeUrl: string;
            encode(message: _108.Proof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _108.Proof;
            fromPartial(object: {
                total?: bigint;
                index?: bigint;
                leafHash?: Uint8Array;
                aunts?: Uint8Array[];
            }): _108.Proof;
            fromAmino(object: _108.ProofAmino): _108.Proof;
            toAmino(message: _108.Proof): _108.ProofAmino;
            fromAminoMsg(object: _108.ProofAminoMsg): _108.Proof;
            fromProtoMsg(message: _108.ProofProtoMsg): _108.Proof;
            toProto(message: _108.Proof): Uint8Array;
            toProtoMsg(message: _108.Proof): _108.ProofProtoMsg;
        };
        ValueOp: {
            typeUrl: string;
            encode(message: _108.ValueOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _108.ValueOp;
            fromPartial(object: {
                key?: Uint8Array;
                proof?: {
                    total?: bigint;
                    index?: bigint;
                    leafHash?: Uint8Array;
                    aunts?: Uint8Array[];
                };
            }): _108.ValueOp;
            fromAmino(object: _108.ValueOpAmino): _108.ValueOp;
            toAmino(message: _108.ValueOp): _108.ValueOpAmino;
            fromAminoMsg(object: _108.ValueOpAminoMsg): _108.ValueOp;
            fromProtoMsg(message: _108.ValueOpProtoMsg): _108.ValueOp;
            toProto(message: _108.ValueOp): Uint8Array;
            toProtoMsg(message: _108.ValueOp): _108.ValueOpProtoMsg;
        };
        DominoOp: {
            typeUrl: string;
            encode(message: _108.DominoOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _108.DominoOp;
            fromPartial(object: {
                key?: string;
                input?: string;
                output?: string;
            }): _108.DominoOp;
            fromAmino(object: _108.DominoOpAmino): _108.DominoOp;
            toAmino(message: _108.DominoOp): _108.DominoOpAmino;
            fromAminoMsg(object: _108.DominoOpAminoMsg): _108.DominoOp;
            fromProtoMsg(message: _108.DominoOpProtoMsg): _108.DominoOp;
            toProto(message: _108.DominoOp): Uint8Array;
            toProtoMsg(message: _108.DominoOp): _108.DominoOpProtoMsg;
        };
        ProofOp: {
            typeUrl: string;
            encode(message: _108.ProofOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _108.ProofOp;
            fromPartial(object: {
                type?: string;
                key?: Uint8Array;
                data?: Uint8Array;
            }): _108.ProofOp;
            fromAmino(object: _108.ProofOpAmino): _108.ProofOp;
            toAmino(message: _108.ProofOp): _108.ProofOpAmino;
            fromAminoMsg(object: _108.ProofOpAminoMsg): _108.ProofOp;
            fromProtoMsg(message: _108.ProofOpProtoMsg): _108.ProofOp;
            toProto(message: _108.ProofOp): Uint8Array;
            toProtoMsg(message: _108.ProofOp): _108.ProofOpProtoMsg;
        };
        ProofOps: {
            typeUrl: string;
            encode(message: _108.ProofOps, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _108.ProofOps;
            fromPartial(object: {
                ops?: {
                    type?: string;
                    key?: Uint8Array;
                    data?: Uint8Array;
                }[];
            }): _108.ProofOps;
            fromAmino(object: _108.ProofOpsAmino): _108.ProofOps;
            toAmino(message: _108.ProofOps): _108.ProofOpsAmino;
            fromAminoMsg(object: _108.ProofOpsAminoMsg): _108.ProofOps;
            fromProtoMsg(message: _108.ProofOpsProtoMsg): _108.ProofOps;
            toProto(message: _108.ProofOps): Uint8Array;
            toProtoMsg(message: _108.ProofOps): _108.ProofOpsProtoMsg;
        };
        PublicKey: {
            typeUrl: string;
            encode(message: _107.PublicKey, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _107.PublicKey;
            fromPartial(object: {
                ed25519?: Uint8Array;
                secp256k1?: Uint8Array;
            }): _107.PublicKey;
            fromAmino(object: _107.PublicKeyAmino): _107.PublicKey;
            toAmino(message: _107.PublicKey): _107.PublicKeyAmino;
            fromAminoMsg(object: _107.PublicKeyAminoMsg): _107.PublicKey;
            fromProtoMsg(message: _107.PublicKeyProtoMsg): _107.PublicKey;
            toProto(message: _107.PublicKey): Uint8Array;
            toProtoMsg(message: _107.PublicKey): _107.PublicKeyProtoMsg;
        };
    };
    namespace libs {
        const bits: {
            BitArray: {
                typeUrl: string;
                encode(message: _109.BitArray, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _109.BitArray;
                fromPartial(object: {
                    bits?: bigint;
                    elems?: bigint[];
                }): _109.BitArray;
                fromAmino(object: _109.BitArrayAmino): _109.BitArray;
                toAmino(message: _109.BitArray): _109.BitArrayAmino;
                fromAminoMsg(object: _109.BitArrayAminoMsg): _109.BitArray;
                fromProtoMsg(message: _109.BitArrayProtoMsg): _109.BitArray;
                toProto(message: _109.BitArray): Uint8Array;
                toProtoMsg(message: _109.BitArray): _109.BitArrayProtoMsg;
            };
        };
    }
    const p2p: {
        NetAddress: {
            typeUrl: string;
            encode(message: _110.NetAddress, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _110.NetAddress;
            fromPartial(object: {
                id?: string;
                ip?: string;
                port?: number;
            }): _110.NetAddress;
            fromAmino(object: _110.NetAddressAmino): _110.NetAddress;
            toAmino(message: _110.NetAddress): _110.NetAddressAmino;
            fromAminoMsg(object: _110.NetAddressAminoMsg): _110.NetAddress;
            fromProtoMsg(message: _110.NetAddressProtoMsg): _110.NetAddress;
            toProto(message: _110.NetAddress): Uint8Array;
            toProtoMsg(message: _110.NetAddress): _110.NetAddressProtoMsg;
        };
        ProtocolVersion: {
            typeUrl: string;
            encode(message: _110.ProtocolVersion, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _110.ProtocolVersion;
            fromPartial(object: {
                p2p?: bigint;
                block?: bigint;
                app?: bigint;
            }): _110.ProtocolVersion;
            fromAmino(object: _110.ProtocolVersionAmino): _110.ProtocolVersion;
            toAmino(message: _110.ProtocolVersion): _110.ProtocolVersionAmino;
            fromAminoMsg(object: _110.ProtocolVersionAminoMsg): _110.ProtocolVersion;
            fromProtoMsg(message: _110.ProtocolVersionProtoMsg): _110.ProtocolVersion;
            toProto(message: _110.ProtocolVersion): Uint8Array;
            toProtoMsg(message: _110.ProtocolVersion): _110.ProtocolVersionProtoMsg;
        };
        DefaultNodeInfo: {
            typeUrl: string;
            encode(message: _110.DefaultNodeInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _110.DefaultNodeInfo;
            fromPartial(object: {
                protocolVersion?: {
                    p2p?: bigint;
                    block?: bigint;
                    app?: bigint;
                };
                defaultNodeId?: string;
                listenAddr?: string;
                network?: string;
                version?: string;
                channels?: Uint8Array;
                moniker?: string;
                other?: {
                    txIndex?: string;
                    rpcAddress?: string;
                };
            }): _110.DefaultNodeInfo;
            fromAmino(object: _110.DefaultNodeInfoAmino): _110.DefaultNodeInfo;
            toAmino(message: _110.DefaultNodeInfo): _110.DefaultNodeInfoAmino;
            fromAminoMsg(object: _110.DefaultNodeInfoAminoMsg): _110.DefaultNodeInfo;
            fromProtoMsg(message: _110.DefaultNodeInfoProtoMsg): _110.DefaultNodeInfo;
            toProto(message: _110.DefaultNodeInfo): Uint8Array;
            toProtoMsg(message: _110.DefaultNodeInfo): _110.DefaultNodeInfoProtoMsg;
        };
        DefaultNodeInfoOther: {
            typeUrl: string;
            encode(message: _110.DefaultNodeInfoOther, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _110.DefaultNodeInfoOther;
            fromPartial(object: {
                txIndex?: string;
                rpcAddress?: string;
            }): _110.DefaultNodeInfoOther;
            fromAmino(object: _110.DefaultNodeInfoOtherAmino): _110.DefaultNodeInfoOther;
            toAmino(message: _110.DefaultNodeInfoOther): _110.DefaultNodeInfoOtherAmino;
            fromAminoMsg(object: _110.DefaultNodeInfoOtherAminoMsg): _110.DefaultNodeInfoOther;
            fromProtoMsg(message: _110.DefaultNodeInfoOtherProtoMsg): _110.DefaultNodeInfoOther;
            toProto(message: _110.DefaultNodeInfoOther): Uint8Array;
            toProtoMsg(message: _110.DefaultNodeInfoOther): _110.DefaultNodeInfoOtherProtoMsg;
        };
    };
    const types: {
        blockIDFlagFromJSON(object: any): _115.BlockIDFlag;
        blockIDFlagToJSON(object: _115.BlockIDFlag): string;
        BlockIDFlag: typeof _115.BlockIDFlag;
        BlockIDFlagSDKType: typeof _115.BlockIDFlag;
        BlockIDFlagAmino: typeof _115.BlockIDFlag;
        ValidatorSet: {
            typeUrl: string;
            encode(message: _115.ValidatorSet, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _115.ValidatorSet;
            fromPartial(object: {
                validators?: {
                    address?: Uint8Array;
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    votingPower?: bigint;
                    proposerPriority?: bigint;
                }[];
                proposer?: {
                    address?: Uint8Array;
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    votingPower?: bigint;
                    proposerPriority?: bigint;
                };
                totalVotingPower?: bigint;
            }): _115.ValidatorSet;
            fromAmino(object: _115.ValidatorSetAmino): _115.ValidatorSet;
            toAmino(message: _115.ValidatorSet): _115.ValidatorSetAmino;
            fromAminoMsg(object: _115.ValidatorSetAminoMsg): _115.ValidatorSet;
            fromProtoMsg(message: _115.ValidatorSetProtoMsg): _115.ValidatorSet;
            toProto(message: _115.ValidatorSet): Uint8Array;
            toProtoMsg(message: _115.ValidatorSet): _115.ValidatorSetProtoMsg;
        };
        Validator: {
            typeUrl: string;
            encode(message: _115.Validator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _115.Validator;
            fromPartial(object: {
                address?: Uint8Array;
                pubKey?: {
                    ed25519?: Uint8Array;
                    secp256k1?: Uint8Array;
                };
                votingPower?: bigint;
                proposerPriority?: bigint;
            }): _115.Validator;
            fromAmino(object: _115.ValidatorAmino): _115.Validator;
            toAmino(message: _115.Validator): _115.ValidatorAmino;
            fromAminoMsg(object: _115.ValidatorAminoMsg): _115.Validator;
            fromProtoMsg(message: _115.ValidatorProtoMsg): _115.Validator;
            toProto(message: _115.Validator): Uint8Array;
            toProtoMsg(message: _115.Validator): _115.ValidatorProtoMsg;
        };
        SimpleValidator: {
            typeUrl: string;
            encode(message: _115.SimpleValidator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _115.SimpleValidator;
            fromPartial(object: {
                pubKey?: {
                    ed25519?: Uint8Array;
                    secp256k1?: Uint8Array;
                };
                votingPower?: bigint;
            }): _115.SimpleValidator;
            fromAmino(object: _115.SimpleValidatorAmino): _115.SimpleValidator;
            toAmino(message: _115.SimpleValidator): _115.SimpleValidatorAmino;
            fromAminoMsg(object: _115.SimpleValidatorAminoMsg): _115.SimpleValidator;
            fromProtoMsg(message: _115.SimpleValidatorProtoMsg): _115.SimpleValidator;
            toProto(message: _115.SimpleValidator): Uint8Array;
            toProtoMsg(message: _115.SimpleValidator): _115.SimpleValidatorProtoMsg;
        };
        signedMsgTypeFromJSON(object: any): _114.SignedMsgType;
        signedMsgTypeToJSON(object: _114.SignedMsgType): string;
        SignedMsgType: typeof _114.SignedMsgType;
        SignedMsgTypeSDKType: typeof _114.SignedMsgType;
        SignedMsgTypeAmino: typeof _114.SignedMsgType;
        PartSetHeader: {
            typeUrl: string;
            encode(message: _114.PartSetHeader, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.PartSetHeader;
            fromPartial(object: {
                total?: number;
                hash?: Uint8Array;
            }): _114.PartSetHeader;
            fromAmino(object: _114.PartSetHeaderAmino): _114.PartSetHeader;
            toAmino(message: _114.PartSetHeader): _114.PartSetHeaderAmino;
            fromAminoMsg(object: _114.PartSetHeaderAminoMsg): _114.PartSetHeader;
            fromProtoMsg(message: _114.PartSetHeaderProtoMsg): _114.PartSetHeader;
            toProto(message: _114.PartSetHeader): Uint8Array;
            toProtoMsg(message: _114.PartSetHeader): _114.PartSetHeaderProtoMsg;
        };
        Part: {
            typeUrl: string;
            encode(message: _114.Part, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.Part;
            fromPartial(object: {
                index?: number;
                bytes?: Uint8Array;
                proof?: {
                    total?: bigint;
                    index?: bigint;
                    leafHash?: Uint8Array;
                    aunts?: Uint8Array[];
                };
            }): _114.Part;
            fromAmino(object: _114.PartAmino): _114.Part;
            toAmino(message: _114.Part): _114.PartAmino;
            fromAminoMsg(object: _114.PartAminoMsg): _114.Part;
            fromProtoMsg(message: _114.PartProtoMsg): _114.Part;
            toProto(message: _114.Part): Uint8Array;
            toProtoMsg(message: _114.Part): _114.PartProtoMsg;
        };
        BlockID: {
            typeUrl: string;
            encode(message: _114.BlockID, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.BlockID;
            fromPartial(object: {
                hash?: Uint8Array;
                partSetHeader?: {
                    total?: number;
                    hash?: Uint8Array;
                };
            }): _114.BlockID;
            fromAmino(object: _114.BlockIDAmino): _114.BlockID;
            toAmino(message: _114.BlockID): _114.BlockIDAmino;
            fromAminoMsg(object: _114.BlockIDAminoMsg): _114.BlockID;
            fromProtoMsg(message: _114.BlockIDProtoMsg): _114.BlockID;
            toProto(message: _114.BlockID): Uint8Array;
            toProtoMsg(message: _114.BlockID): _114.BlockIDProtoMsg;
        };
        Header: {
            typeUrl: string;
            encode(message: _114.Header, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.Header;
            fromPartial(object: {
                version?: {
                    block?: bigint;
                    app?: bigint;
                };
                chainId?: string;
                height?: bigint;
                time?: Date;
                lastBlockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                lastCommitHash?: Uint8Array;
                dataHash?: Uint8Array;
                validatorsHash?: Uint8Array;
                nextValidatorsHash?: Uint8Array;
                consensusHash?: Uint8Array;
                appHash?: Uint8Array;
                lastResultsHash?: Uint8Array;
                evidenceHash?: Uint8Array;
                proposerAddress?: Uint8Array;
            }): _114.Header;
            fromAmino(object: _114.HeaderAmino): _114.Header;
            toAmino(message: _114.Header): _114.HeaderAmino;
            fromAminoMsg(object: _114.HeaderAminoMsg): _114.Header;
            fromProtoMsg(message: _114.HeaderProtoMsg): _114.Header;
            toProto(message: _114.Header): Uint8Array;
            toProtoMsg(message: _114.Header): _114.HeaderProtoMsg;
        };
        Data: {
            typeUrl: string;
            encode(message: _114.Data, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.Data;
            fromPartial(object: {
                txs?: Uint8Array[];
            }): _114.Data;
            fromAmino(object: _114.DataAmino): _114.Data;
            toAmino(message: _114.Data): _114.DataAmino;
            fromAminoMsg(object: _114.DataAminoMsg): _114.Data;
            fromProtoMsg(message: _114.DataProtoMsg): _114.Data;
            toProto(message: _114.Data): Uint8Array;
            toProtoMsg(message: _114.Data): _114.DataProtoMsg;
        };
        Vote: {
            typeUrl: string;
            encode(message: _114.Vote, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.Vote;
            fromPartial(object: {
                type?: _114.SignedMsgType;
                height?: bigint;
                round?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                timestamp?: Date;
                validatorAddress?: Uint8Array;
                validatorIndex?: number;
                signature?: Uint8Array;
                extension?: Uint8Array;
                extensionSignature?: Uint8Array;
            }): _114.Vote;
            fromAmino(object: _114.VoteAmino): _114.Vote;
            toAmino(message: _114.Vote): _114.VoteAmino;
            fromAminoMsg(object: _114.VoteAminoMsg): _114.Vote;
            fromProtoMsg(message: _114.VoteProtoMsg): _114.Vote;
            toProto(message: _114.Vote): Uint8Array;
            toProtoMsg(message: _114.Vote): _114.VoteProtoMsg;
        };
        Commit: {
            typeUrl: string;
            encode(message: _114.Commit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.Commit;
            fromPartial(object: {
                height?: bigint;
                round?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                signatures?: {
                    blockIdFlag?: _115.BlockIDFlag;
                    validatorAddress?: Uint8Array;
                    timestamp?: Date;
                    signature?: Uint8Array;
                }[];
            }): _114.Commit;
            fromAmino(object: _114.CommitAmino): _114.Commit;
            toAmino(message: _114.Commit): _114.CommitAmino;
            fromAminoMsg(object: _114.CommitAminoMsg): _114.Commit;
            fromProtoMsg(message: _114.CommitProtoMsg): _114.Commit;
            toProto(message: _114.Commit): Uint8Array;
            toProtoMsg(message: _114.Commit): _114.CommitProtoMsg;
        };
        CommitSig: {
            typeUrl: string;
            encode(message: _114.CommitSig, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.CommitSig;
            fromPartial(object: {
                blockIdFlag?: _115.BlockIDFlag;
                validatorAddress?: Uint8Array;
                timestamp?: Date;
                signature?: Uint8Array;
            }): _114.CommitSig;
            fromAmino(object: _114.CommitSigAmino): _114.CommitSig;
            toAmino(message: _114.CommitSig): _114.CommitSigAmino;
            fromAminoMsg(object: _114.CommitSigAminoMsg): _114.CommitSig;
            fromProtoMsg(message: _114.CommitSigProtoMsg): _114.CommitSig;
            toProto(message: _114.CommitSig): Uint8Array;
            toProtoMsg(message: _114.CommitSig): _114.CommitSigProtoMsg;
        };
        ExtendedCommit: {
            typeUrl: string;
            encode(message: _114.ExtendedCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.ExtendedCommit;
            fromPartial(object: {
                height?: bigint;
                round?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                extendedSignatures?: {
                    blockIdFlag?: _115.BlockIDFlag;
                    validatorAddress?: Uint8Array;
                    timestamp?: Date;
                    signature?: Uint8Array;
                    extension?: Uint8Array;
                    extensionSignature?: Uint8Array;
                }[];
            }): _114.ExtendedCommit;
            fromAmino(object: _114.ExtendedCommitAmino): _114.ExtendedCommit;
            toAmino(message: _114.ExtendedCommit): _114.ExtendedCommitAmino;
            fromAminoMsg(object: _114.ExtendedCommitAminoMsg): _114.ExtendedCommit;
            fromProtoMsg(message: _114.ExtendedCommitProtoMsg): _114.ExtendedCommit;
            toProto(message: _114.ExtendedCommit): Uint8Array;
            toProtoMsg(message: _114.ExtendedCommit): _114.ExtendedCommitProtoMsg;
        };
        ExtendedCommitSig: {
            typeUrl: string;
            encode(message: _114.ExtendedCommitSig, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.ExtendedCommitSig;
            fromPartial(object: {
                blockIdFlag?: _115.BlockIDFlag;
                validatorAddress?: Uint8Array;
                timestamp?: Date;
                signature?: Uint8Array;
                extension?: Uint8Array;
                extensionSignature?: Uint8Array;
            }): _114.ExtendedCommitSig;
            fromAmino(object: _114.ExtendedCommitSigAmino): _114.ExtendedCommitSig;
            toAmino(message: _114.ExtendedCommitSig): _114.ExtendedCommitSigAmino;
            fromAminoMsg(object: _114.ExtendedCommitSigAminoMsg): _114.ExtendedCommitSig;
            fromProtoMsg(message: _114.ExtendedCommitSigProtoMsg): _114.ExtendedCommitSig;
            toProto(message: _114.ExtendedCommitSig): Uint8Array;
            toProtoMsg(message: _114.ExtendedCommitSig): _114.ExtendedCommitSigProtoMsg;
        };
        Proposal: {
            typeUrl: string;
            encode(message: _114.Proposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.Proposal;
            fromPartial(object: {
                type?: _114.SignedMsgType;
                height?: bigint;
                round?: number;
                polRound?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                timestamp?: Date;
                signature?: Uint8Array;
            }): _114.Proposal;
            fromAmino(object: _114.ProposalAmino): _114.Proposal;
            toAmino(message: _114.Proposal): _114.ProposalAmino;
            fromAminoMsg(object: _114.ProposalAminoMsg): _114.Proposal;
            fromProtoMsg(message: _114.ProposalProtoMsg): _114.Proposal;
            toProto(message: _114.Proposal): Uint8Array;
            toProtoMsg(message: _114.Proposal): _114.ProposalProtoMsg;
        };
        SignedHeader: {
            typeUrl: string;
            encode(message: _114.SignedHeader, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.SignedHeader;
            fromPartial(object: {
                header?: {
                    version?: {
                        block?: bigint;
                        app?: bigint;
                    };
                    chainId?: string;
                    height?: bigint;
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                commit?: {
                    height?: bigint;
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    signatures?: {
                        blockIdFlag?: _115.BlockIDFlag;
                        validatorAddress?: Uint8Array;
                        timestamp?: Date;
                        signature?: Uint8Array;
                    }[];
                };
            }): _114.SignedHeader;
            fromAmino(object: _114.SignedHeaderAmino): _114.SignedHeader;
            toAmino(message: _114.SignedHeader): _114.SignedHeaderAmino;
            fromAminoMsg(object: _114.SignedHeaderAminoMsg): _114.SignedHeader;
            fromProtoMsg(message: _114.SignedHeaderProtoMsg): _114.SignedHeader;
            toProto(message: _114.SignedHeader): Uint8Array;
            toProtoMsg(message: _114.SignedHeader): _114.SignedHeaderProtoMsg;
        };
        LightBlock: {
            typeUrl: string;
            encode(message: _114.LightBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.LightBlock;
            fromPartial(object: {
                signedHeader?: {
                    header?: {
                        version?: {
                            block?: bigint;
                            app?: bigint;
                        };
                        chainId?: string;
                        height?: bigint;
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    };
                    commit?: {
                        height?: bigint;
                        round?: number;
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        signatures?: {
                            blockIdFlag?: _115.BlockIDFlag;
                            validatorAddress?: Uint8Array;
                            timestamp?: Date;
                            signature?: Uint8Array;
                        }[];
                    };
                };
                validatorSet?: {
                    validators?: {
                        address?: Uint8Array;
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        votingPower?: bigint;
                        proposerPriority?: bigint;
                    }[];
                    proposer?: {
                        address?: Uint8Array;
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        votingPower?: bigint;
                        proposerPriority?: bigint;
                    };
                    totalVotingPower?: bigint;
                };
            }): _114.LightBlock;
            fromAmino(object: _114.LightBlockAmino): _114.LightBlock;
            toAmino(message: _114.LightBlock): _114.LightBlockAmino;
            fromAminoMsg(object: _114.LightBlockAminoMsg): _114.LightBlock;
            fromProtoMsg(message: _114.LightBlockProtoMsg): _114.LightBlock;
            toProto(message: _114.LightBlock): Uint8Array;
            toProtoMsg(message: _114.LightBlock): _114.LightBlockProtoMsg;
        };
        BlockMeta: {
            typeUrl: string;
            encode(message: _114.BlockMeta, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.BlockMeta;
            fromPartial(object: {
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                blockSize?: bigint;
                header?: {
                    version?: {
                        block?: bigint;
                        app?: bigint;
                    };
                    chainId?: string;
                    height?: bigint;
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                numTxs?: bigint;
            }): _114.BlockMeta;
            fromAmino(object: _114.BlockMetaAmino): _114.BlockMeta;
            toAmino(message: _114.BlockMeta): _114.BlockMetaAmino;
            fromAminoMsg(object: _114.BlockMetaAminoMsg): _114.BlockMeta;
            fromProtoMsg(message: _114.BlockMetaProtoMsg): _114.BlockMeta;
            toProto(message: _114.BlockMeta): Uint8Array;
            toProtoMsg(message: _114.BlockMeta): _114.BlockMetaProtoMsg;
        };
        TxProof: {
            typeUrl: string;
            encode(message: _114.TxProof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.TxProof;
            fromPartial(object: {
                rootHash?: Uint8Array;
                data?: Uint8Array;
                proof?: {
                    total?: bigint;
                    index?: bigint;
                    leafHash?: Uint8Array;
                    aunts?: Uint8Array[];
                };
            }): _114.TxProof;
            fromAmino(object: _114.TxProofAmino): _114.TxProof;
            toAmino(message: _114.TxProof): _114.TxProofAmino;
            fromAminoMsg(object: _114.TxProofAminoMsg): _114.TxProof;
            fromProtoMsg(message: _114.TxProofProtoMsg): _114.TxProof;
            toProto(message: _114.TxProof): Uint8Array;
            toProtoMsg(message: _114.TxProof): _114.TxProofProtoMsg;
        };
        ConsensusParams: {
            typeUrl: string;
            encode(message: _113.ConsensusParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.ConsensusParams;
            fromPartial(object: {
                block?: {
                    maxBytes?: bigint;
                    maxGas?: bigint;
                };
                evidence?: {
                    maxAgeNumBlocks?: bigint;
                    maxAgeDuration?: {
                        seconds?: bigint;
                        nanos?: number;
                    };
                    maxBytes?: bigint;
                };
                validator?: {
                    pubKeyTypes?: string[];
                };
                version?: {
                    app?: bigint;
                };
                abci?: {
                    voteExtensionsEnableHeight?: bigint;
                };
            }): _113.ConsensusParams;
            fromAmino(object: _113.ConsensusParamsAmino): _113.ConsensusParams;
            toAmino(message: _113.ConsensusParams): _113.ConsensusParamsAmino;
            fromAminoMsg(object: _113.ConsensusParamsAminoMsg): _113.ConsensusParams;
            fromProtoMsg(message: _113.ConsensusParamsProtoMsg): _113.ConsensusParams;
            toProto(message: _113.ConsensusParams): Uint8Array;
            toProtoMsg(message: _113.ConsensusParams): _113.ConsensusParamsProtoMsg;
        };
        BlockParams: {
            typeUrl: string;
            encode(message: _113.BlockParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.BlockParams;
            fromPartial(object: {
                maxBytes?: bigint;
                maxGas?: bigint;
            }): _113.BlockParams;
            fromAmino(object: _113.BlockParamsAmino): _113.BlockParams;
            toAmino(message: _113.BlockParams): _113.BlockParamsAmino;
            fromAminoMsg(object: _113.BlockParamsAminoMsg): _113.BlockParams;
            fromProtoMsg(message: _113.BlockParamsProtoMsg): _113.BlockParams;
            toProto(message: _113.BlockParams): Uint8Array;
            toProtoMsg(message: _113.BlockParams): _113.BlockParamsProtoMsg;
        };
        EvidenceParams: {
            typeUrl: string;
            encode(message: _113.EvidenceParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.EvidenceParams;
            fromPartial(object: {
                maxAgeNumBlocks?: bigint;
                maxAgeDuration?: {
                    seconds?: bigint;
                    nanos?: number;
                };
                maxBytes?: bigint;
            }): _113.EvidenceParams;
            fromAmino(object: _113.EvidenceParamsAmino): _113.EvidenceParams;
            toAmino(message: _113.EvidenceParams): _113.EvidenceParamsAmino;
            fromAminoMsg(object: _113.EvidenceParamsAminoMsg): _113.EvidenceParams;
            fromProtoMsg(message: _113.EvidenceParamsProtoMsg): _113.EvidenceParams;
            toProto(message: _113.EvidenceParams): Uint8Array;
            toProtoMsg(message: _113.EvidenceParams): _113.EvidenceParamsProtoMsg;
        };
        ValidatorParams: {
            typeUrl: string;
            encode(message: _113.ValidatorParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.ValidatorParams;
            fromPartial(object: {
                pubKeyTypes?: string[];
            }): _113.ValidatorParams;
            fromAmino(object: _113.ValidatorParamsAmino): _113.ValidatorParams;
            toAmino(message: _113.ValidatorParams): _113.ValidatorParamsAmino;
            fromAminoMsg(object: _113.ValidatorParamsAminoMsg): _113.ValidatorParams;
            fromProtoMsg(message: _113.ValidatorParamsProtoMsg): _113.ValidatorParams;
            toProto(message: _113.ValidatorParams): Uint8Array;
            toProtoMsg(message: _113.ValidatorParams): _113.ValidatorParamsProtoMsg;
        };
        VersionParams: {
            typeUrl: string;
            encode(message: _113.VersionParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.VersionParams;
            fromPartial(object: {
                app?: bigint;
            }): _113.VersionParams;
            fromAmino(object: _113.VersionParamsAmino): _113.VersionParams;
            toAmino(message: _113.VersionParams): _113.VersionParamsAmino;
            fromAminoMsg(object: _113.VersionParamsAminoMsg): _113.VersionParams;
            fromProtoMsg(message: _113.VersionParamsProtoMsg): _113.VersionParams;
            toProto(message: _113.VersionParams): Uint8Array;
            toProtoMsg(message: _113.VersionParams): _113.VersionParamsProtoMsg;
        };
        HashedParams: {
            typeUrl: string;
            encode(message: _113.HashedParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.HashedParams;
            fromPartial(object: {
                blockMaxBytes?: bigint;
                blockMaxGas?: bigint;
            }): _113.HashedParams;
            fromAmino(object: _113.HashedParamsAmino): _113.HashedParams;
            toAmino(message: _113.HashedParams): _113.HashedParamsAmino;
            fromAminoMsg(object: _113.HashedParamsAminoMsg): _113.HashedParams;
            fromProtoMsg(message: _113.HashedParamsProtoMsg): _113.HashedParams;
            toProto(message: _113.HashedParams): Uint8Array;
            toProtoMsg(message: _113.HashedParams): _113.HashedParamsProtoMsg;
        };
        ABCIParams: {
            typeUrl: string;
            encode(message: _113.ABCIParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.ABCIParams;
            fromPartial(object: {
                voteExtensionsEnableHeight?: bigint;
            }): _113.ABCIParams;
            fromAmino(object: _113.ABCIParamsAmino): _113.ABCIParams;
            toAmino(message: _113.ABCIParams): _113.ABCIParamsAmino;
            fromAminoMsg(object: _113.ABCIParamsAminoMsg): _113.ABCIParams;
            fromProtoMsg(message: _113.ABCIParamsProtoMsg): _113.ABCIParams;
            toProto(message: _113.ABCIParams): Uint8Array;
            toProtoMsg(message: _113.ABCIParams): _113.ABCIParamsProtoMsg;
        };
        Evidence: {
            typeUrl: string;
            encode(message: _112.Evidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.Evidence;
            fromPartial(object: {
                duplicateVoteEvidence?: {
                    voteA?: {
                        type?: _114.SignedMsgType;
                        height?: bigint;
                        round?: number;
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        timestamp?: Date;
                        validatorAddress?: Uint8Array;
                        validatorIndex?: number;
                        signature?: Uint8Array;
                        extension?: Uint8Array;
                        extensionSignature?: Uint8Array;
                    };
                    voteB?: {
                        type?: _114.SignedMsgType;
                        height?: bigint;
                        round?: number;
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        timestamp?: Date;
                        validatorAddress?: Uint8Array;
                        validatorIndex?: number;
                        signature?: Uint8Array;
                        extension?: Uint8Array;
                        extensionSignature?: Uint8Array;
                    };
                    totalVotingPower?: bigint;
                    validatorPower?: bigint;
                    timestamp?: Date;
                };
                lightClientAttackEvidence?: {
                    conflictingBlock?: {
                        signedHeader?: {
                            header?: {
                                version?: {
                                    block?: bigint;
                                    app?: bigint;
                                };
                                chainId?: string;
                                height?: bigint;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            commit?: {
                                height?: bigint;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: _115.BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                        validatorSet?: {
                            validators?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            }[];
                            proposer?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            };
                            totalVotingPower?: bigint;
                        };
                    };
                    commonHeight?: bigint;
                    byzantineValidators?: {
                        address?: Uint8Array;
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        votingPower?: bigint;
                        proposerPriority?: bigint;
                    }[];
                    totalVotingPower?: bigint;
                    timestamp?: Date;
                };
            }): _112.Evidence;
            fromAmino(object: _112.EvidenceAmino): _112.Evidence;
            toAmino(message: _112.Evidence): _112.EvidenceAmino;
            fromAminoMsg(object: _112.EvidenceAminoMsg): _112.Evidence;
            fromProtoMsg(message: _112.EvidenceProtoMsg): _112.Evidence;
            toProto(message: _112.Evidence): Uint8Array;
            toProtoMsg(message: _112.Evidence): _112.EvidenceProtoMsg;
        };
        DuplicateVoteEvidence: {
            typeUrl: string;
            encode(message: _112.DuplicateVoteEvidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.DuplicateVoteEvidence;
            fromPartial(object: {
                voteA?: {
                    type?: _114.SignedMsgType;
                    height?: bigint;
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    timestamp?: Date;
                    validatorAddress?: Uint8Array;
                    validatorIndex?: number;
                    signature?: Uint8Array;
                    extension?: Uint8Array;
                    extensionSignature?: Uint8Array;
                };
                voteB?: {
                    type?: _114.SignedMsgType;
                    height?: bigint;
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    timestamp?: Date;
                    validatorAddress?: Uint8Array;
                    validatorIndex?: number;
                    signature?: Uint8Array;
                    extension?: Uint8Array;
                    extensionSignature?: Uint8Array;
                };
                totalVotingPower?: bigint;
                validatorPower?: bigint;
                timestamp?: Date;
            }): _112.DuplicateVoteEvidence;
            fromAmino(object: _112.DuplicateVoteEvidenceAmino): _112.DuplicateVoteEvidence;
            toAmino(message: _112.DuplicateVoteEvidence): _112.DuplicateVoteEvidenceAmino;
            fromAminoMsg(object: _112.DuplicateVoteEvidenceAminoMsg): _112.DuplicateVoteEvidence;
            fromProtoMsg(message: _112.DuplicateVoteEvidenceProtoMsg): _112.DuplicateVoteEvidence;
            toProto(message: _112.DuplicateVoteEvidence): Uint8Array;
            toProtoMsg(message: _112.DuplicateVoteEvidence): _112.DuplicateVoteEvidenceProtoMsg;
        };
        LightClientAttackEvidence: {
            typeUrl: string;
            encode(message: _112.LightClientAttackEvidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.LightClientAttackEvidence;
            fromPartial(object: {
                conflictingBlock?: {
                    signedHeader?: {
                        header?: {
                            version?: {
                                block?: bigint;
                                app?: bigint;
                            };
                            chainId?: string;
                            height?: bigint;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        commit?: {
                            height?: bigint;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: _115.BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        };
                    };
                    validatorSet?: {
                        validators?: {
                            address?: Uint8Array;
                            pubKey?: {
                                ed25519?: Uint8Array;
                                secp256k1?: Uint8Array;
                            };
                            votingPower?: bigint;
                            proposerPriority?: bigint;
                        }[];
                        proposer?: {
                            address?: Uint8Array;
                            pubKey?: {
                                ed25519?: Uint8Array;
                                secp256k1?: Uint8Array;
                            };
                            votingPower?: bigint;
                            proposerPriority?: bigint;
                        };
                        totalVotingPower?: bigint;
                    };
                };
                commonHeight?: bigint;
                byzantineValidators?: {
                    address?: Uint8Array;
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    votingPower?: bigint;
                    proposerPriority?: bigint;
                }[];
                totalVotingPower?: bigint;
                timestamp?: Date;
            }): _112.LightClientAttackEvidence;
            fromAmino(object: _112.LightClientAttackEvidenceAmino): _112.LightClientAttackEvidence;
            toAmino(message: _112.LightClientAttackEvidence): _112.LightClientAttackEvidenceAmino;
            fromAminoMsg(object: _112.LightClientAttackEvidenceAminoMsg): _112.LightClientAttackEvidence;
            fromProtoMsg(message: _112.LightClientAttackEvidenceProtoMsg): _112.LightClientAttackEvidence;
            toProto(message: _112.LightClientAttackEvidence): Uint8Array;
            toProtoMsg(message: _112.LightClientAttackEvidence): _112.LightClientAttackEvidenceProtoMsg;
        };
        EvidenceList: {
            typeUrl: string;
            encode(message: _112.EvidenceList, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.EvidenceList;
            fromPartial(object: {
                evidence?: {
                    duplicateVoteEvidence?: {
                        voteA?: {
                            type?: _114.SignedMsgType;
                            height?: bigint;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            timestamp?: Date;
                            validatorAddress?: Uint8Array;
                            validatorIndex?: number;
                            signature?: Uint8Array;
                            extension?: Uint8Array;
                            extensionSignature?: Uint8Array;
                        };
                        voteB?: {
                            type?: _114.SignedMsgType;
                            height?: bigint;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            timestamp?: Date;
                            validatorAddress?: Uint8Array;
                            validatorIndex?: number;
                            signature?: Uint8Array;
                            extension?: Uint8Array;
                            extensionSignature?: Uint8Array;
                        };
                        totalVotingPower?: bigint;
                        validatorPower?: bigint;
                        timestamp?: Date;
                    };
                    lightClientAttackEvidence?: {
                        conflictingBlock?: {
                            signedHeader?: {
                                header?: {
                                    version?: {
                                        block?: bigint;
                                        app?: bigint;
                                    };
                                    chainId?: string;
                                    height?: bigint;
                                    time?: Date;
                                    lastBlockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    lastCommitHash?: Uint8Array;
                                    dataHash?: Uint8Array;
                                    validatorsHash?: Uint8Array;
                                    nextValidatorsHash?: Uint8Array;
                                    consensusHash?: Uint8Array;
                                    appHash?: Uint8Array;
                                    lastResultsHash?: Uint8Array;
                                    evidenceHash?: Uint8Array;
                                    proposerAddress?: Uint8Array;
                                };
                                commit?: {
                                    height?: bigint;
                                    round?: number;
                                    blockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    signatures?: {
                                        blockIdFlag?: _115.BlockIDFlag;
                                        validatorAddress?: Uint8Array;
                                        timestamp?: Date;
                                        signature?: Uint8Array;
                                    }[];
                                };
                            };
                            validatorSet?: {
                                validators?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                }[];
                                proposer?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: bigint;
                                    proposerPriority?: bigint;
                                };
                                totalVotingPower?: bigint;
                            };
                        };
                        commonHeight?: bigint;
                        byzantineValidators?: {
                            address?: Uint8Array;
                            pubKey?: {
                                ed25519?: Uint8Array;
                                secp256k1?: Uint8Array;
                            };
                            votingPower?: bigint;
                            proposerPriority?: bigint;
                        }[];
                        totalVotingPower?: bigint;
                        timestamp?: Date;
                    };
                }[];
            }): _112.EvidenceList;
            fromAmino(object: _112.EvidenceListAmino): _112.EvidenceList;
            toAmino(message: _112.EvidenceList): _112.EvidenceListAmino;
            fromAminoMsg(object: _112.EvidenceListAminoMsg): _112.EvidenceList;
            fromProtoMsg(message: _112.EvidenceListProtoMsg): _112.EvidenceList;
            toProto(message: _112.EvidenceList): Uint8Array;
            toProtoMsg(message: _112.EvidenceList): _112.EvidenceListProtoMsg;
        };
        Block: {
            typeUrl: string;
            encode(message: _111.Block, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _111.Block;
            fromPartial(object: {
                header?: {
                    version?: {
                        block?: bigint;
                        app?: bigint;
                    };
                    chainId?: string;
                    height?: bigint;
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                data?: {
                    txs?: Uint8Array[];
                };
                evidence?: {
                    evidence?: {
                        duplicateVoteEvidence?: {
                            voteA?: {
                                type?: _114.SignedMsgType;
                                height?: bigint;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                timestamp?: Date;
                                validatorAddress?: Uint8Array;
                                validatorIndex?: number;
                                signature?: Uint8Array;
                                extension?: Uint8Array;
                                extensionSignature?: Uint8Array;
                            };
                            voteB?: {
                                type?: _114.SignedMsgType;
                                height?: bigint;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                timestamp?: Date;
                                validatorAddress?: Uint8Array;
                                validatorIndex?: number;
                                signature?: Uint8Array;
                                extension?: Uint8Array;
                                extensionSignature?: Uint8Array;
                            };
                            totalVotingPower?: bigint;
                            validatorPower?: bigint;
                            timestamp?: Date;
                        };
                        lightClientAttackEvidence?: {
                            conflictingBlock?: {
                                signedHeader?: {
                                    header?: {
                                        version?: {
                                            block?: bigint;
                                            app?: bigint;
                                        };
                                        chainId?: string;
                                        height?: bigint;
                                        time?: Date;
                                        lastBlockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        lastCommitHash?: Uint8Array;
                                        dataHash?: Uint8Array;
                                        validatorsHash?: Uint8Array;
                                        nextValidatorsHash?: Uint8Array;
                                        consensusHash?: Uint8Array;
                                        appHash?: Uint8Array;
                                        lastResultsHash?: Uint8Array;
                                        evidenceHash?: Uint8Array;
                                        proposerAddress?: Uint8Array;
                                    };
                                    commit?: {
                                        height?: bigint;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        signatures?: {
                                            blockIdFlag?: _115.BlockIDFlag;
                                            validatorAddress?: Uint8Array;
                                            timestamp?: Date;
                                            signature?: Uint8Array;
                                        }[];
                                    };
                                };
                                validatorSet?: {
                                    validators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: bigint;
                                        proposerPriority?: bigint;
                                    }[];
                                    proposer?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: bigint;
                                        proposerPriority?: bigint;
                                    };
                                    totalVotingPower?: bigint;
                                };
                            };
                            commonHeight?: bigint;
                            byzantineValidators?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: bigint;
                                proposerPriority?: bigint;
                            }[];
                            totalVotingPower?: bigint;
                            timestamp?: Date;
                        };
                    }[];
                };
                lastCommit?: {
                    height?: bigint;
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    signatures?: {
                        blockIdFlag?: _115.BlockIDFlag;
                        validatorAddress?: Uint8Array;
                        timestamp?: Date;
                        signature?: Uint8Array;
                    }[];
                };
            }): _111.Block;
            fromAmino(object: _111.BlockAmino): _111.Block;
            toAmino(message: _111.Block): _111.BlockAmino;
            fromAminoMsg(object: _111.BlockAminoMsg): _111.Block;
            fromProtoMsg(message: _111.BlockProtoMsg): _111.Block;
            toProto(message: _111.Block): Uint8Array;
            toProtoMsg(message: _111.Block): _111.BlockProtoMsg;
        };
    };
    const version: {
        App: {
            typeUrl: string;
            encode(message: _116.App, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _116.App;
            fromPartial(object: {
                protocol?: bigint;
                software?: string;
            }): _116.App;
            fromAmino(object: _116.AppAmino): _116.App;
            toAmino(message: _116.App): _116.AppAmino;
            fromAminoMsg(object: _116.AppAminoMsg): _116.App;
            fromProtoMsg(message: _116.AppProtoMsg): _116.App;
            toProto(message: _116.App): Uint8Array;
            toProtoMsg(message: _116.App): _116.AppProtoMsg;
        };
        Consensus: {
            typeUrl: string;
            encode(message: _116.Consensus, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _116.Consensus;
            fromPartial(object: {
                block?: bigint;
                app?: bigint;
            }): _116.Consensus;
            fromAmino(object: _116.ConsensusAmino): _116.Consensus;
            toAmino(message: _116.Consensus): _116.ConsensusAmino;
            fromAminoMsg(object: _116.ConsensusAminoMsg): _116.Consensus;
            fromProtoMsg(message: _116.ConsensusProtoMsg): _116.Consensus;
            toProto(message: _116.Consensus): Uint8Array;
            toProtoMsg(message: _116.Consensus): _116.ConsensusProtoMsg;
        };
    };
}
