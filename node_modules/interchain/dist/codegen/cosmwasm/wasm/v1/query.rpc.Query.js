import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryContractInfoRequest, QueryContractInfoResponse, QueryContractHistoryRequest, QueryContractHistoryResponse, QueryContractsByCodeRequest, QueryContractsByCodeResponse, QueryAllContractStateRequest, QueryAllContractStateResponse, QueryRawContractStateRequest, QueryRawContractStateResponse, QuerySmartContractStateRequest, QuerySmartContractStateResponse, QueryCodeRequest, QueryCodeResponse, QueryCodesRequest, QueryCodesResponse, QueryPinnedCodesRequest, QueryPinnedCodesResponse, QueryParamsRequest, QueryParamsResponse, QueryContractsByCreatorRequest, QueryContractsByCreatorResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* ContractInfo gets the contract meta data */
    contractInfo = async (request) => {
        const data = QueryContractInfoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "ContractInfo", data);
        return promise.then(data => QueryContractInfoResponse.decode(new BinaryReader(data)));
    };
    /* ContractHistory gets the contract code history */
    contractHistory = async (request) => {
        const data = QueryContractHistoryRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "ContractHistory", data);
        return promise.then(data => QueryContractHistoryResponse.decode(new BinaryReader(data)));
    };
    /* ContractsByCode lists all smart contracts for a code id */
    contractsByCode = async (request) => {
        const data = QueryContractsByCodeRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "ContractsByCode", data);
        return promise.then(data => QueryContractsByCodeResponse.decode(new BinaryReader(data)));
    };
    /* AllContractState gets all raw store data for a single contract */
    allContractState = async (request) => {
        const data = QueryAllContractStateRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "AllContractState", data);
        return promise.then(data => QueryAllContractStateResponse.decode(new BinaryReader(data)));
    };
    /* RawContractState gets single key from the raw store data of a contract */
    rawContractState = async (request) => {
        const data = QueryRawContractStateRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "RawContractState", data);
        return promise.then(data => QueryRawContractStateResponse.decode(new BinaryReader(data)));
    };
    /* SmartContractState get smart query result from the contract */
    smartContractState = async (request) => {
        const data = QuerySmartContractStateRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "SmartContractState", data);
        return promise.then(data => QuerySmartContractStateResponse.decode(new BinaryReader(data)));
    };
    /* Code gets the binary code and metadata for a singe wasm code */
    code = async (request) => {
        const data = QueryCodeRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "Code", data);
        return promise.then(data => QueryCodeResponse.decode(new BinaryReader(data)));
    };
    /* Codes gets the metadata for all stored wasm codes */
    codes = async (request = {
        pagination: undefined
    }) => {
        const data = QueryCodesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "Codes", data);
        return promise.then(data => QueryCodesResponse.decode(new BinaryReader(data)));
    };
    /* PinnedCodes gets the pinned code ids */
    pinnedCodes = async (request = {
        pagination: undefined
    }) => {
        const data = QueryPinnedCodesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "PinnedCodes", data);
        return promise.then(data => QueryPinnedCodesResponse.decode(new BinaryReader(data)));
    };
    /* Params gets the module params */
    params = async (request = {}) => {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "Params", data);
        return promise.then(data => QueryParamsResponse.decode(new BinaryReader(data)));
    };
    /* ContractsByCreator gets the contracts by creator */
    contractsByCreator = async (request) => {
        const data = QueryContractsByCreatorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Query", "ContractsByCreator", data);
        return promise.then(data => QueryContractsByCreatorResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        contractInfo(request) {
            return queryService.contractInfo(request);
        },
        contractHistory(request) {
            return queryService.contractHistory(request);
        },
        contractsByCode(request) {
            return queryService.contractsByCode(request);
        },
        allContractState(request) {
            return queryService.allContractState(request);
        },
        rawContractState(request) {
            return queryService.rawContractState(request);
        },
        smartContractState(request) {
            return queryService.smartContractState(request);
        },
        code(request) {
            return queryService.code(request);
        },
        codes(request) {
            return queryService.codes(request);
        },
        pinnedCodes(request) {
            return queryService.pinnedCodes(request);
        },
        params(request) {
            return queryService.params(request);
        },
        contractsByCreator(request) {
            return queryService.contractsByCreator(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map