import { BinaryReader } from "../../../binary";
import { MsgStoreCode, MsgStoreCodeResponse, MsgInstantiateContract, MsgInstantiateContractResponse, MsgInstantiateContract2, MsgInstantiateContract2Response, MsgExecuteContract, MsgExecuteContractResponse, MsgMigrateContract, MsgMigrateContractResponse, MsgUpdateAdmin, MsgUpdateAdminResponse, MsgClearAdmin, MsgClearAdminResponse, MsgUpdateInstantiateConfig, MsgUpdateInstantiateConfigResponse, MsgUpdateParams, MsgUpdateParamsResponse, MsgSudoContract, MsgSudoContractResponse, MsgPinCodes, MsgPinCodesResponse, MsgUnpinCodes, MsgUnpinCodesResponse, MsgStoreAndInstantiateContract, MsgStoreAndInstantiateContractResponse, MsgRemoveCodeUploadParamsAddresses, MsgRemoveCodeUploadParamsAddressesResponse, MsgAddCodeUploadParamsAddresses, MsgAddCodeUploadParamsAddressesResponse, MsgStoreAndMigrateContract, MsgStoreAndMigrateContractResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* StoreCode to submit Wasm code to the system */
    storeCode = async (request) => {
        const data = MsgStoreCode.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "StoreCode", data);
        return promise.then(data => MsgStoreCodeResponse.decode(new BinaryReader(data)));
    };
    /* InstantiateContract creates a new smart contract instance for the given
      code id. */
    instantiateContract = async (request) => {
        const data = MsgInstantiateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "InstantiateContract", data);
        return promise.then(data => MsgInstantiateContractResponse.decode(new BinaryReader(data)));
    };
    /* InstantiateContract2 creates a new smart contract instance for the given
      code id with a predictable address */
    instantiateContract2 = async (request) => {
        const data = MsgInstantiateContract2.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "InstantiateContract2", data);
        return promise.then(data => MsgInstantiateContract2Response.decode(new BinaryReader(data)));
    };
    /* Execute submits the given message data to a smart contract */
    executeContract = async (request) => {
        const data = MsgExecuteContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "ExecuteContract", data);
        return promise.then(data => MsgExecuteContractResponse.decode(new BinaryReader(data)));
    };
    /* Migrate runs a code upgrade/ downgrade for a smart contract */
    migrateContract = async (request) => {
        const data = MsgMigrateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "MigrateContract", data);
        return promise.then(data => MsgMigrateContractResponse.decode(new BinaryReader(data)));
    };
    /* UpdateAdmin sets a new   admin for a smart contract */
    updateAdmin = async (request) => {
        const data = MsgUpdateAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateAdmin", data);
        return promise.then(data => MsgUpdateAdminResponse.decode(new BinaryReader(data)));
    };
    /* ClearAdmin removes any admin stored for a smart contract */
    clearAdmin = async (request) => {
        const data = MsgClearAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "ClearAdmin", data);
        return promise.then(data => MsgClearAdminResponse.decode(new BinaryReader(data)));
    };
    /* UpdateInstantiateConfig updates instantiate config for a smart contract */
    updateInstantiateConfig = async (request) => {
        const data = MsgUpdateInstantiateConfig.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateInstantiateConfig", data);
        return promise.then(data => MsgUpdateInstantiateConfigResponse.decode(new BinaryReader(data)));
    };
    /* UpdateParams defines a governance operation for updating the x/wasm
     module parameters. The authority is defined in the keeper.
    
     Since: 0.40 */
    updateParams = async (request) => {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    };
    /* SudoContract defines a governance operation for calling sudo
     on a contract. The authority is defined in the keeper.
    
     Since: 0.40 */
    sudoContract = async (request) => {
        const data = MsgSudoContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "SudoContract", data);
        return promise.then(data => MsgSudoContractResponse.decode(new BinaryReader(data)));
    };
    /* PinCodes defines a governance operation for pinning a set of
     code ids in the wasmvm cache. The authority is defined in the keeper.
    
     Since: 0.40 */
    pinCodes = async (request) => {
        const data = MsgPinCodes.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "PinCodes", data);
        return promise.then(data => MsgPinCodesResponse.decode(new BinaryReader(data)));
    };
    /* UnpinCodes defines a governance operation for unpinning a set of
     code ids in the wasmvm cache. The authority is defined in the keeper.
    
     Since: 0.40 */
    unpinCodes = async (request) => {
        const data = MsgUnpinCodes.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UnpinCodes", data);
        return promise.then(data => MsgUnpinCodesResponse.decode(new BinaryReader(data)));
    };
    /* StoreAndInstantiateContract defines a governance operation for storing
     and instantiating the contract. The authority is defined in the keeper.
    
     Since: 0.40 */
    storeAndInstantiateContract = async (request) => {
        const data = MsgStoreAndInstantiateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "StoreAndInstantiateContract", data);
        return promise.then(data => MsgStoreAndInstantiateContractResponse.decode(new BinaryReader(data)));
    };
    /* RemoveCodeUploadParamsAddresses defines a governance operation for
     removing addresses from code upload params.
     The authority is defined in the keeper. */
    removeCodeUploadParamsAddresses = async (request) => {
        const data = MsgRemoveCodeUploadParamsAddresses.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "RemoveCodeUploadParamsAddresses", data);
        return promise.then(data => MsgRemoveCodeUploadParamsAddressesResponse.decode(new BinaryReader(data)));
    };
    /* AddCodeUploadParamsAddresses defines a governance operation for
     adding addresses to code upload params.
     The authority is defined in the keeper. */
    addCodeUploadParamsAddresses = async (request) => {
        const data = MsgAddCodeUploadParamsAddresses.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "AddCodeUploadParamsAddresses", data);
        return promise.then(data => MsgAddCodeUploadParamsAddressesResponse.decode(new BinaryReader(data)));
    };
    /* StoreAndMigrateContract defines a governance operation for storing
     and migrating the contract. The authority is defined in the keeper.
    
     Since: 0.42 */
    storeAndMigrateContract = async (request) => {
        const data = MsgStoreAndMigrateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "StoreAndMigrateContract", data);
        return promise.then(data => MsgStoreAndMigrateContractResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map