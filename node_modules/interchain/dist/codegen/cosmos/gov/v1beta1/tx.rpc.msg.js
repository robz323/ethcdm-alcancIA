import { BinaryReader } from "../../../binary";
import { MsgSubmitProposal, MsgSubmitProposalResponse, MsgVote, MsgVoteResponse, MsgVoteWeighted, MsgVoteWeightedResponse, MsgDeposit, MsgDepositResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* SubmitProposal defines a method to create new proposal given a content. */
    submitProposal = async (request) => {
        const data = MsgSubmitProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "SubmitProposal", data);
        return promise.then(data => MsgSubmitProposalResponse.decode(new BinaryReader(data)));
    };
    /* Vote defines a method to add a vote on a specific proposal. */
    vote = async (request) => {
        const data = MsgVote.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "Vote", data);
        return promise.then(data => MsgVoteResponse.decode(new BinaryReader(data)));
    };
    /* VoteWeighted defines a method to add a weighted vote on a specific proposal.
    
     Since: cosmos-sdk 0.43 */
    voteWeighted = async (request) => {
        const data = MsgVoteWeighted.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "VoteWeighted", data);
        return promise.then(data => MsgVoteWeightedResponse.decode(new BinaryReader(data)));
    };
    /* Deposit defines a method to add deposit on a specific proposal. */
    deposit = async (request) => {
        const data = MsgDeposit.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "Deposit", data);
        return promise.then(data => MsgDepositResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map