import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryProposalRequest, QueryProposalResponse, QueryProposalsRequest, QueryProposalsResponse, QueryVoteRequest, QueryVoteResponse, QueryVotesRequest, QueryVotesResponse, QueryParamsRequest, QueryParamsResponse, QueryDepositRequest, QueryDepositResponse, QueryDepositsRequest, QueryDepositsResponse, QueryTallyResultRequest, QueryTallyResultResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Proposal queries proposal details based on ProposalID. */
    proposal = async (request) => {
        const data = QueryProposalRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Proposal", data);
        return promise.then(data => QueryProposalResponse.decode(new BinaryReader(data)));
    };
    /* Proposals queries all proposals based on given status. */
    proposals = async (request) => {
        const data = QueryProposalsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Proposals", data);
        return promise.then(data => QueryProposalsResponse.decode(new BinaryReader(data)));
    };
    /* Vote queries voted information based on proposalID, voterAddr.
     Due to how we handle state, this query would error for proposals that has already been finished. */
    vote = async (request) => {
        const data = QueryVoteRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Vote", data);
        return promise.then(data => QueryVoteResponse.decode(new BinaryReader(data)));
    };
    /* Votes queries votes of a given proposal. */
    votes = async (request) => {
        const data = QueryVotesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Votes", data);
        return promise.then(data => QueryVotesResponse.decode(new BinaryReader(data)));
    };
    /* Params queries all parameters of the gov module. */
    params = async (request) => {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Params", data);
        return promise.then(data => QueryParamsResponse.decode(new BinaryReader(data)));
    };
    /* Deposit queries single deposit information based on proposalID, depositor address. */
    deposit = async (request) => {
        const data = QueryDepositRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Deposit", data);
        return promise.then(data => QueryDepositResponse.decode(new BinaryReader(data)));
    };
    /* Deposits queries all deposits of a single proposal. */
    deposits = async (request) => {
        const data = QueryDepositsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Deposits", data);
        return promise.then(data => QueryDepositsResponse.decode(new BinaryReader(data)));
    };
    /* TallyResult queries the tally of a proposal vote. */
    tallyResult = async (request) => {
        const data = QueryTallyResultRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "TallyResult", data);
        return promise.then(data => QueryTallyResultResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        proposal(request) {
            return queryService.proposal(request);
        },
        proposals(request) {
            return queryService.proposals(request);
        },
        vote(request) {
            return queryService.vote(request);
        },
        votes(request) {
            return queryService.votes(request);
        },
        params(request) {
            return queryService.params(request);
        },
        deposit(request) {
            return queryService.deposit(request);
        },
        deposits(request) {
            return queryService.deposits(request);
        },
        tallyResult(request) {
            return queryService.tallyResult(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map