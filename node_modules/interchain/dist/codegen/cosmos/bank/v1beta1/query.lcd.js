import { setPaginationParams } from "../../../helpers";
export class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Balance queries the balance of a single coin for a single account. */
    balance = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.denom !== "undefined") {
            options.params.denom = params.denom;
        }
        const endpoint = `cosmos/bank/v1beta1/balances/${params.address}/by_denom`;
        return await this.req.get(endpoint, options);
    };
    /* AllBalances queries the balance of all coins for a single account.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    allBalances = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        if (typeof params?.resolveDenom !== "undefined") {
            options.params.resolve_denom = params.resolveDenom;
        }
        const endpoint = `cosmos/bank/v1beta1/balances/${params.address}`;
        return await this.req.get(endpoint, options);
    };
    /* SpendableBalances queries the spendable balance of all coins for a single
     account.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.46 */
    spendableBalances = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/bank/v1beta1/spendable_balances/${params.address}`;
        return await this.req.get(endpoint, options);
    };
    /* SpendableBalanceByDenom queries the spendable balance of a single denom for
     a single account.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.47 */
    spendableBalanceByDenom = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.denom !== "undefined") {
            options.params.denom = params.denom;
        }
        const endpoint = `cosmos/bank/v1beta1/spendable_balances/${params.address}/by_denom`;
        return await this.req.get(endpoint, options);
    };
    /* TotalSupply queries the total supply of all coins.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    totalSupply = async (params = {
        pagination: undefined
    }) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/bank/v1beta1/supply`;
        return await this.req.get(endpoint, options);
    };
    /* SupplyOf queries the supply of a single coin.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    supplyOf = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.denom !== "undefined") {
            options.params.denom = params.denom;
        }
        const endpoint = `cosmos/bank/v1beta1/supply/by_denom`;
        return await this.req.get(endpoint, options);
    };
    /* Params queries the parameters of x/bank module. */
    params = async (_params = {}) => {
        const endpoint = `cosmos/bank/v1beta1/params`;
        return await this.req.get(endpoint);
    };
    /* DenomsMetadata queries the client metadata of a given coin denomination. */
    denomMetadata = async (params) => {
        const endpoint = `cosmos/bank/v1beta1/denoms_metadata/${params.denom}`;
        return await this.req.get(endpoint);
    };
    /* DenomsMetadata queries the client metadata of a given coin denomination. */
    denomMetadataByQueryString = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.denom !== "undefined") {
            options.params.denom = params.denom;
        }
        const endpoint = `cosmos/bank/v1beta1/denoms_metadata_by_query_string`;
        return await this.req.get(endpoint, options);
    };
    /* DenomsMetadata queries the client metadata for all registered coin
     denominations. */
    denomsMetadata = async (params = {
        pagination: undefined
    }) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/bank/v1beta1/denoms_metadata`;
        return await this.req.get(endpoint, options);
    };
    /* DenomOwners queries for all account addresses that own a particular token
     denomination.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.46 */
    denomOwners = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/bank/v1beta1/denom_owners/${params.denom}`;
        return await this.req.get(endpoint, options);
    };
    /* SendEnabled queries for SendEnabled entries.
    
     This query only returns denominations that have specific SendEnabled settings.
     Any denomination that does not have a specific setting will use the default
     params.default_send_enabled, and will not be returned by this query.
    
     Since: cosmos-sdk 0.47 */
    sendEnabled = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.denoms !== "undefined") {
            options.params.denoms = params.denoms;
        }
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/bank/v1beta1/send_enabled`;
        return await this.req.get(endpoint, options);
    };
}
//# sourceMappingURL=query.lcd.js.map