import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryBalanceRequest, QueryBalanceResponse, QueryAllBalancesRequest, QueryAllBalancesResponse, QuerySpendableBalancesRequest, QuerySpendableBalancesResponse, QuerySpendableBalanceByDenomRequest, QuerySpendableBalanceByDenomResponse, QueryTotalSupplyRequest, QueryTotalSupplyResponse, QuerySupplyOfRequest, QuerySupplyOfResponse, QueryParamsRequest, QueryParamsResponse, QueryDenomMetadataRequest, QueryDenomMetadataResponse, QueryDenomMetadataByQueryStringRequest, QueryDenomMetadataByQueryStringResponse, QueryDenomsMetadataRequest, QueryDenomsMetadataResponse, QueryDenomOwnersRequest, QueryDenomOwnersResponse, QuerySendEnabledRequest, QuerySendEnabledResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Balance queries the balance of a single coin for a single account. */
    balance = async (request) => {
        const data = QueryBalanceRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "Balance", data);
        return promise.then(data => QueryBalanceResponse.decode(new BinaryReader(data)));
    };
    /* AllBalances queries the balance of all coins for a single account.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    allBalances = async (request) => {
        const data = QueryAllBalancesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "AllBalances", data);
        return promise.then(data => QueryAllBalancesResponse.decode(new BinaryReader(data)));
    };
    /* SpendableBalances queries the spendable balance of all coins for a single
     account.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.46 */
    spendableBalances = async (request) => {
        const data = QuerySpendableBalancesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "SpendableBalances", data);
        return promise.then(data => QuerySpendableBalancesResponse.decode(new BinaryReader(data)));
    };
    /* SpendableBalanceByDenom queries the spendable balance of a single denom for
     a single account.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.47 */
    spendableBalanceByDenom = async (request) => {
        const data = QuerySpendableBalanceByDenomRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "SpendableBalanceByDenom", data);
        return promise.then(data => QuerySpendableBalanceByDenomResponse.decode(new BinaryReader(data)));
    };
    /* TotalSupply queries the total supply of all coins.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    totalSupply = async (request = {
        pagination: undefined
    }) => {
        const data = QueryTotalSupplyRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "TotalSupply", data);
        return promise.then(data => QueryTotalSupplyResponse.decode(new BinaryReader(data)));
    };
    /* SupplyOf queries the supply of a single coin.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    supplyOf = async (request) => {
        const data = QuerySupplyOfRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "SupplyOf", data);
        return promise.then(data => QuerySupplyOfResponse.decode(new BinaryReader(data)));
    };
    /* Params queries the parameters of x/bank module. */
    params = async (request = {}) => {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "Params", data);
        return promise.then(data => QueryParamsResponse.decode(new BinaryReader(data)));
    };
    /* DenomsMetadata queries the client metadata of a given coin denomination. */
    denomMetadata = async (request) => {
        const data = QueryDenomMetadataRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "DenomMetadata", data);
        return promise.then(data => QueryDenomMetadataResponse.decode(new BinaryReader(data)));
    };
    /* DenomsMetadata queries the client metadata of a given coin denomination. */
    denomMetadataByQueryString = async (request) => {
        const data = QueryDenomMetadataByQueryStringRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "DenomMetadataByQueryString", data);
        return promise.then(data => QueryDenomMetadataByQueryStringResponse.decode(new BinaryReader(data)));
    };
    /* DenomsMetadata queries the client metadata for all registered coin
     denominations. */
    denomsMetadata = async (request = {
        pagination: undefined
    }) => {
        const data = QueryDenomsMetadataRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "DenomsMetadata", data);
        return promise.then(data => QueryDenomsMetadataResponse.decode(new BinaryReader(data)));
    };
    /* DenomOwners queries for all account addresses that own a particular token
     denomination.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.46 */
    denomOwners = async (request) => {
        const data = QueryDenomOwnersRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "DenomOwners", data);
        return promise.then(data => QueryDenomOwnersResponse.decode(new BinaryReader(data)));
    };
    /* SendEnabled queries for SendEnabled entries.
    
     This query only returns denominations that have specific SendEnabled settings.
     Any denomination that does not have a specific setting will use the default
     params.default_send_enabled, and will not be returned by this query.
    
     Since: cosmos-sdk 0.47 */
    sendEnabled = async (request) => {
        const data = QuerySendEnabledRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "SendEnabled", data);
        return promise.then(data => QuerySendEnabledResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        balance(request) {
            return queryService.balance(request);
        },
        allBalances(request) {
            return queryService.allBalances(request);
        },
        spendableBalances(request) {
            return queryService.spendableBalances(request);
        },
        spendableBalanceByDenom(request) {
            return queryService.spendableBalanceByDenom(request);
        },
        totalSupply(request) {
            return queryService.totalSupply(request);
        },
        supplyOf(request) {
            return queryService.supplyOf(request);
        },
        params(request) {
            return queryService.params(request);
        },
        denomMetadata(request) {
            return queryService.denomMetadata(request);
        },
        denomMetadataByQueryString(request) {
            return queryService.denomMetadataByQueryString(request);
        },
        denomsMetadata(request) {
            return queryService.denomsMetadata(request);
        },
        denomOwners(request) {
            return queryService.denomOwners(request);
        },
        sendEnabled(request) {
            return queryService.sendEnabled(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map