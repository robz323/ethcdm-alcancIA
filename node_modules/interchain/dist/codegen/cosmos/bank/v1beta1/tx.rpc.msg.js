import { BinaryReader } from "../../../binary";
import { MsgSend, MsgSendResponse, MsgMultiSend, MsgMultiSendResponse, MsgBurn, MsgBurnResponse, MsgUpdateParams, MsgUpdateParamsResponse, MsgSetSendEnabled, MsgSetSendEnabledResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Send defines a method for sending coins from one account to another account. */
    send = async (request) => {
        const data = MsgSend.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "Send", data);
        return promise.then(data => MsgSendResponse.decode(new BinaryReader(data)));
    };
    /* MultiSend defines a method for sending coins from some accounts to other accounts. */
    multiSend = async (request) => {
        const data = MsgMultiSend.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "MultiSend", data);
        return promise.then(data => MsgMultiSendResponse.decode(new BinaryReader(data)));
    };
    /* Burn defines a method for burning coins by an account.
    
     Since: cosmos-sdk 0.51 */
    burn = async (request) => {
        const data = MsgBurn.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "Burn", data);
        return promise.then(data => MsgBurnResponse.decode(new BinaryReader(data)));
    };
    /* UpdateParams defines a governance operation for updating the x/bank module parameters.
     The authority is defined in the keeper.
    
     Since: cosmos-sdk 0.47 */
    updateParams = async (request) => {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "UpdateParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    };
    /* SetSendEnabled is a governance operation for setting the SendEnabled flag
     on any number of Denoms. Only the entries to add or update should be
     included. Entries that already exist in the store, but that aren't
     included in this message, will be left unchanged.
    
     Since: cosmos-sdk 0.47 */
    setSendEnabled = async (request) => {
        const data = MsgSetSendEnabled.encode(request).finish();
        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "SetSendEnabled", data);
        return promise.then(data => MsgSetSendEnabledResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map