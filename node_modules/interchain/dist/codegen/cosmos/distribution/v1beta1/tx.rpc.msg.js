import { BinaryReader } from "../../../binary";
import { MsgSetWithdrawAddress, MsgSetWithdrawAddressResponse, MsgWithdrawDelegatorReward, MsgWithdrawDelegatorRewardResponse, MsgWithdrawValidatorCommission, MsgWithdrawValidatorCommissionResponse, MsgFundCommunityPool, MsgFundCommunityPoolResponse, MsgUpdateParams, MsgUpdateParamsResponse, MsgCommunityPoolSpend, MsgCommunityPoolSpendResponse, MsgDepositValidatorRewardsPool, MsgDepositValidatorRewardsPoolResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* SetWithdrawAddress defines a method to change the withdraw address
     for a delegator (or validator self-delegation). */
    setWithdrawAddress = async (request) => {
        const data = MsgSetWithdrawAddress.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "SetWithdrawAddress", data);
        return promise.then(data => MsgSetWithdrawAddressResponse.decode(new BinaryReader(data)));
    };
    /* WithdrawDelegatorReward defines a method to withdraw rewards of delegator
     from a single validator. */
    withdrawDelegatorReward = async (request) => {
        const data = MsgWithdrawDelegatorReward.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "WithdrawDelegatorReward", data);
        return promise.then(data => MsgWithdrawDelegatorRewardResponse.decode(new BinaryReader(data)));
    };
    /* WithdrawValidatorCommission defines a method to withdraw the
     full commission to the validator address. */
    withdrawValidatorCommission = async (request) => {
        const data = MsgWithdrawValidatorCommission.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "WithdrawValidatorCommission", data);
        return promise.then(data => MsgWithdrawValidatorCommissionResponse.decode(new BinaryReader(data)));
    };
    /* FundCommunityPool defines a method to allow an account to directly
     fund the community pool. */
    fundCommunityPool = async (request) => {
        const data = MsgFundCommunityPool.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "FundCommunityPool", data);
        return promise.then(data => MsgFundCommunityPoolResponse.decode(new BinaryReader(data)));
    };
    /* UpdateParams defines a governance operation for updating the x/distribution
     module parameters. The authority is defined in the keeper.
    
     Since: cosmos-sdk 0.47 */
    updateParams = async (request) => {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "UpdateParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    };
    /* CommunityPoolSpend defines a governance operation for sending tokens from
     the community pool in the x/distribution module to another account, which
     could be the governance module itself. The authority is defined in the
     keeper.
    
     Since: cosmos-sdk 0.47 */
    communityPoolSpend = async (request) => {
        const data = MsgCommunityPoolSpend.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "CommunityPoolSpend", data);
        return promise.then(data => MsgCommunityPoolSpendResponse.decode(new BinaryReader(data)));
    };
    /* DepositValidatorRewardsPool defines a method to provide additional rewards
     to delegators to a specific validator.
    
     Since: cosmos-sdk 0.50 */
    depositValidatorRewardsPool = async (request) => {
        const data = MsgDepositValidatorRewardsPool.encode(request).finish();
        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "DepositValidatorRewardsPool", data);
        return promise.then(data => MsgDepositValidatorRewardsPoolResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map