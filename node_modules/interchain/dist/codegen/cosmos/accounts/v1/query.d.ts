import { BinaryReader, BinaryWriter } from "../../../binary";
import { DeepPartial } from "../../../helpers";
/** AccountQueryRequest is the request type for the Query/AccountQuery RPC */
export interface AccountQueryRequest {
    /** target defines the account to be queried. */
    target: string;
    /** request defines the query message being sent to the account. */
    request: Uint8Array;
}
export interface AccountQueryRequestProtoMsg {
    typeUrl: "/cosmos.accounts.v1.AccountQueryRequest";
    value: Uint8Array;
}
/** AccountQueryRequest is the request type for the Query/AccountQuery RPC */
export interface AccountQueryRequestAmino {
    /** target defines the account to be queried. */
    target?: string;
    /** request defines the query message being sent to the account. */
    request?: string;
}
export interface AccountQueryRequestAminoMsg {
    type: "cosmos-sdk/AccountQueryRequest";
    value: AccountQueryRequestAmino;
}
/** AccountQueryRequest is the request type for the Query/AccountQuery RPC */
export interface AccountQueryRequestSDKType {
    target: string;
    request: Uint8Array;
}
/** AccountQueryResponse is the response type for the Query/AccountQuery RPC method. */
export interface AccountQueryResponse {
    /** response defines the query response of the account. */
    response: Uint8Array;
}
export interface AccountQueryResponseProtoMsg {
    typeUrl: "/cosmos.accounts.v1.AccountQueryResponse";
    value: Uint8Array;
}
/** AccountQueryResponse is the response type for the Query/AccountQuery RPC method. */
export interface AccountQueryResponseAmino {
    /** response defines the query response of the account. */
    response?: string;
}
export interface AccountQueryResponseAminoMsg {
    type: "cosmos-sdk/AccountQueryResponse";
    value: AccountQueryResponseAmino;
}
/** AccountQueryResponse is the response type for the Query/AccountQuery RPC method. */
export interface AccountQueryResponseSDKType {
    response: Uint8Array;
}
export declare const AccountQueryRequest: {
    typeUrl: string;
    aminoType: string;
    encode(message: AccountQueryRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): AccountQueryRequest;
    fromPartial(object: DeepPartial<AccountQueryRequest>): AccountQueryRequest;
    fromAmino(object: AccountQueryRequestAmino): AccountQueryRequest;
    toAmino(message: AccountQueryRequest): AccountQueryRequestAmino;
    fromAminoMsg(object: AccountQueryRequestAminoMsg): AccountQueryRequest;
    toAminoMsg(message: AccountQueryRequest): AccountQueryRequestAminoMsg;
    fromProtoMsg(message: AccountQueryRequestProtoMsg): AccountQueryRequest;
    toProto(message: AccountQueryRequest): Uint8Array;
    toProtoMsg(message: AccountQueryRequest): AccountQueryRequestProtoMsg;
};
export declare const AccountQueryResponse: {
    typeUrl: string;
    aminoType: string;
    encode(message: AccountQueryResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): AccountQueryResponse;
    fromPartial(object: DeepPartial<AccountQueryResponse>): AccountQueryResponse;
    fromAmino(object: AccountQueryResponseAmino): AccountQueryResponse;
    toAmino(message: AccountQueryResponse): AccountQueryResponseAmino;
    fromAminoMsg(object: AccountQueryResponseAminoMsg): AccountQueryResponse;
    toAminoMsg(message: AccountQueryResponse): AccountQueryResponseAminoMsg;
    fromProtoMsg(message: AccountQueryResponseProtoMsg): AccountQueryResponse;
    toProto(message: AccountQueryResponse): Uint8Array;
    toProtoMsg(message: AccountQueryResponse): AccountQueryResponseProtoMsg;
};
