import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { AccountQueryRequest, AccountQueryResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* AccountQuery runs an account query. */
    accountQuery = async (request) => {
        const data = AccountQueryRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.accounts.v1.Query", "AccountQuery", data);
        return promise.then(data => AccountQueryResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        accountQuery(request) {
            return queryService.accountQuery(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map