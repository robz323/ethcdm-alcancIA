import { BinaryReader } from "../../../binary";
import { MsgCreateVestingAccount, MsgCreateVestingAccountResponse, MsgCreatePermanentLockedAccount, MsgCreatePermanentLockedAccountResponse, MsgCreatePeriodicVestingAccount, MsgCreatePeriodicVestingAccountResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* CreateVestingAccount defines a method that enables creating a vesting
     account. */
    createVestingAccount = async (request) => {
        const data = MsgCreateVestingAccount.encode(request).finish();
        const promise = this.rpc.request("cosmos.vesting.v1beta1.Msg", "CreateVestingAccount", data);
        return promise.then(data => MsgCreateVestingAccountResponse.decode(new BinaryReader(data)));
    };
    /* CreatePermanentLockedAccount defines a method that enables creating a permanent
     locked account.
    
     Since: cosmos-sdk 0.46 */
    createPermanentLockedAccount = async (request) => {
        const data = MsgCreatePermanentLockedAccount.encode(request).finish();
        const promise = this.rpc.request("cosmos.vesting.v1beta1.Msg", "CreatePermanentLockedAccount", data);
        return promise.then(data => MsgCreatePermanentLockedAccountResponse.decode(new BinaryReader(data)));
    };
    /* CreatePeriodicVestingAccount defines a method that enables creating a
     periodic vesting account.
    
     Since: cosmos-sdk 0.46 */
    createPeriodicVestingAccount = async (request) => {
        const data = MsgCreatePeriodicVestingAccount.encode(request).finish();
        const promise = this.rpc.request("cosmos.vesting.v1beta1.Msg", "CreatePeriodicVestingAccount", data);
        return promise.then(data => MsgCreatePeriodicVestingAccountResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map