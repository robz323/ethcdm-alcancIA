import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryAccountsRequest, QueryAccountsResponse, QueryAccountRequest, QueryAccountResponse, QueryAccountAddressByIDRequest, QueryAccountAddressByIDResponse, QueryParamsRequest, QueryParamsResponse, QueryModuleAccountsRequest, QueryModuleAccountsResponse, QueryModuleAccountByNameRequest, QueryModuleAccountByNameResponse, Bech32PrefixRequest, Bech32PrefixResponse, AddressBytesToStringRequest, AddressBytesToStringResponse, AddressStringToBytesRequest, AddressStringToBytesResponse, QueryAccountInfoRequest, QueryAccountInfoResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Accounts returns all the existing accounts.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set.
    
     Since: cosmos-sdk 0.43 */
    accounts = async (request = {
        pagination: undefined
    }) => {
        const data = QueryAccountsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Accounts", data);
        return promise.then(data => QueryAccountsResponse.decode(new BinaryReader(data)));
    };
    /* Account returns account details based on address. */
    account = async (request) => {
        const data = QueryAccountRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Account", data);
        return promise.then(data => QueryAccountResponse.decode(new BinaryReader(data)));
    };
    /* AccountAddressByID returns account address based on account number.
    
     Since: cosmos-sdk 0.46.2 */
    accountAddressByID = async (request) => {
        const data = QueryAccountAddressByIDRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "AccountAddressByID", data);
        return promise.then(data => QueryAccountAddressByIDResponse.decode(new BinaryReader(data)));
    };
    /* Params queries all parameters. */
    params = async (request = {}) => {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Params", data);
        return promise.then(data => QueryParamsResponse.decode(new BinaryReader(data)));
    };
    /* ModuleAccounts returns all the existing module accounts.
    
     Since: cosmos-sdk 0.46 */
    moduleAccounts = async (request = {}) => {
        const data = QueryModuleAccountsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "ModuleAccounts", data);
        return promise.then(data => QueryModuleAccountsResponse.decode(new BinaryReader(data)));
    };
    /* ModuleAccountByName returns the module account info by module name */
    moduleAccountByName = async (request) => {
        const data = QueryModuleAccountByNameRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "ModuleAccountByName", data);
        return promise.then(data => QueryModuleAccountByNameResponse.decode(new BinaryReader(data)));
    };
    /* Bech32Prefix queries bech32Prefix
    
     Since: cosmos-sdk 0.46 */
    bech32Prefix = async (request = {}) => {
        const data = Bech32PrefixRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Bech32Prefix", data);
        return promise.then(data => Bech32PrefixResponse.decode(new BinaryReader(data)));
    };
    /* AddressBytesToString converts Account Address bytes to string
    
     Since: cosmos-sdk 0.46 */
    addressBytesToString = async (request) => {
        const data = AddressBytesToStringRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "AddressBytesToString", data);
        return promise.then(data => AddressBytesToStringResponse.decode(new BinaryReader(data)));
    };
    /* AddressStringToBytes converts Address string to bytes
    
     Since: cosmos-sdk 0.46 */
    addressStringToBytes = async (request) => {
        const data = AddressStringToBytesRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "AddressStringToBytes", data);
        return promise.then(data => AddressStringToBytesResponse.decode(new BinaryReader(data)));
    };
    /* AccountInfo queries account info which is common to all account types.
    
     Since: cosmos-sdk 0.47 */
    accountInfo = async (request) => {
        const data = QueryAccountInfoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "AccountInfo", data);
        return promise.then(data => QueryAccountInfoResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        accounts(request) {
            return queryService.accounts(request);
        },
        account(request) {
            return queryService.account(request);
        },
        accountAddressByID(request) {
            return queryService.accountAddressByID(request);
        },
        params(request) {
            return queryService.params(request);
        },
        moduleAccounts(request) {
            return queryService.moduleAccounts(request);
        },
        moduleAccountByName(request) {
            return queryService.moduleAccountByName(request);
        },
        bech32Prefix(request) {
            return queryService.bech32Prefix(request);
        },
        addressBytesToString(request) {
            return queryService.addressBytesToString(request);
        },
        addressStringToBytes(request) {
            return queryService.addressStringToBytes(request);
        },
        accountInfo(request) {
            return queryService.accountInfo(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map