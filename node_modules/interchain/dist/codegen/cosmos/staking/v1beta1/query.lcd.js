import { setPaginationParams } from "../../../helpers";
export class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
    }
    /* Validators queries all validators that match the given status.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    validators = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.status !== "undefined") {
            options.params.status = params.status;
        }
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/validators`;
        return await this.req.get(endpoint, options);
    };
    /* Validator queries validator info for given validator address. */
    validator = async (params) => {
        const endpoint = `cosmos/staking/v1beta1/validators/${params.validatorAddr}`;
        return await this.req.get(endpoint);
    };
    /* ValidatorDelegations queries delegate info for given validator.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    validatorDelegations = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/validators/${params.validatorAddr}/delegations`;
        return await this.req.get(endpoint, options);
    };
    /* ValidatorUnbondingDelegations queries unbonding delegations of a validator.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    validatorUnbondingDelegations = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/validators/${params.validatorAddr}/unbonding_delegations`;
        return await this.req.get(endpoint, options);
    };
    /* Delegation queries delegate info for given validator delegator pair. */
    delegation = async (params) => {
        const endpoint = `cosmos/staking/v1beta1/validators/${params.validatorAddr}/delegations/${params.delegatorAddr}`;
        return await this.req.get(endpoint);
    };
    /* UnbondingDelegation queries unbonding info for given validator delegator
     pair. */
    unbondingDelegation = async (params) => {
        const endpoint = `cosmos/staking/v1beta1/validators/${params.validatorAddr}/delegations/${params.delegatorAddr}/unbonding_delegation`;
        return await this.req.get(endpoint);
    };
    /* DelegatorDelegations queries all delegations of a given delegator address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    delegatorDelegations = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/delegations/${params.delegatorAddr}`;
        return await this.req.get(endpoint, options);
    };
    /* DelegatorUnbondingDelegations queries all unbonding delegations of a given
     delegator address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    delegatorUnbondingDelegations = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/delegators/${params.delegatorAddr}/unbonding_delegations`;
        return await this.req.get(endpoint, options);
    };
    /* Redelegations queries redelegations of given address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    redelegations = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.srcValidatorAddr !== "undefined") {
            options.params.src_validator_addr = params.srcValidatorAddr;
        }
        if (typeof params?.dstValidatorAddr !== "undefined") {
            options.params.dst_validator_addr = params.dstValidatorAddr;
        }
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/delegators/${params.delegatorAddr}/redelegations`;
        return await this.req.get(endpoint, options);
    };
    /* DelegatorValidators queries all validators info for given delegator
     address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    delegatorValidators = async (params) => {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            setPaginationParams(options, params.pagination);
        }
        const endpoint = `cosmos/staking/v1beta1/delegators/${params.delegatorAddr}/validators`;
        return await this.req.get(endpoint, options);
    };
    /* DelegatorValidator queries validator info for given delegator validator
     pair. */
    delegatorValidator = async (params) => {
        const endpoint = `cosmos/staking/v1beta1/delegators/${params.delegatorAddr}/validators/${params.validatorAddr}`;
        return await this.req.get(endpoint);
    };
    /* HistoricalInfo queries the historical info for given height. */
    historicalInfo = async (params) => {
        const endpoint = `cosmos/staking/v1beta1/historical_info/${params.height}`;
        return await this.req.get(endpoint);
    };
    /* Pool queries the pool info. */
    pool = async (_params = {}) => {
        const endpoint = `cosmos/staking/v1beta1/pool`;
        return await this.req.get(endpoint);
    };
    /* Parameters queries the staking parameters. */
    params = async (_params = {}) => {
        const endpoint = `cosmos/staking/v1beta1/params`;
        return await this.req.get(endpoint);
    };
}
//# sourceMappingURL=query.lcd.js.map