import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryValidatorsRequest, QueryValidatorsResponse, QueryValidatorRequest, QueryValidatorResponse, QueryValidatorDelegationsRequest, QueryValidatorDelegationsResponse, QueryValidatorUnbondingDelegationsRequest, QueryValidatorUnbondingDelegationsResponse, QueryDelegationRequest, QueryDelegationResponse, QueryUnbondingDelegationRequest, QueryUnbondingDelegationResponse, QueryDelegatorDelegationsRequest, QueryDelegatorDelegationsResponse, QueryDelegatorUnbondingDelegationsRequest, QueryDelegatorUnbondingDelegationsResponse, QueryRedelegationsRequest, QueryRedelegationsResponse, QueryDelegatorValidatorsRequest, QueryDelegatorValidatorsResponse, QueryDelegatorValidatorRequest, QueryDelegatorValidatorResponse, QueryHistoricalInfoRequest, QueryHistoricalInfoResponse, QueryPoolRequest, QueryPoolResponse, QueryParamsRequest, QueryParamsResponse } from "./query";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Validators queries all validators that match the given status.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    validators = async (request) => {
        const data = QueryValidatorsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Validators", data);
        return promise.then(data => QueryValidatorsResponse.decode(new BinaryReader(data)));
    };
    /* Validator queries validator info for given validator address. */
    validator = async (request) => {
        const data = QueryValidatorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Validator", data);
        return promise.then(data => QueryValidatorResponse.decode(new BinaryReader(data)));
    };
    /* ValidatorDelegations queries delegate info for given validator.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    validatorDelegations = async (request) => {
        const data = QueryValidatorDelegationsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "ValidatorDelegations", data);
        return promise.then(data => QueryValidatorDelegationsResponse.decode(new BinaryReader(data)));
    };
    /* ValidatorUnbondingDelegations queries unbonding delegations of a validator.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    validatorUnbondingDelegations = async (request) => {
        const data = QueryValidatorUnbondingDelegationsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "ValidatorUnbondingDelegations", data);
        return promise.then(data => QueryValidatorUnbondingDelegationsResponse.decode(new BinaryReader(data)));
    };
    /* Delegation queries delegate info for given validator delegator pair. */
    delegation = async (request) => {
        const data = QueryDelegationRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Delegation", data);
        return promise.then(data => QueryDelegationResponse.decode(new BinaryReader(data)));
    };
    /* UnbondingDelegation queries unbonding info for given validator delegator
     pair. */
    unbondingDelegation = async (request) => {
        const data = QueryUnbondingDelegationRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "UnbondingDelegation", data);
        return promise.then(data => QueryUnbondingDelegationResponse.decode(new BinaryReader(data)));
    };
    /* DelegatorDelegations queries all delegations of a given delegator address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    delegatorDelegations = async (request) => {
        const data = QueryDelegatorDelegationsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorDelegations", data);
        return promise.then(data => QueryDelegatorDelegationsResponse.decode(new BinaryReader(data)));
    };
    /* DelegatorUnbondingDelegations queries all unbonding delegations of a given
     delegator address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    delegatorUnbondingDelegations = async (request) => {
        const data = QueryDelegatorUnbondingDelegationsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorUnbondingDelegations", data);
        return promise.then(data => QueryDelegatorUnbondingDelegationsResponse.decode(new BinaryReader(data)));
    };
    /* Redelegations queries redelegations of given address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    redelegations = async (request) => {
        const data = QueryRedelegationsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Redelegations", data);
        return promise.then(data => QueryRedelegationsResponse.decode(new BinaryReader(data)));
    };
    /* DelegatorValidators queries all validators info for given delegator
     address.
    
     When called from another module, this query might consume a high amount of
     gas if the pagination field is incorrectly set. */
    delegatorValidators = async (request) => {
        const data = QueryDelegatorValidatorsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorValidators", data);
        return promise.then(data => QueryDelegatorValidatorsResponse.decode(new BinaryReader(data)));
    };
    /* DelegatorValidator queries validator info for given delegator validator
     pair. */
    delegatorValidator = async (request) => {
        const data = QueryDelegatorValidatorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorValidator", data);
        return promise.then(data => QueryDelegatorValidatorResponse.decode(new BinaryReader(data)));
    };
    /* HistoricalInfo queries the historical info for given height. */
    historicalInfo = async (request) => {
        const data = QueryHistoricalInfoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "HistoricalInfo", data);
        return promise.then(data => QueryHistoricalInfoResponse.decode(new BinaryReader(data)));
    };
    /* Pool queries the pool info. */
    pool = async (request = {}) => {
        const data = QueryPoolRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Pool", data);
        return promise.then(data => QueryPoolResponse.decode(new BinaryReader(data)));
    };
    /* Parameters queries the staking parameters. */
    params = async (request = {}) => {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Params", data);
        return promise.then(data => QueryParamsResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        validators(request) {
            return queryService.validators(request);
        },
        validator(request) {
            return queryService.validator(request);
        },
        validatorDelegations(request) {
            return queryService.validatorDelegations(request);
        },
        validatorUnbondingDelegations(request) {
            return queryService.validatorUnbondingDelegations(request);
        },
        delegation(request) {
            return queryService.delegation(request);
        },
        unbondingDelegation(request) {
            return queryService.unbondingDelegation(request);
        },
        delegatorDelegations(request) {
            return queryService.delegatorDelegations(request);
        },
        delegatorUnbondingDelegations(request) {
            return queryService.delegatorUnbondingDelegations(request);
        },
        redelegations(request) {
            return queryService.redelegations(request);
        },
        delegatorValidators(request) {
            return queryService.delegatorValidators(request);
        },
        delegatorValidator(request) {
            return queryService.delegatorValidator(request);
        },
        historicalInfo(request) {
            return queryService.historicalInfo(request);
        },
        pool(request) {
            return queryService.pool(request);
        },
        params(request) {
            return queryService.params(request);
        }
    };
};
//# sourceMappingURL=query.rpc.Query.js.map