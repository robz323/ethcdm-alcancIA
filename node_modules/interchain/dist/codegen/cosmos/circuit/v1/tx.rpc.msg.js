import { BinaryReader } from "../../../binary";
import { MsgAuthorizeCircuitBreaker, MsgAuthorizeCircuitBreakerResponse, MsgTripCircuitBreaker, MsgTripCircuitBreakerResponse, MsgResetCircuitBreaker, MsgResetCircuitBreakerResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
     account's circuit breaker permissions. */
    authorizeCircuitBreaker = async (request) => {
        const data = MsgAuthorizeCircuitBreaker.encode(request).finish();
        const promise = this.rpc.request("cosmos.circuit.v1.Msg", "AuthorizeCircuitBreaker", data);
        return promise.then(data => MsgAuthorizeCircuitBreakerResponse.decode(new BinaryReader(data)));
    };
    /* TripCircuitBreaker pauses processing of Msg's in the state machine. */
    tripCircuitBreaker = async (request) => {
        const data = MsgTripCircuitBreaker.encode(request).finish();
        const promise = this.rpc.request("cosmos.circuit.v1.Msg", "TripCircuitBreaker", data);
        return promise.then(data => MsgTripCircuitBreakerResponse.decode(new BinaryReader(data)));
    };
    /* ResetCircuitBreaker resumes processing of Msg's in the state machine that
     have been been paused using TripCircuitBreaker. */
    resetCircuitBreaker = async (request) => {
        const data = MsgResetCircuitBreaker.encode(request).finish();
        const promise = this.rpc.request("cosmos.circuit.v1.Msg", "ResetCircuitBreaker", data);
        return promise.then(data => MsgResetCircuitBreakerResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map