import { BinaryReader } from "../../../binary";
import { MsgCreateGroup, MsgCreateGroupResponse, MsgUpdateGroupMembers, MsgUpdateGroupMembersResponse, MsgUpdateGroupAdmin, MsgUpdateGroupAdminResponse, MsgUpdateGroupMetadata, MsgUpdateGroupMetadataResponse, MsgCreateGroupPolicy, MsgCreateGroupPolicyResponse, MsgCreateGroupWithPolicy, MsgCreateGroupWithPolicyResponse, MsgUpdateGroupPolicyAdmin, MsgUpdateGroupPolicyAdminResponse, MsgUpdateGroupPolicyDecisionPolicy, MsgUpdateGroupPolicyDecisionPolicyResponse, MsgUpdateGroupPolicyMetadata, MsgUpdateGroupPolicyMetadataResponse, MsgSubmitProposal, MsgSubmitProposalResponse, MsgWithdrawProposal, MsgWithdrawProposalResponse, MsgVote, MsgVoteResponse, MsgExec, MsgExecResponse, MsgLeaveGroup, MsgLeaveGroupResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* CreateGroup creates a new group with an admin account address, a list of members and some optional metadata. */
    createGroup = async (request) => {
        const data = MsgCreateGroup.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "CreateGroup", data);
        return promise.then(data => MsgCreateGroupResponse.decode(new BinaryReader(data)));
    };
    /* UpdateGroupMembers updates the group members with given group id and admin address. */
    updateGroupMembers = async (request) => {
        const data = MsgUpdateGroupMembers.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupMembers", data);
        return promise.then(data => MsgUpdateGroupMembersResponse.decode(new BinaryReader(data)));
    };
    /* UpdateGroupAdmin updates the group admin with given group id and previous admin address. */
    updateGroupAdmin = async (request) => {
        const data = MsgUpdateGroupAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupAdmin", data);
        return promise.then(data => MsgUpdateGroupAdminResponse.decode(new BinaryReader(data)));
    };
    /* UpdateGroupMetadata updates the group metadata with given group id and admin address. */
    updateGroupMetadata = async (request) => {
        const data = MsgUpdateGroupMetadata.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupMetadata", data);
        return promise.then(data => MsgUpdateGroupMetadataResponse.decode(new BinaryReader(data)));
    };
    /* CreateGroupPolicy creates a new group policy using given DecisionPolicy. */
    createGroupPolicy = async (request) => {
        const data = MsgCreateGroupPolicy.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "CreateGroupPolicy", data);
        return promise.then(data => MsgCreateGroupPolicyResponse.decode(new BinaryReader(data)));
    };
    /* CreateGroupWithPolicy creates a new group with policy. */
    createGroupWithPolicy = async (request) => {
        const data = MsgCreateGroupWithPolicy.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "CreateGroupWithPolicy", data);
        return promise.then(data => MsgCreateGroupWithPolicyResponse.decode(new BinaryReader(data)));
    };
    /* UpdateGroupPolicyAdmin updates a group policy admin. */
    updateGroupPolicyAdmin = async (request) => {
        const data = MsgUpdateGroupPolicyAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupPolicyAdmin", data);
        return promise.then(data => MsgUpdateGroupPolicyAdminResponse.decode(new BinaryReader(data)));
    };
    /* UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated. */
    updateGroupPolicyDecisionPolicy = async (request) => {
        const data = MsgUpdateGroupPolicyDecisionPolicy.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupPolicyDecisionPolicy", data);
        return promise.then(data => MsgUpdateGroupPolicyDecisionPolicyResponse.decode(new BinaryReader(data)));
    };
    /* UpdateGroupPolicyMetadata updates a group policy metadata. */
    updateGroupPolicyMetadata = async (request) => {
        const data = MsgUpdateGroupPolicyMetadata.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "UpdateGroupPolicyMetadata", data);
        return promise.then(data => MsgUpdateGroupPolicyMetadataResponse.decode(new BinaryReader(data)));
    };
    /* SubmitProposal submits a new proposal. */
    submitProposal = async (request) => {
        const data = MsgSubmitProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "SubmitProposal", data);
        return promise.then(data => MsgSubmitProposalResponse.decode(new BinaryReader(data)));
    };
    /* WithdrawProposal withdraws a proposal. */
    withdrawProposal = async (request) => {
        const data = MsgWithdrawProposal.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "WithdrawProposal", data);
        return promise.then(data => MsgWithdrawProposalResponse.decode(new BinaryReader(data)));
    };
    /* Vote allows a voter to vote on a proposal. */
    vote = async (request) => {
        const data = MsgVote.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "Vote", data);
        return promise.then(data => MsgVoteResponse.decode(new BinaryReader(data)));
    };
    /* Exec executes a proposal. */
    exec = async (request) => {
        const data = MsgExec.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "Exec", data);
        return promise.then(data => MsgExecResponse.decode(new BinaryReader(data)));
    };
    /* LeaveGroup allows a group member to leave the group. */
    leaveGroup = async (request) => {
        const data = MsgLeaveGroup.encode(request).finish();
        const promise = this.rpc.request("cosmos.group.v1.Msg", "LeaveGroup", data);
        return promise.then(data => MsgLeaveGroupResponse.decode(new BinaryReader(data)));
    };
}
//# sourceMappingURL=tx.rpc.msg.js.map