import { BinaryReader } from "../../../binary";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { SimulateRequest, SimulateResponse, GetTxRequest, GetTxResponse, BroadcastTxRequest, BroadcastTxResponse, GetTxsEventRequest, GetTxsEventResponse, GetBlockWithTxsRequest, GetBlockWithTxsResponse, TxDecodeRequest, TxDecodeResponse, TxEncodeRequest, TxEncodeResponse, TxEncodeAminoRequest, TxEncodeAminoResponse, TxDecodeAminoRequest, TxDecodeAminoResponse } from "./service";
export class ServiceClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
    }
    /* Simulate simulates executing a transaction for estimating gas usage. */
    simulate = async (request) => {
        const data = SimulateRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "Simulate", data);
        return promise.then(data => SimulateResponse.decode(new BinaryReader(data)));
    };
    /* GetTx fetches a tx by hash. */
    getTx = async (request) => {
        const data = GetTxRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetTx", data);
        return promise.then(data => GetTxResponse.decode(new BinaryReader(data)));
    };
    /* BroadcastTx broadcast transaction. */
    broadcastTx = async (request) => {
        const data = BroadcastTxRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "BroadcastTx", data);
        return promise.then(data => BroadcastTxResponse.decode(new BinaryReader(data)));
    };
    /* GetTxsEvent fetches txs by event. */
    getTxsEvent = async (request) => {
        const data = GetTxsEventRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetTxsEvent", data);
        return promise.then(data => GetTxsEventResponse.decode(new BinaryReader(data)));
    };
    /* GetBlockWithTxs fetches a block with decoded txs.
    
     Since: cosmos-sdk 0.45.2 */
    getBlockWithTxs = async (request) => {
        const data = GetBlockWithTxsRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetBlockWithTxs", data);
        return promise.then(data => GetBlockWithTxsResponse.decode(new BinaryReader(data)));
    };
    /* TxDecode decodes the transaction.
    
     Since: cosmos-sdk 0.47 */
    txDecode = async (request) => {
        const data = TxDecodeRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxDecode", data);
        return promise.then(data => TxDecodeResponse.decode(new BinaryReader(data)));
    };
    /* TxEncode encodes the transaction.
    
     Since: cosmos-sdk 0.47 */
    txEncode = async (request) => {
        const data = TxEncodeRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxEncode", data);
        return promise.then(data => TxEncodeResponse.decode(new BinaryReader(data)));
    };
    /* TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
    
     Since: cosmos-sdk 0.47 */
    txEncodeAmino = async (request) => {
        const data = TxEncodeAminoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxEncodeAmino", data);
        return promise.then(data => TxEncodeAminoResponse.decode(new BinaryReader(data)));
    };
    /* TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
    
     Since: cosmos-sdk 0.47 */
    txDecodeAmino = async (request) => {
        const data = TxDecodeAminoRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "TxDecodeAmino", data);
        return promise.then(data => TxDecodeAminoResponse.decode(new BinaryReader(data)));
    };
}
export const createRpcQueryExtension = (base) => {
    const rpc = createProtobufRpcClient(base);
    const queryService = new ServiceClientImpl(rpc);
    return {
        simulate(request) {
            return queryService.simulate(request);
        },
        getTx(request) {
            return queryService.getTx(request);
        },
        broadcastTx(request) {
            return queryService.broadcastTx(request);
        },
        getTxsEvent(request) {
            return queryService.getTxsEvent(request);
        },
        getBlockWithTxs(request) {
            return queryService.getBlockWithTxs(request);
        },
        txDecode(request) {
            return queryService.txDecode(request);
        },
        txEncode(request) {
            return queryService.txEncode(request);
        },
        txEncodeAmino(request) {
            return queryService.txEncodeAmino(request);
        },
        txDecodeAmino(request) {
            return queryService.txDecodeAmino(request);
        }
    };
};
//# sourceMappingURL=service.rpc.Service.js.map