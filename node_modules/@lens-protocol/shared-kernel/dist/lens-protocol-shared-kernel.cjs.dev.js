'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isObject = require('lodash/isObject');
var unsupportedIterableToArray = require('./unsupportedIterableToArray-8f889200.cjs.dev.js');
var defaultTo = require('lodash/defaultTo.js');
var isObject$1 = require('lodash/isObject.js');
var lodashGet = require('lodash/get.js');
var isObjectLike = require('lodash/isObjectLike.js');
var traverse = require('traverse');
require('decimal.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var isObject__default = /*#__PURE__*/_interopDefault(isObject);
var defaultTo__default = /*#__PURE__*/_interopDefault(defaultTo);
var isObject__default$1 = /*#__PURE__*/_interopDefault(isObject$1);
var lodashGet__default = /*#__PURE__*/_interopDefault(lodashGet);
var isObjectLike__default = /*#__PURE__*/_interopDefault(isObjectLike);
var traverse__default = /*#__PURE__*/_interopDefault(traverse);

/**
 * This subclass of Error supports chaining.
 * If available, it uses the built-in support for property `.cause`.
 * Otherwise, it sets it up itself.
 *
 * @see https://github.com/tc39/proposal-error-cause
 * @internal
 */
var CausedError = /*#__PURE__*/function (_Error) {
  unsupportedIterableToArray._inherits(CausedError, _Error);
  var _super = unsupportedIterableToArray._createSuper(CausedError);
  function CausedError(message, options) {
    var _this;
    unsupportedIterableToArray._classCallCheck(this, CausedError);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore Error not yet properly typed
    _this = _super.call(this, message, options);
    if (isObject__default$1["default"](options) && options.cause && !('cause' in unsupportedIterableToArray._assertThisInitialized(_this))) {
      var cause = options.cause;
      _this.cause = cause;
      if (typeof cause.stack === 'string') {
        _this.stack = defaultTo__default["default"](_this.stack, '') + '\nCAUSE: ' + cause.stack;
      }
    }
    return _this;
  }
  return unsupportedIterableToArray._createClass(CausedError);
}( /*#__PURE__*/unsupportedIterableToArray._wrapNativeSuper(Error));

/**
 * Represent number of milliseconds since the Unix Epoch
 */

var DateUtils = /*#__PURE__*/function () {
  function DateUtils() {
    unsupportedIterableToArray._classCallCheck(this, DateUtils);
  }
  unsupportedIterableToArray._createClass(DateUtils, null, [{
    key: "toUnix",
    value: function toUnix(date) {
      if (date instanceof Date) {
        return date.getTime();
      }
      if (typeof date === 'string') {
        return new Date(date).getTime();
      }
      return date;
    }
  }, {
    key: "toISOString",
    value: function toISOString(date) {
      if (typeof date === 'string' || typeof date === 'number') {
        return new Date(date).toISOString();
      }
      return date.toISOString();
    }
  }, {
    key: "unix",
    value: function unix() {
      return Date.now();
    }
  }, {
    key: "unixInSeconds",
    value: function unixInSeconds() {
      return this.unix() / 1000;
    }
  }, {
    key: "hoursToMs",
    value: function hoursToMs(hours) {
      return this.minutesToMs(hours * 60);
    }
  }, {
    key: "minutesToMs",
    value: function minutesToMs(minutes) {
      return minutes * 6 * 10 * 1000;
    }
  }, {
    key: "secondsToMs",
    value: function secondsToMs(seconds) {
      return seconds * 1000;
    }
  }]);
  return DateUtils;
}();

/**
 * Unwraps the promise to allow resolving/rejecting outside the Promise constructor
 */
var Deferred = /*#__PURE__*/unsupportedIterableToArray._createClass(function Deferred() {
  var _this = this;
  unsupportedIterableToArray._classCallCheck(this, Deferred);
  this.promise = new Promise(function (resolve, reject) {
    _this.resolve = resolve;
    _this.reject = reject;
  });
});

/**
 * A `Success<T, E>` represents a successful computation that returns a value of type `T`.
 *
 * `E` in `Success<T, E>` is the type of the error that would have been returned in case of failure.
 * It's present only to allow type safety of the `isFailure` method.
 *
 * @sealed
 * @privateRemarks DO NOT EXPORT, see type export later on
 * @typeParam T - the success value type
 */
var Success = /*#__PURE__*/function () {
  /** @internal */
  function Success(value) {
    unsupportedIterableToArray._classCallCheck(this, Success);
    this.value = value;
  }
  unsupportedIterableToArray._createClass(Success, [{
    key: "isSuccess",
    value: function isSuccess() {
      return true;
    }
  }, {
    key: "isFailure",
    value: function isFailure() {
      return false;
    }
  }, {
    key: "unwrap",
    value: function unwrap() {
      return this.value;
    }
  }]);
  return Success;
}();
/**
 * A `Success<T, E>` represents a successful computation that returns a value of type `T`.
 *
 * `T` in `Failure<T, E>` is the type of the value that would have been returned in case of success.
 * It's present only to allow type safety of the `isSuccess` method.
 *
 * @sealed
 * @privateRemarks DO NOT EXPORT, see type export later on
 * @typeParam E - the failure error type
 */
var Failure = /*#__PURE__*/function () {
  /** @internal */
  function Failure(error) {
    unsupportedIterableToArray._classCallCheck(this, Failure);
    this.error = error;
  }
  unsupportedIterableToArray._createClass(Failure, [{
    key: "isSuccess",
    value: function isSuccess() {
      return false;
    }
  }, {
    key: "isFailure",
    value: function isFailure() {
      return true;
    }
  }, {
    key: "unwrap",
    value: function unwrap() {
      throw this.error;
    }
  }]);
  return Failure;
}();
/**
 * An `IEquatableError` is an error that can be compared by name.
 *
 */
/**
 * A `Result` type represents either `Success` or `Failure`.
 *
 * **TL;DR**
 *
 * `Result` is a minimalist implementation of a value that can be a "success" or a "failure".
 * It borrows from what done in other modern languages (i.e. Rust, Kotlin, Swift, etc.).
 *
 * The Lens SDK adopts this pattern in order to:
 * - be explicit about the known failure scenarios of a task,
 * - provide a way for consumers to perform exhaustive error handling,
 * - makes control flow easier to reason about.
 *
 * @remarks
 *
 * You might be familiar with the `Either` type from functional programming. The `Result` type
 * could be seen as a more specific version of `Either` where the left side is reserved for
 * success scenarios and the right side is reserved for known failure scenarios.
 *
 * Think of failure scenarios as alternative outcomes of a given task that although not the "happy path",
 * are still legitimate results for the task within the boundary of a correct usage of the SDK.
 *
 * In promoting exhaustive error handling, the Lens SDK makes it easier to evolve your code
 * when a new error case is added or a case is removed.
 * For example after a Lens SDK upgrade you can simply run the TS compiler to figure out where you
 * need to handle the new error cases, or even better, it guides you to remove obsolescent code
 * where an error case is no longer possible. This is virtually impossible with a `try/catch` approach.
 *
 * Thrown exceptions are historically difficult to trace. They require implicit knowledge
 * of the implementation details of the code that might throw exceptions. This might go several
 * layers down and leads to tight coupling between modules.
 *
 * The Lens SDK still throws exceptions where the error is not a "normal execution scenario".
 * These are considered real "exceptional circumstances" and not alternative outcomes and it's up to the consumer to `try/catch` them.
 *
 * An example of errors that are thrown by the SDK is {@link InvariantError}. They are often thrown as result of a misuse of the SDK.
 * By throwing them we want to fail fast so the consumer can fix the issue as soon as possible.
 * Specifically for `InvariantError`, there is no need to code defensively against these errors. Just rectify the coding issue and move on.
 *
 * @example
 * Control flow
 * ```ts
 * const result: Result<number, RangeError> = doSomething();
 *
 * if (result.isFailure()) {
 *   // because of the `isFailure` check above, TS knows that `result` is a `Failure<RangeError>` here
 *   console.log(result.error); // result.error gets narrowed to `RangeError`
 *
 *   return; // early return
 * }
 *
 * // because of the `isFailure` check above and the early return, TS knows that `result` is a `Success<number>` here
 * console.log(result.value); // result.value gets narrowed to `number`
 * ```
 *
 * @example
 * Exhaustive error handling
 *
 * Given a result type like the following:
 *
 * ```ts
 * const result: Result<number, PendingSigningError | WalletConnectionError> = doSomething();
 * ```
 * You can use a function with a `switch` statement to perform exhaustive error handling:
 * ```ts
 * function format(failure: Failure<PendingSigningError | WalletConnectionError>): string {
 *   switch (failure.error.name) {
 *     case 'PendingSigningError':
 *       return 'Please sign the transaction';
 *       break;
 *     case 'WalletConnectionError':
 *       return 'Please connect your wallet and try again';
 *       break;
 *   }
 *   // any code after the switch statement is unreachable
 * }
 * ```
 * The example above assumes `allowUnreachableCode: false` in your `tsconfig.json`.
 *
 * An even more robust way to perform exhaustive error handling with a `switch` is to use the `never` type: see {@link https://www.typescriptlang.org/docs/handbook/2/narrowing.html#exhaustiveness-checking | exhaustiveness checking}.
 *
 * @see https://wiki.c2.com/?AvoidExceptionsWheneverPossible
 * @see https://developer.apple.com/documentation/swift/result
 * @see https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/
 * @see https://the-guild.dev/blog/graphql-error-handling-with-fp#monads-to-the-rescue
 *
 * @typeParam T - the success value type
 * @typeParam E - the failure error type
 */
/**
 * A `PromiseResult` is a convenience type alias that represents either a {@link Result} in the context of asynchronous tasks.
 *
 * @typeParam T - the success value type
 * @typeParam E - the failure error type
 */
/**
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function success() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  return new Success(value);
}

/**
 * @internal
 */
var failure = function failure(error) {
  return new Failure(error);
};

/**
 * Ensures the `Result<T, E>` is a `Success<T>`.
 */
function assertSuccess(result) {
  unsupportedIterableToArray.invariant(result.isSuccess(), 'Expected a success result');
}

/**
 * Ensures the `Result<T, E>` is a `Failure<E>`.
 */
function assertFailure(result) {
  unsupportedIterableToArray.invariant(result.isFailure(), 'Expected a failure result');
}

function hasAtLeastOne(items) {
  return items.length > 0;
}
function assertNonEmptyArray(items) {
  unsupportedIterableToArray.invariant(hasAtLeastOne(items), "Expected array of to have at least one item, but received 0 items");
}
function hasJustOne(items) {
  return items.length === 1;
}
function assertJustOne(items) {
  unsupportedIterableToArray.invariant(hasJustOne(items), 'Expected array of to have exactly one item.');
}
function removeAtIndex(items, index) {
  return items.slice(0, index).concat(items.slice(index + 1));
}
function hasTwoOrMore(items) {
  return items.length >= 2;
}

/**
 * Inspired by https://dev.to/tipsy_dev/advanced-typescript-reinventing-lodash-get-4fhe
 */
function get(data, path, defaultValue) {
  var lodashPath = path.split('.');
  return lodashGet__default["default"](data, lodashPath, defaultValue);
}

function maybe(thunk) {
  try {
    return thunk();
  } catch (_unused) {
    /* empty on purpose */
    return undefined;
  }
}

/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-explicit-any */
function isPrimitive(value) {
  return !isObjectLike__default["default"](value);
}
function omitDeep(target, omitKey) {
  if (isPrimitive(target)) {
    return target;
  }
  if (Array.isArray(target)) {
    return target.map(function (item) {
      return omitDeep(item, omitKey);
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  return Object.keys(target).reduce(function (acc, key) {
    if (key === omitKey) {
      return acc;
    }
    var value = omitDeep(target[key], omitKey);
    acc[key] = value;
    return acc;
  }, {});
}

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = unsupportedIterableToArray._unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function pathToRegExp(path) {
  return new RegExp("^".concat(path.replaceAll('.', '\\.').replaceAll('[n]', '\\.\\d+'), "$"));
}
function update(_x, _x2, _x3) {
  return _update.apply(this, arguments);
}
function _update() {
  _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input, paths, updater) {
    var output, regexps, toUpdate, _iterator, _step, _path, _value, updated;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          output = traverse__default["default"].clone(input);
          regexps = paths.map(pathToRegExp);
          toUpdate = traverse__default["default"].paths(output).filter(function (path) {
            return regexps.some(function (r) {
              return r.test(path.join('.'));
            });
          });
          _iterator = _createForOfIteratorHelper(toUpdate);
          _context.prev = 4;
          _iterator.s();
        case 6:
          if ((_step = _iterator.n()).done) {
            _context.next = 16;
            break;
          }
          _path = _step.value;
          _value = traverse__default["default"].get(output, _path);
          if (!(typeof _value === 'string' && _value.length > 0)) {
            _context.next = 14;
            break;
          }
          _context.next = 12;
          return updater(_value, _path.join('.'));
        case 12:
          updated = _context.sent;
          traverse__default["default"].set(output, _path, updated);
        case 14:
          _context.next = 6;
          break;
        case 16:
          _context.next = 21;
          break;
        case 18:
          _context.prev = 18;
          _context.t0 = _context["catch"](4);
          _iterator.e(_context.t0);
        case 21:
          _context.prev = 21;
          _iterator.f();
          return _context.finish(21);
        case 24:
          return _context.abrupt("return", output);
        case 25:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4, 18, 21, 24]]);
  }));
  return _update.apply(this, arguments);
}

function assertError(error) {
  // why not `error instanceof Error`? see https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1099
  // eslint-disable-next-line no-prototype-builtins
  if (!isObject__default["default"](error) || !Error.prototype.isPrototypeOf(error)) {
    throw error;
  }
}
function assertErrorWithCode(error) {
  // eslint-disable-next-line no-prototype-builtins
  if (!(error instanceof Error && error.hasOwnProperty('code'))) {
    throw error;
  }
}
function assertErrorWithReason(error) {
  // eslint-disable-next-line no-prototype-builtins
  if (!(error instanceof Error && error.hasOwnProperty('reason'))) {
    throw error;
  }
}

/**
 * Exhaustiveness checking for union and enum types
 * see https://www.typescriptlang.org/docs/handbook/2/narrowing.html#exhaustiveness-checking
 */
function assertNever(x) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Unexpected object: ".concat(String(x));
  throw new unsupportedIterableToArray.InvariantError(message);
}

var isInEnum = function isInEnum(enumVariables, value) {
  return Object.values(enumVariables).includes(value);
};

function never() {
  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Unexpected call to never()';
  throw new unsupportedIterableToArray.InvariantError(message);
}

/**
 *  Cast a `value` to exclude `null` and `undefined`.
 *  Throws if either `null` or `undefined` was passed
 */
function nonNullable(value, message) {
  if (value !== undefined && value !== null) {
    return value;
  }
  throw new unsupportedIterableToArray.InvariantError("Non nullable values expected, received ".concat(String(value), " with message: ").concat(message));
}
function isNonNullable(value) {
  return value !== null && value !== undefined;
}

Object.defineProperty(exports, 'isObject', {
  enumerable: true,
  get: function () { return isObject__default["default"]; }
});
exports.Amount = unsupportedIterableToArray.Amount;
exports.BigDecimal = unsupportedIterableToArray.BigDecimal;
exports.ChainType = unsupportedIterableToArray.ChainType;
exports.Denomination = unsupportedIterableToArray.Denomination;
exports.InvariantError = unsupportedIterableToArray.InvariantError;
exports.Kind = unsupportedIterableToArray.Kind;
exports.NativeType = unsupportedIterableToArray.NativeType;
exports.WellKnownSymbols = unsupportedIterableToArray.WellKnownSymbols;
exports.erc20 = unsupportedIterableToArray.erc20;
exports.ether = unsupportedIterableToArray.ether;
exports.fiat = unsupportedIterableToArray.fiat;
exports.invariant = unsupportedIterableToArray.invariant;
exports.matic = unsupportedIterableToArray.matic;
exports.CausedError = CausedError;
exports.DateUtils = DateUtils;
exports.Deferred = Deferred;
exports.assertError = assertError;
exports.assertErrorWithCode = assertErrorWithCode;
exports.assertErrorWithReason = assertErrorWithReason;
exports.assertFailure = assertFailure;
exports.assertJustOne = assertJustOne;
exports.assertNever = assertNever;
exports.assertNonEmptyArray = assertNonEmptyArray;
exports.assertSuccess = assertSuccess;
exports.failure = failure;
exports.get = get;
exports.hasAtLeastOne = hasAtLeastOne;
exports.hasJustOne = hasJustOne;
exports.hasTwoOrMore = hasTwoOrMore;
exports.isInEnum = isInEnum;
exports.isNonNullable = isNonNullable;
exports.maybe = maybe;
exports.never = never;
exports.nonNullable = nonNullable;
exports.omitDeep = omitDeep;
exports.removeAtIndex = removeAtIndex;
exports.success = success;
exports.update = update;
