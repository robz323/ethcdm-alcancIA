import { UnknownObject } from '@lens-protocol/shared-kernel';
import { PendingSigningRequestError, SignedFrameAction, UnsignedFrameAction, UserRejectedError, WalletConnectionError } from "../../entities/index.js";
import { ActiveWallet } from "../authentication/ActiveWallet.js";
import { IGenericResultPresenter } from "../transactions/index.js";
export type SignFrameActionRequest<TInput extends UnknownObject> = {
    input: TInput;
    signless: boolean;
};
export interface ISignFrameActionGateway<TInput extends UnknownObject, TData> {
    signFrameAction(input: TInput): Promise<SignedFrameAction<TData>>;
    createUnsignedFrameAction(input: TInput): Promise<UnsignedFrameAction<TData>>;
}
export type ISignFrameActionPresenter<TData> = IGenericResultPresenter<SignedFrameAction<TData>, PendingSigningRequestError | UserRejectedError | WalletConnectionError>;
export declare class SignFrameAction<TInput extends UnknownObject, TData> {
    protected readonly activeWallet: ActiveWallet;
    protected readonly gateway: ISignFrameActionGateway<TInput, TData>;
    protected readonly presenter: ISignFrameActionPresenter<TData>;
    constructor(activeWallet: ActiveWallet, gateway: ISignFrameActionGateway<TInput, TData>, presenter: ISignFrameActionPresenter<TData>);
    execute(request: SignFrameActionRequest<TInput>): Promise<void>;
}
