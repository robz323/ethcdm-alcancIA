import { Data, URI } from '@lens-protocol/shared-kernel';
import { PublicationId, TransactionKind } from "../../entities/index.js";
import { DelegableSigning } from "../transactions/DelegableSigning.js";
import { PaidTransaction } from "../transactions/PaidTransaction.js";
import { SponsorshipReady } from "../transactions/SponsorshipReady.js";
import { OpenActionConfig } from "./OpenActionConfig.js";
import { ReferencePolicyConfig } from "./ReferencePolicyConfig.js";
import { Referrers } from "./Referrers.js";
export type CreateCommentRequest = {
    kind: TransactionKind.CREATE_COMMENT;
    actions: OpenActionConfig[];
    commentOn: PublicationId;
    commentOnReferenceData?: Data;
    metadata: URI;
    reference: ReferencePolicyConfig;
    referrers?: Referrers;
    signless: boolean;
    sponsored: boolean;
};
export declare class CreateComment extends SponsorshipReady<CreateCommentRequest> {
    protected readonly sponsoredOnChain: DelegableSigning<CreateCommentRequest>;
    protected readonly sponsoredOnMomoka: DelegableSigning<CreateCommentRequest>;
    protected readonly paidOnChain: PaidTransaction<CreateCommentRequest>;
    constructor(sponsoredOnChain: DelegableSigning<CreateCommentRequest>, sponsoredOnMomoka: DelegableSigning<CreateCommentRequest>, paidOnChain: PaidTransaction<CreateCommentRequest>);
    protected charged(request: CreateCommentRequest): Promise<void>;
    protected sponsored(request: CreateCommentRequest): Promise<void>;
}
