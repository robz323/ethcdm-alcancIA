import { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from "../../authentication/index.js";
import { LensContext } from "../../context.js";
import { CredentialsExpiredError, NotAuthenticatedError } from "../../errors.js";
import { FrameEip712Request, FrameLensManagerEip712Request, FrameVerifySignature, FrameVerifySignatureResult } from "../../graphql/types.generated.js";
import { CreateFrameEip712TypedDataFragment, FrameLensManagerSignatureResultFragment } from "./graphql/frames.generated.js";
/**
 * Lens Frames
 *
 * @group LensClient Modules
 */
export declare class Frames {
    private readonly authentication;
    private readonly sdk;
    /**
     * @internal
     */
    constructor(context: LensContext, authentication: Authentication);
    /**
     * Create Frame action typed data to be signed by user wallet
     *
     * @param request - The request object
     * @returns Typed data for Frame request
     * @experimental This function might change in the future release
     *
     * @example
     * ```ts
     * const result = await client.frames.createFrameTypedData({
     *   actionResponse: '0x0000000000000000000000000000000000000000',
     *   buttonIndex: 2,
     *   deadline: 1711038973,
     *   inputText: 'Hello, World!',
     *   profileId: '0x01',
     *   pubId: '0x01-0x01',
     *   specVersion: '1.0.0',
     *   state: '{"counter":1,"idempotency_key":"431b8b38-eb4d-455b"}',
     *   url: 'https://mylensframe.xyz',
     * });
     * ```
     */
    createFrameTypedData(request: FrameEip712Request): Promise<CreateFrameEip712TypedDataFragment>;
    /**
     * Sign Frame action with Lens Manager if enabled
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - The request object
     * @returns Signature result
     * @experimental This function might change in the future release
     *
     * @example
     * ```ts
     * const result = await client.frames.signFrameAction({
     *   actionResponse: '0x0000000000000000000000000000000000000000',
     *   buttonIndex: 2,
     *   inputText: 'Hello, World!',
     *   profileId: '0x01',
     *   pubId: '0x01-0x01',
     *   specVersion: '1.0.0',
     *   state: '{"counter":1,"idempotency_key":"431b8b38-eb4d-455b"}',
     *   url: 'https://mylensframe.xyz',
     * });
     * ```
     */
    signFrameAction(request: FrameLensManagerEip712Request): PromiseResult<FrameLensManagerSignatureResultFragment, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Verify Frame signature
     *
     * @param request - The request object
     * @returns Verification result
     * @experimental This function might change in the future release
     *
     * @example
     * ```ts
     * const result = await client.frames.verifyFrameSignature({
     *   identityToken: identityToken,
     *   signature: data.signature,
     *   signedTypedData: data.signedTypedData,
     * });
     * ```
     */
    verifyFrameSignature(request: FrameVerifySignature): Promise<FrameVerifySignatureResult>;
}
