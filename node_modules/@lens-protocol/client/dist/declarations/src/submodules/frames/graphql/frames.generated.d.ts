import * as Types from "../../../graphql/types.generated.js";
import { Eip712TypedDataDomainFragment } from "../../../graphql/fragments.generated.js";
import { GraphQLClient } from 'graphql-request';
import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';
import { DocumentNode } from 'graphql';
export type VerifyFrameSignatureQueryVariables = Types.Exact<{
    request: Types.FrameVerifySignature;
}>;
export type VerifyFrameSignatureQuery = {
    result: Types.FrameVerifySignatureResult;
};
export type CreateFrameTypedDataQueryVariables = Types.Exact<{
    request: Types.FrameEip712Request;
}>;
export type CreateFrameTypedDataQuery = {
    result: CreateFrameEip712TypedDataFragment;
};
export type CreateFrameEip712TypedDataFragment = {
    types: {
        FrameData: Array<{
            name: string;
            type: string;
        }>;
    };
    domain: Eip712TypedDataDomainFragment;
    value: {
        specVersion: string;
        url: string;
        buttonIndex: number;
        profileId: string;
        pubId: string;
        inputText: string;
        state: string;
        actionResponse: string;
        deadline: number;
    };
};
export type FrameLensManagerSignatureResultFragment = {
    signature: string;
    signedTypedData: CreateFrameEip712TypedDataFragment;
};
export type SignFrameActionMutationVariables = Types.Exact<{
    request: Types.FrameLensManagerEip712Request;
}>;
export type SignFrameActionMutation = {
    result: FrameLensManagerSignatureResultFragment;
};
export declare const CreateFrameEip712TypedDataFragmentDoc: DocumentNode;
export declare const FrameLensManagerSignatureResultFragmentDoc: DocumentNode;
export declare const VerifyFrameSignatureDocument: DocumentNode;
export declare const CreateFrameTypedDataDocument: DocumentNode;
export declare const SignFrameActionDocument: DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    VerifyFrameSignature(variables: VerifyFrameSignatureQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<{
        data: VerifyFrameSignatureQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateFrameTypedData(variables: CreateFrameTypedDataQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<{
        data: CreateFrameTypedDataQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    SignFrameAction(variables: SignFrameActionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<{
        data: SignFrameActionMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
