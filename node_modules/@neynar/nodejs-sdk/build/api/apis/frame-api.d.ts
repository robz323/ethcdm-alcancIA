/**
 * Farcaster API V2
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { DeleteFrameReqBody } from '../models';
import type { DeleteFrameResponse } from '../models';
import type { FetchFrameMetaTagsFromUrl200Response } from '../models';
import type { FetchRelevantFrames200Response } from '../models';
import type { Frame } from '../models';
import type { FrameActionReqBody } from '../models';
import type { FrameCatalogResponse } from '../models';
import type { FrameDeveloperManagedActionReqBody } from '../models';
import type { FrameNotificationTokens } from '../models';
import type { FrameType } from '../models';
import type { FrameValidateAnalyticsResponse } from '../models';
import type { FrameValidateListResponse } from '../models';
import type { NeynarFrame } from '../models';
import type { NeynarFrameCreationReqBody } from '../models';
import type { NeynarFrameUpdateReqBody } from '../models';
import type { SendFrameNotificationsReqBody } from '../models';
import type { SendFrameNotificationsResponse } from '../models';
import type { TransactionFrameResponse } from '../models';
import type { TrendingTimeWindow } from '../models';
import type { ValidateFrameActionReqBody } from '../models';
import type { ValidateFrameActionResponse } from '../models';
import type { ValidateFrameAggregateWindow } from '../models';
import type { ValidateFrameAnalyticsType } from '../models';
/**
 * FrameApi - axios parameter creator
 * @export
 */
export declare const FrameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an existing mini app, if it was made by the developer (identified by API key)
     * @summary Delete mini app
     * @param {DeleteFrameReqBody} deleteFrameReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     *
     */
    deleteNeynarFrame: (deleteFrameReqBody: DeleteFrameReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A curated list of featured mini apps
     * @summary Mini apps catalog
     * @param {number} [limit] Number of results to fetch  (Default: 100, Maximum: 100)
     * @param {string} [cursor] Pagination cursor
     * @param {TrendingTimeWindow} [timeWindow] Time window used to calculate the change in trending score for each mini app, used to sort mini app results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     *
     */
    fetchFrameCatalog: (limit?: number, cursor?: string, timeWindow?: TrendingTimeWindow, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the mini app meta tags from the URL
     * @summary Meta tags from URL
     * @param {string} url The mini app URL to crawl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     *
     */
    fetchFrameMetaTagsFromUrl: (url: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of mini apps made by the developer (identified by API key)
     * @summary List of mini apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     *
     */
    fetchNeynarFrames: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of notifications tokens related to a mini app
     * @summary List of mini app notification tokens
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [fids] Comma separated list of FIDs, up to 100 at a time
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     *
     */
    fetchNotificationTokens: (limit?: number, fids?: string, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
     * @summary Relevant mini apps
     * @param {number} viewerFid FID of the user to fetch relevant mini apps for
     * @param {TrendingTimeWindow} [timeWindow] Time window used to limit statistics used to calculate mini app relevance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)
     *
     */
    fetchRelevantFrames: (viewerFid: number, timeWindow?: TrendingTimeWindow, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the mini app
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {ValidateFrameAggregateWindow} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     *
     */
    fetchValidateFrameAnalytics: (frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: ValidateFrameAggregateWindow, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of all the mini apps validated by a user
     * @summary All mini apps validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     *
     */
    fetchValidateFrameList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves details about a transaction pay mini app by ID
     * @summary Get transaction pay mini app
     * @param {string} id ID of the transaction mini app to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object
     *
     */
    getTransactionPayFrame: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a mini app either by UUID or Neynar URL
     * @summary Mini app by UUID or URL
     * @param {FrameType} type
     * @param {string} [uuid] UUID of the mini app to fetch
     * @param {string} [url] URL of the Neynar mini app to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     *
     */
    lookupNeynarFrame: (type: FrameType, uuid?: string, url?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post mini app actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.
     * @summary Post a mini app action, cast action or a cast composer action
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     *
     */
    postFrameAction: (frameActionReqBody: FrameActionReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Signature packet
     * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     *
     */
    postFrameActionDeveloperManaged: (frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Send notifications to interactors of a mini app
     * @summary Send notifications
     * @param {SendFrameNotificationsReqBody} sendFrameNotificationsReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     *
     */
    publishFrameNotifications: (sendFrameNotificationsReqBody: SendFrameNotificationsReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new mini app with a list of pages.
     * @summary Create mini app
     * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     *
     */
    publishNeynarFrame: (neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update mini app
     * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     *
     */
    updateNeynarFrame: (neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validates a mini app against by an interacting user against a Farcaster Hub \\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)
     * @summary Validate mini app action
     * @param {ValidateFrameActionReqBody} validateFrameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     *
     */
    validateFrameAction: (validateFrameActionReqBody: ValidateFrameActionReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FrameApi - functional programming interface
 * @export
 */
export declare const FrameApiFp: (configuration?: Configuration) => {
    /**
     * Delete an existing mini app, if it was made by the developer (identified by API key)
     * @summary Delete mini app
     * @param {DeleteFrameReqBody} deleteFrameReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     *
     */
    deleteNeynarFrame(deleteFrameReqBody: DeleteFrameReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFrameResponse>>;
    /**
     * A curated list of featured mini apps
     * @summary Mini apps catalog
     * @param {number} [limit] Number of results to fetch  (Default: 100, Maximum: 100)
     * @param {string} [cursor] Pagination cursor
     * @param {TrendingTimeWindow} [timeWindow] Time window used to calculate the change in trending score for each mini app, used to sort mini app results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     *
     */
    fetchFrameCatalog(limit?: number, cursor?: string, timeWindow?: TrendingTimeWindow, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameCatalogResponse>>;
    /**
     * Fetches the mini app meta tags from the URL
     * @summary Meta tags from URL
     * @param {string} url The mini app URL to crawl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     *
     */
    fetchFrameMetaTagsFromUrl(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchFrameMetaTagsFromUrl200Response>>;
    /**
     * Fetch a list of mini apps made by the developer (identified by API key)
     * @summary List of mini apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     *
     */
    fetchNeynarFrames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NeynarFrame>>>;
    /**
     * Returns a list of notifications tokens related to a mini app
     * @summary List of mini app notification tokens
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [fids] Comma separated list of FIDs, up to 100 at a time
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     *
     */
    fetchNotificationTokens(limit?: number, fids?: string, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameNotificationTokens>>;
    /**
     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
     * @summary Relevant mini apps
     * @param {number} viewerFid FID of the user to fetch relevant mini apps for
     * @param {TrendingTimeWindow} [timeWindow] Time window used to limit statistics used to calculate mini app relevance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)
     *
     */
    fetchRelevantFrames(viewerFid: number, timeWindow?: TrendingTimeWindow, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchRelevantFrames200Response>>;
    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the mini app
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {ValidateFrameAggregateWindow} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     *
     */
    fetchValidateFrameAnalytics(frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: ValidateFrameAggregateWindow, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateAnalyticsResponse>>;
    /**
     * Fetch a list of all the mini apps validated by a user
     * @summary All mini apps validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     *
     */
    fetchValidateFrameList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateListResponse>>;
    /**
     * Retrieves details about a transaction pay mini app by ID
     * @summary Get transaction pay mini app
     * @param {string} id ID of the transaction mini app to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object
     *
     */
    getTransactionPayFrame(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionFrameResponse>>;
    /**
     * Fetch a mini app either by UUID or Neynar URL
     * @summary Mini app by UUID or URL
     * @param {FrameType} type
     * @param {string} [uuid] UUID of the mini app to fetch
     * @param {string} [url] URL of the Neynar mini app to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     *
     */
    lookupNeynarFrame(type: FrameType, uuid?: string, url?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>>;
    /**
     * Post mini app actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.
     * @summary Post a mini app action, cast action or a cast composer action
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     *
     */
    postFrameAction(frameActionReqBody: FrameActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>>;
    /**
     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Signature packet
     * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     *
     */
    postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>>;
    /**
     * Send notifications to interactors of a mini app
     * @summary Send notifications
     * @param {SendFrameNotificationsReqBody} sendFrameNotificationsReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     *
     */
    publishFrameNotifications(sendFrameNotificationsReqBody: SendFrameNotificationsReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendFrameNotificationsResponse>>;
    /**
     * Create a new mini app with a list of pages.
     * @summary Create mini app
     * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     *
     */
    publishNeynarFrame(neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>>;
    /**
     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update mini app
     * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     *
     */
    updateNeynarFrame(neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>>;
    /**
     * Validates a mini app against by an interacting user against a Farcaster Hub \\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)
     * @summary Validate mini app action
     * @param {ValidateFrameActionReqBody} validateFrameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     *
     */
    validateFrameAction(validateFrameActionReqBody: ValidateFrameActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateFrameActionResponse>>;
};
/**
 * FrameApi - factory interface
 * @export
 */
export declare const FrameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an existing mini app, if it was made by the developer (identified by API key)
     * @summary Delete mini app
     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     *
     */
    deleteNeynarFrame(requestParameters: FrameApiDeleteNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteFrameResponse>;
    /**
     * A curated list of featured mini apps
     * @summary Mini apps catalog
     * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     *
     */
    fetchFrameCatalog(requestParameters?: FrameApiFetchFrameCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameCatalogResponse>;
    /**
     * Fetches the mini app meta tags from the URL
     * @summary Meta tags from URL
     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     *
     */
    fetchFrameMetaTagsFromUrl(requestParameters: FrameApiFetchFrameMetaTagsFromUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchFrameMetaTagsFromUrl200Response>;
    /**
     * Fetch a list of mini apps made by the developer (identified by API key)
     * @summary List of mini apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     *
     */
    fetchNeynarFrames(options?: RawAxiosRequestConfig): AxiosPromise<Array<NeynarFrame>>;
    /**
     * Returns a list of notifications tokens related to a mini app
     * @summary List of mini app notification tokens
     * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     *
     */
    fetchNotificationTokens(requestParameters?: FrameApiFetchNotificationTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameNotificationTokens>;
    /**
     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
     * @summary Relevant mini apps
     * @param {FrameApiFetchRelevantFramesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)
     *
     */
    fetchRelevantFrames(requestParameters: FrameApiFetchRelevantFramesRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchRelevantFrames200Response>;
    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the mini app
     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     *
     */
    fetchValidateFrameAnalytics(requestParameters: FrameApiFetchValidateFrameAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateAnalyticsResponse>;
    /**
     * Fetch a list of all the mini apps validated by a user
     * @summary All mini apps validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     *
     */
    fetchValidateFrameList(options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateListResponse>;
    /**
     * Retrieves details about a transaction pay mini app by ID
     * @summary Get transaction pay mini app
     * @param {FrameApiGetTransactionPayFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object
     *
     */
    getTransactionPayFrame(requestParameters: FrameApiGetTransactionPayFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionFrameResponse>;
    /**
     * Fetch a mini app either by UUID or Neynar URL
     * @summary Mini app by UUID or URL
     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     *
     */
    lookupNeynarFrame(requestParameters: FrameApiLookupNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;
    /**
     * Post mini app actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.
     * @summary Post a mini app action, cast action or a cast composer action
     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     *
     */
    postFrameAction(requestParameters: FrameApiPostFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame>;
    /**
     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Signature packet
     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     *
     */
    postFrameActionDeveloperManaged(requestParameters: FrameApiPostFrameActionDeveloperManagedRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame>;
    /**
     * Send notifications to interactors of a mini app
     * @summary Send notifications
     * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     *
     */
    publishFrameNotifications(requestParameters: FrameApiPublishFrameNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendFrameNotificationsResponse>;
    /**
     * Create a new mini app with a list of pages.
     * @summary Create mini app
     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     *
     */
    publishNeynarFrame(requestParameters: FrameApiPublishNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;
    /**
     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update mini app
     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     *
     */
    updateNeynarFrame(requestParameters: FrameApiUpdateNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;
    /**
     * Validates a mini app against by an interacting user against a Farcaster Hub \\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)
     * @summary Validate mini app action
     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     *
     */
    validateFrameAction(requestParameters: FrameApiValidateFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateFrameActionResponse>;
};
/**
 * FrameApi - interface
 * @export
 * @interface FrameApi
 */
export interface FrameApiInterface {
    /**
     * Delete an existing mini app, if it was made by the developer (identified by API key)
     * @summary Delete mini app
     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     *
     */
    deleteNeynarFrame(requestParameters: FrameApiDeleteNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteFrameResponse>;
    /**
     * A curated list of featured mini apps
     * @summary Mini apps catalog
     * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     *
     */
    fetchFrameCatalog(requestParameters?: FrameApiFetchFrameCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameCatalogResponse>;
    /**
     * Fetches the mini app meta tags from the URL
     * @summary Meta tags from URL
     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     *
     */
    fetchFrameMetaTagsFromUrl(requestParameters: FrameApiFetchFrameMetaTagsFromUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchFrameMetaTagsFromUrl200Response>;
    /**
     * Fetch a list of mini apps made by the developer (identified by API key)
     * @summary List of mini apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     *
     */
    fetchNeynarFrames(options?: RawAxiosRequestConfig): AxiosPromise<Array<NeynarFrame>>;
    /**
     * Returns a list of notifications tokens related to a mini app
     * @summary List of mini app notification tokens
     * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     *
     */
    fetchNotificationTokens(requestParameters?: FrameApiFetchNotificationTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameNotificationTokens>;
    /**
     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
     * @summary Relevant mini apps
     * @param {FrameApiFetchRelevantFramesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)
     *
     */
    fetchRelevantFrames(requestParameters: FrameApiFetchRelevantFramesRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchRelevantFrames200Response>;
    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the mini app
     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     *
     */
    fetchValidateFrameAnalytics(requestParameters: FrameApiFetchValidateFrameAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateAnalyticsResponse>;
    /**
     * Fetch a list of all the mini apps validated by a user
     * @summary All mini apps validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     *
     */
    fetchValidateFrameList(options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateListResponse>;
    /**
     * Retrieves details about a transaction pay mini app by ID
     * @summary Get transaction pay mini app
     * @param {FrameApiGetTransactionPayFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object
     *
     */
    getTransactionPayFrame(requestParameters: FrameApiGetTransactionPayFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionFrameResponse>;
    /**
     * Fetch a mini app either by UUID or Neynar URL
     * @summary Mini app by UUID or URL
     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     *
     */
    lookupNeynarFrame(requestParameters: FrameApiLookupNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;
    /**
     * Post mini app actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.
     * @summary Post a mini app action, cast action or a cast composer action
     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     *
     */
    postFrameAction(requestParameters: FrameApiPostFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame>;
    /**
     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Signature packet
     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     *
     */
    postFrameActionDeveloperManaged(requestParameters: FrameApiPostFrameActionDeveloperManagedRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame>;
    /**
     * Send notifications to interactors of a mini app
     * @summary Send notifications
     * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     *
     */
    publishFrameNotifications(requestParameters: FrameApiPublishFrameNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendFrameNotificationsResponse>;
    /**
     * Create a new mini app with a list of pages.
     * @summary Create mini app
     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     *
     */
    publishNeynarFrame(requestParameters: FrameApiPublishNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;
    /**
     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update mini app
     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     *
     */
    updateNeynarFrame(requestParameters: FrameApiUpdateNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;
    /**
     * Validates a mini app against by an interacting user against a Farcaster Hub \\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)
     * @summary Validate mini app action
     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     *
     */
    validateFrameAction(requestParameters: FrameApiValidateFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateFrameActionResponse>;
}
/**
 * Request parameters for deleteNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiDeleteNeynarFrameRequest
 */
export interface FrameApiDeleteNeynarFrameRequest {
    /**
     *
     *
     *
     *
     * @type {DeleteFrameReqBody}
     * @memberof FrameApiDeleteNeynarFrame
     */
    readonly deleteFrameReqBody: DeleteFrameReqBody;
}
/**
 * Request parameters for fetchFrameCatalog operation in FrameApi.
 * @export
 * @interface FrameApiFetchFrameCatalogRequest
 */
export interface FrameApiFetchFrameCatalogRequest {
    /**
     * Number of results to fetch (Default: 100, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FrameApiFetchFrameCatalog
     */
    readonly limit?: number;
    /**
     * Pagination cursor
     *
     *
     *
     * @type {string}
     * @memberof FrameApiFetchFrameCatalog
     */
    readonly cursor?: string;
    /**
     * Time window used to calculate the change in trending score for each mini app, used to sort mini app results
     *
     *
     *
     * @type {TrendingTimeWindow}
     * @memberof FrameApiFetchFrameCatalog
     */
    readonly timeWindow?: TrendingTimeWindow;
}
/**
 * Request parameters for fetchFrameMetaTagsFromUrl operation in FrameApi.
 * @export
 * @interface FrameApiFetchFrameMetaTagsFromUrlRequest
 */
export interface FrameApiFetchFrameMetaTagsFromUrlRequest {
    /**
     * The mini app URL to crawl
     *
     *
     *
     * @type {string}
     * @memberof FrameApiFetchFrameMetaTagsFromUrl
     */
    readonly url: string;
}
/**
 * Request parameters for fetchNotificationTokens operation in FrameApi.
 * @export
 * @interface FrameApiFetchNotificationTokensRequest
 */
export interface FrameApiFetchNotificationTokensRequest {
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FrameApiFetchNotificationTokens
     */
    readonly limit?: number;
    /**
     * Comma separated list of FIDs, up to 100 at a time
     * @acceptAs integer
     * @commaSeparated
     *
     * @type {string}
     * @memberof FrameApiFetchNotificationTokens
     */
    readonly fids?: string;
    /**
     * Pagination cursor
     *
     *
     *
     * @type {string}
     * @memberof FrameApiFetchNotificationTokens
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchRelevantFrames operation in FrameApi.
 * @export
 * @interface FrameApiFetchRelevantFramesRequest
 */
export interface FrameApiFetchRelevantFramesRequest {
    /**
     * FID of the user to fetch relevant mini apps for
     *
     *
     *
     * @type {number}
     * @memberof FrameApiFetchRelevantFrames
     */
    readonly viewerFid: number;
    /**
     * Time window used to limit statistics used to calculate mini app relevance
     *
     *
     *
     * @type {TrendingTimeWindow}
     * @memberof FrameApiFetchRelevantFrames
     */
    readonly timeWindow?: TrendingTimeWindow;
}
/**
 * Request parameters for fetchValidateFrameAnalytics operation in FrameApi.
 * @export
 * @interface FrameApiFetchValidateFrameAnalyticsRequest
 */
export interface FrameApiFetchValidateFrameAnalyticsRequest {
    /**
     *
     *
     *
     *
     * @type {string}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly frameUrl: string;
    /**
     *
     *
     *
     *
     * @type {ValidateFrameAnalyticsType}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly analyticsType: ValidateFrameAnalyticsType;
    /**
     *
     *
     *
     *
     * @type {string}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly start: string;
    /**
     *
     *
     *
     *
     * @type {string}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly stop: string;
    /**
     * Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     *
     *
     *
     * @type {ValidateFrameAggregateWindow}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly aggregateWindow?: ValidateFrameAggregateWindow;
}
/**
 * Request parameters for getTransactionPayFrame operation in FrameApi.
 * @export
 * @interface FrameApiGetTransactionPayFrameRequest
 */
export interface FrameApiGetTransactionPayFrameRequest {
    /**
     * ID of the transaction mini app to retrieve
     *
     *
     *
     * @type {string}
     * @memberof FrameApiGetTransactionPayFrame
     */
    readonly id: string;
}
/**
 * Request parameters for lookupNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiLookupNeynarFrameRequest
 */
export interface FrameApiLookupNeynarFrameRequest {
    /**
     *
     *
     *
     *
     * @type {FrameType}
     * @memberof FrameApiLookupNeynarFrame
     */
    readonly type: FrameType;
    /**
     * UUID of the mini app to fetch
     *
     *
     *
     * @type {string}
     * @memberof FrameApiLookupNeynarFrame
     */
    readonly uuid?: string;
    /**
     * URL of the Neynar mini app to fetch
     *
     *
     *
     * @type {string}
     * @memberof FrameApiLookupNeynarFrame
     */
    readonly url?: string;
}
/**
 * Request parameters for postFrameAction operation in FrameApi.
 * @export
 * @interface FrameApiPostFrameActionRequest
 */
export interface FrameApiPostFrameActionRequest {
    /**
     *
     *
     *
     *
     * @type {FrameActionReqBody}
     * @memberof FrameApiPostFrameAction
     */
    readonly frameActionReqBody: FrameActionReqBody;
}
/**
 * Request parameters for postFrameActionDeveloperManaged operation in FrameApi.
 * @export
 * @interface FrameApiPostFrameActionDeveloperManagedRequest
 */
export interface FrameApiPostFrameActionDeveloperManagedRequest {
    /**
     *
     *
     *
     *
     * @type {FrameDeveloperManagedActionReqBody}
     * @memberof FrameApiPostFrameActionDeveloperManaged
     */
    readonly frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody;
}
/**
 * Request parameters for publishFrameNotifications operation in FrameApi.
 * @export
 * @interface FrameApiPublishFrameNotificationsRequest
 */
export interface FrameApiPublishFrameNotificationsRequest {
    /**
     *
     *
     *
     *
     * @type {SendFrameNotificationsReqBody}
     * @memberof FrameApiPublishFrameNotifications
     */
    readonly sendFrameNotificationsReqBody: SendFrameNotificationsReqBody;
}
/**
 * Request parameters for publishNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiPublishNeynarFrameRequest
 */
export interface FrameApiPublishNeynarFrameRequest {
    /**
     *
     *
     *
     *
     * @type {NeynarFrameCreationReqBody}
     * @memberof FrameApiPublishNeynarFrame
     */
    readonly neynarFrameCreationReqBody: NeynarFrameCreationReqBody;
}
/**
 * Request parameters for updateNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiUpdateNeynarFrameRequest
 */
export interface FrameApiUpdateNeynarFrameRequest {
    /**
     *
     *
     *
     *
     * @type {NeynarFrameUpdateReqBody}
     * @memberof FrameApiUpdateNeynarFrame
     */
    readonly neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody;
}
/**
 * Request parameters for validateFrameAction operation in FrameApi.
 * @export
 * @interface FrameApiValidateFrameActionRequest
 */
export interface FrameApiValidateFrameActionRequest {
    /**
     *
     *
     *
     *
     * @type {ValidateFrameActionReqBody}
     * @memberof FrameApiValidateFrameAction
     */
    readonly validateFrameActionReqBody: ValidateFrameActionReqBody;
}
/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
export declare class FrameApi extends BaseAPI implements FrameApiInterface {
    /**
     * Delete an existing mini app, if it was made by the developer (identified by API key)
     * @summary Delete mini app
     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     *
     */
    deleteNeynarFrame(requestParameters: FrameApiDeleteNeynarFrameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFrameResponse, any>>;
    /**
     * A curated list of featured mini apps
     * @summary Mini apps catalog
     * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     *
     */
    fetchFrameCatalog(requestParameters?: FrameApiFetchFrameCatalogRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FrameCatalogResponse, any>>;
    /**
     * Fetches the mini app meta tags from the URL
     * @summary Meta tags from URL
     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     *
     */
    fetchFrameMetaTagsFromUrl(requestParameters: FrameApiFetchFrameMetaTagsFromUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FetchFrameMetaTagsFromUrl200Response, any>>;
    /**
     * Fetch a list of mini apps made by the developer (identified by API key)
     * @summary List of mini apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     *
     */
    fetchNeynarFrames(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame[], any>>;
    /**
     * Returns a list of notifications tokens related to a mini app
     * @summary List of mini app notification tokens
     * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     *
     */
    fetchNotificationTokens(requestParameters?: FrameApiFetchNotificationTokensRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FrameNotificationTokens, any>>;
    /**
     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
     * @summary Relevant mini apps
     * @param {FrameApiFetchRelevantFramesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)
     *
     */
    fetchRelevantFrames(requestParameters: FrameApiFetchRelevantFramesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FetchRelevantFrames200Response, any>>;
    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the mini app
     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     *
     */
    fetchValidateFrameAnalytics(requestParameters: FrameApiFetchValidateFrameAnalyticsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FrameValidateAnalyticsResponse, any>>;
    /**
     * Fetch a list of all the mini apps validated by a user
     * @summary All mini apps validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     *
     */
    fetchValidateFrameList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FrameValidateListResponse, any>>;
    /**
     * Retrieves details about a transaction pay mini app by ID
     * @summary Get transaction pay mini app
     * @param {FrameApiGetTransactionPayFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object
     *
     */
    getTransactionPayFrame(requestParameters: FrameApiGetTransactionPayFrameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionFrameResponse, any>>;
    /**
     * Fetch a mini app either by UUID or Neynar URL
     * @summary Mini app by UUID or URL
     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     *
     */
    lookupNeynarFrame(requestParameters: FrameApiLookupNeynarFrameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame, any>>;
    /**
     * Post mini app actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.
     * @summary Post a mini app action, cast action or a cast composer action
     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     *
     */
    postFrameAction(requestParameters: FrameApiPostFrameActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Frame, any>>;
    /**
     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Signature packet
     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     *
     */
    postFrameActionDeveloperManaged(requestParameters: FrameApiPostFrameActionDeveloperManagedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Frame, any>>;
    /**
     * Send notifications to interactors of a mini app
     * @summary Send notifications
     * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     *
     */
    publishFrameNotifications(requestParameters: FrameApiPublishFrameNotificationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SendFrameNotificationsResponse, any>>;
    /**
     * Create a new mini app with a list of pages.
     * @summary Create mini app
     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     *
     */
    publishNeynarFrame(requestParameters: FrameApiPublishNeynarFrameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame, any>>;
    /**
     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update mini app
     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     *
     */
    updateNeynarFrame(requestParameters: FrameApiUpdateNeynarFrameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame, any>>;
    /**
     * Validates a mini app against by an interacting user against a Farcaster Hub \\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)
     * @summary Validate mini app action
     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     *
     */
    validateFrameAction(requestParameters: FrameApiValidateFrameActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ValidateFrameActionResponse, any>>;
}
