"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const __1 = require("..");
const openOrdersIndexer_1 = require("../accounts/openOrdersIndexer");
const util_1 = require("./util");
async function testLoadIndexerNonExistent() {
    const client = (0, util_1.initReadOnlyOpenbookClient)();
    try {
        const indexer = await openOrdersIndexer_1.OpenOrdersIndexer.load(client);
        console.error('should not find', indexer);
        process.exit(-1);
    }
    catch (e) {
        console.log('expected failure');
    }
}
async function testLoadOOForMarket() {
    const client = (0, util_1.initOpenbookClient)();
    const marketPk = new web3_js_1.PublicKey('CFSMrBssNG8Ud1edW59jNLnq2cwrQ9uY5cM3wXmqRJj3');
    const market = await __1.Market.load(client, marketPk);
    const [oo] = await Promise.all([
        __1.OpenOrders.loadNullableForMarketAndOwner(market),
        market.loadOrderBook(),
        market.loadEventHeap(),
    ]);
    console.log(oo?.toPrettyString());
}
async function testLoadOOForWallet() {
    const client = (0, util_1.initOpenbookClient)();
    const ooi = await openOrdersIndexer_1.OpenOrdersIndexer.loadNullable(client);
    const oos = await ooi.loadAllOpenOrders();
    for (const oo of oos)
        console.log(oo?.toPrettyString());
}
async function testPlaceAndCancelOrder() {
    const client = (0, util_1.initOpenbookClient)();
    const marketPk = new web3_js_1.PublicKey('CFSMrBssNG8Ud1edW59jNLnq2cwrQ9uY5cM3wXmqRJj3');
    const market = await __1.Market.load(client, marketPk);
    console.log(market.toPrettyString());
    const [oo] = await Promise.all([
        __1.OpenOrders.loadNullableForMarketAndOwner(market),
        market.loadOrderBook(),
    ]);
    const sigPlace = await oo?.placeOrder({
        side: __1.SideUtils.Bid,
        price: market.tickSize,
        size: market.minOrderSize,
    });
    console.log('placed order', sigPlace);
    await Promise.all([oo?.reload(), market.loadBids()]);
    console.log(oo?.toPrettyString());
    const sigCancel = await oo?.cancelOrder(oo.items().next().value);
    console.log('cancelled order', sigCancel);
}
async function testPlaceAndCancelOrderByClientId() {
    const client = (0, util_1.initOpenbookClient)();
    const marketPk = new web3_js_1.PublicKey('CFSMrBssNG8Ud1edW59jNLnq2cwrQ9uY5cM3wXmqRJj3');
    const market = await __1.Market.load(client, marketPk);
    console.log(market.toPrettyString());
    const [oo] = await Promise.all([
        __1.OpenOrders.loadNullableForMarketAndOwner(market),
        market.loadOrderBook(),
    ]);
    const sigPlace = await oo?.placeOrder({
        side: __1.SideUtils.Bid,
        price: market.tickSize,
        size: market.minOrderSize,
        clientOrderId: 9999,
    });
    console.log('placed order', sigPlace);
    const sigCancel = await oo?.cancelOrder({ clientOrderId: 9999 });
    console.log('cancelled order', sigCancel);
}
// testLoadIndexerNonExistent();
// void testLoadOOForMarket();
void testLoadOOForWallet();
// testPlaceAndCancelOrder();
// testPlaceAndCancelOrderByClientId();
