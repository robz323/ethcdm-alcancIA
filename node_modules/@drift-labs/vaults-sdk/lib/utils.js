"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateATAInstruction = exports.getVaultClient = exports.getDriftVaultProgram = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const drift_vaults_1 = require("./types/drift_vaults");
const vaultClient_1 = require("./vaultClient");
const anchor = __importStar(require("@coral-xyz/anchor"));
const types_1 = require("./types/types");
const spl_token_1 = require("@solana/spl-token");
const getDriftVaultProgram = (connection, wallet) => {
    const provider = new anchor_1.AnchorProvider(connection, wallet, {});
    anchor.setProvider(provider);
    const vaultProgram = new anchor.Program(drift_vaults_1.IDL, types_1.VAULT_PROGRAM_ID, provider);
    return vaultProgram;
};
exports.getDriftVaultProgram = getDriftVaultProgram;
const getVaultClient = (connection, wallet, driftClient) => {
    const vaultProgram = (0, exports.getDriftVaultProgram)(connection, wallet);
    const vaultClient = new vaultClient_1.VaultClient({
        driftClient,
        program: vaultProgram,
    });
    return vaultClient;
};
exports.getVaultClient = getVaultClient;
const getOrCreateATAInstruction = async (tokenMint, owner, connection, allowOwnerOffCurve = true, payer = owner) => {
    let toAccount;
    try {
        toAccount = await (0, spl_token_1.getAssociatedTokenAddress)(tokenMint, owner, allowOwnerOffCurve);
        const account = await connection.getAccountInfo(toAccount);
        if (!account) {
            const ix = (0, spl_token_1.createAssociatedTokenAccountInstruction)(payer, toAccount, owner, tokenMint);
            return [toAccount, ix];
        }
        return [toAccount, undefined];
    }
    catch (e) {
        /* handle error */
        console.error('Error::getOrCreateATAInstruction', e);
        throw e;
    }
};
exports.getOrCreateATAInstruction = getOrCreateATAInstruction;
