import { BulkAccountLoader, DataAndSlot, PublicKey } from '@drift-labs/sdk';
import { Program } from '@coral-xyz/anchor';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
import { DriftVaults } from '../types/drift_vaults';
import { VaultsProgramAccountBaseEvents, VaultsProgramAccountSubscriber } from '../types/types';
export declare abstract class PollingVaultsProgramAccountSubscriber<Account, AccountEvents extends VaultsProgramAccountBaseEvents> implements VaultsProgramAccountSubscriber<Account, AccountEvents> {
    protected program: Program<DriftVaults>;
    protected _isSubscribed: boolean;
    protected pubkey: PublicKey;
    protected account?: DataAndSlot<Account>;
    protected _eventEmitter: StrictEventEmitter<EventEmitter, AccountEvents>;
    protected accountLoader: BulkAccountLoader;
    protected callbackId: string | null;
    protected errorCallbackId: string | null;
    constructor(program: Program<DriftVaults>, accountPubkey: PublicKey, accountLoader: BulkAccountLoader);
    get isSubscribed(): boolean;
    get eventEmitter(): StrictEventEmitter<EventEmitter, AccountEvents>;
    subscribe(): Promise<boolean>;
    unsubscribe(): Promise<void>;
    fetchIfUnloaded(): Promise<void>;
    assertIsSubscribed(): void;
    getAccountAndSlot(): DataAndSlot<Account>;
    abstract addToAccountLoader(): Promise<void>;
    abstract fetch(): Promise<void>;
    abstract updateData(account: Account, slot: number): void;
}
