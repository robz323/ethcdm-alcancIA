/// <reference types="node" />
import { DataAndSlot, InsuranceFundStakeAccountEvents, InsuranceFundStakeAccountSubscriber } from './types';
import { Program } from '@coral-xyz/anchor';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
import { PublicKey } from '@solana/web3.js';
import { BulkAccountLoader } from './bulkAccountLoader';
import { InsuranceFundStake } from '../types';
export declare class PollingInsuranceFundStakeAccountSubscriber implements InsuranceFundStakeAccountSubscriber {
    isSubscribed: boolean;
    program: Program;
    eventEmitter: StrictEventEmitter<EventEmitter, InsuranceFundStakeAccountEvents>;
    insuranceFundStakeAccountPublicKey: PublicKey;
    accountLoader: BulkAccountLoader;
    callbackId?: string;
    errorCallbackId?: string;
    insuranceFundStakeAccountAndSlot?: DataAndSlot<InsuranceFundStake>;
    constructor(program: Program, publicKey: PublicKey, accountLoader: BulkAccountLoader);
    subscribe(insuranceFundStake?: InsuranceFundStake): Promise<boolean>;
    addToAccountLoader(): Promise<void>;
    fetchIfUnloaded(): Promise<void>;
    fetch(): Promise<void>;
    doesAccountExist(): boolean;
    unsubscribe(): Promise<void>;
    assertIsSubscribed(): void;
    getInsuranceFundStakeAccountAndSlot(): DataAndSlot<InsuranceFundStake>;
    didSubscriptionSucceed(): boolean;
    updateData(insuranceFundStake: InsuranceFundStake, slot: number): void;
}
