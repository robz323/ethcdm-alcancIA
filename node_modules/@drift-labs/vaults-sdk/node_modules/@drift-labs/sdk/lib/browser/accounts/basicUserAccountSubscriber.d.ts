/// <reference types="node" />
import { DataAndSlot, UserAccountEvents, UserAccountSubscriber } from './types';
import { PublicKey } from '@solana/web3.js';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
import { UserAccount } from '../types';
/**
 * Basic implementation of UserAccountSubscriber. It will only take in UserAccount
 * data during initialization and will not fetch or subscribe to updates.
 */
export declare class BasicUserAccountSubscriber implements UserAccountSubscriber {
    isSubscribed: boolean;
    eventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;
    userAccountPublicKey: PublicKey;
    callbackId?: string;
    errorCallbackId?: string;
    user: DataAndSlot<UserAccount>;
    constructor(userAccountPublicKey: PublicKey, data?: UserAccount, slot?: number);
    subscribe(_userAccount?: UserAccount): Promise<boolean>;
    addToAccountLoader(): Promise<void>;
    fetch(): Promise<void>;
    doesAccountExist(): boolean;
    unsubscribe(): Promise<void>;
    assertIsSubscribed(): void;
    getUserAccountAndSlot(): DataAndSlot<UserAccount>;
    updateData(userAccount: UserAccount, slot: number): void;
}
