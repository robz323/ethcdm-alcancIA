"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastlaneOrderSubscriber = void 0;
const __1 = require("..");
const web3_js_1 = require("@solana/web3.js");
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const tweetnacl_util_1 = require("tweetnacl-util");
const ws_1 = __importDefault(require("ws"));
class FastlaneOrderSubscriber {
    constructor(config) {
        this.config = config;
        this.heartbeatTimeout = null;
        this.heartbeatIntervalMs = 60000;
        this.ws = null;
        this.subscribed = false;
        this.driftClient = config.driftClient;
        this.userMap = config.userMap;
    }
    getSymbolForMarketIndex(marketIndex) {
        const markets = this.config.driftEnv === 'devnet'
            ? __1.DevnetPerpMarkets
            : __1.MainnetPerpMarkets;
        return markets[marketIndex].symbol;
    }
    generateChallengeResponse(nonce) {
        const messageBytes = (0, tweetnacl_util_1.decodeUTF8)(nonce);
        const signature = tweetnacl_1.default.sign.detached(messageBytes, this.config.keypair.secretKey);
        const signatureBase64 = Buffer.from(signature).toString('base64');
        return signatureBase64;
    }
    handleAuthMessage(message) {
        var _a, _b;
        if (message['channel'] === 'auth' && message['nonce'] != null) {
            const signatureBase64 = this.generateChallengeResponse(message['nonce']);
            (_a = this.ws) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify({
                pubkey: this.config.keypair.publicKey.toBase58(),
                signature: signatureBase64,
            }));
        }
        if (message['channel'] === 'auth' &&
            ((_b = message['message']) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'authenticated') {
            this.subscribed = true;
            this.config.marketIndexes.forEach(async (marketIndex) => {
                var _a;
                (_a = this.ws) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify({
                    action: 'subscribe',
                    market_type: 'perp',
                    market_name: this.getSymbolForMarketIndex(marketIndex),
                }));
                await new Promise((resolve) => setTimeout(resolve, 100));
            });
        }
    }
    async subscribe(onOrder) {
        this.onOrder = onOrder;
        const endpoint = this.config.endpoint || this.config.driftEnv === 'devnet'
            ? 'wss://master.fastlane.drift.trade/ws'
            : 'wss://fastlane.drift.trade/ws';
        const ws = new ws_1.default(endpoint + '?pubkey=' + this.config.keypair.publicKey.toBase58());
        this.ws = ws;
        ws.on('open', async () => {
            console.log('Connected to the server');
            ws.on('message', async (data) => {
                const message = JSON.parse(data.toString());
                this.startHeartbeatTimer();
                if (message['channel'] === 'auth') {
                    this.handleAuthMessage(message);
                }
                if (message['order']) {
                    const order = message['order'];
                    const signedMsgOrderParamsBuf = Buffer.from(order['order_message'], 'hex');
                    const signedMsgOrderParamsMessage = this.driftClient.decodeSignedMsgOrderParamsMessage(signedMsgOrderParamsBuf);
                    if (!signedMsgOrderParamsMessage.signedMsgOrderParams.price) {
                        console.error(`order has no price: ${JSON.stringify(signedMsgOrderParamsMessage.signedMsgOrderParams)}`);
                        return;
                    }
                    onOrder(order, signedMsgOrderParamsMessage);
                }
            });
            ws.on('close', () => {
                console.log('Disconnected from the server');
                this.reconnect();
            });
            ws.on('error', (error) => {
                console.error('WebSocket error:', error);
                this.reconnect();
            });
        });
    }
    async getPlaceAndMakeSignedMsgOrderIxs(orderMessageRaw, signedMsgOrderParamsMessage, makerOrderParams) {
        const signedMsgOrderParamsBuf = Buffer.from(orderMessageRaw['order_message'], 'hex');
        const takerAuthority = new web3_js_1.PublicKey(orderMessageRaw['taker_authority']);
        const signingAuthority = new web3_js_1.PublicKey(orderMessageRaw['signing_authority']);
        const takerUserPubkey = await (0, __1.getUserAccountPublicKey)(this.driftClient.program.programId, takerAuthority, signedMsgOrderParamsMessage.subAccountId);
        const takerUserAccount = (await this.userMap.mustGet(takerUserPubkey.toString())).getUserAccount();
        const ixs = await this.driftClient.getPlaceAndMakeSignedMsgPerpOrderIxs({
            orderParams: signedMsgOrderParamsBuf,
            signature: Buffer.from(orderMessageRaw['order_signature'], 'base64'),
        }, (0, tweetnacl_util_1.decodeUTF8)(orderMessageRaw['uuid']), {
            taker: takerUserPubkey,
            takerUserAccount,
            takerStats: (0, __1.getUserStatsAccountPublicKey)(this.driftClient.program.programId, takerUserAccount.authority),
            signingAuthority: signingAuthority,
        }, Object.assign({}, makerOrderParams, {
            postOnly: __1.PostOnlyParams.MUST_POST_ONLY,
            immediateOrCancel: true,
            marketType: __1.MarketType.PERP,
        }));
        return ixs;
    }
    startHeartbeatTimer() {
        if (this.heartbeatTimeout) {
            clearTimeout(this.heartbeatTimeout);
        }
        if (!this.onOrder) {
            throw new Error('onOrder callback function must be set');
        }
        this.heartbeatTimeout = setTimeout(() => {
            console.warn('No heartbeat received within 30 seconds, reconnecting...');
            this.reconnect();
        }, this.heartbeatIntervalMs);
    }
    reconnect() {
        if (this.ws) {
            this.ws.removeAllListeners();
            this.ws.terminate();
        }
        console.log('Reconnecting to WebSocket...');
        setTimeout(() => {
            this.subscribe(this.onOrder);
        }, 1000);
    }
}
exports.FastlaneOrderSubscriber = FastlaneOrderSubscriber;
