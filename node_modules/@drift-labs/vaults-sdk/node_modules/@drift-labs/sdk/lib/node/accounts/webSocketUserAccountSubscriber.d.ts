/// <reference types="node" />
import { DataAndSlot, AccountSubscriber, UserAccountEvents, UserAccountSubscriber, ResubOpts } from './types';
import { Program } from '@coral-xyz/anchor';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
import { Commitment, PublicKey } from '@solana/web3.js';
import { UserAccount } from '../types';
export declare class WebSocketUserAccountSubscriber implements UserAccountSubscriber {
    isSubscribed: boolean;
    resubOpts?: ResubOpts;
    commitment?: Commitment;
    program: Program;
    eventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;
    userAccountPublicKey: PublicKey;
    userDataAccountSubscriber: AccountSubscriber<UserAccount>;
    constructor(program: Program, userAccountPublicKey: PublicKey, resubOpts?: ResubOpts, commitment?: Commitment);
    subscribe(userAccount?: UserAccount): Promise<boolean>;
    fetch(): Promise<void>;
    unsubscribe(): Promise<void>;
    assertIsSubscribed(): void;
    getUserAccountAndSlot(): DataAndSlot<UserAccount>;
    updateData(userAccount: UserAccount, slot: number): void;
}
