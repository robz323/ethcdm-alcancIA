import { DriftClient, DriftEnv, OptionalOrderParams, SwiftOrderParamsMessage, UserMap } from '..';
import { Keypair, TransactionInstruction } from '@solana/web3.js';
export type SwiftOrderSubscriberConfig = {
    driftClient: DriftClient;
    userMap: UserMap;
    driftEnv: DriftEnv;
    endpoint?: string;
    marketIndexes: number[];
    keypair: Keypair;
};
export declare class SwiftOrderSubscriber {
    private config;
    private heartbeatTimeout;
    private readonly heartbeatIntervalMs;
    private ws;
    private driftClient;
    userMap: UserMap;
    onOrder: (orderMessageRaw: any, swiftOrderParamsMessage: SwiftOrderParamsMessage) => Promise<void>;
    subscribed: boolean;
    constructor(config: SwiftOrderSubscriberConfig);
    getSymbolForMarketIndex(marketIndex: number): string;
    generateChallengeResponse(nonce: string): string;
    handleAuthMessage(message: any): void;
    subscribe(onOrder: (orderMessageRaw: any, swiftOrderParamsMessage: SwiftOrderParamsMessage) => Promise<void>): Promise<void>;
    getPlaceAndMakeSwiftOrderIxs(orderMessageRaw: any, swiftOrderParamsMessage: SwiftOrderParamsMessage, makerOrderParams: OptionalOrderParams): Promise<TransactionInstruction[]>;
    private startHeartbeatTimer;
    private reconnect;
}
