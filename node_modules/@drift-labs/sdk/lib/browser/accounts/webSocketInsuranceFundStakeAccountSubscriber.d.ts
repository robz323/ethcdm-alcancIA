/// <reference types="node" />
import { DataAndSlot, AccountSubscriber, InsuranceFundStakeAccountEvents, InsuranceFundStakeAccountSubscriber } from './types';
import { Program } from '@coral-xyz/anchor';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
import { Commitment, PublicKey } from '@solana/web3.js';
import { InsuranceFundStake } from '../types';
export declare class WebSocketInsuranceFundStakeAccountSubscriber implements InsuranceFundStakeAccountSubscriber {
    isSubscribed: boolean;
    resubTimeoutMs?: number;
    commitment?: Commitment;
    program: Program;
    eventEmitter: StrictEventEmitter<EventEmitter, InsuranceFundStakeAccountEvents>;
    insuranceFundStakeAccountPublicKey: PublicKey;
    insuranceFundStakeDataAccountSubscriber: AccountSubscriber<InsuranceFundStake>;
    constructor(program: Program, insuranceFundStakeAccountPublicKey: PublicKey, resubTimeoutMs?: number, commitment?: Commitment);
    subscribe(insuranceFundStakeAccount?: InsuranceFundStake): Promise<boolean>;
    fetch(): Promise<void>;
    unsubscribe(): Promise<void>;
    assertIsSubscribed(): void;
    getInsuranceFundStakeAccountAndSlot(): DataAndSlot<InsuranceFundStake>;
    updateData(insuranceFundStake: InsuranceFundStake, slot: number): void;
}
