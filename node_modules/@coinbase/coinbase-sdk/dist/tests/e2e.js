"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const dotenv_1 = __importDefault(require("dotenv"));
const index_1 = require("../index");
const types_1 = require("../coinbase/types");
describe("Coinbase SDK E2E Test", () => {
    beforeAll(() => {
        dotenv_1.default.config();
    });
    beforeEach(() => {
        index_1.Coinbase.configure({
            apiKeyName: process.env.NAME,
            privateKey: process.env.PRIVATE_KEY,
        });
    });
    it("should be able to access environment variables", () => {
        expect(process.env.NAME).toBeDefined();
        expect(process.env.PRIVATE_KEY).toBeDefined();
    });
    it("should have created a dist folder for NPM", () => {
        expect(fs_1.default.existsSync("./dist")).toBe(true);
        expect(fs_1.default.existsSync("./dist/index.js")).toBe(true);
        expect(fs_1.default.existsSync("./dist/client/index.js")).toBe(true);
        expect(fs_1.default.existsSync("./dist/coinbase/coinbase.js")).toBe(true);
    });
    it("should be able to interact with the Coinbase SDK", async () => {
        console.log("Creating new wallet...");
        const wallet = await index_1.Wallet.create();
        expect(wallet.toString()).toBeDefined();
        expect(wallet?.getId()).toBeDefined();
        console.log(`Created new wallet with ID: ${wallet.getId()}, default address: ${wallet.getDefaultAddress()}`);
        console.log("Importing wallet with balance...");
        const seedFile = JSON.parse(process.env.WALLET_DATA || "");
        const walletId = Object.keys(seedFile)[0];
        const seed = seedFile[walletId].seed;
        const importedWallet = await index_1.Wallet.import({ seed, walletId });
        expect(importedWallet).toBeDefined();
        expect(importedWallet.getId()).toBe(walletId);
        console.log(`Imported wallet with ID: ${importedWallet.getId()}, default address: ${importedWallet.getDefaultAddress()}`);
        await importedWallet.saveSeed("test_seed.json");
        try {
            const transaction = await importedWallet.faucet();
            expect(transaction.toString()).toBeDefined();
        }
        catch {
            console.log("Faucet request failed. Skipping...");
        }
        console.log("Listing wallet addresses...");
        const addresses = await importedWallet.listAddresses();
        expect(addresses.length).toBeGreaterThan(0);
        console.log(`Listed addresses: ${addresses.join(", ")}`);
        console.log("Fetching wallet balances...");
        const balances = await importedWallet.listBalances();
        expect(Array.from([...balances.keys()]).length).toBeGreaterThan(0);
        console.log(`Fetched balances: ${balances.toString()}`);
        console.log("Exporting wallet...");
        const exportedWallet = await wallet.export();
        expect(exportedWallet.walletId).toBeDefined();
        expect(exportedWallet.seed).toBeDefined();
        console.log("Saving seed to file...");
        await wallet.saveSeed("test_seed.json");
        expect(fs_1.default.existsSync("test_seed.json")).toBe(true);
        console.log("Saved seed to test_seed.json");
        const unhydratedWallet = await index_1.Wallet.fetch(walletId);
        expect(unhydratedWallet.canSign()).toBe(false);
        await unhydratedWallet.loadSeed("test_seed.json");
        expect(unhydratedWallet.canSign()).toBe(true);
        expect(unhydratedWallet.getId()).toBe(walletId);
        console.log("Transfering 0.000000001 ETH from default address to second address...");
        const transfer = await unhydratedWallet.createTransfer({
            amount: 0.000000001,
            assetId: index_1.Coinbase.assets.Eth,
            destination: wallet,
        });
        await transfer.wait();
        expect(transfer.toString()).toBeDefined();
        expect(await transfer.getStatus()).toBe(types_1.TransferStatus.COMPLETE);
        console.log(`Transferred 1 Gwei from ${unhydratedWallet} to ${wallet}`);
        console.log("Fetching updated balances...");
        const firstBalance = await unhydratedWallet.listBalances();
        const secondBalance = await wallet.listBalances();
        expect(firstBalance.get(index_1.Coinbase.assets.Eth)).not.toEqual("0");
        expect(secondBalance.get(index_1.Coinbase.assets.Eth)).not.toEqual("0");
        console.log(`First address balances: ${firstBalance}`);
        console.log(`Second address balances: ${secondBalance}`);
        console.log("Fetching address transactions...");
        const result = await (await unhydratedWallet.getDefaultAddress()).listTransactions({ limit: 1 });
        expect(result?.data.length).toBeGreaterThan(0);
        console.log(`Fetched transactions: ${result?.data[0].toString()}`);
        console.log("Fetching address historical balances...");
        const balance_result = await (await unhydratedWallet.getDefaultAddress()).listHistoricalBalances(index_1.Coinbase.assets.Eth, { limit: 2 });
        expect(balance_result?.data.length).toBeGreaterThan(0);
        console.log(`First eth historical balance: ${balance_result?.data[0].amount.toString()}`);
        const savedSeed = JSON.parse(fs_1.default.readFileSync("test_seed.json", "utf-8"));
        fs_1.default.unlinkSync("test_seed.json");
        expect(exportedWallet.seed.length).toBe(64);
        expect(savedSeed[exportedWallet.walletId]).toEqual({
            seed: exportedWallet.seed,
            encrypted: false,
            authTag: "",
            iv: "",
        });
    }, 60000);
});
