export interface DeriveKeyResponse {
    key: string;
    certificate_chain: string[];
    asUint8Array: (max_length?: number) => Uint8Array;
}
export type Hex = `0x${string}`;
export type TdxQuoteHashAlgorithms = 'sha256' | 'sha384' | 'sha512' | 'sha3-256' | 'sha3-384' | 'sha3-512' | 'keccak256' | 'keccak384' | 'keccak512' | 'raw';
export interface TdxQuoteResponse {
    quote: Hex;
    event_log: string;
    replayRtmrs: () => string[];
}
export declare function to_hex(data: string | Buffer | Uint8Array): string;
export declare function send_rpc_request<T = any>(endpoint: string, path: string, payload: string): Promise<T>;
export declare class TappdClient {
    private endpoint;
    constructor(endpoint?: string);
    deriveKey(path?: string, subject?: string, alt_names?: string[]): Promise<DeriveKeyResponse>;
    tdxQuote(report_data: string | Buffer | Uint8Array, hash_algorithm?: TdxQuoteHashAlgorithms): Promise<TdxQuoteResponse>;
}
//# sourceMappingURL=index.d.ts.map