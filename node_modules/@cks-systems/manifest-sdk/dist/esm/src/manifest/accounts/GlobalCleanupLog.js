/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { globalAtomsBeet } from './GlobalAtoms';
/**
 * Holds the data for the {@link GlobalCleanupLog} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GlobalCleanupLog {
    cleaner;
    maker;
    amountDesired;
    amountDeposited;
    constructor(cleaner, maker, amountDesired, amountDeposited) {
        this.cleaner = cleaner;
        this.maker = maker;
        this.amountDesired = amountDesired;
        this.amountDeposited = amountDeposited;
    }
    /**
     * Creates a {@link GlobalCleanupLog} instance from the provided args.
     */
    static fromArgs(args) {
        return new GlobalCleanupLog(args.cleaner, args.maker, args.amountDesired, args.amountDeposited);
    }
    /**
     * Deserializes the {@link GlobalCleanupLog} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return GlobalCleanupLog.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link GlobalCleanupLog} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find GlobalCleanupLog account at ${address}`);
        }
        return GlobalCleanupLog.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms')) {
        return beetSolana.GpaBuilder.fromStruct(programId, globalCleanupLogBeet);
    }
    /**
     * Deserializes the {@link GlobalCleanupLog} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return globalCleanupLogBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link GlobalCleanupLog} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return globalCleanupLogBeet.serialize(this);
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link GlobalCleanupLog}
     */
    static get byteSize() {
        return globalCleanupLogBeet.byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link GlobalCleanupLog} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(GlobalCleanupLog.byteSize, commitment);
    }
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link GlobalCleanupLog} data.
     */
    static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === GlobalCleanupLog.byteSize;
    }
    /**
     * Returns a readable version of {@link GlobalCleanupLog} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            cleaner: this.cleaner.toBase58(),
            maker: this.maker.toBase58(),
            amountDesired: this.amountDesired,
            amountDeposited: this.amountDeposited,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const globalCleanupLogBeet = new beet.BeetStruct([
    ['cleaner', beetSolana.publicKey],
    ['maker', beetSolana.publicKey],
    ['amountDesired', globalAtomsBeet],
    ['amountDeposited', globalAtomsBeet],
], GlobalCleanupLog.fromArgs, 'GlobalCleanupLog');
