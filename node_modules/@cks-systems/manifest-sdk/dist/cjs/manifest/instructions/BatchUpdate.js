"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchUpdateInstructionDiscriminator = exports.BatchUpdateStruct = void 0;
exports.createBatchUpdateInstruction = createBatchUpdateInstruction;
const beet = __importStar(require("@metaplex-foundation/beet"));
const web3 = __importStar(require("@solana/web3.js"));
const BatchUpdateParams_1 = require("../types/BatchUpdateParams");
/**
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
exports.BatchUpdateStruct = new beet.FixableBeetArgsStruct([
    ['instructionDiscriminator', beet.u8],
    ['params', BatchUpdateParams_1.batchUpdateParamsBeet],
], 'BatchUpdateInstructionArgs');
exports.batchUpdateInstructionDiscriminator = 6;
/**
 * Creates a _BatchUpdate_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
function createBatchUpdateInstruction(accounts, args, programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms')) {
    const [data] = exports.BatchUpdateStruct.serialize({
        instructionDiscriminator: exports.batchUpdateInstructionDiscriminator,
        ...args,
    });
    const keys = [
        {
            pubkey: accounts.payer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.market,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
    ];
    if (accounts.baseMint != null) {
        keys.push({
            pubkey: accounts.baseMint,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.baseGlobal != null) {
        if (accounts.baseMint == null) {
            throw new Error("When providing 'baseGlobal' then 'accounts.baseMint' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.baseGlobal,
            isWritable: true,
            isSigner: false,
        });
    }
    if (accounts.baseGlobalVault != null) {
        if (accounts.baseMint == null || accounts.baseGlobal == null) {
            throw new Error("When providing 'baseGlobalVault' then 'accounts.baseMint', 'accounts.baseGlobal' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.baseGlobalVault,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.baseMarketVault != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null) {
            throw new Error("When providing 'baseMarketVault' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.baseMarketVault,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.baseTokenProgram != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null ||
            accounts.baseMarketVault == null) {
            throw new Error("When providing 'baseTokenProgram' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.baseTokenProgram,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.quoteMint != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null ||
            accounts.baseMarketVault == null ||
            accounts.baseTokenProgram == null) {
            throw new Error("When providing 'quoteMint' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.quoteMint,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.quoteGlobal != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null ||
            accounts.baseMarketVault == null ||
            accounts.baseTokenProgram == null ||
            accounts.quoteMint == null) {
            throw new Error("When providing 'quoteGlobal' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.quoteGlobal,
            isWritable: true,
            isSigner: false,
        });
    }
    if (accounts.quoteGlobalVault != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null ||
            accounts.baseMarketVault == null ||
            accounts.baseTokenProgram == null ||
            accounts.quoteMint == null ||
            accounts.quoteGlobal == null) {
            throw new Error("When providing 'quoteGlobalVault' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint', 'accounts.quoteGlobal' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.quoteGlobalVault,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.quoteMarketVault != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null ||
            accounts.baseMarketVault == null ||
            accounts.baseTokenProgram == null ||
            accounts.quoteMint == null ||
            accounts.quoteGlobal == null ||
            accounts.quoteGlobalVault == null) {
            throw new Error("When providing 'quoteMarketVault' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint', 'accounts.quoteGlobal', 'accounts.quoteGlobalVault' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.quoteMarketVault,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.quoteTokenProgram != null) {
        if (accounts.baseMint == null ||
            accounts.baseGlobal == null ||
            accounts.baseGlobalVault == null ||
            accounts.baseMarketVault == null ||
            accounts.baseTokenProgram == null ||
            accounts.quoteMint == null ||
            accounts.quoteGlobal == null ||
            accounts.quoteGlobalVault == null ||
            accounts.quoteMarketVault == null) {
            throw new Error("When providing 'quoteTokenProgram' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint', 'accounts.quoteGlobal', 'accounts.quoteGlobalVault', 'accounts.quoteMarketVault' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.quoteTokenProgram,
            isWritable: false,
            isSigner: false,
        });
    }
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
