/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { GlobalCleanParams } from '../types/GlobalCleanParams';
/**
 * @category Instructions
 * @category GlobalClean
 * @category generated
 */
export type GlobalCleanInstructionArgs = {
    params: GlobalCleanParams;
};
/**
 * @category Instructions
 * @category GlobalClean
 * @category generated
 */
export declare const GlobalCleanStruct: beet.BeetArgsStruct<GlobalCleanInstructionArgs & {
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _GlobalClean_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] market
 * @property [_writable_] global
 * @category Instructions
 * @category GlobalClean
 * @category generated
 */
export type GlobalCleanInstructionAccounts = {
    payer: web3.PublicKey;
    market: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    global: web3.PublicKey;
};
export declare const globalCleanInstructionDiscriminator = 12;
/**
 * Creates a _GlobalClean_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category GlobalClean
 * @category generated
 */
export declare function createGlobalCleanInstruction(accounts: GlobalCleanInstructionAccounts, args: GlobalCleanInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
