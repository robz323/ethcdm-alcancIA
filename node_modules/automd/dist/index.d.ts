interface Block {
    /**
     * The name of the generator to use for updates.
     */
    generator: string;
    /**
     * The arguments that are passed to the generator.
     */
    rawArgs: string;
    /**
     * The current content of the block.
     */
    contents: string;
    /**
     * The location of the content in the original document.
     */
    loc: {
        start: number;
        end: number;
    };
    /**
     * The location including the automd comments.
     */
    _loc: {
        start: number;
        end: number;
    };
}

interface TransformResult {
    /**
     * Wether if the document has been modified at all.
     */
    hasChanged: boolean;
    /**
     * Whether if there were any problems found in the document.
     */
    hasIssues: boolean;
    /**
     * The text of the document after it was transformed.
     */
    contents: string;
    /**
     * A list of specific parts that have been transformed in the document.
     */
    updates: {
        /**
         * The specific part of the document that has been transformed.
         */
        block: Block;
        /**
         * What the transform has done to this part of the document.
         */
        result: GenerateResult;
    }[];
    /**
     * How long the editing process took, measured in milliseconds.
     */
    time: number;
}
/**
 * Edits a markdown document based on certain rules and configurations.
 *
 * @param contents - The text of the markdown document you want to edit.
 * @param _config - Optional. The settings that affect how the document will be edited. See {@link Config}.
 * @param url - Optional. The URL associated with the document, if any.
 * @returns - The result of the transformation, including any changes made and how long it took. See {@link TransformResult}.
 */
declare function transform(contents: string, _config?: Config, url?: string): Promise<TransformResult>;

interface GenerateContext {
    args: Record<string, any>;
    config: ResolvedConfig;
    block: Block;
    url?: string;
    transform: (contents: string) => Promise<TransformResult>;
}
/**
 * The result of generating a component.
 */
interface GenerateResult {
    /**
     * The generated component
     */
    contents: string;
    /**
     * A list of issues that occurred during generation.
     */
    issues?: string[];
    /**
     * Whether to unwrap the component.
     */
    unwrap?: boolean;
}
interface Generator {
    name: string;
    generate: (ctx: GenerateContext) => GenerateResult | Promise<GenerateResult>;
}
/**
 * @internal
 */
declare function defineGenerator(generator: Generator): Generator;

interface Config {
    /**
     * The working directory
     *
     * @default "." (current directory)
     */
    dir?: string;
    /**
     * Name or path to the input file or files with glob patterns.
     *
     * @default "README.md"
     */
    input?: string | string[];
    /**
     * Name or path of the output files. If not provided, the input file will be overwritten.
     *
     * @default input
     */
    output?: string;
    /**
     * Ignore patterns if input is a glob pattern
     *
     * @default ["node_modules", "dist", "/.*"]
     */
    ignore?: string[];
    /**
     * Watch for changes in input files and regenerate output
     */
    watch?: boolean;
    /**
     * Watch callback
     */
    onWatch?: (event: {
        results: AutomdResult[];
        time: number;
    }) => void;
    /** Custom generators */
    generators?: Record<string, Generator>;
}
declare const RESOLVED_CONFIG_SYMBOL: unique symbol;
type ResolvedConfig = {
    [P in keyof Config]-?: Config[P];
} & {
    [RESOLVED_CONFIG_SYMBOL]: true;
    input: string[];
    output?: string;
};
declare function resolveConfig(config?: Config | ResolvedConfig): ResolvedConfig;
declare function loadConfig(dir: string | undefined, overrides: Config): Promise<ResolvedConfig>;

interface AutomdResult extends TransformResult {
    input: string;
    output: string;
}
/**
 * Describes what you get back from the `automd` function.
 */
interface AutomdReturn {
    /**
     * A list of the changes made to the file(s) by `automd`.
     */
    results: AutomdResult[];
    /**
     * How long it took to make the changes, in milliseconds.
     */
    time: number;
    /**
     * The resolved configuration that were used for these changes.
     */
    config: ResolvedConfig;
    /**
     * If you started watching the file(s) for changes, this function can be called to stop watching.
     */
    unwatch?: () => void | Promise<void>;
}
/**
 * Scans a markdown file looking for special comments.
 * These comments tell the function to add or update certain parts of the file automatically.
 * You can change how this works by giving it different settings in the `_config` option.
 *
 * @param _config - The settings to use for the update process. See {@link Config}.
 * @returns - An object containing the results of the update, including any changes made and any problems found. See {@link AutomdReturn}.
 *
 * @see https://automd.unjs.io/guide
 */
declare function automd(_config?: Config): Promise<AutomdReturn>;

export { type AutomdResult, type AutomdReturn, type Config, type GenerateContext, type GenerateResult, type Generator, type ResolvedConfig, type TransformResult, automd, defineGenerator, loadConfig, resolveConfig, transform };
