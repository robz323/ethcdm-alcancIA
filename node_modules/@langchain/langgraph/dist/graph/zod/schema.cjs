"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStateTypeSchema = exports.getConfigTypeSchema = exports.getUpdateTypeSchema = void 0;
const zod_1 = require("zod");
const zod_to_json_schema_1 = require("zod-to-json-schema");
const state_js_1 = require("./state.cjs");
const UPDATE_TYPE_CACHE = new WeakMap();
const CONFIG_TYPE_CACHE = new WeakMap();
const DESCRIPTION_PREFIX = "lg:";
function applyPlugin(schema, actions) {
    return zod_1.z.object({
        ...Object.fromEntries(Object.entries(schema.shape).map(([key, input]) => {
            const meta = (0, state_js_1.getMeta)(input);
            let output = actions.reducer ? meta?.reducer?.schema ?? input : input;
            if (actions.jsonSchemaExtra) {
                const strMeta = JSON.stringify({
                    ...meta?.jsonSchemaExtra,
                    description: output.description ?? input.description,
                });
                if (strMeta !== "{}") {
                    output = output.describe(`${DESCRIPTION_PREFIX}${strMeta}`);
                }
            }
            return [key, output];
        })),
    });
}
function applyExtraFromDescription(schema) {
    if (Array.isArray(schema)) {
        return schema.map(applyExtraFromDescription);
    }
    if (typeof schema === "object" && schema != null) {
        const output = Object.fromEntries(Object.entries(schema).map(([key, value]) => [
            key,
            applyExtraFromDescription(value),
        ]));
        if ("description" in output &&
            typeof output.description === "string" &&
            output.description.startsWith(DESCRIPTION_PREFIX)) {
            const strMeta = output.description.slice(DESCRIPTION_PREFIX.length);
            delete output.description;
            Object.assign(output, JSON.parse(strMeta));
        }
        return output;
    }
    return schema;
}
function getUpdateTypeSchema(shape) {
    const updateShape = (() => {
        if (UPDATE_TYPE_CACHE.has(shape))
            UPDATE_TYPE_CACHE.get(shape);
        const newShape = applyPlugin(shape, {
            reducer: true,
            jsonSchemaExtra: true,
        }).partial();
        UPDATE_TYPE_CACHE.set(shape, newShape);
        return newShape;
    })();
    const schema = (0, zod_to_json_schema_1.zodToJsonSchema)(updateShape);
    return applyExtraFromDescription(schema);
}
exports.getUpdateTypeSchema = getUpdateTypeSchema;
function getConfigTypeSchema(shape) {
    const configShape = (() => {
        if (CONFIG_TYPE_CACHE.has(shape))
            CONFIG_TYPE_CACHE.get(shape);
        const newShape = applyPlugin(shape, { jsonSchemaExtra: true });
        CONFIG_TYPE_CACHE.set(shape, newShape);
        return newShape;
    })();
    const schema = (0, zod_to_json_schema_1.zodToJsonSchema)(configShape);
    return applyExtraFromDescription(schema);
}
exports.getConfigTypeSchema = getConfigTypeSchema;
function getStateTypeSchema(schema) {
    return (0, zod_to_json_schema_1.zodToJsonSchema)(schema);
}
exports.getStateTypeSchema = getStateTypeSchema;
//# sourceMappingURL=schema.js.map