"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const anon_control_client_1 = require("../../anon-control-client");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // connect to AnonControl
            const anonControlClient = new anon_control_client_1.AnonControlClient();
            // authenticate
            yield anonControlClient.authenticate();
            // get circuit status before
            const circuits = yield anonControlClient.circuitStatus();
            console.log('Get info about relay from circuit:', circuits[0]);
            const relayInfo0 = yield anonControlClient.getRelayInfo(circuits[0].relays[0].fingerprint);
            console.log('Relay [0] info:', relayInfo0);
            // close connection
            anonControlClient.end();
        }
        catch (error) {
            console.error('Error:', error);
        }
    });
}
main();
