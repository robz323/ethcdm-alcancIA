"use strict";
/**
 * THIS FEATURE IS EXPERIMENTAL AND IN BETA, USE AT YOUR OWN RISK
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnonProxy = void 0;
const child_process_1 = require("child_process");
const config_1 = require("./config/config");
const utils_1 = require("./utils");
/**
 * Allows to run Anon Proxy with different configuration options
 */
class AnonProxy {
    constructor(options) {
        this.options = options;
    }
    ;
    /**
     * Starts Anon Proxy
     */
    start(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.process !== undefined) {
                throw new Error('Anon process already started');
            }
            const configPath = yield (0, config_1.createAnonProxyConfigFile)(this.options);
            this.process = this.runBinary('anon-proxy', args, configPath, () => this.onStop());
        });
    }
    /**
     * Stops Anon Proxy
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.process !== undefined) {
                this.process.kill('SIGTERM');
            }
        });
    }
    /**
     * Allows to check if Anon Proxy is running
     * @returns true if Anon Proxy is running
     */
    isRunning() {
        return this.process !== undefined;
    }
    onStop() {
        this.process = undefined;
    }
    runBinary(name, args, configPath, onStop) {
        const binaryPath = (0, utils_1.getBinaryPath)(name);
        let proxyArgs = [];
        if (configPath !== undefined) {
            proxyArgs = ['-f', configPath];
        }
        const child = (0, child_process_1.spawn)(binaryPath, proxyArgs.concat(args), { detached: false });
        child.stdout.on('data', (data) => {
            console.log(`${data}`);
        });
        child.stderr.on('data', (data) => {
            console.log(`${data}`);
        });
        child.on('close', (code) => {
            if (onStop !== undefined) {
                onStop();
            }
        });
        child.on('exit', (code) => {
            if (onStop !== undefined) {
                onStop();
            }
        });
        return child;
    }
}
exports.AnonProxy = AnonProxy;
