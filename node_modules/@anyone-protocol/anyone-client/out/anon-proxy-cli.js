#!/usr/bin/env node
"use strict";
/**
 * THIS FEATURE IS EXPERIMENTAL AND IN BETA, USE AT YOUR OWN RISK
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const anon_proxy_1 = require("./anon-proxy");
function parseArgs() {
    const args = process.argv.slice(2);
    let socksPort;
    const parsedArgs = [];
    for (let i = 0; i < args.length; i++) {
        if (args[i] === '--socks-port' && args[i + 1]) {
            socksPort = parseInt(args[i + 1], 10);
            if (isNaN(socksPort)) {
                throw new Error('Invalid SOCKS port value');
            }
            i++;
        }
        else {
            parsedArgs.push(args[i]);
        }
    }
    return { socksPort, args: parsedArgs };
}
const { socksPort, args } = parseArgs();
const anonProxy = new anon_proxy_1.AnonProxy({ socksPort });
(() => __awaiter(void 0, void 0, void 0, function* () {
    yield anonProxy.start(args);
}))();
function gracefulShutdown() {
    if (anonProxy.isRunning()) {
        anonProxy.stop();
    }
    process.exit(0);
}
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
