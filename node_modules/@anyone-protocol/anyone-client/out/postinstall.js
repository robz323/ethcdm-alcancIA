#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
const unzipper_1 = __importDefault(require("unzipper"));
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
const owner = 'anyone-protocol';
const repo = 'ator-protocol';
const version = 'v0.4.9.6';
const releaseUrl = `https://api.github.com/repos/${owner}/${repo}/releases/tags/${version}`;
const platformMap = {
    'linux': 'linux',
    'darwin': 'macos',
    'win32': 'windows',
};
const archMap = {
    'arm64': 'arm64',
    'x64': 'amd64',
};
const downloadFile = (url, outputPath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield (0, axios_1.default)({
            url,
            method: 'GET',
            responseType: 'stream',
        });
        const writer = fs_1.default.createWriteStream(outputPath);
        response.data.pipe(writer);
        return new Promise((resolve, reject) => {
            writer.on('finish', resolve);
            writer.on('error', reject);
        });
    }
    catch (error) {
        console.error('Error downloading the file', error);
        throw error;
    }
});
const unzip = (zipFilePath, outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        fs_1.default.createReadStream(zipFilePath)
            .pipe(unzipper_1.default.Extract({ path: outputDir }))
            .on('close', () => {
            resolve();
        })
            .on('error', (err) => {
            reject(err);
        });
    });
});
const listFiles = (dir) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        fs_1.default.readdir(dir, (err, files) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(files);
            }
        });
    });
});
const makeExecutable = (file) => {
    return new Promise((resolve, reject) => {
        fs_1.default.chmod(file, 0o755, (err) => {
            if (err) {
                reject(err);
            }
            else {
                resolve();
            }
        });
    });
};
(() => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield axios_1.default.get(releaseUrl);
    const osPlatform = os_1.default.platform();
    if (!platformMap.hasOwnProperty(osPlatform)) {
        console.error(`Platform ${osPlatform} is not supported`);
        process_1.default.exit(1);
    }
    const platform = platformMap[osPlatform];
    const osArch = os_1.default.arch();
    if (!archMap.hasOwnProperty(osArch)) {
        console.error(`Architecture ${osArch} is not supported`);
        process_1.default.exit(1);
    }
    const arch = archMap[osArch];
    const assetName = `anon-live-${platform}-${arch}.zip`;
    const assetDir = `anon-live-${platform}-${arch}`;
    let downloadUrl = '';
    for (const asset of resp.data.assets) {
        if (asset.name === assetName) {
            downloadUrl = asset.browser_download_url;
            console.log(`Download URL: ${asset.browser_download_url}`);
            break;
        }
    }
    if (downloadUrl === '') {
        console.error(`Platform ${platform} (${arch}) is not sipported`);
        process_1.default.exit(1);
    }
    const tmpDir = os_1.default.tmpdir();
    const downloadDest = path_1.default.join(tmpDir, assetName);
    const extractDest = path_1.default.join(tmpDir, assetDir);
    console.log(`Platform: ${platform}`);
    console.log(`Arch: ${arch}`);
    console.log(`Download dest: ${downloadDest}`);
    console.log('Downloading anon...');
    yield downloadFile(downloadUrl, downloadDest);
    yield unzip(downloadDest, extractDest);
    const files = yield listFiles(extractDest);
    console.log('Downloaded files:');
    console.log(files);
    const binaryDir = (0, utils_1.getBinaryDir)();
    yield fs_1.default.promises.mkdir(binaryDir, { recursive: true });
    for (const file of files) {
        yield makeExecutable(path_1.default.join(extractDest, file));
        fs_1.default.promises.copyFile(path_1.default.join(extractDest, file), path_1.default.join(binaryDir, file));
    }
    console.log('Download complete');
}))();
