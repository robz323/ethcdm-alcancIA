"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnonSocksClient = void 0;
const axios_1 = __importDefault(require("axios"));
const socks_proxy_agent_1 = require("socks-proxy-agent");
const anon_1 = require("./anon");
class AnonSocksClient {
    constructor(anonOrPort, host = '127.0.0.1') {
        if (anonOrPort instanceof anon_1.Anon) {
            this.anon = anonOrPort;
            this.socksPort = this.anon.getSOCKSPort();
            console.log('host:', host);
        }
        else {
            this.socksPort = anonOrPort;
        }
        if (this.socksPort === 0) {
            throw new Error('SOCKS port has value 0, and is therefore disabled.\n' +
                'SOCKS proxy must be enabled with a valid port number (1-65535) to use the SOCKS client');
        }
        this.host = host;
        this.agent = this.createAgent();
        this.axios = axios_1.default.create({
            httpAgent: this.agent,
            httpsAgent: this.agent
        });
    }
    createAgent() {
        return new socks_proxy_agent_1.SocksProxyAgent(`socks://${this.host}:${this.socksPort}`);
    }
    /**
     * Sends a GET request to the specified URL through the Anon network.
     * @param {string} url - The URL to send the GET request to.
     * @param {AxiosRequestConfig} [config] - Optional Axios request configuration.
     * @returns {Promise<AxiosResponse<T>>} A promise that resolves with the response data.
     */
    get(url, config) {
        return this.axios.get(url, config);
    }
    /**
     * Sends a POST request to the specified URL through the Anon network.
     * @param {string} url - The URL to send the POST request to.
     * @param {any} [data] - The data to be sent as the request body.
     * @param {AxiosRequestConfig} [config] - Optional Axios request configuration.
     * @returns {Promise<AxiosResponse<T>>} A promise that resolves with the response data.
     */
    post(url, data, config) {
        return this.axios.post(url, data, config);
    }
    /**
     * Sends a PUT request to the specified URL through the Anon network.
     * @param {string} url - The URL to send the PUT request to.
     * @param {any} [data] - The data to be sent as the request body.
     * @param {AxiosRequestConfig} [config] - Optional Axios request configuration.
     * @returns {Promise<AxiosResponse<T>>} A promise that resolves with the response data.
     */
    put(url, data, config) {
        return this.axios.put(url, data, config);
    }
    /**
     * Sends a DELETE request to the specified URL through the Anon network.
     * @param {string} url - The URL to send the DELETE request to.
     * @param {AxiosRequestConfig} [config] - Optional Axios request configuration.
     * @returns {Promise<AxiosResponse<T>>} A promise that resolves with the response data.
     */
    delete(url, config) {
        return this.axios.delete(url, config);
    }
    /**
     * Sends a PATCH request to the specified URL through the Anon network.
     * @param {string} url - The URL to send the PATCH request to.
     * @param {any} [data] - The data to be sent as the request body.
     * @param {AxiosRequestConfig} [config] - Optional Axios request configuration.
     * @returns {Promise<AxiosResponse<T>>} A promise that resolves with the response data.
     */
    patch(url, data, config) {
        return this.axios.patch(url, data, config);
    }
}
exports.AnonSocksClient = AnonSocksClient;
