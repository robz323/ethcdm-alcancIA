import type { MaybePromise } from 'viem';
type Callback = ((...args: any[]) => any) | undefined;
type Callbacks = Record<string, Callback>;
export declare const listenersCache: Map<string, {
    id: number;
    fns: Callbacks;
}[]>;
export declare const cleanupCache: Map<string, () => void>;
type EmitFunction<callbacks extends Callbacks> = (emit: callbacks) => MaybePromise<void | (() => void)>;
export declare function observe<callbacks extends Callbacks>(observerId: string, callbacks: callbacks, fn: EmitFunction<callbacks>): () => void;
export {};
