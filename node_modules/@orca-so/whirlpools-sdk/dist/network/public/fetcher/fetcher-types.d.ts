import type { Address } from "@coral-xyz/anchor";
import type { BasicSupportedTypes, ParsableEntity, SimpleAccountFetchOptions, MintWithTokenProgram, AccountWithTokenProgram as TokenAccountWithTokenProgram } from "@orca-so/common-sdk";
import type { FeeTierData, LockConfigData, PositionBundleData, PositionData, TickArrayData, TokenBadgeData, WhirlpoolData, WhirlpoolsConfigData, WhirlpoolsConfigExtensionData, AdaptiveFeeTierData, OracleData } from "../../../types/public";
export type WhirlpoolSupportedTypes = WhirlpoolsConfigData | WhirlpoolData | PositionData | TickArrayData | FeeTierData | PositionBundleData | WhirlpoolsConfigExtensionData | TokenBadgeData | LockConfigData | AdaptiveFeeTierData | OracleData | BasicSupportedTypes;
export declare const DEFAULT_WHIRLPOOL_RETENTION_POLICY: ReadonlyMap<ParsableEntity<WhirlpoolSupportedTypes>, number>;
export type WhirlpoolAccountFetchOptions = SimpleAccountFetchOptions;
export declare const IGNORE_CACHE: WhirlpoolAccountFetchOptions;
export declare const PREFER_CACHE: WhirlpoolAccountFetchOptions;
export interface WhirlpoolAccountFetcherInterface {
    getAccountRentExempt(refresh?: boolean): Promise<number>;
    getEpoch(refresh?: boolean): Promise<number>;
    getPool(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<WhirlpoolData | null>;
    getPools(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, WhirlpoolData | null>>;
    getPosition(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<PositionData | null>;
    getPositions(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, PositionData | null>>;
    getTickArray(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<TickArrayData | null>;
    getTickArrays(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyArray<TickArrayData | null>>;
    getFeeTier(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<FeeTierData | null>;
    getFeeTiers(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, FeeTierData | null>>;
    getTokenInfo(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<TokenAccountWithTokenProgram | null>;
    getTokenInfos(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, TokenAccountWithTokenProgram | null>>;
    getMintInfo(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<MintWithTokenProgram | null>;
    getMintInfos(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, MintWithTokenProgram | null>>;
    getConfig(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<WhirlpoolsConfigData | null>;
    getConfigs(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, WhirlpoolsConfigData | null>>;
    getPositionBundle(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<PositionBundleData | null>;
    getPositionBundles(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, PositionBundleData | null>>;
    getConfigExtension(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<WhirlpoolsConfigExtensionData | null>;
    getConfigExtensions(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, WhirlpoolsConfigExtensionData | null>>;
    getTokenBadge(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<TokenBadgeData | null>;
    getTokenBadges(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, TokenBadgeData | null>>;
    getLockConfig(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<LockConfigData | null>;
    getLockConfigs(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, LockConfigData | null>>;
    getAdaptiveFeeTier(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<AdaptiveFeeTierData | null>;
    getAdaptiveFeeTiers(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, AdaptiveFeeTierData | null>>;
    getOracle(address: Address, opts?: WhirlpoolAccountFetchOptions): Promise<OracleData | null>;
    getOracles(addresses: Address[], opts?: WhirlpoolAccountFetchOptions): Promise<ReadonlyMap<string, OracleData | null>>;
    populateCache<T extends WhirlpoolSupportedTypes>(accounts: ReadonlyMap<string, T>, parser: ParsableEntity<T>, now: number): void;
}
